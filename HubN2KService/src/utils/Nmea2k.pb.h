// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Nmea2k.proto

#ifndef PROTOBUF_INCLUDED_Nmea2k_2eproto
#define PROTOBUF_INCLUDED_Nmea2k_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_Nmea2k_2eproto 

namespace protobuf_Nmea2k_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[180];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_Nmea2k_2eproto
namespace Nmea2k {
class AC;
class ACDefaultTypeInternal;
extern ACDefaultTypeInternal _AC_default_instance_;
class ACInstanceMap;
class ACInstanceMapDefaultTypeInternal;
extern ACInstanceMapDefaultTypeInternal _ACInstanceMap_default_instance_;
class ACInstanceMap_ValuesEntry_DoNotUse;
class ACInstanceMap_ValuesEntry_DoNotUseDefaultTypeInternal;
extern ACInstanceMap_ValuesEntry_DoNotUseDefaultTypeInternal _ACInstanceMap_ValuesEntry_DoNotUse_default_instance_;
class ACLine;
class ACLineDefaultTypeInternal;
extern ACLineDefaultTypeInternal _ACLine_default_instance_;
class ACMainContactor;
class ACMainContactorDefaultTypeInternal;
extern ACMainContactorDefaultTypeInternal _ACMainContactor_default_instance_;
class ACMainContactorDevice;
class ACMainContactorDeviceDefaultTypeInternal;
extern ACMainContactorDeviceDefaultTypeInternal _ACMainContactorDevice_default_instance_;
class ACMainContactorsInstanceMap;
class ACMainContactorsInstanceMapDefaultTypeInternal;
extern ACMainContactorsInstanceMapDefaultTypeInternal _ACMainContactorsInstanceMap_default_instance_;
class ACMainContactorsInstanceMap_ValuesEntry_DoNotUse;
class ACMainContactorsInstanceMap_ValuesEntry_DoNotUseDefaultTypeInternal;
extern ACMainContactorsInstanceMap_ValuesEntry_DoNotUseDefaultTypeInternal _ACMainContactorsInstanceMap_ValuesEntry_DoNotUse_default_instance_;
class ACMainDevice;
class ACMainDeviceDefaultTypeInternal;
extern ACMainDeviceDefaultTypeInternal _ACMainDevice_default_instance_;
class ACMainLoadGroupDevice;
class ACMainLoadGroupDeviceDefaultTypeInternal;
extern ACMainLoadGroupDeviceDefaultTypeInternal _ACMainLoadGroupDevice_default_instance_;
class AC_AClinesEntry_DoNotUse;
class AC_AClinesEntry_DoNotUseDefaultTypeInternal;
extern AC_AClinesEntry_DoNotUseDefaultTypeInternal _AC_AClinesEntry_DoNotUse_default_instance_;
class Alarm;
class AlarmDefaultTypeInternal;
extern AlarmDefaultTypeInternal _Alarm_default_instance_;
class AlarmEvent;
class AlarmEventDefaultTypeInternal;
extern AlarmEventDefaultTypeInternal _AlarmEvent_default_instance_;
class AlarmGlobalStatus;
class AlarmGlobalStatusDefaultTypeInternal;
extern AlarmGlobalStatusDefaultTypeInternal _AlarmGlobalStatus_default_instance_;
class AlarmLimit;
class AlarmLimitDefaultTypeInternal;
extern AlarmLimitDefaultTypeInternal _AlarmLimit_default_instance_;
class AlarmRequest;
class AlarmRequestDefaultTypeInternal;
extern AlarmRequestDefaultTypeInternal _AlarmRequest_default_instance_;
class AlarmString;
class AlarmStringDefaultTypeInternal;
extern AlarmStringDefaultTypeInternal _AlarmString_default_instance_;
class AlarmsList;
class AlarmsListDefaultTypeInternal;
extern AlarmsListDefaultTypeInternal _AlarmsList_default_instance_;
class AudioStereo;
class AudioStereoDefaultTypeInternal;
extern AudioStereoDefaultTypeInternal _AudioStereo_default_instance_;
class AudioStereoDevice;
class AudioStereoDeviceDefaultTypeInternal;
extern AudioStereoDeviceDefaultTypeInternal _AudioStereoDevice_default_instance_;
class AudioStereosInstanceMap;
class AudioStereosInstanceMapDefaultTypeInternal;
extern AudioStereosInstanceMapDefaultTypeInternal _AudioStereosInstanceMap_default_instance_;
class AudioStereosInstanceMap_ValuesEntry_DoNotUse;
class AudioStereosInstanceMap_ValuesEntry_DoNotUseDefaultTypeInternal;
extern AudioStereosInstanceMap_ValuesEntry_DoNotUseDefaultTypeInternal _AudioStereosInstanceMap_ValuesEntry_DoNotUse_default_instance_;
class Authentication;
class AuthenticationDefaultTypeInternal;
extern AuthenticationDefaultTypeInternal _Authentication_default_instance_;
class AwningsInstanceMap;
class AwningsInstanceMapDefaultTypeInternal;
extern AwningsInstanceMapDefaultTypeInternal _AwningsInstanceMap_default_instance_;
class AwningsInstanceMap_ValuesEntry_DoNotUse;
class AwningsInstanceMap_ValuesEntry_DoNotUseDefaultTypeInternal;
extern AwningsInstanceMap_ValuesEntry_DoNotUseDefaultTypeInternal _AwningsInstanceMap_ValuesEntry_DoNotUse_default_instance_;
class BinaryLogicState;
class BinaryLogicStateDefaultTypeInternal;
extern BinaryLogicStateDefaultTypeInternal _BinaryLogicState_default_instance_;
class BinaryLogicStateInstanceMap;
class BinaryLogicStateInstanceMapDefaultTypeInternal;
extern BinaryLogicStateInstanceMapDefaultTypeInternal _BinaryLogicStateInstanceMap_default_instance_;
class BinaryLogicStateInstanceMap_ValuesEntry_DoNotUse;
class BinaryLogicStateInstanceMap_ValuesEntry_DoNotUseDefaultTypeInternal;
extern BinaryLogicStateInstanceMap_ValuesEntry_DoNotUseDefaultTypeInternal _BinaryLogicStateInstanceMap_ValuesEntry_DoNotUse_default_instance_;
class BinaryLogicStateMsg;
class BinaryLogicStateMsgDefaultTypeInternal;
extern BinaryLogicStateMsgDefaultTypeInternal _BinaryLogicStateMsg_default_instance_;
class BinarySignalBitAddress;
class BinarySignalBitAddressDefaultTypeInternal;
extern BinarySignalBitAddressDefaultTypeInternal _BinarySignalBitAddress_default_instance_;
class CZoneRawConfig;
class CZoneRawConfigDefaultTypeInternal;
extern CZoneRawConfigDefaultTypeInternal _CZoneRawConfig_default_instance_;
class CZoneRawEvent;
class CZoneRawEventDefaultTypeInternal;
extern CZoneRawEventDefaultTypeInternal _CZoneRawEvent_default_instance_;
class Categories;
class CategoriesDefaultTypeInternal;
extern CategoriesDefaultTypeInternal _Categories_default_instance_;
class CategoryItem;
class CategoryItemDefaultTypeInternal;
extern CategoryItemDefaultTypeInternal _CategoryItem_default_instance_;
class CategoryRequest;
class CategoryRequestDefaultTypeInternal;
extern CategoryRequestDefaultTypeInternal _CategoryRequest_default_instance_;
class Circuit;
class CircuitDefaultTypeInternal;
extern CircuitDefaultTypeInternal _Circuit_default_instance_;
class CircuitButtonInfo;
class CircuitButtonInfoDefaultTypeInternal;
extern CircuitButtonInfoDefaultTypeInternal _CircuitButtonInfo_default_instance_;
class CircuitDevice;
class CircuitDeviceDefaultTypeInternal;
extern CircuitDeviceDefaultTypeInternal _CircuitDevice_default_instance_;
class CircuitIdMap;
class CircuitIdMapDefaultTypeInternal;
extern CircuitIdMapDefaultTypeInternal _CircuitIdMap_default_instance_;
class CircuitIdMap_ValuesEntry_DoNotUse;
class CircuitIdMap_ValuesEntry_DoNotUseDefaultTypeInternal;
extern CircuitIdMap_ValuesEntry_DoNotUseDefaultTypeInternal _CircuitIdMap_ValuesEntry_DoNotUse_default_instance_;
class CircuitLoad;
class CircuitLoadDefaultTypeInternal;
extern CircuitLoadDefaultTypeInternal _CircuitLoad_default_instance_;
class ConfigRequest;
class ConfigRequestDefaultTypeInternal;
extern ConfigRequestDefaultTypeInternal _ConfigRequest_default_instance_;
class ConfigResult;
class ConfigResultDefaultTypeInternal;
extern ConfigResultDefaultTypeInternal _ConfigResult_default_instance_;
class ConnectRequest;
class ConnectRequestDefaultTypeInternal;
extern ConnectRequestDefaultTypeInternal _ConnectRequest_default_instance_;
class ControlRequest;
class ControlRequestDefaultTypeInternal;
extern ControlRequestDefaultTypeInternal _ControlRequest_default_instance_;
class ControlTypeValueRequest;
class ControlTypeValueRequestDefaultTypeInternal;
extern ControlTypeValueRequestDefaultTypeInternal _ControlTypeValueRequest_default_instance_;
class DC;
class DCDefaultTypeInternal;
extern DCDefaultTypeInternal _DC_default_instance_;
class DCInstanceMap;
class DCInstanceMapDefaultTypeInternal;
extern DCInstanceMapDefaultTypeInternal _DCInstanceMap_default_instance_;
class DCInstanceMap_ValuesEntry_DoNotUse;
class DCInstanceMap_ValuesEntry_DoNotUseDefaultTypeInternal;
extern DCInstanceMap_ValuesEntry_DoNotUseDefaultTypeInternal _DCInstanceMap_ValuesEntry_DoNotUse_default_instance_;
class DataId;
class DataIdDefaultTypeInternal;
extern DataIdDefaultTypeInternal _DataId_default_instance_;
class DataIndex;
class DataIndexDefaultTypeInternal;
extern DataIndexDefaultTypeInternal _DataIndex_default_instance_;
class DataKey;
class DataKeyDefaultTypeInternal;
extern DataKeyDefaultTypeInternal _DataKey_default_instance_;
class Device;
class DeviceDefaultTypeInternal;
extern DeviceDefaultTypeInternal _Device_default_instance_;
class Engine;
class EngineDefaultTypeInternal;
extern EngineDefaultTypeInternal _Engine_default_instance_;
class EngineDevice;
class EngineDeviceDefaultTypeInternal;
extern EngineDeviceDefaultTypeInternal _EngineDevice_default_instance_;
class EnginesInstanceMap;
class EnginesInstanceMapDefaultTypeInternal;
extern EnginesInstanceMapDefaultTypeInternal _EnginesInstanceMap_default_instance_;
class EnginesInstanceMap_ValuesEntry_DoNotUse;
class EnginesInstanceMap_ValuesEntry_DoNotUseDefaultTypeInternal;
extern EnginesInstanceMap_ValuesEntry_DoNotUseDefaultTypeInternal _EnginesInstanceMap_ValuesEntry_DoNotUse_default_instance_;
class Event;
class EventDefaultTypeInternal;
extern EventDefaultTypeInternal _Event_default_instance_;
class FactoryData;
class FactoryDataDefaultTypeInternal;
extern FactoryDataDefaultTypeInternal _FactoryData_default_instance_;
class FantasticFanDevice;
class FantasticFanDeviceDefaultTypeInternal;
extern FantasticFanDeviceDefaultTypeInternal _FantasticFanDevice_default_instance_;
class FavoriteRequest;
class FavoriteRequestDefaultTypeInternal;
extern FavoriteRequestDefaultTypeInternal _FavoriteRequest_default_instance_;
class FavoriteResult;
class FavoriteResultDefaultTypeInternal;
extern FavoriteResultDefaultTypeInternal _FavoriteResult_default_instance_;
class FavouritesInfo;
class FavouritesInfoDefaultTypeInternal;
extern FavouritesInfoDefaultTypeInternal _FavouritesInfo_default_instance_;
class File;
class FileDefaultTypeInternal;
extern FileDefaultTypeInternal _File_default_instance_;
class FileRequest;
class FileRequestDefaultTypeInternal;
extern FileRequestDefaultTypeInternal _FileRequest_default_instance_;
class FileResult;
class FileResultDefaultTypeInternal;
extern FileResultDefaultTypeInternal _FileResult_default_instance_;
class GNSS;
class GNSSDefaultTypeInternal;
extern GNSSDefaultTypeInternal _GNSS_default_instance_;
class GNSSDevice;
class GNSSDeviceDefaultTypeInternal;
extern GNSSDeviceDefaultTypeInternal _GNSSDevice_default_instance_;
class GNSSInstanceMap;
class GNSSInstanceMapDefaultTypeInternal;
extern GNSSInstanceMapDefaultTypeInternal _GNSSInstanceMap_default_instance_;
class GNSSInstanceMap_ValuesEntry_DoNotUse;
class GNSSInstanceMap_ValuesEntry_DoNotUseDefaultTypeInternal;
extern GNSSInstanceMap_ValuesEntry_DoNotUseDefaultTypeInternal _GNSSInstanceMap_ValuesEntry_DoNotUse_default_instance_;
class Geofence;
class GeofenceDefaultTypeInternal;
extern GeofenceDefaultTypeInternal _Geofence_default_instance_;
class HVAC;
class HVACDefaultTypeInternal;
extern HVACDefaultTypeInternal _HVAC_default_instance_;
class HVACDevice;
class HVACDeviceDefaultTypeInternal;
extern HVACDeviceDefaultTypeInternal _HVACDevice_default_instance_;
class HealthStatus;
class HealthStatusDefaultTypeInternal;
extern HealthStatusDefaultTypeInternal _HealthStatus_default_instance_;
class HvacsInstanceMap;
class HvacsInstanceMapDefaultTypeInternal;
extern HvacsInstanceMapDefaultTypeInternal _HvacsInstanceMap_default_instance_;
class HvacsInstanceMap_ValuesEntry_DoNotUse;
class HvacsInstanceMap_ValuesEntry_DoNotUseDefaultTypeInternal;
extern HvacsInstanceMap_ValuesEntry_DoNotUseDefaultTypeInternal _HvacsInstanceMap_ValuesEntry_DoNotUse_default_instance_;
class Instance;
class InstanceDefaultTypeInternal;
extern InstanceDefaultTypeInternal _Instance_default_instance_;
class InverterCharger;
class InverterChargerDefaultTypeInternal;
extern InverterChargerDefaultTypeInternal _InverterCharger_default_instance_;
class InverterChargerDevice;
class InverterChargerDeviceDefaultTypeInternal;
extern InverterChargerDeviceDefaultTypeInternal _InverterChargerDevice_default_instance_;
class InverterChargersInstanceMap;
class InverterChargersInstanceMapDefaultTypeInternal;
extern InverterChargersInstanceMapDefaultTypeInternal _InverterChargersInstanceMap_default_instance_;
class InverterChargersInstanceMap_ValuesEntry_DoNotUse;
class InverterChargersInstanceMap_ValuesEntry_DoNotUseDefaultTypeInternal;
extern InverterChargersInstanceMap_ValuesEntry_DoNotUseDefaultTypeInternal _InverterChargersInstanceMap_ValuesEntry_DoNotUse_default_instance_;
class MeteringDevice;
class MeteringDeviceDefaultTypeInternal;
extern MeteringDeviceDefaultTypeInternal _MeteringDevice_default_instance_;
class ModesIdMap;
class ModesIdMapDefaultTypeInternal;
extern ModesIdMapDefaultTypeInternal _ModesIdMap_default_instance_;
class ModesIdMap_ValuesEntry_DoNotUse;
class ModesIdMap_ValuesEntry_DoNotUseDefaultTypeInternal;
extern ModesIdMap_ValuesEntry_DoNotUseDefaultTypeInternal _ModesIdMap_ValuesEntry_DoNotUse_default_instance_;
class MonitoringData;
class MonitoringDataDefaultTypeInternal;
extern MonitoringDataDefaultTypeInternal _MonitoringData_default_instance_;
class MonitoringDataLimits;
class MonitoringDataLimitsDefaultTypeInternal;
extern MonitoringDataLimitsDefaultTypeInternal _MonitoringDataLimits_default_instance_;
class MonitoringDevice;
class MonitoringDeviceDefaultTypeInternal;
extern MonitoringDeviceDefaultTypeInternal _MonitoringDevice_default_instance_;
class MonitoringKeyValue;
class MonitoringKeyValueDefaultTypeInternal;
extern MonitoringKeyValueDefaultTypeInternal _MonitoringKeyValue_default_instance_;
class MonitoringKeyValueMap;
class MonitoringKeyValueMapDefaultTypeInternal;
extern MonitoringKeyValueMapDefaultTypeInternal _MonitoringKeyValueMap_default_instance_;
class MonitoringKeyValueMap_KeyValueMapEntry_DoNotUse;
class MonitoringKeyValueMap_KeyValueMapEntry_DoNotUseDefaultTypeInternal;
extern MonitoringKeyValueMap_KeyValueMapEntry_DoNotUseDefaultTypeInternal _MonitoringKeyValueMap_KeyValueMapEntry_DoNotUse_default_instance_;
class MonitoringType;
class MonitoringTypeDefaultTypeInternal;
extern MonitoringTypeDefaultTypeInternal _MonitoringType_default_instance_;
class NetworkStatus;
class NetworkStatusDefaultTypeInternal;
extern NetworkStatusDefaultTypeInternal _NetworkStatus_default_instance_;
class OperationRequest;
class OperationRequestDefaultTypeInternal;
extern OperationRequestDefaultTypeInternal _OperationRequest_default_instance_;
class Pressure;
class PressureDefaultTypeInternal;
extern PressureDefaultTypeInternal _Pressure_default_instance_;
class PressuresInstanceMap;
class PressuresInstanceMapDefaultTypeInternal;
extern PressuresInstanceMapDefaultTypeInternal _PressuresInstanceMap_default_instance_;
class PressuresInstanceMap_ValuesEntry_DoNotUse;
class PressuresInstanceMap_ValuesEntry_DoNotUseDefaultTypeInternal;
extern PressuresInstanceMap_ValuesEntry_DoNotUseDefaultTypeInternal _PressuresInstanceMap_ValuesEntry_DoNotUse_default_instance_;
class PsvConfiguration;
class PsvConfigurationDefaultTypeInternal;
extern PsvConfigurationDefaultTypeInternal _PsvConfiguration_default_instance_;
class PsvGnss;
class PsvGnssDefaultTypeInternal;
extern PsvGnssDefaultTypeInternal _PsvGnss_default_instance_;
class RTCoreLogicalIdToDeviceConfig;
class RTCoreLogicalIdToDeviceConfigDefaultTypeInternal;
extern RTCoreLogicalIdToDeviceConfigDefaultTypeInternal _RTCoreLogicalIdToDeviceConfig_default_instance_;
class RTCoreLogicalIdToDeviceConfig_CircuitLoadsEntry_DoNotUse;
class RTCoreLogicalIdToDeviceConfig_CircuitLoadsEntry_DoNotUseDefaultTypeInternal;
extern RTCoreLogicalIdToDeviceConfig_CircuitLoadsEntry_DoNotUseDefaultTypeInternal _RTCoreLogicalIdToDeviceConfig_CircuitLoadsEntry_DoNotUse_default_instance_;
class RTCoreLogicalIdToDeviceConfig_DCMetersEntry_DoNotUse;
class RTCoreLogicalIdToDeviceConfig_DCMetersEntry_DoNotUseDefaultTypeInternal;
extern RTCoreLogicalIdToDeviceConfig_DCMetersEntry_DoNotUseDefaultTypeInternal _RTCoreLogicalIdToDeviceConfig_DCMetersEntry_DoNotUse_default_instance_;
class RTCoreLogicalIdToDeviceConfig_MonitoringDeviceEntry_DoNotUse;
class RTCoreLogicalIdToDeviceConfig_MonitoringDeviceEntry_DoNotUseDefaultTypeInternal;
extern RTCoreLogicalIdToDeviceConfig_MonitoringDeviceEntry_DoNotUseDefaultTypeInternal _RTCoreLogicalIdToDeviceConfig_MonitoringDeviceEntry_DoNotUse_default_instance_;
class RTCoreLogicalIdToDeviceConfig_SwitchPositiveNegtiveEntry_DoNotUse;
class RTCoreLogicalIdToDeviceConfig_SwitchPositiveNegtiveEntry_DoNotUseDefaultTypeInternal;
extern RTCoreLogicalIdToDeviceConfig_SwitchPositiveNegtiveEntry_DoNotUseDefaultTypeInternal _RTCoreLogicalIdToDeviceConfig_SwitchPositiveNegtiveEntry_DoNotUse_default_instance_;
class RTCoreMapEntry;
class RTCoreMapEntryDefaultTypeInternal;
extern RTCoreMapEntryDefaultTypeInternal _RTCoreMapEntry_default_instance_;
class RTCoreMapEntry_AlarmsEntry_DoNotUse;
class RTCoreMapEntry_AlarmsEntry_DoNotUseDefaultTypeInternal;
extern RTCoreMapEntry_AlarmsEntry_DoNotUseDefaultTypeInternal _RTCoreMapEntry_AlarmsEntry_DoNotUse_default_instance_;
class Request;
class RequestDefaultTypeInternal;
extern RequestDefaultTypeInternal _Request_default_instance_;
class Result;
class ResultDefaultTypeInternal;
extern ResultDefaultTypeInternal _Result_default_instance_;
class ScreenConfig;
class ScreenConfigDefaultTypeInternal;
extern ScreenConfigDefaultTypeInternal _ScreenConfig_default_instance_;
class ScreenConfigHeader;
class ScreenConfigHeaderDefaultTypeInternal;
extern ScreenConfigHeaderDefaultTypeInternal _ScreenConfigHeader_default_instance_;
class ScreenConfigMode;
class ScreenConfigModeDefaultTypeInternal;
extern ScreenConfigModeDefaultTypeInternal _ScreenConfigMode_default_instance_;
class ScreenConfigPage;
class ScreenConfigPageDefaultTypeInternal;
extern ScreenConfigPageDefaultTypeInternal _ScreenConfigPage_default_instance_;
class ScreenConfigPageGridItem;
class ScreenConfigPageGridItemDefaultTypeInternal;
extern ScreenConfigPageGridItemDefaultTypeInternal _ScreenConfigPageGridItem_default_instance_;
class ScreenConfigPageImage;
class ScreenConfigPageImageDefaultTypeInternal;
extern ScreenConfigPageImageDefaultTypeInternal _ScreenConfigPageImage_default_instance_;
class ScreenConfigPageImageItem;
class ScreenConfigPageImageItemDefaultTypeInternal;
extern ScreenConfigPageImageItemDefaultTypeInternal _ScreenConfigPageImageItem_default_instance_;
class SequentialName;
class SequentialNameDefaultTypeInternal;
extern SequentialNameDefaultTypeInternal _SequentialName_default_instance_;
class SettingRequest;
class SettingRequestDefaultTypeInternal;
extern SettingRequestDefaultTypeInternal _SettingRequest_default_instance_;
class Settings;
class SettingsDefaultTypeInternal;
extern SettingsDefaultTypeInternal _Settings_default_instance_;
class ShoreFuseDevice;
class ShoreFuseDeviceDefaultTypeInternal;
extern ShoreFuseDeviceDefaultTypeInternal _ShoreFuseDevice_default_instance_;
class SnapshotInstanceIdMap;
class SnapshotInstanceIdMapDefaultTypeInternal;
extern SnapshotInstanceIdMapDefaultTypeInternal _SnapshotInstanceIdMap_default_instance_;
class SnapshotInstanceIdMap_ACEntry_DoNotUse;
class SnapshotInstanceIdMap_ACEntry_DoNotUseDefaultTypeInternal;
extern SnapshotInstanceIdMap_ACEntry_DoNotUseDefaultTypeInternal _SnapshotInstanceIdMap_ACEntry_DoNotUse_default_instance_;
class SnapshotInstanceIdMap_ACMainContactorsEntry_DoNotUse;
class SnapshotInstanceIdMap_ACMainContactorsEntry_DoNotUseDefaultTypeInternal;
extern SnapshotInstanceIdMap_ACMainContactorsEntry_DoNotUseDefaultTypeInternal _SnapshotInstanceIdMap_ACMainContactorsEntry_DoNotUse_default_instance_;
class SnapshotInstanceIdMap_AudioStereosEntry_DoNotUse;
class SnapshotInstanceIdMap_AudioStereosEntry_DoNotUseDefaultTypeInternal;
extern SnapshotInstanceIdMap_AudioStereosEntry_DoNotUseDefaultTypeInternal _SnapshotInstanceIdMap_AudioStereosEntry_DoNotUse_default_instance_;
class SnapshotInstanceIdMap_AwningsEntry_DoNotUse;
class SnapshotInstanceIdMap_AwningsEntry_DoNotUseDefaultTypeInternal;
extern SnapshotInstanceIdMap_AwningsEntry_DoNotUseDefaultTypeInternal _SnapshotInstanceIdMap_AwningsEntry_DoNotUse_default_instance_;
class SnapshotInstanceIdMap_BinaryLogicStateEntry_DoNotUse;
class SnapshotInstanceIdMap_BinaryLogicStateEntry_DoNotUseDefaultTypeInternal;
extern SnapshotInstanceIdMap_BinaryLogicStateEntry_DoNotUseDefaultTypeInternal _SnapshotInstanceIdMap_BinaryLogicStateEntry_DoNotUse_default_instance_;
class SnapshotInstanceIdMap_CircuitsEntry_DoNotUse;
class SnapshotInstanceIdMap_CircuitsEntry_DoNotUseDefaultTypeInternal;
extern SnapshotInstanceIdMap_CircuitsEntry_DoNotUseDefaultTypeInternal _SnapshotInstanceIdMap_CircuitsEntry_DoNotUse_default_instance_;
class SnapshotInstanceIdMap_DCEntry_DoNotUse;
class SnapshotInstanceIdMap_DCEntry_DoNotUseDefaultTypeInternal;
extern SnapshotInstanceIdMap_DCEntry_DoNotUseDefaultTypeInternal _SnapshotInstanceIdMap_DCEntry_DoNotUse_default_instance_;
class SnapshotInstanceIdMap_EnginesEntry_DoNotUse;
class SnapshotInstanceIdMap_EnginesEntry_DoNotUseDefaultTypeInternal;
extern SnapshotInstanceIdMap_EnginesEntry_DoNotUseDefaultTypeInternal _SnapshotInstanceIdMap_EnginesEntry_DoNotUse_default_instance_;
class SnapshotInstanceIdMap_GNSSEntry_DoNotUse;
class SnapshotInstanceIdMap_GNSSEntry_DoNotUseDefaultTypeInternal;
extern SnapshotInstanceIdMap_GNSSEntry_DoNotUseDefaultTypeInternal _SnapshotInstanceIdMap_GNSSEntry_DoNotUse_default_instance_;
class SnapshotInstanceIdMap_HvacsEntry_DoNotUse;
class SnapshotInstanceIdMap_HvacsEntry_DoNotUseDefaultTypeInternal;
extern SnapshotInstanceIdMap_HvacsEntry_DoNotUseDefaultTypeInternal _SnapshotInstanceIdMap_HvacsEntry_DoNotUse_default_instance_;
class SnapshotInstanceIdMap_InverterChargersEntry_DoNotUse;
class SnapshotInstanceIdMap_InverterChargersEntry_DoNotUseDefaultTypeInternal;
extern SnapshotInstanceIdMap_InverterChargersEntry_DoNotUseDefaultTypeInternal _SnapshotInstanceIdMap_InverterChargersEntry_DoNotUse_default_instance_;
class SnapshotInstanceIdMap_ModesEntry_DoNotUse;
class SnapshotInstanceIdMap_ModesEntry_DoNotUseDefaultTypeInternal;
extern SnapshotInstanceIdMap_ModesEntry_DoNotUseDefaultTypeInternal _SnapshotInstanceIdMap_ModesEntry_DoNotUse_default_instance_;
class SnapshotInstanceIdMap_MonitoringKeyValueEntry_DoNotUse;
class SnapshotInstanceIdMap_MonitoringKeyValueEntry_DoNotUseDefaultTypeInternal;
extern SnapshotInstanceIdMap_MonitoringKeyValueEntry_DoNotUseDefaultTypeInternal _SnapshotInstanceIdMap_MonitoringKeyValueEntry_DoNotUse_default_instance_;
class SnapshotInstanceIdMap_PressuresEntry_DoNotUse;
class SnapshotInstanceIdMap_PressuresEntry_DoNotUseDefaultTypeInternal;
extern SnapshotInstanceIdMap_PressuresEntry_DoNotUseDefaultTypeInternal _SnapshotInstanceIdMap_PressuresEntry_DoNotUse_default_instance_;
class SnapshotInstanceIdMap_TanksEntry_DoNotUse;
class SnapshotInstanceIdMap_TanksEntry_DoNotUseDefaultTypeInternal;
extern SnapshotInstanceIdMap_TanksEntry_DoNotUseDefaultTypeInternal _SnapshotInstanceIdMap_TanksEntry_DoNotUse_default_instance_;
class SnapshotInstanceIdMap_TemperaturesEntry_DoNotUse;
class SnapshotInstanceIdMap_TemperaturesEntry_DoNotUseDefaultTypeInternal;
extern SnapshotInstanceIdMap_TemperaturesEntry_DoNotUseDefaultTypeInternal _SnapshotInstanceIdMap_TemperaturesEntry_DoNotUse_default_instance_;
class SnapshotInstanceIdMap_ThirdPartyGeneratorsEntry_DoNotUse;
class SnapshotInstanceIdMap_ThirdPartyGeneratorsEntry_DoNotUseDefaultTypeInternal;
extern SnapshotInstanceIdMap_ThirdPartyGeneratorsEntry_DoNotUseDefaultTypeInternal _SnapshotInstanceIdMap_ThirdPartyGeneratorsEntry_DoNotUse_default_instance_;
class SnapshotInstanceIdMap_TyrepressuresEntry_DoNotUse;
class SnapshotInstanceIdMap_TyrepressuresEntry_DoNotUseDefaultTypeInternal;
extern SnapshotInstanceIdMap_TyrepressuresEntry_DoNotUseDefaultTypeInternal _SnapshotInstanceIdMap_TyrepressuresEntry_DoNotUse_default_instance_;
class SwitchPositiveNegtive;
class SwitchPositiveNegtiveDefaultTypeInternal;
extern SwitchPositiveNegtiveDefaultTypeInternal _SwitchPositiveNegtive_default_instance_;
class Tank;
class TankDefaultTypeInternal;
extern TankDefaultTypeInternal _Tank_default_instance_;
class TanksInstanceMap;
class TanksInstanceMapDefaultTypeInternal;
extern TanksInstanceMapDefaultTypeInternal _TanksInstanceMap_default_instance_;
class TanksInstanceMap_ValuesEntry_DoNotUse;
class TanksInstanceMap_ValuesEntry_DoNotUseDefaultTypeInternal;
extern TanksInstanceMap_ValuesEntry_DoNotUseDefaultTypeInternal _TanksInstanceMap_ValuesEntry_DoNotUse_default_instance_;
class Temperature;
class TemperatureDefaultTypeInternal;
extern TemperatureDefaultTypeInternal _Temperature_default_instance_;
class TemperaturesInstanceMap;
class TemperaturesInstanceMapDefaultTypeInternal;
extern TemperaturesInstanceMapDefaultTypeInternal _TemperaturesInstanceMap_default_instance_;
class TemperaturesInstanceMap_ValuesEntry_DoNotUse;
class TemperaturesInstanceMap_ValuesEntry_DoNotUseDefaultTypeInternal;
extern TemperaturesInstanceMap_ValuesEntry_DoNotUseDefaultTypeInternal _TemperaturesInstanceMap_ValuesEntry_DoNotUse_default_instance_;
class ThirdPartyGenerator;
class ThirdPartyGeneratorDefaultTypeInternal;
extern ThirdPartyGeneratorDefaultTypeInternal _ThirdPartyGenerator_default_instance_;
class ThirdPartyGeneratorDevice;
class ThirdPartyGeneratorDeviceDefaultTypeInternal;
extern ThirdPartyGeneratorDeviceDefaultTypeInternal _ThirdPartyGeneratorDevice_default_instance_;
class ThirdPartyGeneratorsInstanceMap;
class ThirdPartyGeneratorsInstanceMapDefaultTypeInternal;
extern ThirdPartyGeneratorsInstanceMapDefaultTypeInternal _ThirdPartyGeneratorsInstanceMap_default_instance_;
class ThirdPartyGeneratorsInstanceMap_ValuesEntry_DoNotUse;
class ThirdPartyGeneratorsInstanceMap_ValuesEntry_DoNotUseDefaultTypeInternal;
extern ThirdPartyGeneratorsInstanceMap_ValuesEntry_DoNotUseDefaultTypeInternal _ThirdPartyGeneratorsInstanceMap_ValuesEntry_DoNotUse_default_instance_;
class Token;
class TokenDefaultTypeInternal;
extern TokenDefaultTypeInternal _Token_default_instance_;
class TyrePressure;
class TyrePressureDefaultTypeInternal;
extern TyrePressureDefaultTypeInternal _TyrePressure_default_instance_;
class TyrePressureDevice;
class TyrePressureDeviceDefaultTypeInternal;
extern TyrePressureDeviceDefaultTypeInternal _TyrePressureDevice_default_instance_;
class TyrepressuresInstanceMap;
class TyrepressuresInstanceMapDefaultTypeInternal;
extern TyrepressuresInstanceMapDefaultTypeInternal _TyrepressuresInstanceMap_default_instance_;
class TyrepressuresInstanceMap_ValuesEntry_DoNotUse;
class TyrepressuresInstanceMap_ValuesEntry_DoNotUseDefaultTypeInternal;
extern TyrepressuresInstanceMap_ValuesEntry_DoNotUseDefaultTypeInternal _TyrepressuresInstanceMap_ValuesEntry_DoNotUse_default_instance_;
class UiRelationshipMsg;
class UiRelationshipMsgDefaultTypeInternal;
extern UiRelationshipMsgDefaultTypeInternal _UiRelationshipMsg_default_instance_;
class UnacknowledgedAlarm;
class UnacknowledgedAlarmDefaultTypeInternal;
extern UnacknowledgedAlarmDefaultTypeInternal _UnacknowledgedAlarm_default_instance_;
class ValueAudioSource;
class ValueAudioSourceDefaultTypeInternal;
extern ValueAudioSourceDefaultTypeInternal _ValueAudioSource_default_instance_;
class ValueAudioStatus;
class ValueAudioStatusDefaultTypeInternal;
extern ValueAudioStatusDefaultTypeInternal _ValueAudioStatus_default_instance_;
class ValueAwningState;
class ValueAwningStateDefaultTypeInternal;
extern ValueAwningStateDefaultTypeInternal _ValueAwningState_default_instance_;
class ValueBool;
class ValueBoolDefaultTypeInternal;
extern ValueBoolDefaultTypeInternal _ValueBool_default_instance_;
class ValueChargerState;
class ValueChargerStateDefaultTypeInternal;
extern ValueChargerStateDefaultTypeInternal _ValueChargerState_default_instance_;
class ValueContactorOnState;
class ValueContactorOnStateDefaultTypeInternal;
extern ValueContactorOnStateDefaultTypeInternal _ValueContactorOnState_default_instance_;
class ValueDouble;
class ValueDoubleDefaultTypeInternal;
extern ValueDoubleDefaultTypeInternal _ValueDouble_default_instance_;
class ValueEngineState;
class ValueEngineStateDefaultTypeInternal;
extern ValueEngineStateDefaultTypeInternal _ValueEngineState_default_instance_;
class ValueF;
class ValueFDefaultTypeInternal;
extern ValueFDefaultTypeInternal _ValueF_default_instance_;
class ValueFaultState;
class ValueFaultStateDefaultTypeInternal;
extern ValueFaultStateDefaultTypeInternal _ValueFaultState_default_instance_;
class ValueGNSSFixType;
class ValueGNSSFixTypeDefaultTypeInternal;
extern ValueGNSSFixTypeDefaultTypeInternal _ValueGNSSFixType_default_instance_;
class ValueGNSSMethod;
class ValueGNSSMethodDefaultTypeInternal;
extern ValueGNSSMethodDefaultTypeInternal _ValueGNSSMethod_default_instance_;
class ValueGeneratorState;
class ValueGeneratorStateDefaultTypeInternal;
extern ValueGeneratorStateDefaultTypeInternal _ValueGeneratorState_default_instance_;
class ValueHVACOperatingMode;
class ValueHVACOperatingModeDefaultTypeInternal;
extern ValueHVACOperatingModeDefaultTypeInternal _ValueHVACOperatingMode_default_instance_;
class ValueInverterChargerEnabled;
class ValueInverterChargerEnabledDefaultTypeInternal;
extern ValueInverterChargerEnabledDefaultTypeInternal _ValueInverterChargerEnabled_default_instance_;
class ValueInverterState;
class ValueInverterStateDefaultTypeInternal;
extern ValueInverterStateDefaultTypeInternal _ValueInverterState_default_instance_;
class ValueS32;
class ValueS32DefaultTypeInternal;
extern ValueS32DefaultTypeInternal _ValueS32_default_instance_;
class ValueSourceAvailable;
class ValueSourceAvailableDefaultTypeInternal;
extern ValueSourceAvailableDefaultTypeInternal _ValueSourceAvailable_default_instance_;
class ValueSystemOnState;
class ValueSystemOnStateDefaultTypeInternal;
extern ValueSystemOnStateDefaultTypeInternal _ValueSystemOnState_default_instance_;
class ValueTankType;
class ValueTankTypeDefaultTypeInternal;
extern ValueTankTypeDefaultTypeInternal _ValueTankType_default_instance_;
class ValueTyreLimitStatus;
class ValueTyreLimitStatusDefaultTypeInternal;
extern ValueTyreLimitStatusDefaultTypeInternal _ValueTyreLimitStatus_default_instance_;
class ValueTyreStatus;
class ValueTyreStatusDefaultTypeInternal;
extern ValueTyreStatusDefaultTypeInternal _ValueTyreStatus_default_instance_;
class ValueU32;
class ValueU32DefaultTypeInternal;
extern ValueU32DefaultTypeInternal _ValueU32_default_instance_;
class ZipdeeAwning;
class ZipdeeAwningDefaultTypeInternal;
extern ZipdeeAwningDefaultTypeInternal _ZipdeeAwning_default_instance_;
class ZipdeeAwningDevice;
class ZipdeeAwningDeviceDefaultTypeInternal;
extern ZipdeeAwningDeviceDefaultTypeInternal _ZipdeeAwningDevice_default_instance_;
}  // namespace Nmea2k
namespace google {
namespace protobuf {
template<> ::Nmea2k::AC* Arena::CreateMaybeMessage<::Nmea2k::AC>(Arena*);
template<> ::Nmea2k::ACInstanceMap* Arena::CreateMaybeMessage<::Nmea2k::ACInstanceMap>(Arena*);
template<> ::Nmea2k::ACInstanceMap_ValuesEntry_DoNotUse* Arena::CreateMaybeMessage<::Nmea2k::ACInstanceMap_ValuesEntry_DoNotUse>(Arena*);
template<> ::Nmea2k::ACLine* Arena::CreateMaybeMessage<::Nmea2k::ACLine>(Arena*);
template<> ::Nmea2k::ACMainContactor* Arena::CreateMaybeMessage<::Nmea2k::ACMainContactor>(Arena*);
template<> ::Nmea2k::ACMainContactorDevice* Arena::CreateMaybeMessage<::Nmea2k::ACMainContactorDevice>(Arena*);
template<> ::Nmea2k::ACMainContactorsInstanceMap* Arena::CreateMaybeMessage<::Nmea2k::ACMainContactorsInstanceMap>(Arena*);
template<> ::Nmea2k::ACMainContactorsInstanceMap_ValuesEntry_DoNotUse* Arena::CreateMaybeMessage<::Nmea2k::ACMainContactorsInstanceMap_ValuesEntry_DoNotUse>(Arena*);
template<> ::Nmea2k::ACMainDevice* Arena::CreateMaybeMessage<::Nmea2k::ACMainDevice>(Arena*);
template<> ::Nmea2k::ACMainLoadGroupDevice* Arena::CreateMaybeMessage<::Nmea2k::ACMainLoadGroupDevice>(Arena*);
template<> ::Nmea2k::AC_AClinesEntry_DoNotUse* Arena::CreateMaybeMessage<::Nmea2k::AC_AClinesEntry_DoNotUse>(Arena*);
template<> ::Nmea2k::Alarm* Arena::CreateMaybeMessage<::Nmea2k::Alarm>(Arena*);
template<> ::Nmea2k::AlarmEvent* Arena::CreateMaybeMessage<::Nmea2k::AlarmEvent>(Arena*);
template<> ::Nmea2k::AlarmGlobalStatus* Arena::CreateMaybeMessage<::Nmea2k::AlarmGlobalStatus>(Arena*);
template<> ::Nmea2k::AlarmLimit* Arena::CreateMaybeMessage<::Nmea2k::AlarmLimit>(Arena*);
template<> ::Nmea2k::AlarmRequest* Arena::CreateMaybeMessage<::Nmea2k::AlarmRequest>(Arena*);
template<> ::Nmea2k::AlarmString* Arena::CreateMaybeMessage<::Nmea2k::AlarmString>(Arena*);
template<> ::Nmea2k::AlarmsList* Arena::CreateMaybeMessage<::Nmea2k::AlarmsList>(Arena*);
template<> ::Nmea2k::AudioStereo* Arena::CreateMaybeMessage<::Nmea2k::AudioStereo>(Arena*);
template<> ::Nmea2k::AudioStereoDevice* Arena::CreateMaybeMessage<::Nmea2k::AudioStereoDevice>(Arena*);
template<> ::Nmea2k::AudioStereosInstanceMap* Arena::CreateMaybeMessage<::Nmea2k::AudioStereosInstanceMap>(Arena*);
template<> ::Nmea2k::AudioStereosInstanceMap_ValuesEntry_DoNotUse* Arena::CreateMaybeMessage<::Nmea2k::AudioStereosInstanceMap_ValuesEntry_DoNotUse>(Arena*);
template<> ::Nmea2k::Authentication* Arena::CreateMaybeMessage<::Nmea2k::Authentication>(Arena*);
template<> ::Nmea2k::AwningsInstanceMap* Arena::CreateMaybeMessage<::Nmea2k::AwningsInstanceMap>(Arena*);
template<> ::Nmea2k::AwningsInstanceMap_ValuesEntry_DoNotUse* Arena::CreateMaybeMessage<::Nmea2k::AwningsInstanceMap_ValuesEntry_DoNotUse>(Arena*);
template<> ::Nmea2k::BinaryLogicState* Arena::CreateMaybeMessage<::Nmea2k::BinaryLogicState>(Arena*);
template<> ::Nmea2k::BinaryLogicStateInstanceMap* Arena::CreateMaybeMessage<::Nmea2k::BinaryLogicStateInstanceMap>(Arena*);
template<> ::Nmea2k::BinaryLogicStateInstanceMap_ValuesEntry_DoNotUse* Arena::CreateMaybeMessage<::Nmea2k::BinaryLogicStateInstanceMap_ValuesEntry_DoNotUse>(Arena*);
template<> ::Nmea2k::BinaryLogicStateMsg* Arena::CreateMaybeMessage<::Nmea2k::BinaryLogicStateMsg>(Arena*);
template<> ::Nmea2k::BinarySignalBitAddress* Arena::CreateMaybeMessage<::Nmea2k::BinarySignalBitAddress>(Arena*);
template<> ::Nmea2k::CZoneRawConfig* Arena::CreateMaybeMessage<::Nmea2k::CZoneRawConfig>(Arena*);
template<> ::Nmea2k::CZoneRawEvent* Arena::CreateMaybeMessage<::Nmea2k::CZoneRawEvent>(Arena*);
template<> ::Nmea2k::Categories* Arena::CreateMaybeMessage<::Nmea2k::Categories>(Arena*);
template<> ::Nmea2k::CategoryItem* Arena::CreateMaybeMessage<::Nmea2k::CategoryItem>(Arena*);
template<> ::Nmea2k::CategoryRequest* Arena::CreateMaybeMessage<::Nmea2k::CategoryRequest>(Arena*);
template<> ::Nmea2k::Circuit* Arena::CreateMaybeMessage<::Nmea2k::Circuit>(Arena*);
template<> ::Nmea2k::CircuitButtonInfo* Arena::CreateMaybeMessage<::Nmea2k::CircuitButtonInfo>(Arena*);
template<> ::Nmea2k::CircuitDevice* Arena::CreateMaybeMessage<::Nmea2k::CircuitDevice>(Arena*);
template<> ::Nmea2k::CircuitIdMap* Arena::CreateMaybeMessage<::Nmea2k::CircuitIdMap>(Arena*);
template<> ::Nmea2k::CircuitIdMap_ValuesEntry_DoNotUse* Arena::CreateMaybeMessage<::Nmea2k::CircuitIdMap_ValuesEntry_DoNotUse>(Arena*);
template<> ::Nmea2k::CircuitLoad* Arena::CreateMaybeMessage<::Nmea2k::CircuitLoad>(Arena*);
template<> ::Nmea2k::ConfigRequest* Arena::CreateMaybeMessage<::Nmea2k::ConfigRequest>(Arena*);
template<> ::Nmea2k::ConfigResult* Arena::CreateMaybeMessage<::Nmea2k::ConfigResult>(Arena*);
template<> ::Nmea2k::ConnectRequest* Arena::CreateMaybeMessage<::Nmea2k::ConnectRequest>(Arena*);
template<> ::Nmea2k::ControlRequest* Arena::CreateMaybeMessage<::Nmea2k::ControlRequest>(Arena*);
template<> ::Nmea2k::ControlTypeValueRequest* Arena::CreateMaybeMessage<::Nmea2k::ControlTypeValueRequest>(Arena*);
template<> ::Nmea2k::DC* Arena::CreateMaybeMessage<::Nmea2k::DC>(Arena*);
template<> ::Nmea2k::DCInstanceMap* Arena::CreateMaybeMessage<::Nmea2k::DCInstanceMap>(Arena*);
template<> ::Nmea2k::DCInstanceMap_ValuesEntry_DoNotUse* Arena::CreateMaybeMessage<::Nmea2k::DCInstanceMap_ValuesEntry_DoNotUse>(Arena*);
template<> ::Nmea2k::DataId* Arena::CreateMaybeMessage<::Nmea2k::DataId>(Arena*);
template<> ::Nmea2k::DataIndex* Arena::CreateMaybeMessage<::Nmea2k::DataIndex>(Arena*);
template<> ::Nmea2k::DataKey* Arena::CreateMaybeMessage<::Nmea2k::DataKey>(Arena*);
template<> ::Nmea2k::Device* Arena::CreateMaybeMessage<::Nmea2k::Device>(Arena*);
template<> ::Nmea2k::Engine* Arena::CreateMaybeMessage<::Nmea2k::Engine>(Arena*);
template<> ::Nmea2k::EngineDevice* Arena::CreateMaybeMessage<::Nmea2k::EngineDevice>(Arena*);
template<> ::Nmea2k::EnginesInstanceMap* Arena::CreateMaybeMessage<::Nmea2k::EnginesInstanceMap>(Arena*);
template<> ::Nmea2k::EnginesInstanceMap_ValuesEntry_DoNotUse* Arena::CreateMaybeMessage<::Nmea2k::EnginesInstanceMap_ValuesEntry_DoNotUse>(Arena*);
template<> ::Nmea2k::Event* Arena::CreateMaybeMessage<::Nmea2k::Event>(Arena*);
template<> ::Nmea2k::FactoryData* Arena::CreateMaybeMessage<::Nmea2k::FactoryData>(Arena*);
template<> ::Nmea2k::FantasticFanDevice* Arena::CreateMaybeMessage<::Nmea2k::FantasticFanDevice>(Arena*);
template<> ::Nmea2k::FavoriteRequest* Arena::CreateMaybeMessage<::Nmea2k::FavoriteRequest>(Arena*);
template<> ::Nmea2k::FavoriteResult* Arena::CreateMaybeMessage<::Nmea2k::FavoriteResult>(Arena*);
template<> ::Nmea2k::FavouritesInfo* Arena::CreateMaybeMessage<::Nmea2k::FavouritesInfo>(Arena*);
template<> ::Nmea2k::File* Arena::CreateMaybeMessage<::Nmea2k::File>(Arena*);
template<> ::Nmea2k::FileRequest* Arena::CreateMaybeMessage<::Nmea2k::FileRequest>(Arena*);
template<> ::Nmea2k::FileResult* Arena::CreateMaybeMessage<::Nmea2k::FileResult>(Arena*);
template<> ::Nmea2k::GNSS* Arena::CreateMaybeMessage<::Nmea2k::GNSS>(Arena*);
template<> ::Nmea2k::GNSSDevice* Arena::CreateMaybeMessage<::Nmea2k::GNSSDevice>(Arena*);
template<> ::Nmea2k::GNSSInstanceMap* Arena::CreateMaybeMessage<::Nmea2k::GNSSInstanceMap>(Arena*);
template<> ::Nmea2k::GNSSInstanceMap_ValuesEntry_DoNotUse* Arena::CreateMaybeMessage<::Nmea2k::GNSSInstanceMap_ValuesEntry_DoNotUse>(Arena*);
template<> ::Nmea2k::Geofence* Arena::CreateMaybeMessage<::Nmea2k::Geofence>(Arena*);
template<> ::Nmea2k::HVAC* Arena::CreateMaybeMessage<::Nmea2k::HVAC>(Arena*);
template<> ::Nmea2k::HVACDevice* Arena::CreateMaybeMessage<::Nmea2k::HVACDevice>(Arena*);
template<> ::Nmea2k::HealthStatus* Arena::CreateMaybeMessage<::Nmea2k::HealthStatus>(Arena*);
template<> ::Nmea2k::HvacsInstanceMap* Arena::CreateMaybeMessage<::Nmea2k::HvacsInstanceMap>(Arena*);
template<> ::Nmea2k::HvacsInstanceMap_ValuesEntry_DoNotUse* Arena::CreateMaybeMessage<::Nmea2k::HvacsInstanceMap_ValuesEntry_DoNotUse>(Arena*);
template<> ::Nmea2k::Instance* Arena::CreateMaybeMessage<::Nmea2k::Instance>(Arena*);
template<> ::Nmea2k::InverterCharger* Arena::CreateMaybeMessage<::Nmea2k::InverterCharger>(Arena*);
template<> ::Nmea2k::InverterChargerDevice* Arena::CreateMaybeMessage<::Nmea2k::InverterChargerDevice>(Arena*);
template<> ::Nmea2k::InverterChargersInstanceMap* Arena::CreateMaybeMessage<::Nmea2k::InverterChargersInstanceMap>(Arena*);
template<> ::Nmea2k::InverterChargersInstanceMap_ValuesEntry_DoNotUse* Arena::CreateMaybeMessage<::Nmea2k::InverterChargersInstanceMap_ValuesEntry_DoNotUse>(Arena*);
template<> ::Nmea2k::MeteringDevice* Arena::CreateMaybeMessage<::Nmea2k::MeteringDevice>(Arena*);
template<> ::Nmea2k::ModesIdMap* Arena::CreateMaybeMessage<::Nmea2k::ModesIdMap>(Arena*);
template<> ::Nmea2k::ModesIdMap_ValuesEntry_DoNotUse* Arena::CreateMaybeMessage<::Nmea2k::ModesIdMap_ValuesEntry_DoNotUse>(Arena*);
template<> ::Nmea2k::MonitoringData* Arena::CreateMaybeMessage<::Nmea2k::MonitoringData>(Arena*);
template<> ::Nmea2k::MonitoringDataLimits* Arena::CreateMaybeMessage<::Nmea2k::MonitoringDataLimits>(Arena*);
template<> ::Nmea2k::MonitoringDevice* Arena::CreateMaybeMessage<::Nmea2k::MonitoringDevice>(Arena*);
template<> ::Nmea2k::MonitoringKeyValue* Arena::CreateMaybeMessage<::Nmea2k::MonitoringKeyValue>(Arena*);
template<> ::Nmea2k::MonitoringKeyValueMap* Arena::CreateMaybeMessage<::Nmea2k::MonitoringKeyValueMap>(Arena*);
template<> ::Nmea2k::MonitoringKeyValueMap_KeyValueMapEntry_DoNotUse* Arena::CreateMaybeMessage<::Nmea2k::MonitoringKeyValueMap_KeyValueMapEntry_DoNotUse>(Arena*);
template<> ::Nmea2k::MonitoringType* Arena::CreateMaybeMessage<::Nmea2k::MonitoringType>(Arena*);
template<> ::Nmea2k::NetworkStatus* Arena::CreateMaybeMessage<::Nmea2k::NetworkStatus>(Arena*);
template<> ::Nmea2k::OperationRequest* Arena::CreateMaybeMessage<::Nmea2k::OperationRequest>(Arena*);
template<> ::Nmea2k::Pressure* Arena::CreateMaybeMessage<::Nmea2k::Pressure>(Arena*);
template<> ::Nmea2k::PressuresInstanceMap* Arena::CreateMaybeMessage<::Nmea2k::PressuresInstanceMap>(Arena*);
template<> ::Nmea2k::PressuresInstanceMap_ValuesEntry_DoNotUse* Arena::CreateMaybeMessage<::Nmea2k::PressuresInstanceMap_ValuesEntry_DoNotUse>(Arena*);
template<> ::Nmea2k::PsvConfiguration* Arena::CreateMaybeMessage<::Nmea2k::PsvConfiguration>(Arena*);
template<> ::Nmea2k::PsvGnss* Arena::CreateMaybeMessage<::Nmea2k::PsvGnss>(Arena*);
template<> ::Nmea2k::RTCoreLogicalIdToDeviceConfig* Arena::CreateMaybeMessage<::Nmea2k::RTCoreLogicalIdToDeviceConfig>(Arena*);
template<> ::Nmea2k::RTCoreLogicalIdToDeviceConfig_CircuitLoadsEntry_DoNotUse* Arena::CreateMaybeMessage<::Nmea2k::RTCoreLogicalIdToDeviceConfig_CircuitLoadsEntry_DoNotUse>(Arena*);
template<> ::Nmea2k::RTCoreLogicalIdToDeviceConfig_DCMetersEntry_DoNotUse* Arena::CreateMaybeMessage<::Nmea2k::RTCoreLogicalIdToDeviceConfig_DCMetersEntry_DoNotUse>(Arena*);
template<> ::Nmea2k::RTCoreLogicalIdToDeviceConfig_MonitoringDeviceEntry_DoNotUse* Arena::CreateMaybeMessage<::Nmea2k::RTCoreLogicalIdToDeviceConfig_MonitoringDeviceEntry_DoNotUse>(Arena*);
template<> ::Nmea2k::RTCoreLogicalIdToDeviceConfig_SwitchPositiveNegtiveEntry_DoNotUse* Arena::CreateMaybeMessage<::Nmea2k::RTCoreLogicalIdToDeviceConfig_SwitchPositiveNegtiveEntry_DoNotUse>(Arena*);
template<> ::Nmea2k::RTCoreMapEntry* Arena::CreateMaybeMessage<::Nmea2k::RTCoreMapEntry>(Arena*);
template<> ::Nmea2k::RTCoreMapEntry_AlarmsEntry_DoNotUse* Arena::CreateMaybeMessage<::Nmea2k::RTCoreMapEntry_AlarmsEntry_DoNotUse>(Arena*);
template<> ::Nmea2k::Request* Arena::CreateMaybeMessage<::Nmea2k::Request>(Arena*);
template<> ::Nmea2k::Result* Arena::CreateMaybeMessage<::Nmea2k::Result>(Arena*);
template<> ::Nmea2k::ScreenConfig* Arena::CreateMaybeMessage<::Nmea2k::ScreenConfig>(Arena*);
template<> ::Nmea2k::ScreenConfigHeader* Arena::CreateMaybeMessage<::Nmea2k::ScreenConfigHeader>(Arena*);
template<> ::Nmea2k::ScreenConfigMode* Arena::CreateMaybeMessage<::Nmea2k::ScreenConfigMode>(Arena*);
template<> ::Nmea2k::ScreenConfigPage* Arena::CreateMaybeMessage<::Nmea2k::ScreenConfigPage>(Arena*);
template<> ::Nmea2k::ScreenConfigPageGridItem* Arena::CreateMaybeMessage<::Nmea2k::ScreenConfigPageGridItem>(Arena*);
template<> ::Nmea2k::ScreenConfigPageImage* Arena::CreateMaybeMessage<::Nmea2k::ScreenConfigPageImage>(Arena*);
template<> ::Nmea2k::ScreenConfigPageImageItem* Arena::CreateMaybeMessage<::Nmea2k::ScreenConfigPageImageItem>(Arena*);
template<> ::Nmea2k::SequentialName* Arena::CreateMaybeMessage<::Nmea2k::SequentialName>(Arena*);
template<> ::Nmea2k::SettingRequest* Arena::CreateMaybeMessage<::Nmea2k::SettingRequest>(Arena*);
template<> ::Nmea2k::Settings* Arena::CreateMaybeMessage<::Nmea2k::Settings>(Arena*);
template<> ::Nmea2k::ShoreFuseDevice* Arena::CreateMaybeMessage<::Nmea2k::ShoreFuseDevice>(Arena*);
template<> ::Nmea2k::SnapshotInstanceIdMap* Arena::CreateMaybeMessage<::Nmea2k::SnapshotInstanceIdMap>(Arena*);
template<> ::Nmea2k::SnapshotInstanceIdMap_ACEntry_DoNotUse* Arena::CreateMaybeMessage<::Nmea2k::SnapshotInstanceIdMap_ACEntry_DoNotUse>(Arena*);
template<> ::Nmea2k::SnapshotInstanceIdMap_ACMainContactorsEntry_DoNotUse* Arena::CreateMaybeMessage<::Nmea2k::SnapshotInstanceIdMap_ACMainContactorsEntry_DoNotUse>(Arena*);
template<> ::Nmea2k::SnapshotInstanceIdMap_AudioStereosEntry_DoNotUse* Arena::CreateMaybeMessage<::Nmea2k::SnapshotInstanceIdMap_AudioStereosEntry_DoNotUse>(Arena*);
template<> ::Nmea2k::SnapshotInstanceIdMap_AwningsEntry_DoNotUse* Arena::CreateMaybeMessage<::Nmea2k::SnapshotInstanceIdMap_AwningsEntry_DoNotUse>(Arena*);
template<> ::Nmea2k::SnapshotInstanceIdMap_BinaryLogicStateEntry_DoNotUse* Arena::CreateMaybeMessage<::Nmea2k::SnapshotInstanceIdMap_BinaryLogicStateEntry_DoNotUse>(Arena*);
template<> ::Nmea2k::SnapshotInstanceIdMap_CircuitsEntry_DoNotUse* Arena::CreateMaybeMessage<::Nmea2k::SnapshotInstanceIdMap_CircuitsEntry_DoNotUse>(Arena*);
template<> ::Nmea2k::SnapshotInstanceIdMap_DCEntry_DoNotUse* Arena::CreateMaybeMessage<::Nmea2k::SnapshotInstanceIdMap_DCEntry_DoNotUse>(Arena*);
template<> ::Nmea2k::SnapshotInstanceIdMap_EnginesEntry_DoNotUse* Arena::CreateMaybeMessage<::Nmea2k::SnapshotInstanceIdMap_EnginesEntry_DoNotUse>(Arena*);
template<> ::Nmea2k::SnapshotInstanceIdMap_GNSSEntry_DoNotUse* Arena::CreateMaybeMessage<::Nmea2k::SnapshotInstanceIdMap_GNSSEntry_DoNotUse>(Arena*);
template<> ::Nmea2k::SnapshotInstanceIdMap_HvacsEntry_DoNotUse* Arena::CreateMaybeMessage<::Nmea2k::SnapshotInstanceIdMap_HvacsEntry_DoNotUse>(Arena*);
template<> ::Nmea2k::SnapshotInstanceIdMap_InverterChargersEntry_DoNotUse* Arena::CreateMaybeMessage<::Nmea2k::SnapshotInstanceIdMap_InverterChargersEntry_DoNotUse>(Arena*);
template<> ::Nmea2k::SnapshotInstanceIdMap_ModesEntry_DoNotUse* Arena::CreateMaybeMessage<::Nmea2k::SnapshotInstanceIdMap_ModesEntry_DoNotUse>(Arena*);
template<> ::Nmea2k::SnapshotInstanceIdMap_MonitoringKeyValueEntry_DoNotUse* Arena::CreateMaybeMessage<::Nmea2k::SnapshotInstanceIdMap_MonitoringKeyValueEntry_DoNotUse>(Arena*);
template<> ::Nmea2k::SnapshotInstanceIdMap_PressuresEntry_DoNotUse* Arena::CreateMaybeMessage<::Nmea2k::SnapshotInstanceIdMap_PressuresEntry_DoNotUse>(Arena*);
template<> ::Nmea2k::SnapshotInstanceIdMap_TanksEntry_DoNotUse* Arena::CreateMaybeMessage<::Nmea2k::SnapshotInstanceIdMap_TanksEntry_DoNotUse>(Arena*);
template<> ::Nmea2k::SnapshotInstanceIdMap_TemperaturesEntry_DoNotUse* Arena::CreateMaybeMessage<::Nmea2k::SnapshotInstanceIdMap_TemperaturesEntry_DoNotUse>(Arena*);
template<> ::Nmea2k::SnapshotInstanceIdMap_ThirdPartyGeneratorsEntry_DoNotUse* Arena::CreateMaybeMessage<::Nmea2k::SnapshotInstanceIdMap_ThirdPartyGeneratorsEntry_DoNotUse>(Arena*);
template<> ::Nmea2k::SnapshotInstanceIdMap_TyrepressuresEntry_DoNotUse* Arena::CreateMaybeMessage<::Nmea2k::SnapshotInstanceIdMap_TyrepressuresEntry_DoNotUse>(Arena*);
template<> ::Nmea2k::SwitchPositiveNegtive* Arena::CreateMaybeMessage<::Nmea2k::SwitchPositiveNegtive>(Arena*);
template<> ::Nmea2k::Tank* Arena::CreateMaybeMessage<::Nmea2k::Tank>(Arena*);
template<> ::Nmea2k::TanksInstanceMap* Arena::CreateMaybeMessage<::Nmea2k::TanksInstanceMap>(Arena*);
template<> ::Nmea2k::TanksInstanceMap_ValuesEntry_DoNotUse* Arena::CreateMaybeMessage<::Nmea2k::TanksInstanceMap_ValuesEntry_DoNotUse>(Arena*);
template<> ::Nmea2k::Temperature* Arena::CreateMaybeMessage<::Nmea2k::Temperature>(Arena*);
template<> ::Nmea2k::TemperaturesInstanceMap* Arena::CreateMaybeMessage<::Nmea2k::TemperaturesInstanceMap>(Arena*);
template<> ::Nmea2k::TemperaturesInstanceMap_ValuesEntry_DoNotUse* Arena::CreateMaybeMessage<::Nmea2k::TemperaturesInstanceMap_ValuesEntry_DoNotUse>(Arena*);
template<> ::Nmea2k::ThirdPartyGenerator* Arena::CreateMaybeMessage<::Nmea2k::ThirdPartyGenerator>(Arena*);
template<> ::Nmea2k::ThirdPartyGeneratorDevice* Arena::CreateMaybeMessage<::Nmea2k::ThirdPartyGeneratorDevice>(Arena*);
template<> ::Nmea2k::ThirdPartyGeneratorsInstanceMap* Arena::CreateMaybeMessage<::Nmea2k::ThirdPartyGeneratorsInstanceMap>(Arena*);
template<> ::Nmea2k::ThirdPartyGeneratorsInstanceMap_ValuesEntry_DoNotUse* Arena::CreateMaybeMessage<::Nmea2k::ThirdPartyGeneratorsInstanceMap_ValuesEntry_DoNotUse>(Arena*);
template<> ::Nmea2k::Token* Arena::CreateMaybeMessage<::Nmea2k::Token>(Arena*);
template<> ::Nmea2k::TyrePressure* Arena::CreateMaybeMessage<::Nmea2k::TyrePressure>(Arena*);
template<> ::Nmea2k::TyrePressureDevice* Arena::CreateMaybeMessage<::Nmea2k::TyrePressureDevice>(Arena*);
template<> ::Nmea2k::TyrepressuresInstanceMap* Arena::CreateMaybeMessage<::Nmea2k::TyrepressuresInstanceMap>(Arena*);
template<> ::Nmea2k::TyrepressuresInstanceMap_ValuesEntry_DoNotUse* Arena::CreateMaybeMessage<::Nmea2k::TyrepressuresInstanceMap_ValuesEntry_DoNotUse>(Arena*);
template<> ::Nmea2k::UiRelationshipMsg* Arena::CreateMaybeMessage<::Nmea2k::UiRelationshipMsg>(Arena*);
template<> ::Nmea2k::UnacknowledgedAlarm* Arena::CreateMaybeMessage<::Nmea2k::UnacknowledgedAlarm>(Arena*);
template<> ::Nmea2k::ValueAudioSource* Arena::CreateMaybeMessage<::Nmea2k::ValueAudioSource>(Arena*);
template<> ::Nmea2k::ValueAudioStatus* Arena::CreateMaybeMessage<::Nmea2k::ValueAudioStatus>(Arena*);
template<> ::Nmea2k::ValueAwningState* Arena::CreateMaybeMessage<::Nmea2k::ValueAwningState>(Arena*);
template<> ::Nmea2k::ValueBool* Arena::CreateMaybeMessage<::Nmea2k::ValueBool>(Arena*);
template<> ::Nmea2k::ValueChargerState* Arena::CreateMaybeMessage<::Nmea2k::ValueChargerState>(Arena*);
template<> ::Nmea2k::ValueContactorOnState* Arena::CreateMaybeMessage<::Nmea2k::ValueContactorOnState>(Arena*);
template<> ::Nmea2k::ValueDouble* Arena::CreateMaybeMessage<::Nmea2k::ValueDouble>(Arena*);
template<> ::Nmea2k::ValueEngineState* Arena::CreateMaybeMessage<::Nmea2k::ValueEngineState>(Arena*);
template<> ::Nmea2k::ValueF* Arena::CreateMaybeMessage<::Nmea2k::ValueF>(Arena*);
template<> ::Nmea2k::ValueFaultState* Arena::CreateMaybeMessage<::Nmea2k::ValueFaultState>(Arena*);
template<> ::Nmea2k::ValueGNSSFixType* Arena::CreateMaybeMessage<::Nmea2k::ValueGNSSFixType>(Arena*);
template<> ::Nmea2k::ValueGNSSMethod* Arena::CreateMaybeMessage<::Nmea2k::ValueGNSSMethod>(Arena*);
template<> ::Nmea2k::ValueGeneratorState* Arena::CreateMaybeMessage<::Nmea2k::ValueGeneratorState>(Arena*);
template<> ::Nmea2k::ValueHVACOperatingMode* Arena::CreateMaybeMessage<::Nmea2k::ValueHVACOperatingMode>(Arena*);
template<> ::Nmea2k::ValueInverterChargerEnabled* Arena::CreateMaybeMessage<::Nmea2k::ValueInverterChargerEnabled>(Arena*);
template<> ::Nmea2k::ValueInverterState* Arena::CreateMaybeMessage<::Nmea2k::ValueInverterState>(Arena*);
template<> ::Nmea2k::ValueS32* Arena::CreateMaybeMessage<::Nmea2k::ValueS32>(Arena*);
template<> ::Nmea2k::ValueSourceAvailable* Arena::CreateMaybeMessage<::Nmea2k::ValueSourceAvailable>(Arena*);
template<> ::Nmea2k::ValueSystemOnState* Arena::CreateMaybeMessage<::Nmea2k::ValueSystemOnState>(Arena*);
template<> ::Nmea2k::ValueTankType* Arena::CreateMaybeMessage<::Nmea2k::ValueTankType>(Arena*);
template<> ::Nmea2k::ValueTyreLimitStatus* Arena::CreateMaybeMessage<::Nmea2k::ValueTyreLimitStatus>(Arena*);
template<> ::Nmea2k::ValueTyreStatus* Arena::CreateMaybeMessage<::Nmea2k::ValueTyreStatus>(Arena*);
template<> ::Nmea2k::ValueU32* Arena::CreateMaybeMessage<::Nmea2k::ValueU32>(Arena*);
template<> ::Nmea2k::ZipdeeAwning* Arena::CreateMaybeMessage<::Nmea2k::ZipdeeAwning>(Arena*);
template<> ::Nmea2k::ZipdeeAwningDevice* Arena::CreateMaybeMessage<::Nmea2k::ZipdeeAwningDevice>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace Nmea2k {

enum Geofence_eGnssConfidenceLevel {
  Geofence_eGnssConfidenceLevel_GNSS_CONFIDENCE_LEVEL_0 = 0,
  Geofence_eGnssConfidenceLevel_GNSS_CONFIDENCE_LEVEL_68 = 1,
  Geofence_eGnssConfidenceLevel_GNSS_CONFIDENCE_LEVEL_95 = 2,
  Geofence_eGnssConfidenceLevel_GNSS_CONFIDENCE_LEVEL_997 = 3,
  Geofence_eGnssConfidenceLevel_GNSS_CONFIDENCE_LEVEL_999 = 4,
  Geofence_eGnssConfidenceLevel_Geofence_eGnssConfidenceLevel_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  Geofence_eGnssConfidenceLevel_Geofence_eGnssConfidenceLevel_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool Geofence_eGnssConfidenceLevel_IsValid(int value);
const Geofence_eGnssConfidenceLevel Geofence_eGnssConfidenceLevel_eGnssConfidenceLevel_MIN = Geofence_eGnssConfidenceLevel_GNSS_CONFIDENCE_LEVEL_0;
const Geofence_eGnssConfidenceLevel Geofence_eGnssConfidenceLevel_eGnssConfidenceLevel_MAX = Geofence_eGnssConfidenceLevel_GNSS_CONFIDENCE_LEVEL_999;
const int Geofence_eGnssConfidenceLevel_eGnssConfidenceLevel_ARRAYSIZE = Geofence_eGnssConfidenceLevel_eGnssConfidenceLevel_MAX + 1;

const ::google::protobuf::EnumDescriptor* Geofence_eGnssConfidenceLevel_descriptor();
inline const ::std::string& Geofence_eGnssConfidenceLevel_Name(Geofence_eGnssConfidenceLevel value) {
  return ::google::protobuf::internal::NameOfEnum(
    Geofence_eGnssConfidenceLevel_descriptor(), value);
}
inline bool Geofence_eGnssConfidenceLevel_Parse(
    const ::std::string& name, Geofence_eGnssConfidenceLevel* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Geofence_eGnssConfidenceLevel>(
    Geofence_eGnssConfidenceLevel_descriptor(), name, value);
}
enum PsvConfiguration_eConfigType {
  PsvConfiguration_eConfigType_Gnss = 0,
  PsvConfiguration_eConfigType_PsvConfiguration_eConfigType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  PsvConfiguration_eConfigType_PsvConfiguration_eConfigType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool PsvConfiguration_eConfigType_IsValid(int value);
const PsvConfiguration_eConfigType PsvConfiguration_eConfigType_eConfigType_MIN = PsvConfiguration_eConfigType_Gnss;
const PsvConfiguration_eConfigType PsvConfiguration_eConfigType_eConfigType_MAX = PsvConfiguration_eConfigType_Gnss;
const int PsvConfiguration_eConfigType_eConfigType_ARRAYSIZE = PsvConfiguration_eConfigType_eConfigType_MAX + 1;

const ::google::protobuf::EnumDescriptor* PsvConfiguration_eConfigType_descriptor();
inline const ::std::string& PsvConfiguration_eConfigType_Name(PsvConfiguration_eConfigType value) {
  return ::google::protobuf::internal::NameOfEnum(
    PsvConfiguration_eConfigType_descriptor(), value);
}
inline bool PsvConfiguration_eConfigType_Parse(
    const ::std::string& name, PsvConfiguration_eConfigType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<PsvConfiguration_eConfigType>(
    PsvConfiguration_eConfigType_descriptor(), name, value);
}
enum FavoriteRequest_eActionType {
  FavoriteRequest_eActionType_NormalAction = 0,
  FavoriteRequest_eActionType_BoatAction = 1,
  FavoriteRequest_eActionType_ClearAction = 2,
  FavoriteRequest_eActionType_FavoriteRequest_eActionType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  FavoriteRequest_eActionType_FavoriteRequest_eActionType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool FavoriteRequest_eActionType_IsValid(int value);
const FavoriteRequest_eActionType FavoriteRequest_eActionType_eActionType_MIN = FavoriteRequest_eActionType_NormalAction;
const FavoriteRequest_eActionType FavoriteRequest_eActionType_eActionType_MAX = FavoriteRequest_eActionType_ClearAction;
const int FavoriteRequest_eActionType_eActionType_ARRAYSIZE = FavoriteRequest_eActionType_eActionType_MAX + 1;

const ::google::protobuf::EnumDescriptor* FavoriteRequest_eActionType_descriptor();
inline const ::std::string& FavoriteRequest_eActionType_Name(FavoriteRequest_eActionType value) {
  return ::google::protobuf::internal::NameOfEnum(
    FavoriteRequest_eActionType_descriptor(), value);
}
inline bool FavoriteRequest_eActionType_Parse(
    const ::std::string& name, FavoriteRequest_eActionType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<FavoriteRequest_eActionType>(
    FavoriteRequest_eActionType_descriptor(), name, value);
}
enum DataIndex_eIndexType {
  DataIndex_eIndexType_Normal = 0,
  DataIndex_eIndexType_Complex = 1,
  DataIndex_eIndexType_DataIndex_eIndexType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  DataIndex_eIndexType_DataIndex_eIndexType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool DataIndex_eIndexType_IsValid(int value);
const DataIndex_eIndexType DataIndex_eIndexType_eIndexType_MIN = DataIndex_eIndexType_Normal;
const DataIndex_eIndexType DataIndex_eIndexType_eIndexType_MAX = DataIndex_eIndexType_Complex;
const int DataIndex_eIndexType_eIndexType_ARRAYSIZE = DataIndex_eIndexType_eIndexType_MAX + 1;

const ::google::protobuf::EnumDescriptor* DataIndex_eIndexType_descriptor();
inline const ::std::string& DataIndex_eIndexType_Name(DataIndex_eIndexType value) {
  return ::google::protobuf::internal::NameOfEnum(
    DataIndex_eIndexType_descriptor(), value);
}
inline bool DataIndex_eIndexType_Parse(
    const ::std::string& name, DataIndex_eIndexType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<DataIndex_eIndexType>(
    DataIndex_eIndexType_descriptor(), name, value);
}
enum AlarmEvent_eActionType {
  AlarmEvent_eActionType_ActionAdded = 0,
  AlarmEvent_eActionType_ActionChanged = 1,
  AlarmEvent_eActionType_ActionRemoved = 2,
  AlarmEvent_eActionType_ActionActivated = 3,
  AlarmEvent_eActionType_ActionDeactivated = 4,
  AlarmEvent_eActionType_ActionErasePending = 5,
  AlarmEvent_eActionType_ActionLogUpdate = 6,
  AlarmEvent_eActionType_ActionNone = 7,
  AlarmEvent_eActionType_AlarmEvent_eActionType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  AlarmEvent_eActionType_AlarmEvent_eActionType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool AlarmEvent_eActionType_IsValid(int value);
const AlarmEvent_eActionType AlarmEvent_eActionType_eActionType_MIN = AlarmEvent_eActionType_ActionAdded;
const AlarmEvent_eActionType AlarmEvent_eActionType_eActionType_MAX = AlarmEvent_eActionType_ActionNone;
const int AlarmEvent_eActionType_eActionType_ARRAYSIZE = AlarmEvent_eActionType_eActionType_MAX + 1;

const ::google::protobuf::EnumDescriptor* AlarmEvent_eActionType_descriptor();
inline const ::std::string& AlarmEvent_eActionType_Name(AlarmEvent_eActionType value) {
  return ::google::protobuf::internal::NameOfEnum(
    AlarmEvent_eActionType_descriptor(), value);
}
inline bool AlarmEvent_eActionType_Parse(
    const ::std::string& name, AlarmEvent_eActionType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<AlarmEvent_eActionType>(
    AlarmEvent_eActionType_descriptor(), name, value);
}
enum AlarmRequest_eAlarmStringType {
  AlarmRequest_eAlarmStringType_AlarmName = 0,
  AlarmRequest_eAlarmStringType_ChannelName = 1,
  AlarmRequest_eAlarmStringType_DeviceName = 2,
  AlarmRequest_eAlarmStringType_Title = 3,
  AlarmRequest_eAlarmStringType_Description = 4,
  AlarmRequest_eAlarmStringType_LogName = 5,
  AlarmRequest_eAlarmStringType_LogChannelName = 6,
  AlarmRequest_eAlarmStringType_LogDeviceName = 7,
  AlarmRequest_eAlarmStringType_LogTitle = 8,
  AlarmRequest_eAlarmStringType_LogDescription = 9,
  AlarmRequest_eAlarmStringType_DefaultDescription = 10,
  AlarmRequest_eAlarmStringType_GroupPolicyDescription = 11,
  AlarmRequest_eAlarmStringType_AlarmRequest_eAlarmStringType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  AlarmRequest_eAlarmStringType_AlarmRequest_eAlarmStringType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool AlarmRequest_eAlarmStringType_IsValid(int value);
const AlarmRequest_eAlarmStringType AlarmRequest_eAlarmStringType_eAlarmStringType_MIN = AlarmRequest_eAlarmStringType_AlarmName;
const AlarmRequest_eAlarmStringType AlarmRequest_eAlarmStringType_eAlarmStringType_MAX = AlarmRequest_eAlarmStringType_GroupPolicyDescription;
const int AlarmRequest_eAlarmStringType_eAlarmStringType_ARRAYSIZE = AlarmRequest_eAlarmStringType_eAlarmStringType_MAX + 1;

const ::google::protobuf::EnumDescriptor* AlarmRequest_eAlarmStringType_descriptor();
inline const ::std::string& AlarmRequest_eAlarmStringType_Name(AlarmRequest_eAlarmStringType value) {
  return ::google::protobuf::internal::NameOfEnum(
    AlarmRequest_eAlarmStringType_descriptor(), value);
}
inline bool AlarmRequest_eAlarmStringType_Parse(
    const ::std::string& name, AlarmRequest_eAlarmStringType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<AlarmRequest_eAlarmStringType>(
    AlarmRequest_eAlarmStringType_descriptor(), name, value);
}
enum CategoryRequest_eCategoryType {
  CategoryRequest_eCategoryType_CategoriesAll = 0,
  CategoryRequest_eCategoryType_CategoryRequest_eCategoryType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  CategoryRequest_eCategoryType_CategoryRequest_eCategoryType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool CategoryRequest_eCategoryType_IsValid(int value);
const CategoryRequest_eCategoryType CategoryRequest_eCategoryType_eCategoryType_MIN = CategoryRequest_eCategoryType_CategoriesAll;
const CategoryRequest_eCategoryType CategoryRequest_eCategoryType_eCategoryType_MAX = CategoryRequest_eCategoryType_CategoriesAll;
const int CategoryRequest_eCategoryType_eCategoryType_ARRAYSIZE = CategoryRequest_eCategoryType_eCategoryType_MAX + 1;

const ::google::protobuf::EnumDescriptor* CategoryRequest_eCategoryType_descriptor();
inline const ::std::string& CategoryRequest_eCategoryType_Name(CategoryRequest_eCategoryType value) {
  return ::google::protobuf::internal::NameOfEnum(
    CategoryRequest_eCategoryType_descriptor(), value);
}
inline bool CategoryRequest_eCategoryType_Parse(
    const ::std::string& name, CategoryRequest_eCategoryType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<CategoryRequest_eCategoryType>(
    CategoryRequest_eCategoryType_descriptor(), name, value);
}
enum FileRequest_eResourceType {
  FileRequest_eResourceType_Touch7 = 0,
  FileRequest_eResourceType_Touch10 = 1,
  FileRequest_eResourceType_Phone = 2,
  FileRequest_eResourceType_FileRequest_eResourceType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  FileRequest_eResourceType_FileRequest_eResourceType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool FileRequest_eResourceType_IsValid(int value);
const FileRequest_eResourceType FileRequest_eResourceType_eResourceType_MIN = FileRequest_eResourceType_Touch7;
const FileRequest_eResourceType FileRequest_eResourceType_eResourceType_MAX = FileRequest_eResourceType_Phone;
const int FileRequest_eResourceType_eResourceType_ARRAYSIZE = FileRequest_eResourceType_eResourceType_MAX + 1;

const ::google::protobuf::EnumDescriptor* FileRequest_eResourceType_descriptor();
inline const ::std::string& FileRequest_eResourceType_Name(FileRequest_eResourceType value) {
  return ::google::protobuf::internal::NameOfEnum(
    FileRequest_eResourceType_descriptor(), value);
}
inline bool FileRequest_eResourceType_Parse(
    const ::std::string& name, FileRequest_eResourceType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<FileRequest_eResourceType>(
    FileRequest_eResourceType_descriptor(), name, value);
}
enum FileRequest_eFileType {
  FileRequest_eFileType_DefaultZcf = 0,
  FileRequest_eFileType_FavouritesCfp = 1,
  FileRequest_eFileType_MinMaxLog = 2,
  FileRequest_eFileType_CircuitsLog = 3,
  FileRequest_eFileType_AlarmDescription = 4,
  FileRequest_eFileType_AlarmLog = 5,
  FileRequest_eFileType_AlarmCustomizedDescription = 6,
  FileRequest_eFileType_Resource = 7,
  FileRequest_eFileType_FileRequest_eFileType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  FileRequest_eFileType_FileRequest_eFileType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool FileRequest_eFileType_IsValid(int value);
const FileRequest_eFileType FileRequest_eFileType_eFileType_MIN = FileRequest_eFileType_DefaultZcf;
const FileRequest_eFileType FileRequest_eFileType_eFileType_MAX = FileRequest_eFileType_Resource;
const int FileRequest_eFileType_eFileType_ARRAYSIZE = FileRequest_eFileType_eFileType_MAX + 1;

const ::google::protobuf::EnumDescriptor* FileRequest_eFileType_descriptor();
inline const ::std::string& FileRequest_eFileType_Name(FileRequest_eFileType value) {
  return ::google::protobuf::internal::NameOfEnum(
    FileRequest_eFileType_descriptor(), value);
}
inline bool FileRequest_eFileType_Parse(
    const ::std::string& name, FileRequest_eFileType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<FileRequest_eFileType>(
    FileRequest_eFileType_descriptor(), name, value);
}
enum FileResult_eFileStatus {
  FileResult_eFileStatus_OK = 0,
  FileResult_eFileStatus_NoPermission = 1,
  FileResult_eFileStatus_NoSpace = 2,
  FileResult_eFileStatus_AccessError = 3,
  FileResult_eFileStatus_InputError = 4,
  FileResult_eFileStatus_FileResult_eFileStatus_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  FileResult_eFileStatus_FileResult_eFileStatus_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool FileResult_eFileStatus_IsValid(int value);
const FileResult_eFileStatus FileResult_eFileStatus_eFileStatus_MIN = FileResult_eFileStatus_OK;
const FileResult_eFileStatus FileResult_eFileStatus_eFileStatus_MAX = FileResult_eFileStatus_InputError;
const int FileResult_eFileStatus_eFileStatus_ARRAYSIZE = FileResult_eFileStatus_eFileStatus_MAX + 1;

const ::google::protobuf::EnumDescriptor* FileResult_eFileStatus_descriptor();
inline const ::std::string& FileResult_eFileStatus_Name(FileResult_eFileStatus value) {
  return ::google::protobuf::internal::NameOfEnum(
    FileResult_eFileStatus_descriptor(), value);
}
inline bool FileResult_eFileStatus_Parse(
    const ::std::string& name, FileResult_eFileStatus* value) {
  return ::google::protobuf::internal::ParseNamedEnum<FileResult_eFileStatus>(
    FileResult_eFileStatus_descriptor(), name, value);
}
enum Event_eEventType {
  Event_eEventType_ConfigChange = 0,
  Event_eEventType_AlarmAdded = 1,
  Event_eEventType_AlarmChanged = 2,
  Event_eEventType_AlarmRemoved = 3,
  Event_eEventType_AlarmActivated = 4,
  Event_eEventType_AlarmDeactivated = 5,
  Event_eEventType_AlarmLogUpdate = 6,
  Event_eEventType_AlarmGlobalStatus = 7,
  Event_eEventType_GNSSConfigChanged = 8,
  Event_eEventType_EngineConfigChanged = 9,
  Event_eEventType_CZoneRaw = 10,
  Event_eEventType_SystemLowPowerMode = 11,
  Event_eEventType_SystemHostActive = 12,
  Event_eEventType_Event_eEventType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  Event_eEventType_Event_eEventType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool Event_eEventType_IsValid(int value);
const Event_eEventType Event_eEventType_eEventType_MIN = Event_eEventType_ConfigChange;
const Event_eEventType Event_eEventType_eEventType_MAX = Event_eEventType_SystemHostActive;
const int Event_eEventType_eEventType_ARRAYSIZE = Event_eEventType_eEventType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Event_eEventType_descriptor();
inline const ::std::string& Event_eEventType_Name(Event_eEventType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Event_eEventType_descriptor(), value);
}
inline bool Event_eEventType_Parse(
    const ::std::string& name, Event_eEventType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Event_eEventType>(
    Event_eEventType_descriptor(), name, value);
}
enum SettingRequest_eSettingType {
  SettingRequest_eSettingType_Config = 0,
  SettingRequest_eSettingType_Dipswitch = 1,
  SettingRequest_eSettingType_DepthOffset = 2,
  SettingRequest_eSettingType_MagneticVariation = 3,
  SettingRequest_eSettingType_TimeOffset = 4,
  SettingRequest_eSettingType_Global = 5,
  SettingRequest_eSettingType_DateTime = 6,
  SettingRequest_eSettingType_BacklightLevel = 7,
  SettingRequest_eSettingType_BatteryFull = 8,
  SettingRequest_eSettingType_AlarmGlobal = 9,
  SettingRequest_eSettingType_FactoryData = 10,
  SettingRequest_eSettingType_SettingRequest_eSettingType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  SettingRequest_eSettingType_SettingRequest_eSettingType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool SettingRequest_eSettingType_IsValid(int value);
const SettingRequest_eSettingType SettingRequest_eSettingType_eSettingType_MIN = SettingRequest_eSettingType_Config;
const SettingRequest_eSettingType SettingRequest_eSettingType_eSettingType_MAX = SettingRequest_eSettingType_FactoryData;
const int SettingRequest_eSettingType_eSettingType_ARRAYSIZE = SettingRequest_eSettingType_eSettingType_MAX + 1;

const ::google::protobuf::EnumDescriptor* SettingRequest_eSettingType_descriptor();
inline const ::std::string& SettingRequest_eSettingType_Name(SettingRequest_eSettingType value) {
  return ::google::protobuf::internal::NameOfEnum(
    SettingRequest_eSettingType_descriptor(), value);
}
inline bool SettingRequest_eSettingType_Parse(
    const ::std::string& name, SettingRequest_eSettingType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<SettingRequest_eSettingType>(
    SettingRequest_eSettingType_descriptor(), name, value);
}
enum OperationRequest_eOperationType {
  OperationRequest_eOperationType_ReadConfig = 0,
  OperationRequest_eOperationType_WriteConfig = 1,
  OperationRequest_eOperationType_SettingsFactoryReset = 2,
  OperationRequest_eOperationType_CZoneRaw = 3,
  OperationRequest_eOperationType_SnapshotUpdate = 4,
  OperationRequest_eOperationType_OperationRequest_eOperationType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  OperationRequest_eOperationType_OperationRequest_eOperationType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool OperationRequest_eOperationType_IsValid(int value);
const OperationRequest_eOperationType OperationRequest_eOperationType_eOperationType_MIN = OperationRequest_eOperationType_ReadConfig;
const OperationRequest_eOperationType OperationRequest_eOperationType_eOperationType_MAX = OperationRequest_eOperationType_SnapshotUpdate;
const int OperationRequest_eOperationType_eOperationType_ARRAYSIZE = OperationRequest_eOperationType_eOperationType_MAX + 1;

const ::google::protobuf::EnumDescriptor* OperationRequest_eOperationType_descriptor();
inline const ::std::string& OperationRequest_eOperationType_Name(OperationRequest_eOperationType value) {
  return ::google::protobuf::internal::NameOfEnum(
    OperationRequest_eOperationType_descriptor(), value);
}
inline bool OperationRequest_eOperationType_Parse(
    const ::std::string& name, OperationRequest_eOperationType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<OperationRequest_eOperationType>(
    OperationRequest_eOperationType_descriptor(), name, value);
}
enum ConfigRequest_eConfigType {
  ConfigRequest_eConfigType_Alarms = 0,
  ConfigRequest_eConfigType_Control = 1,
  ConfigRequest_eConfigType_AC = 2,
  ConfigRequest_eConfigType_DC = 3,
  ConfigRequest_eConfigType_Tank = 4,
  ConfigRequest_eConfigType_Temperature = 5,
  ConfigRequest_eConfigType_Pressure = 6,
  ConfigRequest_eConfigType_ACMain = 7,
  ConfigRequest_eConfigType_InverterCharger = 8,
  ConfigRequest_eConfigType_Device = 12,
  ConfigRequest_eConfigType_Mode = 17,
  ConfigRequest_eConfigType_Circuit = 18,
  ConfigRequest_eConfigType_ScreenConfigPageImageItem = 21,
  ConfigRequest_eConfigType_ScreenConfigPageImage = 22,
  ConfigRequest_eConfigType_ScreenConfigPageGridItem = 23,
  ConfigRequest_eConfigType_ScreenConfigPage = 24,
  ConfigRequest_eConfigType_ScreenConfigMode = 25,
  ConfigRequest_eConfigType_ScreenConfig = 26,
  ConfigRequest_eConfigType_HVAC = 27,
  ConfigRequest_eConfigType_ThirdPartyGenerator = 28,
  ConfigRequest_eConfigType_ZipdeeAwning = 29,
  ConfigRequest_eConfigType_FantasticFan = 30,
  ConfigRequest_eConfigType_ShoreFuse = 32,
  ConfigRequest_eConfigType_TyrePressure = 33,
  ConfigRequest_eConfigType_AudioStereo = 37,
  ConfigRequest_eConfigType_CircuitLoads = 38,
  ConfigRequest_eConfigType_Categories = 39,
  ConfigRequest_eConfigType_Engines = 41,
  ConfigRequest_eConfigType_GNSS = 42,
  ConfigRequest_eConfigType_FavouritesMode = 64,
  ConfigRequest_eConfigType_FavouritesControl = 65,
  ConfigRequest_eConfigType_FavouritesMonitoring = 66,
  ConfigRequest_eConfigType_FavouritesAlarm = 67,
  ConfigRequest_eConfigType_FavouritesACMain = 68,
  ConfigRequest_eConfigType_FavouritesInverterCharger = 69,
  ConfigRequest_eConfigType_FavouritesBoatView = 70,
  ConfigRequest_eConfigType_UiRelationships = 71,
  ConfigRequest_eConfigType_BinaryLogicStates = 72,
  ConfigRequest_eConfigType_CZoneRaw = 90,
  ConfigRequest_eConfigType_RTCoreMap = 91,
  ConfigRequest_eConfigType_SwitchPositiveNegtive = 92,
  ConfigRequest_eConfigType_NonVisibleCircuit = 93,
  ConfigRequest_eConfigType_ConfigRequest_eConfigType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  ConfigRequest_eConfigType_ConfigRequest_eConfigType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool ConfigRequest_eConfigType_IsValid(int value);
const ConfigRequest_eConfigType ConfigRequest_eConfigType_eConfigType_MIN = ConfigRequest_eConfigType_Alarms;
const ConfigRequest_eConfigType ConfigRequest_eConfigType_eConfigType_MAX = ConfigRequest_eConfigType_NonVisibleCircuit;
const int ConfigRequest_eConfigType_eConfigType_ARRAYSIZE = ConfigRequest_eConfigType_eConfigType_MAX + 1;

const ::google::protobuf::EnumDescriptor* ConfigRequest_eConfigType_descriptor();
inline const ::std::string& ConfigRequest_eConfigType_Name(ConfigRequest_eConfigType value) {
  return ::google::protobuf::internal::NameOfEnum(
    ConfigRequest_eConfigType_descriptor(), value);
}
inline bool ConfigRequest_eConfigType_Parse(
    const ::std::string& name, ConfigRequest_eConfigType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ConfigRequest_eConfigType>(
    ConfigRequest_eConfigType_descriptor(), name, value);
}
enum Alarm_eAlarmType {
  Alarm_eAlarmType_External = 0,
  Alarm_eAlarmType_DipswitchConflict = 1,
  Alarm_eAlarmType_TypeDeviceConflict = 2,
  Alarm_eAlarmType_TypeDeviceMissing = 3,
  Alarm_eAlarmType_TypeConfigConflict = 4,
  Alarm_eAlarmType_TypeSleepWarning = 5,
  Alarm_eAlarmType_TypeNone = 6,
  Alarm_eAlarmType_Alarm_eAlarmType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  Alarm_eAlarmType_Alarm_eAlarmType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool Alarm_eAlarmType_IsValid(int value);
const Alarm_eAlarmType Alarm_eAlarmType_eAlarmType_MIN = Alarm_eAlarmType_External;
const Alarm_eAlarmType Alarm_eAlarmType_eAlarmType_MAX = Alarm_eAlarmType_TypeNone;
const int Alarm_eAlarmType_eAlarmType_ARRAYSIZE = Alarm_eAlarmType_eAlarmType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Alarm_eAlarmType_descriptor();
inline const ::std::string& Alarm_eAlarmType_Name(Alarm_eAlarmType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Alarm_eAlarmType_descriptor(), value);
}
inline bool Alarm_eAlarmType_Parse(
    const ::std::string& name, Alarm_eAlarmType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Alarm_eAlarmType>(
    Alarm_eAlarmType_descriptor(), name, value);
}
enum Alarm_eSeverityType {
  Alarm_eSeverityType_SeverityCritical = 0,
  Alarm_eSeverityType_SeverityImportant = 1,
  Alarm_eSeverityType_SeverityStandard = 2,
  Alarm_eSeverityType_SeverityWarning = 3,
  Alarm_eSeverityType_SeveritySIO = 4,
  Alarm_eSeverityType_SeverityNone = 5,
  Alarm_eSeverityType_Alarm_eSeverityType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  Alarm_eSeverityType_Alarm_eSeverityType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool Alarm_eSeverityType_IsValid(int value);
const Alarm_eSeverityType Alarm_eSeverityType_eSeverityType_MIN = Alarm_eSeverityType_SeverityCritical;
const Alarm_eSeverityType Alarm_eSeverityType_eSeverityType_MAX = Alarm_eSeverityType_SeverityNone;
const int Alarm_eSeverityType_eSeverityType_ARRAYSIZE = Alarm_eSeverityType_eSeverityType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Alarm_eSeverityType_descriptor();
inline const ::std::string& Alarm_eSeverityType_Name(Alarm_eSeverityType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Alarm_eSeverityType_descriptor(), value);
}
inline bool Alarm_eSeverityType_Parse(
    const ::std::string& name, Alarm_eSeverityType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Alarm_eSeverityType>(
    Alarm_eSeverityType_descriptor(), name, value);
}
enum Alarm_eStateType {
  Alarm_eStateType_StateDisabled = 0,
  Alarm_eStateType_StateEnabled = 1,
  Alarm_eStateType_StateAcknowledged = 2,
  Alarm_eStateType_Alarm_eStateType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  Alarm_eStateType_Alarm_eStateType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool Alarm_eStateType_IsValid(int value);
const Alarm_eStateType Alarm_eStateType_eStateType_MIN = Alarm_eStateType_StateDisabled;
const Alarm_eStateType Alarm_eStateType_eStateType_MAX = Alarm_eStateType_StateAcknowledged;
const int Alarm_eStateType_eStateType_ARRAYSIZE = Alarm_eStateType_eStateType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Alarm_eStateType_descriptor();
inline const ::std::string& Alarm_eStateType_Name(Alarm_eStateType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Alarm_eStateType_descriptor(), value);
}
inline bool Alarm_eStateType_Parse(
    const ::std::string& name, Alarm_eStateType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Alarm_eStateType>(
    Alarm_eStateType_descriptor(), name, value);
}
enum Device_eDeviceType {
  Device_eDeviceType_None = 0,
  Device_eDeviceType_OutputInterface = 15,
  Device_eDeviceType_MeterInterface = 14,
  Device_eDeviceType_SignalInterface = 13,
  Device_eDeviceType_MotorControlInterface = 12,
  Device_eDeviceType_SwitchInterface = 11,
  Device_eDeviceType_ACOutputInterface = 10,
  Device_eDeviceType_ACMainsInterface = 9,
  Device_eDeviceType_MasterbusInterface = 8,
  Device_eDeviceType_Contact6 = 7,
  Device_eDeviceType_SwitchPad = 3,
  Device_eDeviceType_WirelessInterface = 17,
  Device_eDeviceType_DisplayInterface = 16,
  Device_eDeviceType_SmartBatteryHub = 27,
  Device_eDeviceType_Control1 = 28,
  Device_eDeviceType_Keypad = 29,
  Device_eDeviceType_Contact6Plus = 30,
  Device_eDeviceType_CombinationOutputInterface = 31,
  Device_eDeviceType_M2VSM = 32,
  Device_eDeviceType_CZoneDDS = 33,
  Device_eDeviceType_RV1 = 48,
  Device_eDeviceType_ControlX = 54,
  Device_eDeviceType_Europa = 64,
  Device_eDeviceType_Shunt = 128,
  Device_eDeviceType_Charger = 129,
  Device_eDeviceType_InverterCharger = 130,
  Device_eDeviceType_Battery = 131,
  Device_eDeviceType_Device_eDeviceType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  Device_eDeviceType_Device_eDeviceType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool Device_eDeviceType_IsValid(int value);
const Device_eDeviceType Device_eDeviceType_eDeviceType_MIN = Device_eDeviceType_None;
const Device_eDeviceType Device_eDeviceType_eDeviceType_MAX = Device_eDeviceType_Battery;
const int Device_eDeviceType_eDeviceType_ARRAYSIZE = Device_eDeviceType_eDeviceType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Device_eDeviceType_descriptor();
inline const ::std::string& Device_eDeviceType_Name(Device_eDeviceType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Device_eDeviceType_descriptor(), value);
}
inline bool Device_eDeviceType_Parse(
    const ::std::string& name, Device_eDeviceType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Device_eDeviceType>(
    Device_eDeviceType_descriptor(), name, value);
}
enum UiRelationshipMsg_eItemType {
  UiRelationshipMsg_eItemType_None = 0,
  UiRelationshipMsg_eItemType_FluidLevel = 1,
  UiRelationshipMsg_eItemType_Pressure = 2,
  UiRelationshipMsg_eItemType_Temperature = 3,
  UiRelationshipMsg_eItemType_DcMeter = 4,
  UiRelationshipMsg_eItemType_AcMeter = 5,
  UiRelationshipMsg_eItemType_BinaryLogicState = 6,
  UiRelationshipMsg_eItemType_Circuit = 7,
  UiRelationshipMsg_eItemType_Category = 8,
  UiRelationshipMsg_eItemType_InverterCharger = 9,
  UiRelationshipMsg_eItemType_UiRelationshipMsg_eItemType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  UiRelationshipMsg_eItemType_UiRelationshipMsg_eItemType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool UiRelationshipMsg_eItemType_IsValid(int value);
const UiRelationshipMsg_eItemType UiRelationshipMsg_eItemType_eItemType_MIN = UiRelationshipMsg_eItemType_None;
const UiRelationshipMsg_eItemType UiRelationshipMsg_eItemType_eItemType_MAX = UiRelationshipMsg_eItemType_InverterCharger;
const int UiRelationshipMsg_eItemType_eItemType_ARRAYSIZE = UiRelationshipMsg_eItemType_eItemType_MAX + 1;

const ::google::protobuf::EnumDescriptor* UiRelationshipMsg_eItemType_descriptor();
inline const ::std::string& UiRelationshipMsg_eItemType_Name(UiRelationshipMsg_eItemType value) {
  return ::google::protobuf::internal::NameOfEnum(
    UiRelationshipMsg_eItemType_descriptor(), value);
}
inline bool UiRelationshipMsg_eItemType_Parse(
    const ::std::string& name, UiRelationshipMsg_eItemType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<UiRelationshipMsg_eItemType>(
    UiRelationshipMsg_eItemType_descriptor(), name, value);
}
enum UiRelationshipMsg_eRelationshipType {
  UiRelationshipMsg_eRelationshipType_Normal = 0,
  UiRelationshipMsg_eRelationshipType_Duplicates = 1,
  UiRelationshipMsg_eRelationshipType_UiRelationshipMsg_eRelationshipType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  UiRelationshipMsg_eRelationshipType_UiRelationshipMsg_eRelationshipType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool UiRelationshipMsg_eRelationshipType_IsValid(int value);
const UiRelationshipMsg_eRelationshipType UiRelationshipMsg_eRelationshipType_eRelationshipType_MIN = UiRelationshipMsg_eRelationshipType_Normal;
const UiRelationshipMsg_eRelationshipType UiRelationshipMsg_eRelationshipType_eRelationshipType_MAX = UiRelationshipMsg_eRelationshipType_Duplicates;
const int UiRelationshipMsg_eRelationshipType_eRelationshipType_ARRAYSIZE = UiRelationshipMsg_eRelationshipType_eRelationshipType_MAX + 1;

const ::google::protobuf::EnumDescriptor* UiRelationshipMsg_eRelationshipType_descriptor();
inline const ::std::string& UiRelationshipMsg_eRelationshipType_Name(UiRelationshipMsg_eRelationshipType value) {
  return ::google::protobuf::internal::NameOfEnum(
    UiRelationshipMsg_eRelationshipType_descriptor(), value);
}
inline bool UiRelationshipMsg_eRelationshipType_Parse(
    const ::std::string& name, UiRelationshipMsg_eRelationshipType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<UiRelationshipMsg_eRelationshipType>(
    UiRelationshipMsg_eRelationshipType_descriptor(), name, value);
}
enum MeteringDevice_eDCType {
  MeteringDevice_eDCType_Battery = 0,
  MeteringDevice_eDCType_Alternator = 1,
  MeteringDevice_eDCType_Converter = 2,
  MeteringDevice_eDCType_Solar = 3,
  MeteringDevice_eDCType_Wind = 4,
  MeteringDevice_eDCType_Other = 5,
  MeteringDevice_eDCType_MeteringDevice_eDCType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  MeteringDevice_eDCType_MeteringDevice_eDCType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool MeteringDevice_eDCType_IsValid(int value);
const MeteringDevice_eDCType MeteringDevice_eDCType_eDCType_MIN = MeteringDevice_eDCType_Battery;
const MeteringDevice_eDCType MeteringDevice_eDCType_eDCType_MAX = MeteringDevice_eDCType_Other;
const int MeteringDevice_eDCType_eDCType_ARRAYSIZE = MeteringDevice_eDCType_eDCType_MAX + 1;

const ::google::protobuf::EnumDescriptor* MeteringDevice_eDCType_descriptor();
inline const ::std::string& MeteringDevice_eDCType_Name(MeteringDevice_eDCType value) {
  return ::google::protobuf::internal::NameOfEnum(
    MeteringDevice_eDCType_descriptor(), value);
}
inline bool MeteringDevice_eDCType_Parse(
    const ::std::string& name, MeteringDevice_eDCType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<MeteringDevice_eDCType>(
    MeteringDevice_eDCType_descriptor(), name, value);
}
enum MeteringDevice_eACLine {
  MeteringDevice_eACLine_Line1 = 0,
  MeteringDevice_eACLine_Line2 = 1,
  MeteringDevice_eACLine_Line3 = 2,
  MeteringDevice_eACLine_MeteringDevice_eACLine_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  MeteringDevice_eACLine_MeteringDevice_eACLine_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool MeteringDevice_eACLine_IsValid(int value);
const MeteringDevice_eACLine MeteringDevice_eACLine_eACLine_MIN = MeteringDevice_eACLine_Line1;
const MeteringDevice_eACLine MeteringDevice_eACLine_eACLine_MAX = MeteringDevice_eACLine_Line3;
const int MeteringDevice_eACLine_eACLine_ARRAYSIZE = MeteringDevice_eACLine_eACLine_MAX + 1;

const ::google::protobuf::EnumDescriptor* MeteringDevice_eACLine_descriptor();
inline const ::std::string& MeteringDevice_eACLine_Name(MeteringDevice_eACLine value) {
  return ::google::protobuf::internal::NameOfEnum(
    MeteringDevice_eACLine_descriptor(), value);
}
inline bool MeteringDevice_eACLine_Parse(
    const ::std::string& name, MeteringDevice_eACLine* value) {
  return ::google::protobuf::internal::ParseNamedEnum<MeteringDevice_eACLine>(
    MeteringDevice_eACLine_descriptor(), name, value);
}
enum MeteringDevice_eACType {
  MeteringDevice_eACType_Unknown = 0,
  MeteringDevice_eACType_Generator = 1,
  MeteringDevice_eACType_ShorePower = 2,
  MeteringDevice_eACType_Inverter = 3,
  MeteringDevice_eACType_Parallel = 4,
  MeteringDevice_eACType_Charger = 5,
  MeteringDevice_eACType_Outlet = 6,
  MeteringDevice_eACType_MeteringDevice_eACType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  MeteringDevice_eACType_MeteringDevice_eACType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool MeteringDevice_eACType_IsValid(int value);
const MeteringDevice_eACType MeteringDevice_eACType_eACType_MIN = MeteringDevice_eACType_Unknown;
const MeteringDevice_eACType MeteringDevice_eACType_eACType_MAX = MeteringDevice_eACType_Outlet;
const int MeteringDevice_eACType_eACType_ARRAYSIZE = MeteringDevice_eACType_eACType_MAX + 1;

const ::google::protobuf::EnumDescriptor* MeteringDevice_eACType_descriptor();
inline const ::std::string& MeteringDevice_eACType_Name(MeteringDevice_eACType value) {
  return ::google::protobuf::internal::NameOfEnum(
    MeteringDevice_eACType_descriptor(), value);
}
inline bool MeteringDevice_eACType_Parse(
    const ::std::string& name, MeteringDevice_eACType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<MeteringDevice_eACType>(
    MeteringDevice_eACType_descriptor(), name, value);
}
enum MonitoringType_eTankType {
  MonitoringType_eTankType_Fuel = 0,
  MonitoringType_eTankType_FreshWater = 1,
  MonitoringType_eTankType_WasteWater = 2,
  MonitoringType_eTankType_LiveWell = 3,
  MonitoringType_eTankType_Oil = 4,
  MonitoringType_eTankType_BlackWater = 5,
  MonitoringType_eTankType_MonitoringType_eTankType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  MonitoringType_eTankType_MonitoringType_eTankType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool MonitoringType_eTankType_IsValid(int value);
const MonitoringType_eTankType MonitoringType_eTankType_eTankType_MIN = MonitoringType_eTankType_Fuel;
const MonitoringType_eTankType MonitoringType_eTankType_eTankType_MAX = MonitoringType_eTankType_BlackWater;
const int MonitoringType_eTankType_eTankType_ARRAYSIZE = MonitoringType_eTankType_eTankType_MAX + 1;

const ::google::protobuf::EnumDescriptor* MonitoringType_eTankType_descriptor();
inline const ::std::string& MonitoringType_eTankType_Name(MonitoringType_eTankType value) {
  return ::google::protobuf::internal::NameOfEnum(
    MonitoringType_eTankType_descriptor(), value);
}
inline bool MonitoringType_eTankType_Parse(
    const ::std::string& name, MonitoringType_eTankType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<MonitoringType_eTankType>(
    MonitoringType_eTankType_descriptor(), name, value);
}
enum MonitoringType_ePressureType {
  MonitoringType_ePressureType_Atmospheric = 0,
  MonitoringType_ePressureType_Water = 1,
  MonitoringType_ePressureType_Steam = 2,
  MonitoringType_ePressureType_CompressedAir = 3,
  MonitoringType_ePressureType_Hydraulic = 4,
  MonitoringType_ePressureType_MonitoringType_ePressureType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  MonitoringType_ePressureType_MonitoringType_ePressureType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool MonitoringType_ePressureType_IsValid(int value);
const MonitoringType_ePressureType MonitoringType_ePressureType_ePressureType_MIN = MonitoringType_ePressureType_Atmospheric;
const MonitoringType_ePressureType MonitoringType_ePressureType_ePressureType_MAX = MonitoringType_ePressureType_Hydraulic;
const int MonitoringType_ePressureType_ePressureType_ARRAYSIZE = MonitoringType_ePressureType_ePressureType_MAX + 1;

const ::google::protobuf::EnumDescriptor* MonitoringType_ePressureType_descriptor();
inline const ::std::string& MonitoringType_ePressureType_Name(MonitoringType_ePressureType value) {
  return ::google::protobuf::internal::NameOfEnum(
    MonitoringType_ePressureType_descriptor(), value);
}
inline bool MonitoringType_ePressureType_Parse(
    const ::std::string& name, MonitoringType_ePressureType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<MonitoringType_ePressureType>(
    MonitoringType_ePressureType_descriptor(), name, value);
}
enum MonitoringType_eTemperatureType {
  MonitoringType_eTemperatureType_Sea = 0,
  MonitoringType_eTemperatureType_Outside = 1,
  MonitoringType_eTemperatureType_Inside = 2,
  MonitoringType_eTemperatureType_EngineRoom = 3,
  MonitoringType_eTemperatureType_MainCabin = 4,
  MonitoringType_eTemperatureType_LiveWell1 = 5,
  MonitoringType_eTemperatureType_BaitWell = 6,
  MonitoringType_eTemperatureType_Refrigeration = 7,
  MonitoringType_eTemperatureType_HeatingSystem = 8,
  MonitoringType_eTemperatureType_DewPoint = 9,
  MonitoringType_eTemperatureType_WindChillApparent = 10,
  MonitoringType_eTemperatureType_WindChillTheoretical = 11,
  MonitoringType_eTemperatureType_HeadIndex = 12,
  MonitoringType_eTemperatureType_Freezer = 13,
  MonitoringType_eTemperatureType_ExhaustGas = 14,
  MonitoringType_eTemperatureType_MonitoringType_eTemperatureType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  MonitoringType_eTemperatureType_MonitoringType_eTemperatureType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool MonitoringType_eTemperatureType_IsValid(int value);
const MonitoringType_eTemperatureType MonitoringType_eTemperatureType_eTemperatureType_MIN = MonitoringType_eTemperatureType_Sea;
const MonitoringType_eTemperatureType MonitoringType_eTemperatureType_eTemperatureType_MAX = MonitoringType_eTemperatureType_ExhaustGas;
const int MonitoringType_eTemperatureType_eTemperatureType_ARRAYSIZE = MonitoringType_eTemperatureType_eTemperatureType_MAX + 1;

const ::google::protobuf::EnumDescriptor* MonitoringType_eTemperatureType_descriptor();
inline const ::std::string& MonitoringType_eTemperatureType_Name(MonitoringType_eTemperatureType value) {
  return ::google::protobuf::internal::NameOfEnum(
    MonitoringType_eTemperatureType_descriptor(), value);
}
inline bool MonitoringType_eTemperatureType_Parse(
    const ::std::string& name, MonitoringType_eTemperatureType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<MonitoringType_eTemperatureType>(
    MonitoringType_eTemperatureType_descriptor(), name, value);
}
enum ACMainContactorDevice_eACInputType {
  ACMainContactorDevice_eACInputType_ShipPower = 0,
  ACMainContactorDevice_eACInputType_ShorePower = 1,
  ACMainContactorDevice_eACInputType_Inverter = 2,
  ACMainContactorDevice_eACInputType_Parallel = 3,
  ACMainContactorDevice_eACInputType_ACMainContactorDevice_eACInputType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  ACMainContactorDevice_eACInputType_ACMainContactorDevice_eACInputType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool ACMainContactorDevice_eACInputType_IsValid(int value);
const ACMainContactorDevice_eACInputType ACMainContactorDevice_eACInputType_eACInputType_MIN = ACMainContactorDevice_eACInputType_ShipPower;
const ACMainContactorDevice_eACInputType ACMainContactorDevice_eACInputType_eACInputType_MAX = ACMainContactorDevice_eACInputType_Parallel;
const int ACMainContactorDevice_eACInputType_eACInputType_ARRAYSIZE = ACMainContactorDevice_eACInputType_eACInputType_MAX + 1;

const ::google::protobuf::EnumDescriptor* ACMainContactorDevice_eACInputType_descriptor();
inline const ::std::string& ACMainContactorDevice_eACInputType_Name(ACMainContactorDevice_eACInputType value) {
  return ::google::protobuf::internal::NameOfEnum(
    ACMainContactorDevice_eACInputType_descriptor(), value);
}
inline bool ACMainContactorDevice_eACInputType_Parse(
    const ::std::string& name, ACMainContactorDevice_eACInputType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ACMainContactorDevice_eACInputType>(
    ACMainContactorDevice_eACInputType_descriptor(), name, value);
}
enum CircuitLoad_eControlType {
  CircuitLoad_eControlType_SetOutput = 0,
  CircuitLoad_eControlType_LimitOneDirection = 1,
  CircuitLoad_eControlType_LimitBothDirections = 2,
  CircuitLoad_eControlType_SetAndLimit = 3,
  CircuitLoad_eControlType_CircuitLoad_eControlType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  CircuitLoad_eControlType_CircuitLoad_eControlType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool CircuitLoad_eControlType_IsValid(int value);
const CircuitLoad_eControlType CircuitLoad_eControlType_eControlType_MIN = CircuitLoad_eControlType_SetOutput;
const CircuitLoad_eControlType CircuitLoad_eControlType_eControlType_MAX = CircuitLoad_eControlType_SetAndLimit;
const int CircuitLoad_eControlType_eControlType_ARRAYSIZE = CircuitLoad_eControlType_eControlType_MAX + 1;

const ::google::protobuf::EnumDescriptor* CircuitLoad_eControlType_descriptor();
inline const ::std::string& CircuitLoad_eControlType_Name(CircuitLoad_eControlType value) {
  return ::google::protobuf::internal::NameOfEnum(
    CircuitLoad_eControlType_descriptor(), value);
}
inline bool CircuitLoad_eControlType_Parse(
    const ::std::string& name, CircuitLoad_eControlType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<CircuitLoad_eControlType>(
    CircuitLoad_eControlType_descriptor(), name, value);
}
enum CircuitDevice_eConfirmType {
  CircuitDevice_eConfirmType_ConfirmNone = 0,
  CircuitDevice_eConfirmType_ConfirmOn = 1,
  CircuitDevice_eConfirmType_ConfirmOff = 2,
  CircuitDevice_eConfirmType_ConfirmOnOff = 3,
  CircuitDevice_eConfirmType_CircuitDevice_eConfirmType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  CircuitDevice_eConfirmType_CircuitDevice_eConfirmType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool CircuitDevice_eConfirmType_IsValid(int value);
const CircuitDevice_eConfirmType CircuitDevice_eConfirmType_eConfirmType_MIN = CircuitDevice_eConfirmType_ConfirmNone;
const CircuitDevice_eConfirmType CircuitDevice_eConfirmType_eConfirmType_MAX = CircuitDevice_eConfirmType_ConfirmOnOff;
const int CircuitDevice_eConfirmType_eConfirmType_ARRAYSIZE = CircuitDevice_eConfirmType_eConfirmType_MAX + 1;

const ::google::protobuf::EnumDescriptor* CircuitDevice_eConfirmType_descriptor();
inline const ::std::string& CircuitDevice_eConfirmType_Name(CircuitDevice_eConfirmType value) {
  return ::google::protobuf::internal::NameOfEnum(
    CircuitDevice_eConfirmType_descriptor(), value);
}
inline bool CircuitDevice_eConfirmType_Parse(
    const ::std::string& name, CircuitDevice_eConfirmType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<CircuitDevice_eConfirmType>(
    CircuitDevice_eConfirmType_descriptor(), name, value);
}
enum CircuitDevice_eCircuitType {
  CircuitDevice_eCircuitType_Circuit = 0,
  CircuitDevice_eCircuitType_ModeGroup1 = 1,
  CircuitDevice_eCircuitType_ModeGroup2 = 2,
  CircuitDevice_eCircuitType_ModeGroup3 = 3,
  CircuitDevice_eCircuitType_ModeGroupExclusive = 4,
  CircuitDevice_eCircuitType_CircuitDevice_eCircuitType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  CircuitDevice_eCircuitType_CircuitDevice_eCircuitType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool CircuitDevice_eCircuitType_IsValid(int value);
const CircuitDevice_eCircuitType CircuitDevice_eCircuitType_eCircuitType_MIN = CircuitDevice_eCircuitType_Circuit;
const CircuitDevice_eCircuitType CircuitDevice_eCircuitType_eCircuitType_MAX = CircuitDevice_eCircuitType_ModeGroupExclusive;
const int CircuitDevice_eCircuitType_eCircuitType_ARRAYSIZE = CircuitDevice_eCircuitType_eCircuitType_MAX + 1;

const ::google::protobuf::EnumDescriptor* CircuitDevice_eCircuitType_descriptor();
inline const ::std::string& CircuitDevice_eCircuitType_Name(CircuitDevice_eCircuitType value) {
  return ::google::protobuf::internal::NameOfEnum(
    CircuitDevice_eCircuitType_descriptor(), value);
}
inline bool CircuitDevice_eCircuitType_Parse(
    const ::std::string& name, CircuitDevice_eCircuitType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<CircuitDevice_eCircuitType>(
    CircuitDevice_eCircuitType_descriptor(), name, value);
}
enum CircuitDevice_eSwitchType {
  CircuitDevice_eSwitchType_None = 0,
  CircuitDevice_eSwitchType_LatchOn = 1,
  CircuitDevice_eSwitchType_LatchOff = 2,
  CircuitDevice_eSwitchType_OnOff = 3,
  CircuitDevice_eSwitchType_Toggle = 4,
  CircuitDevice_eSwitchType_MomentaryOn = 5,
  CircuitDevice_eSwitchType_MomentaryOff = 6,
  CircuitDevice_eSwitchType_StepUp = 7,
  CircuitDevice_eSwitchType_StepDown = 8,
  CircuitDevice_eSwitchType_Forward = 9,
  CircuitDevice_eSwitchType_Reverse = 10,
  CircuitDevice_eSwitchType_DimLinearUp = 11,
  CircuitDevice_eSwitchType_DimLinearDown = 12,
  CircuitDevice_eSwitchType_DimExponentialUp = 13,
  CircuitDevice_eSwitchType_DimExponentialDown = 14,
  CircuitDevice_eSwitchType_SingleDimLinear = 15,
  CircuitDevice_eSwitchType_SingleDimExponential = 16,
  CircuitDevice_eSwitchType_Sequential1 = 17,
  CircuitDevice_eSwitchType_Sequential2 = 18,
  CircuitDevice_eSwitchType_Sequential3 = 19,
  CircuitDevice_eSwitchType_Sequential4 = 20,
  CircuitDevice_eSwitchType_Sequential5 = 21,
  CircuitDevice_eSwitchType_ToggleReverse = 22,
  CircuitDevice_eSwitchType_LogicAnd = 23,
  CircuitDevice_eSwitchType_LogicOr = 24,
  CircuitDevice_eSwitchType_LogicXor = 25,
  CircuitDevice_eSwitchType_SetAbsolute = 26,
  CircuitDevice_eSwitchType_SequentialUp = 27,
  CircuitDevice_eSwitchType_SequentialDown = 28,
  CircuitDevice_eSwitchType_SequentialLong1 = 29,
  CircuitDevice_eSwitchType_SequentialLong2 = 30,
  CircuitDevice_eSwitchType_SequentialLong3 = 31,
  CircuitDevice_eSwitchType_SequentialLong4 = 32,
  CircuitDevice_eSwitchType_SequentialLong5 = 33,
  CircuitDevice_eSwitchType_CircuitDevice_eSwitchType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  CircuitDevice_eSwitchType_CircuitDevice_eSwitchType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool CircuitDevice_eSwitchType_IsValid(int value);
const CircuitDevice_eSwitchType CircuitDevice_eSwitchType_eSwitchType_MIN = CircuitDevice_eSwitchType_None;
const CircuitDevice_eSwitchType CircuitDevice_eSwitchType_eSwitchType_MAX = CircuitDevice_eSwitchType_SequentialLong5;
const int CircuitDevice_eSwitchType_eSwitchType_ARRAYSIZE = CircuitDevice_eSwitchType_eSwitchType_MAX + 1;

const ::google::protobuf::EnumDescriptor* CircuitDevice_eSwitchType_descriptor();
inline const ::std::string& CircuitDevice_eSwitchType_Name(CircuitDevice_eSwitchType value) {
  return ::google::protobuf::internal::NameOfEnum(
    CircuitDevice_eSwitchType_descriptor(), value);
}
inline bool CircuitDevice_eSwitchType_Parse(
    const ::std::string& name, CircuitDevice_eSwitchType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<CircuitDevice_eSwitchType>(
    CircuitDevice_eSwitchType_descriptor(), name, value);
}
enum CircuitDevice_eModeIcon {
  CircuitDevice_eModeIcon_Entertainment = 0,
  CircuitDevice_eModeIcon_EntertainmentNight = 1,
  CircuitDevice_eModeIcon_Crusing = 2,
  CircuitDevice_eModeIcon_CrusingNight = 3,
  CircuitDevice_eModeIcon_Anchored = 4,
  CircuitDevice_eModeIcon_AnchoredNight = 5,
  CircuitDevice_eModeIcon_DockAttended = 6,
  CircuitDevice_eModeIcon_DockUnAttended = 7,
  CircuitDevice_eModeIcon_Generic = 8,
  CircuitDevice_eModeIcon_Fishing = 9,
  CircuitDevice_eModeIcon_FishingNight = 10,
  CircuitDevice_eModeIcon_MoodLighting = 11,
  CircuitDevice_eModeIcon_CircuitDevice_eModeIcon_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  CircuitDevice_eModeIcon_CircuitDevice_eModeIcon_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool CircuitDevice_eModeIcon_IsValid(int value);
const CircuitDevice_eModeIcon CircuitDevice_eModeIcon_eModeIcon_MIN = CircuitDevice_eModeIcon_Entertainment;
const CircuitDevice_eModeIcon CircuitDevice_eModeIcon_eModeIcon_MAX = CircuitDevice_eModeIcon_MoodLighting;
const int CircuitDevice_eModeIcon_eModeIcon_ARRAYSIZE = CircuitDevice_eModeIcon_eModeIcon_MAX + 1;

const ::google::protobuf::EnumDescriptor* CircuitDevice_eModeIcon_descriptor();
inline const ::std::string& CircuitDevice_eModeIcon_Name(CircuitDevice_eModeIcon value) {
  return ::google::protobuf::internal::NameOfEnum(
    CircuitDevice_eModeIcon_descriptor(), value);
}
inline bool CircuitDevice_eModeIcon_Parse(
    const ::std::string& name, CircuitDevice_eModeIcon* value) {
  return ::google::protobuf::internal::ParseNamedEnum<CircuitDevice_eModeIcon>(
    CircuitDevice_eModeIcon_descriptor(), name, value);
}
enum EngineDevice_eEngineType {
  EngineDevice_eEngineType_SmartCraft = 0,
  EngineDevice_eEngineType_NMEA2000 = 1,
  EngineDevice_eEngineType_EngineDevice_eEngineType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  EngineDevice_eEngineType_EngineDevice_eEngineType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool EngineDevice_eEngineType_IsValid(int value);
const EngineDevice_eEngineType EngineDevice_eEngineType_eEngineType_MIN = EngineDevice_eEngineType_SmartCraft;
const EngineDevice_eEngineType EngineDevice_eEngineType_eEngineType_MAX = EngineDevice_eEngineType_NMEA2000;
const int EngineDevice_eEngineType_eEngineType_ARRAYSIZE = EngineDevice_eEngineType_eEngineType_MAX + 1;

const ::google::protobuf::EnumDescriptor* EngineDevice_eEngineType_descriptor();
inline const ::std::string& EngineDevice_eEngineType_Name(EngineDevice_eEngineType value) {
  return ::google::protobuf::internal::NameOfEnum(
    EngineDevice_eEngineType_descriptor(), value);
}
inline bool EngineDevice_eEngineType_Parse(
    const ::std::string& name, EngineDevice_eEngineType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EngineDevice_eEngineType>(
    EngineDevice_eEngineType_descriptor(), name, value);
}
enum SwitchPositiveNegtive_eSwitchPositiveNegtiveMode {
  SwitchPositiveNegtive_eSwitchPositiveNegtiveMode_SwitchBatteryPositive = 0,
  SwitchPositiveNegtive_eSwitchPositiveNegtiveMode_SwitchBatteryNegtive = 1,
  SwitchPositiveNegtive_eSwitchPositiveNegtiveMode_SwitchPositiveNegtive_eSwitchPositiveNegtiveMode_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  SwitchPositiveNegtive_eSwitchPositiveNegtiveMode_SwitchPositiveNegtive_eSwitchPositiveNegtiveMode_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool SwitchPositiveNegtive_eSwitchPositiveNegtiveMode_IsValid(int value);
const SwitchPositiveNegtive_eSwitchPositiveNegtiveMode SwitchPositiveNegtive_eSwitchPositiveNegtiveMode_eSwitchPositiveNegtiveMode_MIN = SwitchPositiveNegtive_eSwitchPositiveNegtiveMode_SwitchBatteryPositive;
const SwitchPositiveNegtive_eSwitchPositiveNegtiveMode SwitchPositiveNegtive_eSwitchPositiveNegtiveMode_eSwitchPositiveNegtiveMode_MAX = SwitchPositiveNegtive_eSwitchPositiveNegtiveMode_SwitchBatteryNegtive;
const int SwitchPositiveNegtive_eSwitchPositiveNegtiveMode_eSwitchPositiveNegtiveMode_ARRAYSIZE = SwitchPositiveNegtive_eSwitchPositiveNegtiveMode_eSwitchPositiveNegtiveMode_MAX + 1;

const ::google::protobuf::EnumDescriptor* SwitchPositiveNegtive_eSwitchPositiveNegtiveMode_descriptor();
inline const ::std::string& SwitchPositiveNegtive_eSwitchPositiveNegtiveMode_Name(SwitchPositiveNegtive_eSwitchPositiveNegtiveMode value) {
  return ::google::protobuf::internal::NameOfEnum(
    SwitchPositiveNegtive_eSwitchPositiveNegtiveMode_descriptor(), value);
}
inline bool SwitchPositiveNegtive_eSwitchPositiveNegtiveMode_Parse(
    const ::std::string& name, SwitchPositiveNegtive_eSwitchPositiveNegtiveMode* value) {
  return ::google::protobuf::internal::ParseNamedEnum<SwitchPositiveNegtive_eSwitchPositiveNegtiveMode>(
    SwitchPositiveNegtive_eSwitchPositiveNegtiveMode_descriptor(), name, value);
}
enum ConfigResult_eConfigResultStatus {
  ConfigResult_eConfigResultStatus_Ok = 0,
  ConfigResult_eConfigResultStatus_NotReady = 1,
  ConfigResult_eConfigResultStatus_ConfigResult_eConfigResultStatus_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  ConfigResult_eConfigResultStatus_ConfigResult_eConfigResultStatus_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool ConfigResult_eConfigResultStatus_IsValid(int value);
const ConfigResult_eConfigResultStatus ConfigResult_eConfigResultStatus_eConfigResultStatus_MIN = ConfigResult_eConfigResultStatus_Ok;
const ConfigResult_eConfigResultStatus ConfigResult_eConfigResultStatus_eConfigResultStatus_MAX = ConfigResult_eConfigResultStatus_NotReady;
const int ConfigResult_eConfigResultStatus_eConfigResultStatus_ARRAYSIZE = ConfigResult_eConfigResultStatus_eConfigResultStatus_MAX + 1;

const ::google::protobuf::EnumDescriptor* ConfigResult_eConfigResultStatus_descriptor();
inline const ::std::string& ConfigResult_eConfigResultStatus_Name(ConfigResult_eConfigResultStatus value) {
  return ::google::protobuf::internal::NameOfEnum(
    ConfigResult_eConfigResultStatus_descriptor(), value);
}
inline bool ConfigResult_eConfigResultStatus_Parse(
    const ::std::string& name, ConfigResult_eConfigResultStatus* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ConfigResult_eConfigResultStatus>(
    ConfigResult_eConfigResultStatus_descriptor(), name, value);
}
enum ControlTypeValueRequest_eHVACType {
  ControlTypeValueRequest_eHVACType_OperationMode = 0,
  ControlTypeValueRequest_eHVACType_FanSpeed = 1,
  ControlTypeValueRequest_eHVACType_SetTemperature = 2,
  ControlTypeValueRequest_eHVACType_ControlTypeValueRequest_eHVACType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  ControlTypeValueRequest_eHVACType_ControlTypeValueRequest_eHVACType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool ControlTypeValueRequest_eHVACType_IsValid(int value);
const ControlTypeValueRequest_eHVACType ControlTypeValueRequest_eHVACType_eHVACType_MIN = ControlTypeValueRequest_eHVACType_OperationMode;
const ControlTypeValueRequest_eHVACType ControlTypeValueRequest_eHVACType_eHVACType_MAX = ControlTypeValueRequest_eHVACType_SetTemperature;
const int ControlTypeValueRequest_eHVACType_eHVACType_ARRAYSIZE = ControlTypeValueRequest_eHVACType_eHVACType_MAX + 1;

const ::google::protobuf::EnumDescriptor* ControlTypeValueRequest_eHVACType_descriptor();
inline const ::std::string& ControlTypeValueRequest_eHVACType_Name(ControlTypeValueRequest_eHVACType value) {
  return ::google::protobuf::internal::NameOfEnum(
    ControlTypeValueRequest_eHVACType_descriptor(), value);
}
inline bool ControlTypeValueRequest_eHVACType_Parse(
    const ::std::string& name, ControlTypeValueRequest_eHVACType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ControlTypeValueRequest_eHVACType>(
    ControlTypeValueRequest_eHVACType_descriptor(), name, value);
}
enum ControlTypeValueRequest_eFantasticFanType {
  ControlTypeValueRequest_eFantasticFanType_DirectionForward = 0,
  ControlTypeValueRequest_eFantasticFanType_DirectionReverse = 1,
  ControlTypeValueRequest_eFantasticFanType_LidOpen = 2,
  ControlTypeValueRequest_eFantasticFanType_LidClose = 3,
  ControlTypeValueRequest_eFantasticFanType_Speed = 4,
  ControlTypeValueRequest_eFantasticFanType_ControlTypeValueRequest_eFantasticFanType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  ControlTypeValueRequest_eFantasticFanType_ControlTypeValueRequest_eFantasticFanType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool ControlTypeValueRequest_eFantasticFanType_IsValid(int value);
const ControlTypeValueRequest_eFantasticFanType ControlTypeValueRequest_eFantasticFanType_eFantasticFanType_MIN = ControlTypeValueRequest_eFantasticFanType_DirectionForward;
const ControlTypeValueRequest_eFantasticFanType ControlTypeValueRequest_eFantasticFanType_eFantasticFanType_MAX = ControlTypeValueRequest_eFantasticFanType_Speed;
const int ControlTypeValueRequest_eFantasticFanType_eFantasticFanType_ARRAYSIZE = ControlTypeValueRequest_eFantasticFanType_eFantasticFanType_MAX + 1;

const ::google::protobuf::EnumDescriptor* ControlTypeValueRequest_eFantasticFanType_descriptor();
inline const ::std::string& ControlTypeValueRequest_eFantasticFanType_Name(ControlTypeValueRequest_eFantasticFanType value) {
  return ::google::protobuf::internal::NameOfEnum(
    ControlTypeValueRequest_eFantasticFanType_descriptor(), value);
}
inline bool ControlTypeValueRequest_eFantasticFanType_Parse(
    const ::std::string& name, ControlTypeValueRequest_eFantasticFanType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ControlTypeValueRequest_eFantasticFanType>(
    ControlTypeValueRequest_eFantasticFanType_descriptor(), name, value);
}
enum ControlTypeValueRequest_eAudioStereoType {
  ControlTypeValueRequest_eAudioStereoType_Power = 0,
  ControlTypeValueRequest_eAudioStereoType_Mute = 1,
  ControlTypeValueRequest_eAudioStereoType_VolumeUp = 2,
  ControlTypeValueRequest_eAudioStereoType_VolumeDown = 3,
  ControlTypeValueRequest_eAudioStereoType_TrackUp = 4,
  ControlTypeValueRequest_eAudioStereoType_TrackDown = 5,
  ControlTypeValueRequest_eAudioStereoType_Play = 6,
  ControlTypeValueRequest_eAudioStereoType_Source = 7,
  ControlTypeValueRequest_eAudioStereoType_ControlTypeValueRequest_eAudioStereoType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  ControlTypeValueRequest_eAudioStereoType_ControlTypeValueRequest_eAudioStereoType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool ControlTypeValueRequest_eAudioStereoType_IsValid(int value);
const ControlTypeValueRequest_eAudioStereoType ControlTypeValueRequest_eAudioStereoType_eAudioStereoType_MIN = ControlTypeValueRequest_eAudioStereoType_Power;
const ControlTypeValueRequest_eAudioStereoType ControlTypeValueRequest_eAudioStereoType_eAudioStereoType_MAX = ControlTypeValueRequest_eAudioStereoType_Source;
const int ControlTypeValueRequest_eAudioStereoType_eAudioStereoType_ARRAYSIZE = ControlTypeValueRequest_eAudioStereoType_eAudioStereoType_MAX + 1;

const ::google::protobuf::EnumDescriptor* ControlTypeValueRequest_eAudioStereoType_descriptor();
inline const ::std::string& ControlTypeValueRequest_eAudioStereoType_Name(ControlTypeValueRequest_eAudioStereoType value) {
  return ::google::protobuf::internal::NameOfEnum(
    ControlTypeValueRequest_eAudioStereoType_descriptor(), value);
}
inline bool ControlTypeValueRequest_eAudioStereoType_Parse(
    const ::std::string& name, ControlTypeValueRequest_eAudioStereoType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ControlTypeValueRequest_eAudioStereoType>(
    ControlTypeValueRequest_eAudioStereoType_descriptor(), name, value);
}
enum ControlTypeValueRequest_eAwningType {
  ControlTypeValueRequest_eAwningType_Open = 0,
  ControlTypeValueRequest_eAwningType_Close = 1,
  ControlTypeValueRequest_eAwningType_TitleLeft = 2,
  ControlTypeValueRequest_eAwningType_TitleRight = 3,
  ControlTypeValueRequest_eAwningType_ControlTypeValueRequest_eAwningType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  ControlTypeValueRequest_eAwningType_ControlTypeValueRequest_eAwningType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool ControlTypeValueRequest_eAwningType_IsValid(int value);
const ControlTypeValueRequest_eAwningType ControlTypeValueRequest_eAwningType_eAwningType_MIN = ControlTypeValueRequest_eAwningType_Open;
const ControlTypeValueRequest_eAwningType ControlTypeValueRequest_eAwningType_eAwningType_MAX = ControlTypeValueRequest_eAwningType_TitleRight;
const int ControlTypeValueRequest_eAwningType_eAwningType_ARRAYSIZE = ControlTypeValueRequest_eAwningType_eAwningType_MAX + 1;

const ::google::protobuf::EnumDescriptor* ControlTypeValueRequest_eAwningType_descriptor();
inline const ::std::string& ControlTypeValueRequest_eAwningType_Name(ControlTypeValueRequest_eAwningType value) {
  return ::google::protobuf::internal::NameOfEnum(
    ControlTypeValueRequest_eAwningType_descriptor(), value);
}
inline bool ControlTypeValueRequest_eAwningType_Parse(
    const ::std::string& name, ControlTypeValueRequest_eAwningType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ControlTypeValueRequest_eAwningType>(
    ControlTypeValueRequest_eAwningType_descriptor(), name, value);
}
enum ControlTypeValueRequest_eShoreFuseType {
  ControlTypeValueRequest_eShoreFuseType_Control = 0,
  ControlTypeValueRequest_eShoreFuseType_ControlTypeValueRequest_eShoreFuseType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  ControlTypeValueRequest_eShoreFuseType_ControlTypeValueRequest_eShoreFuseType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool ControlTypeValueRequest_eShoreFuseType_IsValid(int value);
const ControlTypeValueRequest_eShoreFuseType ControlTypeValueRequest_eShoreFuseType_eShoreFuseType_MIN = ControlTypeValueRequest_eShoreFuseType_Control;
const ControlTypeValueRequest_eShoreFuseType ControlTypeValueRequest_eShoreFuseType_eShoreFuseType_MAX = ControlTypeValueRequest_eShoreFuseType_Control;
const int ControlTypeValueRequest_eShoreFuseType_eShoreFuseType_ARRAYSIZE = ControlTypeValueRequest_eShoreFuseType_eShoreFuseType_MAX + 1;

const ::google::protobuf::EnumDescriptor* ControlTypeValueRequest_eShoreFuseType_descriptor();
inline const ::std::string& ControlTypeValueRequest_eShoreFuseType_Name(ControlTypeValueRequest_eShoreFuseType value) {
  return ::google::protobuf::internal::NameOfEnum(
    ControlTypeValueRequest_eShoreFuseType_descriptor(), value);
}
inline bool ControlTypeValueRequest_eShoreFuseType_Parse(
    const ::std::string& name, ControlTypeValueRequest_eShoreFuseType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ControlTypeValueRequest_eShoreFuseType>(
    ControlTypeValueRequest_eShoreFuseType_descriptor(), name, value);
}
enum ControlTypeValueRequest_eThirdPartyGeneratorType {
  ControlTypeValueRequest_eThirdPartyGeneratorType_Start = 0,
  ControlTypeValueRequest_eThirdPartyGeneratorType_Stop = 1,
  ControlTypeValueRequest_eThirdPartyGeneratorType_ControlTypeValueRequest_eThirdPartyGeneratorType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  ControlTypeValueRequest_eThirdPartyGeneratorType_ControlTypeValueRequest_eThirdPartyGeneratorType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool ControlTypeValueRequest_eThirdPartyGeneratorType_IsValid(int value);
const ControlTypeValueRequest_eThirdPartyGeneratorType ControlTypeValueRequest_eThirdPartyGeneratorType_eThirdPartyGeneratorType_MIN = ControlTypeValueRequest_eThirdPartyGeneratorType_Start;
const ControlTypeValueRequest_eThirdPartyGeneratorType ControlTypeValueRequest_eThirdPartyGeneratorType_eThirdPartyGeneratorType_MAX = ControlTypeValueRequest_eThirdPartyGeneratorType_Stop;
const int ControlTypeValueRequest_eThirdPartyGeneratorType_eThirdPartyGeneratorType_ARRAYSIZE = ControlTypeValueRequest_eThirdPartyGeneratorType_eThirdPartyGeneratorType_MAX + 1;

const ::google::protobuf::EnumDescriptor* ControlTypeValueRequest_eThirdPartyGeneratorType_descriptor();
inline const ::std::string& ControlTypeValueRequest_eThirdPartyGeneratorType_Name(ControlTypeValueRequest_eThirdPartyGeneratorType value) {
  return ::google::protobuf::internal::NameOfEnum(
    ControlTypeValueRequest_eThirdPartyGeneratorType_descriptor(), value);
}
inline bool ControlTypeValueRequest_eThirdPartyGeneratorType_Parse(
    const ::std::string& name, ControlTypeValueRequest_eThirdPartyGeneratorType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ControlTypeValueRequest_eThirdPartyGeneratorType>(
    ControlTypeValueRequest_eThirdPartyGeneratorType_descriptor(), name, value);
}
enum ControlRequest_eControlType {
  ControlRequest_eControlType_Activate = 0,
  ControlRequest_eControlType_Release = 1,
  ControlRequest_eControlType_Ping = 2,
  ControlRequest_eControlType_SetAbsolute = 3,
  ControlRequest_eControlType_ControlRequest_eControlType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  ControlRequest_eControlType_ControlRequest_eControlType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool ControlRequest_eControlType_IsValid(int value);
const ControlRequest_eControlType ControlRequest_eControlType_eControlType_MIN = ControlRequest_eControlType_Activate;
const ControlRequest_eControlType ControlRequest_eControlType_eControlType_MAX = ControlRequest_eControlType_SetAbsolute;
const int ControlRequest_eControlType_eControlType_ARRAYSIZE = ControlRequest_eControlType_eControlType_MAX + 1;

const ::google::protobuf::EnumDescriptor* ControlRequest_eControlType_descriptor();
inline const ::std::string& ControlRequest_eControlType_Name(ControlRequest_eControlType value) {
  return ::google::protobuf::internal::NameOfEnum(
    ControlRequest_eControlType_descriptor(), value);
}
inline bool ControlRequest_eControlType_Parse(
    const ::std::string& name, ControlRequest_eControlType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ControlRequest_eControlType>(
    ControlRequest_eControlType_descriptor(), name, value);
}
enum ControlRequest_eThrowType {
  ControlRequest_eThrowType_DoubleThrow = 0,
  ControlRequest_eThrowType_SingleThrow = 1,
  ControlRequest_eThrowType_ControlRequest_eThrowType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  ControlRequest_eThrowType_ControlRequest_eThrowType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool ControlRequest_eThrowType_IsValid(int value);
const ControlRequest_eThrowType ControlRequest_eThrowType_eThrowType_MIN = ControlRequest_eThrowType_DoubleThrow;
const ControlRequest_eThrowType ControlRequest_eThrowType_eThrowType_MAX = ControlRequest_eThrowType_SingleThrow;
const int ControlRequest_eThrowType_eThrowType_ARRAYSIZE = ControlRequest_eThrowType_eThrowType_MAX + 1;

const ::google::protobuf::EnumDescriptor* ControlRequest_eThrowType_descriptor();
inline const ::std::string& ControlRequest_eThrowType_Name(ControlRequest_eThrowType value) {
  return ::google::protobuf::internal::NameOfEnum(
    ControlRequest_eThrowType_descriptor(), value);
}
inline bool ControlRequest_eThrowType_Parse(
    const ::std::string& name, ControlRequest_eThrowType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ControlRequest_eThrowType>(
    ControlRequest_eThrowType_descriptor(), name, value);
}
enum ControlRequest_eButtonInfoType {
  ControlRequest_eButtonInfoType_ButtonInfo0 = 0,
  ControlRequest_eButtonInfoType_ButtonInfo1 = 1,
  ControlRequest_eButtonInfoType_ControlRequest_eButtonInfoType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  ControlRequest_eButtonInfoType_ControlRequest_eButtonInfoType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool ControlRequest_eButtonInfoType_IsValid(int value);
const ControlRequest_eButtonInfoType ControlRequest_eButtonInfoType_eButtonInfoType_MIN = ControlRequest_eButtonInfoType_ButtonInfo0;
const ControlRequest_eButtonInfoType ControlRequest_eButtonInfoType_eButtonInfoType_MAX = ControlRequest_eButtonInfoType_ButtonInfo1;
const int ControlRequest_eButtonInfoType_eButtonInfoType_ARRAYSIZE = ControlRequest_eButtonInfoType_eButtonInfoType_MAX + 1;

const ::google::protobuf::EnumDescriptor* ControlRequest_eButtonInfoType_descriptor();
inline const ::std::string& ControlRequest_eButtonInfoType_Name(ControlRequest_eButtonInfoType value) {
  return ::google::protobuf::internal::NameOfEnum(
    ControlRequest_eButtonInfoType_descriptor(), value);
}
inline bool ControlRequest_eButtonInfoType_Parse(
    const ::std::string& name, ControlRequest_eButtonInfoType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ControlRequest_eButtonInfoType>(
    ControlRequest_eButtonInfoType_descriptor(), name, value);
}
enum Request_eRequestType {
  Request_eRequestType_Invaid = 0,
  Request_eRequestType_Alarms = 1,
  Request_eRequestType_Modes = 2,
  Request_eRequestType_Control = 3,
  Request_eRequestType_AC = 4,
  Request_eRequestType_DC = 5,
  Request_eRequestType_Pressure = 6,
  Request_eRequestType_Tanks = 7,
  Request_eRequestType_Temperature = 8,
  Request_eRequestType_SnapshotAll = 9,
  Request_eRequestType_Snapshot20Hz = 10,
  Request_eRequestType_Snapshot10Hz = 11,
  Request_eRequestType_Snapshot5Hz = 12,
  Request_eRequestType_Snapshot2Hz = 13,
  Request_eRequestType_Snapshot1Hz = 14,
  Request_eRequestType_ACMain = 15,
  Request_eRequestType_InverterCharger = 16,
  Request_eRequestType_HVAC = 17,
  Request_eRequestType_ZipdeeAwning = 18,
  Request_eRequestType_Generator = 19,
  Request_eRequestType_TyrePressure = 20,
  Request_eRequestType_AudioStereo = 21,
  Request_eRequestType_ShoreFuse = 22,
  Request_eRequestType_All = 23,
  Request_eRequestType_SingleSnapshot = 24,
  Request_eRequestType_Health = 25,
  Request_eRequestType_Request_eRequestType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  Request_eRequestType_Request_eRequestType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool Request_eRequestType_IsValid(int value);
const Request_eRequestType Request_eRequestType_eRequestType_MIN = Request_eRequestType_Invaid;
const Request_eRequestType Request_eRequestType_eRequestType_MAX = Request_eRequestType_Health;
const int Request_eRequestType_eRequestType_ARRAYSIZE = Request_eRequestType_eRequestType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Request_eRequestType_descriptor();
inline const ::std::string& Request_eRequestType_Name(Request_eRequestType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Request_eRequestType_descriptor(), value);
}
inline bool Request_eRequestType_Parse(
    const ::std::string& name, Request_eRequestType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Request_eRequestType>(
    Request_eRequestType_descriptor(), name, value);
}
enum Result_eResultType {
  Result_eResultType_Ok = 0,
  Result_eResultType_Fail = 1,
  Result_eResultType_Result_eResultType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  Result_eResultType_Result_eResultType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool Result_eResultType_IsValid(int value);
const Result_eResultType Result_eResultType_eResultType_MIN = Result_eResultType_Ok;
const Result_eResultType Result_eResultType_eResultType_MAX = Result_eResultType_Fail;
const int Result_eResultType_eResultType_ARRAYSIZE = Result_eResultType_eResultType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Result_eResultType_descriptor();
inline const ::std::string& Result_eResultType_Name(Result_eResultType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Result_eResultType_descriptor(), value);
}
inline bool Result_eResultType_Parse(
    const ::std::string& name, Result_eResultType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Result_eResultType>(
    Result_eResultType_descriptor(), name, value);
}
enum ValueEngineState_eEngineState {
  ValueEngineState_eEngineState_Dead = 0,
  ValueEngineState_eEngineState_Stall = 1,
  ValueEngineState_eEngineState_Crank = 2,
  ValueEngineState_eEngineState_Run = 3,
  ValueEngineState_eEngineState_PowerOff = 4,
  ValueEngineState_eEngineState_ValueEngineState_eEngineState_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  ValueEngineState_eEngineState_ValueEngineState_eEngineState_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool ValueEngineState_eEngineState_IsValid(int value);
const ValueEngineState_eEngineState ValueEngineState_eEngineState_eEngineState_MIN = ValueEngineState_eEngineState_Dead;
const ValueEngineState_eEngineState ValueEngineState_eEngineState_eEngineState_MAX = ValueEngineState_eEngineState_PowerOff;
const int ValueEngineState_eEngineState_eEngineState_ARRAYSIZE = ValueEngineState_eEngineState_eEngineState_MAX + 1;

const ::google::protobuf::EnumDescriptor* ValueEngineState_eEngineState_descriptor();
inline const ::std::string& ValueEngineState_eEngineState_Name(ValueEngineState_eEngineState value) {
  return ::google::protobuf::internal::NameOfEnum(
    ValueEngineState_eEngineState_descriptor(), value);
}
inline bool ValueEngineState_eEngineState_Parse(
    const ::std::string& name, ValueEngineState_eEngineState* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ValueEngineState_eEngineState>(
    ValueEngineState_eEngineState_descriptor(), name, value);
}
enum ValueEngineState_EngineInstance {
  ValueEngineState_EngineInstance_StarboardEngine = 0,
  ValueEngineState_EngineInstance_Port = 1,
  ValueEngineState_EngineInstance_StarboardInnerEngine = 2,
  ValueEngineState_EngineInstance_PortInnerEngine = 3,
  ValueEngineState_EngineInstance_EngineCount = 4,
  ValueEngineState_EngineInstance_ValueEngineState_EngineInstance_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  ValueEngineState_EngineInstance_ValueEngineState_EngineInstance_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool ValueEngineState_EngineInstance_IsValid(int value);
const ValueEngineState_EngineInstance ValueEngineState_EngineInstance_EngineInstance_MIN = ValueEngineState_EngineInstance_StarboardEngine;
const ValueEngineState_EngineInstance ValueEngineState_EngineInstance_EngineInstance_MAX = ValueEngineState_EngineInstance_EngineCount;
const int ValueEngineState_EngineInstance_EngineInstance_ARRAYSIZE = ValueEngineState_EngineInstance_EngineInstance_MAX + 1;

const ::google::protobuf::EnumDescriptor* ValueEngineState_EngineInstance_descriptor();
inline const ::std::string& ValueEngineState_EngineInstance_Name(ValueEngineState_EngineInstance value) {
  return ::google::protobuf::internal::NameOfEnum(
    ValueEngineState_EngineInstance_descriptor(), value);
}
inline bool ValueEngineState_EngineInstance_Parse(
    const ::std::string& name, ValueEngineState_EngineInstance* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ValueEngineState_EngineInstance>(
    ValueEngineState_EngineInstance_descriptor(), name, value);
}
enum Engine_DiscreteStatus1Mask {
  Engine_DiscreteStatus1Mask_None1 = 0,
  Engine_DiscreteStatus1Mask_CheckEngine = 1,
  Engine_DiscreteStatus1Mask_OverTemperature = 2,
  Engine_DiscreteStatus1Mask_LowOilPressure = 4,
  Engine_DiscreteStatus1Mask_LowOilLevel = 8,
  Engine_DiscreteStatus1Mask_LowFuelPressure = 16,
  Engine_DiscreteStatus1Mask_LowSystemVoltage = 32,
  Engine_DiscreteStatus1Mask_LowCoolantLevel = 64,
  Engine_DiscreteStatus1Mask_WaterFlow = 128,
  Engine_DiscreteStatus1Mask_WaterInFuel = 256,
  Engine_DiscreteStatus1Mask_ChargeIndicator = 512,
  Engine_DiscreteStatus1Mask_PreheatIndicator = 1024,
  Engine_DiscreteStatus1Mask_HighBoostPressure = 2048,
  Engine_DiscreteStatus1Mask_RevLimitExceeded = 4096,
  Engine_DiscreteStatus1Mask_EGRSystem = 8192,
  Engine_DiscreteStatus1Mask_ThrottlePositionSensor = 16384,
  Engine_DiscreteStatus1Mask_EngineEmergencyStopMode = 32768,
  Engine_DiscreteStatus1Mask_Engine_DiscreteStatus1Mask_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  Engine_DiscreteStatus1Mask_Engine_DiscreteStatus1Mask_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool Engine_DiscreteStatus1Mask_IsValid(int value);
const Engine_DiscreteStatus1Mask Engine_DiscreteStatus1Mask_DiscreteStatus1Mask_MIN = Engine_DiscreteStatus1Mask_None1;
const Engine_DiscreteStatus1Mask Engine_DiscreteStatus1Mask_DiscreteStatus1Mask_MAX = Engine_DiscreteStatus1Mask_EngineEmergencyStopMode;
const int Engine_DiscreteStatus1Mask_DiscreteStatus1Mask_ARRAYSIZE = Engine_DiscreteStatus1Mask_DiscreteStatus1Mask_MAX + 1;

const ::google::protobuf::EnumDescriptor* Engine_DiscreteStatus1Mask_descriptor();
inline const ::std::string& Engine_DiscreteStatus1Mask_Name(Engine_DiscreteStatus1Mask value) {
  return ::google::protobuf::internal::NameOfEnum(
    Engine_DiscreteStatus1Mask_descriptor(), value);
}
inline bool Engine_DiscreteStatus1Mask_Parse(
    const ::std::string& name, Engine_DiscreteStatus1Mask* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Engine_DiscreteStatus1Mask>(
    Engine_DiscreteStatus1Mask_descriptor(), name, value);
}
enum Engine_DiscreteStatus2Mask {
  Engine_DiscreteStatus2Mask_None2 = 0,
  Engine_DiscreteStatus2Mask_WarningLevel1 = 1,
  Engine_DiscreteStatus2Mask_WarningLevel2 = 2,
  Engine_DiscreteStatus2Mask_PowerReduction = 4,
  Engine_DiscreteStatus2Mask_MaintenanceNeeded = 8,
  Engine_DiscreteStatus2Mask_EngineCommError = 16,
  Engine_DiscreteStatus2Mask_SubOrSecondaryThrottle = 32,
  Engine_DiscreteStatus2Mask_NeutralStartProtect = 64,
  Engine_DiscreteStatus2Mask_EngineShuttingDown = 128,
  Engine_DiscreteStatus2Mask_Engine_DiscreteStatus2Mask_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  Engine_DiscreteStatus2Mask_Engine_DiscreteStatus2Mask_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool Engine_DiscreteStatus2Mask_IsValid(int value);
const Engine_DiscreteStatus2Mask Engine_DiscreteStatus2Mask_DiscreteStatus2Mask_MIN = Engine_DiscreteStatus2Mask_None2;
const Engine_DiscreteStatus2Mask Engine_DiscreteStatus2Mask_DiscreteStatus2Mask_MAX = Engine_DiscreteStatus2Mask_EngineShuttingDown;
const int Engine_DiscreteStatus2Mask_DiscreteStatus2Mask_ARRAYSIZE = Engine_DiscreteStatus2Mask_DiscreteStatus2Mask_MAX + 1;

const ::google::protobuf::EnumDescriptor* Engine_DiscreteStatus2Mask_descriptor();
inline const ::std::string& Engine_DiscreteStatus2Mask_Name(Engine_DiscreteStatus2Mask value) {
  return ::google::protobuf::internal::NameOfEnum(
    Engine_DiscreteStatus2Mask_descriptor(), value);
}
inline bool Engine_DiscreteStatus2Mask_Parse(
    const ::std::string& name, Engine_DiscreteStatus2Mask* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Engine_DiscreteStatus2Mask>(
    Engine_DiscreteStatus2Mask_descriptor(), name, value);
}
enum ValueFaultState_eFaultState {
  ValueFaultState_eFaultState_None = 0,
  ValueFaultState_eFaultState_ConfigurationConflict = 1,
  ValueFaultState_eFaultState_DipswitchConflict = 2,
  ValueFaultState_eFaultState_EepromFailure = 3,
  ValueFaultState_eFaultState_NoCZoneNetwork = 4,
  ValueFaultState_eFaultState_LowRunCurrent = 5,
  ValueFaultState_eFaultState_OverCurrent = 6,
  ValueFaultState_eFaultState_ShortCircuit = 7,
  ValueFaultState_eFaultState_MissingCommander = 8,
  ValueFaultState_eFaultState_MissingModeCommander = 9,
  ValueFaultState_eFaultState_ReverseCurrent = 10,
  ValueFaultState_eFaultState_CurrentCalibration = 11,
  ValueFaultState_eFaultState_ValueFaultState_eFaultState_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  ValueFaultState_eFaultState_ValueFaultState_eFaultState_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool ValueFaultState_eFaultState_IsValid(int value);
const ValueFaultState_eFaultState ValueFaultState_eFaultState_eFaultState_MIN = ValueFaultState_eFaultState_None;
const ValueFaultState_eFaultState ValueFaultState_eFaultState_eFaultState_MAX = ValueFaultState_eFaultState_CurrentCalibration;
const int ValueFaultState_eFaultState_eFaultState_ARRAYSIZE = ValueFaultState_eFaultState_eFaultState_MAX + 1;

const ::google::protobuf::EnumDescriptor* ValueFaultState_eFaultState_descriptor();
inline const ::std::string& ValueFaultState_eFaultState_Name(ValueFaultState_eFaultState value) {
  return ::google::protobuf::internal::NameOfEnum(
    ValueFaultState_eFaultState_descriptor(), value);
}
inline bool ValueFaultState_eFaultState_Parse(
    const ::std::string& name, ValueFaultState_eFaultState* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ValueFaultState_eFaultState>(
    ValueFaultState_eFaultState_descriptor(), name, value);
}
enum ValueSystemOnState_eSystemOnState {
  ValueSystemOnState_eSystemOnState_StateOff = 0,
  ValueSystemOnState_eSystemOnState_StateOn = 1,
  ValueSystemOnState_eSystemOnState_StateOnTimer = 2,
  ValueSystemOnState_eSystemOnState_ValueSystemOnState_eSystemOnState_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  ValueSystemOnState_eSystemOnState_ValueSystemOnState_eSystemOnState_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool ValueSystemOnState_eSystemOnState_IsValid(int value);
const ValueSystemOnState_eSystemOnState ValueSystemOnState_eSystemOnState_eSystemOnState_MIN = ValueSystemOnState_eSystemOnState_StateOff;
const ValueSystemOnState_eSystemOnState ValueSystemOnState_eSystemOnState_eSystemOnState_MAX = ValueSystemOnState_eSystemOnState_StateOnTimer;
const int ValueSystemOnState_eSystemOnState_eSystemOnState_ARRAYSIZE = ValueSystemOnState_eSystemOnState_eSystemOnState_MAX + 1;

const ::google::protobuf::EnumDescriptor* ValueSystemOnState_eSystemOnState_descriptor();
inline const ::std::string& ValueSystemOnState_eSystemOnState_Name(ValueSystemOnState_eSystemOnState value) {
  return ::google::protobuf::internal::NameOfEnum(
    ValueSystemOnState_eSystemOnState_descriptor(), value);
}
inline bool ValueSystemOnState_eSystemOnState_Parse(
    const ::std::string& name, ValueSystemOnState_eSystemOnState* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ValueSystemOnState_eSystemOnState>(
    ValueSystemOnState_eSystemOnState_descriptor(), name, value);
}
enum ValueSourceAvailable_eSourceAvailable {
  ValueSourceAvailable_eSourceAvailable_SourceInvalid = 0,
  ValueSourceAvailable_eSourceAvailable_SourceUnAvailable = 1,
  ValueSourceAvailable_eSourceAvailable_SourceAvailable = 2,
  ValueSourceAvailable_eSourceAvailable_ValueSourceAvailable_eSourceAvailable_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  ValueSourceAvailable_eSourceAvailable_ValueSourceAvailable_eSourceAvailable_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool ValueSourceAvailable_eSourceAvailable_IsValid(int value);
const ValueSourceAvailable_eSourceAvailable ValueSourceAvailable_eSourceAvailable_eSourceAvailable_MIN = ValueSourceAvailable_eSourceAvailable_SourceInvalid;
const ValueSourceAvailable_eSourceAvailable ValueSourceAvailable_eSourceAvailable_eSourceAvailable_MAX = ValueSourceAvailable_eSourceAvailable_SourceAvailable;
const int ValueSourceAvailable_eSourceAvailable_eSourceAvailable_ARRAYSIZE = ValueSourceAvailable_eSourceAvailable_eSourceAvailable_MAX + 1;

const ::google::protobuf::EnumDescriptor* ValueSourceAvailable_eSourceAvailable_descriptor();
inline const ::std::string& ValueSourceAvailable_eSourceAvailable_Name(ValueSourceAvailable_eSourceAvailable value) {
  return ::google::protobuf::internal::NameOfEnum(
    ValueSourceAvailable_eSourceAvailable_descriptor(), value);
}
inline bool ValueSourceAvailable_eSourceAvailable_Parse(
    const ::std::string& name, ValueSourceAvailable_eSourceAvailable* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ValueSourceAvailable_eSourceAvailable>(
    ValueSourceAvailable_eSourceAvailable_descriptor(), name, value);
}
enum ValueContactorOnState_eContactorOnState {
  ValueContactorOnState_eContactorOnState_ContactorOff = 0,
  ValueContactorOnState_eContactorOnState_ContactorOn = 1,
  ValueContactorOnState_eContactorOnState_ContactorAvailable = 2,
  ValueContactorOnState_eContactorOnState_ContactorUnAvailable = 4,
  ValueContactorOnState_eContactorOnState_ContactorFault = 8,
  ValueContactorOnState_eContactorOnState_ContactorOverride = 16,
  ValueContactorOnState_eContactorOnState_ContactorStarting = 32,
  ValueContactorOnState_eContactorOnState_ValueContactorOnState_eContactorOnState_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  ValueContactorOnState_eContactorOnState_ValueContactorOnState_eContactorOnState_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool ValueContactorOnState_eContactorOnState_IsValid(int value);
const ValueContactorOnState_eContactorOnState ValueContactorOnState_eContactorOnState_eContactorOnState_MIN = ValueContactorOnState_eContactorOnState_ContactorOff;
const ValueContactorOnState_eContactorOnState ValueContactorOnState_eContactorOnState_eContactorOnState_MAX = ValueContactorOnState_eContactorOnState_ContactorStarting;
const int ValueContactorOnState_eContactorOnState_eContactorOnState_ARRAYSIZE = ValueContactorOnState_eContactorOnState_eContactorOnState_MAX + 1;

const ::google::protobuf::EnumDescriptor* ValueContactorOnState_eContactorOnState_descriptor();
inline const ::std::string& ValueContactorOnState_eContactorOnState_Name(ValueContactorOnState_eContactorOnState value) {
  return ::google::protobuf::internal::NameOfEnum(
    ValueContactorOnState_eContactorOnState_descriptor(), value);
}
inline bool ValueContactorOnState_eContactorOnState_Parse(
    const ::std::string& name, ValueContactorOnState_eContactorOnState* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ValueContactorOnState_eContactorOnState>(
    ValueContactorOnState_eContactorOnState_descriptor(), name, value);
}
enum ValueHVACOperatingMode_eHVACOperatingMode {
  ValueHVACOperatingMode_eHVACOperatingMode_NoChange = 0,
  ValueHVACOperatingMode_eHVACOperatingMode_Off = 1,
  ValueHVACOperatingMode_eHVACOperatingMode_Moisture = 2,
  ValueHVACOperatingMode_eHVACOperatingMode_Auto = 3,
  ValueHVACOperatingMode_eHVACOperatingMode_Heat = 4,
  ValueHVACOperatingMode_eHVACOperatingMode_Cool = 5,
  ValueHVACOperatingMode_eHVACOperatingMode_AutoAux = 6,
  ValueHVACOperatingMode_eHVACOperatingMode_Aux = 7,
  ValueHVACOperatingMode_eHVACOperatingMode_FanOnly = 8,
  ValueHVACOperatingMode_eHVACOperatingMode_Pet = 10,
  ValueHVACOperatingMode_eHVACOperatingMode_ValueHVACOperatingMode_eHVACOperatingMode_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  ValueHVACOperatingMode_eHVACOperatingMode_ValueHVACOperatingMode_eHVACOperatingMode_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool ValueHVACOperatingMode_eHVACOperatingMode_IsValid(int value);
const ValueHVACOperatingMode_eHVACOperatingMode ValueHVACOperatingMode_eHVACOperatingMode_eHVACOperatingMode_MIN = ValueHVACOperatingMode_eHVACOperatingMode_NoChange;
const ValueHVACOperatingMode_eHVACOperatingMode ValueHVACOperatingMode_eHVACOperatingMode_eHVACOperatingMode_MAX = ValueHVACOperatingMode_eHVACOperatingMode_Pet;
const int ValueHVACOperatingMode_eHVACOperatingMode_eHVACOperatingMode_ARRAYSIZE = ValueHVACOperatingMode_eHVACOperatingMode_eHVACOperatingMode_MAX + 1;

const ::google::protobuf::EnumDescriptor* ValueHVACOperatingMode_eHVACOperatingMode_descriptor();
inline const ::std::string& ValueHVACOperatingMode_eHVACOperatingMode_Name(ValueHVACOperatingMode_eHVACOperatingMode value) {
  return ::google::protobuf::internal::NameOfEnum(
    ValueHVACOperatingMode_eHVACOperatingMode_descriptor(), value);
}
inline bool ValueHVACOperatingMode_eHVACOperatingMode_Parse(
    const ::std::string& name, ValueHVACOperatingMode_eHVACOperatingMode* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ValueHVACOperatingMode_eHVACOperatingMode>(
    ValueHVACOperatingMode_eHVACOperatingMode_descriptor(), name, value);
}
enum ValueAwningState_eAwningState {
  ValueAwningState_eAwningState_AwningNoPower = 0,
  ValueAwningState_eAwningState_AwningParked = 1,
  ValueAwningState_eAwningState_AwningTiltedLeft = 2,
  ValueAwningState_eAwningState_AwningTiltedLeftRight = 3,
  ValueAwningState_eAwningState_AwningTiltedRight = 4,
  ValueAwningState_eAwningState_AwningOpenUnknown = 5,
  ValueAwningState_eAwningState_AwningOpenFull = 6,
  ValueAwningState_eAwningState_AwningMoving = 7,
  ValueAwningState_eAwningState_ValueAwningState_eAwningState_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  ValueAwningState_eAwningState_ValueAwningState_eAwningState_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool ValueAwningState_eAwningState_IsValid(int value);
const ValueAwningState_eAwningState ValueAwningState_eAwningState_eAwningState_MIN = ValueAwningState_eAwningState_AwningNoPower;
const ValueAwningState_eAwningState ValueAwningState_eAwningState_eAwningState_MAX = ValueAwningState_eAwningState_AwningMoving;
const int ValueAwningState_eAwningState_eAwningState_ARRAYSIZE = ValueAwningState_eAwningState_eAwningState_MAX + 1;

const ::google::protobuf::EnumDescriptor* ValueAwningState_eAwningState_descriptor();
inline const ::std::string& ValueAwningState_eAwningState_Name(ValueAwningState_eAwningState value) {
  return ::google::protobuf::internal::NameOfEnum(
    ValueAwningState_eAwningState_descriptor(), value);
}
inline bool ValueAwningState_eAwningState_Parse(
    const ::std::string& name, ValueAwningState_eAwningState* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ValueAwningState_eAwningState>(
    ValueAwningState_eAwningState_descriptor(), name, value);
}
enum ValueGeneratorState_eGeneratorState {
  ValueGeneratorState_eGeneratorState_GeneratorOff = 0,
  ValueGeneratorState_eGeneratorState_GeneratorOn = 1,
  ValueGeneratorState_eGeneratorState_GeneratorUnknown = 2,
  ValueGeneratorState_eGeneratorState_ValueGeneratorState_eGeneratorState_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  ValueGeneratorState_eGeneratorState_ValueGeneratorState_eGeneratorState_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool ValueGeneratorState_eGeneratorState_IsValid(int value);
const ValueGeneratorState_eGeneratorState ValueGeneratorState_eGeneratorState_eGeneratorState_MIN = ValueGeneratorState_eGeneratorState_GeneratorOff;
const ValueGeneratorState_eGeneratorState ValueGeneratorState_eGeneratorState_eGeneratorState_MAX = ValueGeneratorState_eGeneratorState_GeneratorUnknown;
const int ValueGeneratorState_eGeneratorState_eGeneratorState_ARRAYSIZE = ValueGeneratorState_eGeneratorState_eGeneratorState_MAX + 1;

const ::google::protobuf::EnumDescriptor* ValueGeneratorState_eGeneratorState_descriptor();
inline const ::std::string& ValueGeneratorState_eGeneratorState_Name(ValueGeneratorState_eGeneratorState value) {
  return ::google::protobuf::internal::NameOfEnum(
    ValueGeneratorState_eGeneratorState_descriptor(), value);
}
inline bool ValueGeneratorState_eGeneratorState_Parse(
    const ::std::string& name, ValueGeneratorState_eGeneratorState* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ValueGeneratorState_eGeneratorState>(
    ValueGeneratorState_eGeneratorState_descriptor(), name, value);
}
enum ValueInverterState_eInverterState {
  ValueInverterState_eInverterState_Inverting = 0,
  ValueInverterState_eInverterState_ACPassthru = 1,
  ValueInverterState_eInverterState_LoadSense = 2,
  ValueInverterState_eInverterState_Fault = 3,
  ValueInverterState_eInverterState_Disabled = 4,
  ValueInverterState_eInverterState_Charging = 5,
  ValueInverterState_eInverterState_EnergySaving = 6,
  ValueInverterState_eInverterState_Supporting = 7,
  ValueInverterState_eInverterState_EnergySaving2 = 12,
  ValueInverterState_eInverterState_Supporting2 = 13,
  ValueInverterState_eInverterState_Error = 14,
  ValueInverterState_eInverterState_DataNotAvailable = 15,
  ValueInverterState_eInverterState_ValueInverterState_eInverterState_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  ValueInverterState_eInverterState_ValueInverterState_eInverterState_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool ValueInverterState_eInverterState_IsValid(int value);
const ValueInverterState_eInverterState ValueInverterState_eInverterState_eInverterState_MIN = ValueInverterState_eInverterState_Inverting;
const ValueInverterState_eInverterState ValueInverterState_eInverterState_eInverterState_MAX = ValueInverterState_eInverterState_DataNotAvailable;
const int ValueInverterState_eInverterState_eInverterState_ARRAYSIZE = ValueInverterState_eInverterState_eInverterState_MAX + 1;

const ::google::protobuf::EnumDescriptor* ValueInverterState_eInverterState_descriptor();
inline const ::std::string& ValueInverterState_eInverterState_Name(ValueInverterState_eInverterState value) {
  return ::google::protobuf::internal::NameOfEnum(
    ValueInverterState_eInverterState_descriptor(), value);
}
inline bool ValueInverterState_eInverterState_Parse(
    const ::std::string& name, ValueInverterState_eInverterState* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ValueInverterState_eInverterState>(
    ValueInverterState_eInverterState_descriptor(), name, value);
}
enum ValueChargerState_eChargerState {
  ValueChargerState_eChargerState_NotCharging = 0,
  ValueChargerState_eChargerState_Bulk = 1,
  ValueChargerState_eChargerState_Absorption = 2,
  ValueChargerState_eChargerState_Overcharge = 3,
  ValueChargerState_eChargerState_Equalize = 4,
  ValueChargerState_eChargerState_Float = 5,
  ValueChargerState_eChargerState_NoFloat = 6,
  ValueChargerState_eChargerState_ConstantVI = 7,
  ValueChargerState_eChargerState_Disabled = 8,
  ValueChargerState_eChargerState_Fault = 9,
  ValueChargerState_eChargerState_ValueChargerState_eChargerState_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  ValueChargerState_eChargerState_ValueChargerState_eChargerState_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool ValueChargerState_eChargerState_IsValid(int value);
const ValueChargerState_eChargerState ValueChargerState_eChargerState_eChargerState_MIN = ValueChargerState_eChargerState_NotCharging;
const ValueChargerState_eChargerState ValueChargerState_eChargerState_eChargerState_MAX = ValueChargerState_eChargerState_Fault;
const int ValueChargerState_eChargerState_eChargerState_ARRAYSIZE = ValueChargerState_eChargerState_eChargerState_MAX + 1;

const ::google::protobuf::EnumDescriptor* ValueChargerState_eChargerState_descriptor();
inline const ::std::string& ValueChargerState_eChargerState_Name(ValueChargerState_eChargerState value) {
  return ::google::protobuf::internal::NameOfEnum(
    ValueChargerState_eChargerState_descriptor(), value);
}
inline bool ValueChargerState_eChargerState_Parse(
    const ::std::string& name, ValueChargerState_eChargerState* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ValueChargerState_eChargerState>(
    ValueChargerState_eChargerState_descriptor(), name, value);
}
enum ValueInverterChargerEnabled_eInverterChargerEnabled {
  ValueInverterChargerEnabled_eInverterChargerEnabled_Off = 0,
  ValueInverterChargerEnabled_eInverterChargerEnabled_On = 1,
  ValueInverterChargerEnabled_eInverterChargerEnabled_Error = 2,
  ValueInverterChargerEnabled_eInverterChargerEnabled_Unavailable = 3,
  ValueInverterChargerEnabled_eInverterChargerEnabled_ValueInverterChargerEnabled_eInverterChargerEnabled_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  ValueInverterChargerEnabled_eInverterChargerEnabled_ValueInverterChargerEnabled_eInverterChargerEnabled_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool ValueInverterChargerEnabled_eInverterChargerEnabled_IsValid(int value);
const ValueInverterChargerEnabled_eInverterChargerEnabled ValueInverterChargerEnabled_eInverterChargerEnabled_eInverterChargerEnabled_MIN = ValueInverterChargerEnabled_eInverterChargerEnabled_Off;
const ValueInverterChargerEnabled_eInverterChargerEnabled ValueInverterChargerEnabled_eInverterChargerEnabled_eInverterChargerEnabled_MAX = ValueInverterChargerEnabled_eInverterChargerEnabled_Unavailable;
const int ValueInverterChargerEnabled_eInverterChargerEnabled_eInverterChargerEnabled_ARRAYSIZE = ValueInverterChargerEnabled_eInverterChargerEnabled_eInverterChargerEnabled_MAX + 1;

const ::google::protobuf::EnumDescriptor* ValueInverterChargerEnabled_eInverterChargerEnabled_descriptor();
inline const ::std::string& ValueInverterChargerEnabled_eInverterChargerEnabled_Name(ValueInverterChargerEnabled_eInverterChargerEnabled value) {
  return ::google::protobuf::internal::NameOfEnum(
    ValueInverterChargerEnabled_eInverterChargerEnabled_descriptor(), value);
}
inline bool ValueInverterChargerEnabled_eInverterChargerEnabled_Parse(
    const ::std::string& name, ValueInverterChargerEnabled_eInverterChargerEnabled* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ValueInverterChargerEnabled_eInverterChargerEnabled>(
    ValueInverterChargerEnabled_eInverterChargerEnabled_descriptor(), name, value);
}
enum ValueTyreStatus_eTyreStatus {
  ValueTyreStatus_eTyreStatus_Ok = 0,
  ValueTyreStatus_eTyreStatus_Leak = 1,
  ValueTyreStatus_eTyreStatus_Error = 2,
  ValueTyreStatus_eTyreStatus_ValueTyreStatus_eTyreStatus_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  ValueTyreStatus_eTyreStatus_ValueTyreStatus_eTyreStatus_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool ValueTyreStatus_eTyreStatus_IsValid(int value);
const ValueTyreStatus_eTyreStatus ValueTyreStatus_eTyreStatus_eTyreStatus_MIN = ValueTyreStatus_eTyreStatus_Ok;
const ValueTyreStatus_eTyreStatus ValueTyreStatus_eTyreStatus_eTyreStatus_MAX = ValueTyreStatus_eTyreStatus_Error;
const int ValueTyreStatus_eTyreStatus_eTyreStatus_ARRAYSIZE = ValueTyreStatus_eTyreStatus_eTyreStatus_MAX + 1;

const ::google::protobuf::EnumDescriptor* ValueTyreStatus_eTyreStatus_descriptor();
inline const ::std::string& ValueTyreStatus_eTyreStatus_Name(ValueTyreStatus_eTyreStatus value) {
  return ::google::protobuf::internal::NameOfEnum(
    ValueTyreStatus_eTyreStatus_descriptor(), value);
}
inline bool ValueTyreStatus_eTyreStatus_Parse(
    const ::std::string& name, ValueTyreStatus_eTyreStatus* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ValueTyreStatus_eTyreStatus>(
    ValueTyreStatus_eTyreStatus_descriptor(), name, value);
}
enum ValueTyreLimitStatus_eTyreLimitStatus {
  ValueTyreLimitStatus_eTyreLimitStatus_ExtremeOverPressure = 0,
  ValueTyreLimitStatus_eTyreLimitStatus_OverPressure = 1,
  ValueTyreLimitStatus_eTyreLimitStatus_NoAlarm = 2,
  ValueTyreLimitStatus_eTyreLimitStatus_LowPressure = 3,
  ValueTyreLimitStatus_eTyreLimitStatus_ExtremeLowPressure = 4,
  ValueTyreLimitStatus_eTyreLimitStatus_NA = 5,
  ValueTyreLimitStatus_eTyreLimitStatus_Error = 6,
  ValueTyreLimitStatus_eTyreLimitStatus_ValueTyreLimitStatus_eTyreLimitStatus_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  ValueTyreLimitStatus_eTyreLimitStatus_ValueTyreLimitStatus_eTyreLimitStatus_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool ValueTyreLimitStatus_eTyreLimitStatus_IsValid(int value);
const ValueTyreLimitStatus_eTyreLimitStatus ValueTyreLimitStatus_eTyreLimitStatus_eTyreLimitStatus_MIN = ValueTyreLimitStatus_eTyreLimitStatus_ExtremeOverPressure;
const ValueTyreLimitStatus_eTyreLimitStatus ValueTyreLimitStatus_eTyreLimitStatus_eTyreLimitStatus_MAX = ValueTyreLimitStatus_eTyreLimitStatus_Error;
const int ValueTyreLimitStatus_eTyreLimitStatus_eTyreLimitStatus_ARRAYSIZE = ValueTyreLimitStatus_eTyreLimitStatus_eTyreLimitStatus_MAX + 1;

const ::google::protobuf::EnumDescriptor* ValueTyreLimitStatus_eTyreLimitStatus_descriptor();
inline const ::std::string& ValueTyreLimitStatus_eTyreLimitStatus_Name(ValueTyreLimitStatus_eTyreLimitStatus value) {
  return ::google::protobuf::internal::NameOfEnum(
    ValueTyreLimitStatus_eTyreLimitStatus_descriptor(), value);
}
inline bool ValueTyreLimitStatus_eTyreLimitStatus_Parse(
    const ::std::string& name, ValueTyreLimitStatus_eTyreLimitStatus* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ValueTyreLimitStatus_eTyreLimitStatus>(
    ValueTyreLimitStatus_eTyreLimitStatus_descriptor(), name, value);
}
enum ValueAudioSource_eAudioSource {
  ValueAudioSource_eAudioSource_VesselAlarm = 0,
  ValueAudioSource_eAudioSource_AM = 1,
  ValueAudioSource_eAudioSource_FM = 2,
  ValueAudioSource_eAudioSource_Weather = 3,
  ValueAudioSource_eAudioSource_DAB = 4,
  ValueAudioSource_eAudioSource_AUX = 5,
  ValueAudioSource_eAudioSource_USB = 6,
  ValueAudioSource_eAudioSource_CD = 7,
  ValueAudioSource_eAudioSource_MP3 = 8,
  ValueAudioSource_eAudioSource_AppleiOS = 9,
  ValueAudioSource_eAudioSource_Android = 10,
  ValueAudioSource_eAudioSource_Bluetooth = 11,
  ValueAudioSource_eAudioSource_SiriusXM = 12,
  ValueAudioSource_eAudioSource_Pandora = 13,
  ValueAudioSource_eAudioSource_Spotify = 14,
  ValueAudioSource_eAudioSource_Slacker = 15,
  ValueAudioSource_eAudioSource_Songza = 16,
  ValueAudioSource_eAudioSource_AppleRadio = 17,
  ValueAudioSource_eAudioSource_LastFM = 18,
  ValueAudioSource_eAudioSource_Ethernet = 19,
  ValueAudioSource_eAudioSource_VideoMP4 = 20,
  ValueAudioSource_eAudioSource_VideoDVD = 21,
  ValueAudioSource_eAudioSource_VideoBlueRay = 22,
  ValueAudioSource_eAudioSource_HDMI = 23,
  ValueAudioSource_eAudioSource_Video = 24,
  ValueAudioSource_eAudioSource_NoSource = 25,
  ValueAudioSource_eAudioSource_ValueAudioSource_eAudioSource_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  ValueAudioSource_eAudioSource_ValueAudioSource_eAudioSource_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool ValueAudioSource_eAudioSource_IsValid(int value);
const ValueAudioSource_eAudioSource ValueAudioSource_eAudioSource_eAudioSource_MIN = ValueAudioSource_eAudioSource_VesselAlarm;
const ValueAudioSource_eAudioSource ValueAudioSource_eAudioSource_eAudioSource_MAX = ValueAudioSource_eAudioSource_NoSource;
const int ValueAudioSource_eAudioSource_eAudioSource_ARRAYSIZE = ValueAudioSource_eAudioSource_eAudioSource_MAX + 1;

const ::google::protobuf::EnumDescriptor* ValueAudioSource_eAudioSource_descriptor();
inline const ::std::string& ValueAudioSource_eAudioSource_Name(ValueAudioSource_eAudioSource value) {
  return ::google::protobuf::internal::NameOfEnum(
    ValueAudioSource_eAudioSource_descriptor(), value);
}
inline bool ValueAudioSource_eAudioSource_Parse(
    const ::std::string& name, ValueAudioSource_eAudioSource* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ValueAudioSource_eAudioSource>(
    ValueAudioSource_eAudioSource_descriptor(), name, value);
}
enum ValueAudioStatus_eAudioStatus {
  ValueAudioStatus_eAudioStatus_AudioStatusInitialising = 0,
  ValueAudioStatus_eAudioStatus_AudioStatusReady = 1,
  ValueAudioStatus_eAudioStatus_AudioStatusUnknown = 2,
  ValueAudioStatus_eAudioStatus_ValueAudioStatus_eAudioStatus_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  ValueAudioStatus_eAudioStatus_ValueAudioStatus_eAudioStatus_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool ValueAudioStatus_eAudioStatus_IsValid(int value);
const ValueAudioStatus_eAudioStatus ValueAudioStatus_eAudioStatus_eAudioStatus_MIN = ValueAudioStatus_eAudioStatus_AudioStatusInitialising;
const ValueAudioStatus_eAudioStatus ValueAudioStatus_eAudioStatus_eAudioStatus_MAX = ValueAudioStatus_eAudioStatus_AudioStatusUnknown;
const int ValueAudioStatus_eAudioStatus_eAudioStatus_ARRAYSIZE = ValueAudioStatus_eAudioStatus_eAudioStatus_MAX + 1;

const ::google::protobuf::EnumDescriptor* ValueAudioStatus_eAudioStatus_descriptor();
inline const ::std::string& ValueAudioStatus_eAudioStatus_Name(ValueAudioStatus_eAudioStatus value) {
  return ::google::protobuf::internal::NameOfEnum(
    ValueAudioStatus_eAudioStatus_descriptor(), value);
}
inline bool ValueAudioStatus_eAudioStatus_Parse(
    const ::std::string& name, ValueAudioStatus_eAudioStatus* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ValueAudioStatus_eAudioStatus>(
    ValueAudioStatus_eAudioStatus_descriptor(), name, value);
}
enum ValueGNSSMethod_eGNSSMethod {
  ValueGNSSMethod_eGNSSMethod_NoFix = 0,
  ValueGNSSMethod_eGNSSMethod_StandardFix = 1,
  ValueGNSSMethod_eGNSSMethod_DifferentialFix = 2,
  ValueGNSSMethod_eGNSSMethod_PreciseFix = 3,
  ValueGNSSMethod_eGNSSMethod_RtkInt = 4,
  ValueGNSSMethod_eGNSSMethod_RtkFloat = 5,
  ValueGNSSMethod_eGNSSMethod_Estimated = 6,
  ValueGNSSMethod_eGNSSMethod_Manual = 7,
  ValueGNSSMethod_eGNSSMethod_Simulator = 8,
  ValueGNSSMethod_eGNSSMethod_Error = 14,
  ValueGNSSMethod_eGNSSMethod_Null = 15,
  ValueGNSSMethod_eGNSSMethod_ValueGNSSMethod_eGNSSMethod_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  ValueGNSSMethod_eGNSSMethod_ValueGNSSMethod_eGNSSMethod_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool ValueGNSSMethod_eGNSSMethod_IsValid(int value);
const ValueGNSSMethod_eGNSSMethod ValueGNSSMethod_eGNSSMethod_eGNSSMethod_MIN = ValueGNSSMethod_eGNSSMethod_NoFix;
const ValueGNSSMethod_eGNSSMethod ValueGNSSMethod_eGNSSMethod_eGNSSMethod_MAX = ValueGNSSMethod_eGNSSMethod_Null;
const int ValueGNSSMethod_eGNSSMethod_eGNSSMethod_ARRAYSIZE = ValueGNSSMethod_eGNSSMethod_eGNSSMethod_MAX + 1;

const ::google::protobuf::EnumDescriptor* ValueGNSSMethod_eGNSSMethod_descriptor();
inline const ::std::string& ValueGNSSMethod_eGNSSMethod_Name(ValueGNSSMethod_eGNSSMethod value) {
  return ::google::protobuf::internal::NameOfEnum(
    ValueGNSSMethod_eGNSSMethod_descriptor(), value);
}
inline bool ValueGNSSMethod_eGNSSMethod_Parse(
    const ::std::string& name, ValueGNSSMethod_eGNSSMethod* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ValueGNSSMethod_eGNSSMethod>(
    ValueGNSSMethod_eGNSSMethod_descriptor(), name, value);
}
enum ValueGNSSFixType_eGNSSFixType {
  ValueGNSSFixType_eGNSSFixType_FixNA = 0,
  ValueGNSSFixType_eGNSSFixType_Fix2D = 2,
  ValueGNSSFixType_eGNSSFixType_Fix3D = 3,
  ValueGNSSFixType_eGNSSFixType_ValueGNSSFixType_eGNSSFixType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  ValueGNSSFixType_eGNSSFixType_ValueGNSSFixType_eGNSSFixType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool ValueGNSSFixType_eGNSSFixType_IsValid(int value);
const ValueGNSSFixType_eGNSSFixType ValueGNSSFixType_eGNSSFixType_eGNSSFixType_MIN = ValueGNSSFixType_eGNSSFixType_FixNA;
const ValueGNSSFixType_eGNSSFixType ValueGNSSFixType_eGNSSFixType_eGNSSFixType_MAX = ValueGNSSFixType_eGNSSFixType_Fix3D;
const int ValueGNSSFixType_eGNSSFixType_eGNSSFixType_ARRAYSIZE = ValueGNSSFixType_eGNSSFixType_eGNSSFixType_MAX + 1;

const ::google::protobuf::EnumDescriptor* ValueGNSSFixType_eGNSSFixType_descriptor();
inline const ::std::string& ValueGNSSFixType_eGNSSFixType_Name(ValueGNSSFixType_eGNSSFixType value) {
  return ::google::protobuf::internal::NameOfEnum(
    ValueGNSSFixType_eGNSSFixType_descriptor(), value);
}
inline bool ValueGNSSFixType_eGNSSFixType_Parse(
    const ::std::string& name, ValueGNSSFixType_eGNSSFixType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ValueGNSSFixType_eGNSSFixType>(
    ValueGNSSFixType_eGNSSFixType_descriptor(), name, value);
}
enum HealthStatus_eHealth {
  HealthStatus_eHealth_HealthOk = 0,
  HealthStatus_eHealth_HealthBad = 2,
  HealthStatus_eHealth_HealthNone = 3,
  HealthStatus_eHealth_HealthStatus_eHealth_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  HealthStatus_eHealth_HealthStatus_eHealth_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool HealthStatus_eHealth_IsValid(int value);
const HealthStatus_eHealth HealthStatus_eHealth_eHealth_MIN = HealthStatus_eHealth_HealthOk;
const HealthStatus_eHealth HealthStatus_eHealth_eHealth_MAX = HealthStatus_eHealth_HealthNone;
const int HealthStatus_eHealth_eHealth_ARRAYSIZE = HealthStatus_eHealth_eHealth_MAX + 1;

const ::google::protobuf::EnumDescriptor* HealthStatus_eHealth_descriptor();
inline const ::std::string& HealthStatus_eHealth_Name(HealthStatus_eHealth value) {
  return ::google::protobuf::internal::NameOfEnum(
    HealthStatus_eHealth_descriptor(), value);
}
inline bool HealthStatus_eHealth_Parse(
    const ::std::string& name, HealthStatus_eHealth* value) {
  return ::google::protobuf::internal::ParseNamedEnum<HealthStatus_eHealth>(
    HealthStatus_eHealth_descriptor(), name, value);
}
// ===================================================================

class Geofence : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Nmea2k.Geofence) */ {
 public:
  Geofence();
  virtual ~Geofence();

  Geofence(const Geofence& from);

  inline Geofence& operator=(const Geofence& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Geofence(Geofence&& from) noexcept
    : Geofence() {
    *this = ::std::move(from);
  }

  inline Geofence& operator=(Geofence&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Geofence& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Geofence* internal_default_instance() {
    return reinterpret_cast<const Geofence*>(
               &_Geofence_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(Geofence* other);
  friend void swap(Geofence& a, Geofence& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Geofence* New() const final {
    return CreateMaybeMessage<Geofence>(NULL);
  }

  Geofence* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Geofence>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Geofence& from);
  void MergeFrom(const Geofence& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Geofence* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Geofence_eGnssConfidenceLevel eGnssConfidenceLevel;
  static const eGnssConfidenceLevel GNSS_CONFIDENCE_LEVEL_0 =
    Geofence_eGnssConfidenceLevel_GNSS_CONFIDENCE_LEVEL_0;
  static const eGnssConfidenceLevel GNSS_CONFIDENCE_LEVEL_68 =
    Geofence_eGnssConfidenceLevel_GNSS_CONFIDENCE_LEVEL_68;
  static const eGnssConfidenceLevel GNSS_CONFIDENCE_LEVEL_95 =
    Geofence_eGnssConfidenceLevel_GNSS_CONFIDENCE_LEVEL_95;
  static const eGnssConfidenceLevel GNSS_CONFIDENCE_LEVEL_997 =
    Geofence_eGnssConfidenceLevel_GNSS_CONFIDENCE_LEVEL_997;
  static const eGnssConfidenceLevel GNSS_CONFIDENCE_LEVEL_999 =
    Geofence_eGnssConfidenceLevel_GNSS_CONFIDENCE_LEVEL_999;
  static inline bool eGnssConfidenceLevel_IsValid(int value) {
    return Geofence_eGnssConfidenceLevel_IsValid(value);
  }
  static const eGnssConfidenceLevel eGnssConfidenceLevel_MIN =
    Geofence_eGnssConfidenceLevel_eGnssConfidenceLevel_MIN;
  static const eGnssConfidenceLevel eGnssConfidenceLevel_MAX =
    Geofence_eGnssConfidenceLevel_eGnssConfidenceLevel_MAX;
  static const int eGnssConfidenceLevel_ARRAYSIZE =
    Geofence_eGnssConfidenceLevel_eGnssConfidenceLevel_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  eGnssConfidenceLevel_descriptor() {
    return Geofence_eGnssConfidenceLevel_descriptor();
  }
  static inline const ::std::string& eGnssConfidenceLevel_Name(eGnssConfidenceLevel value) {
    return Geofence_eGnssConfidenceLevel_Name(value);
  }
  static inline bool eGnssConfidenceLevel_Parse(const ::std::string& name,
      eGnssConfidenceLevel* value) {
    return Geofence_eGnssConfidenceLevel_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // bool IsEnabled = 1;
  void clear_isenabled();
  static const int kIsEnabledFieldNumber = 1;
  bool isenabled() const;
  void set_isenabled(bool value);

  // bool DoWakeHost = 2;
  void clear_dowakehost();
  static const int kDoWakeHostFieldNumber = 2;
  bool dowakehost() const;
  void set_dowakehost(bool value);

  // bool DoNotify = 3;
  void clear_donotify();
  static const int kDoNotifyFieldNumber = 3;
  bool donotify() const;
  void set_donotify(bool value);

  // bool DoLogImuGnss = 7;
  void clear_dologimugnss();
  static const int kDoLogImuGnssFieldNumber = 7;
  bool dologimugnss() const;
  void set_dologimugnss(bool value);

  // float Latitude = 4;
  void clear_latitude();
  static const int kLatitudeFieldNumber = 4;
  float latitude() const;
  void set_latitude(float value);

  // float Longitude = 5;
  void clear_longitude();
  static const int kLongitudeFieldNumber = 5;
  float longitude() const;
  void set_longitude(float value);

  // uint32 RadiusM = 6;
  void clear_radiusm();
  static const int kRadiusMFieldNumber = 6;
  ::google::protobuf::uint32 radiusm() const;
  void set_radiusm(::google::protobuf::uint32 value);

  // .Nmea2k.Geofence.eGnssConfidenceLevel confidenceLevel = 8;
  void clear_confidencelevel();
  static const int kConfidenceLevelFieldNumber = 8;
  ::Nmea2k::Geofence_eGnssConfidenceLevel confidencelevel() const;
  void set_confidencelevel(::Nmea2k::Geofence_eGnssConfidenceLevel value);

  // @@protoc_insertion_point(class_scope:Nmea2k.Geofence)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool isenabled_;
  bool dowakehost_;
  bool donotify_;
  bool dologimugnss_;
  float latitude_;
  float longitude_;
  ::google::protobuf::uint32 radiusm_;
  int confidencelevel_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_Nmea2k_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class PsvGnss : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Nmea2k.PsvGnss) */ {
 public:
  PsvGnss();
  virtual ~PsvGnss();

  PsvGnss(const PsvGnss& from);

  inline PsvGnss& operator=(const PsvGnss& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PsvGnss(PsvGnss&& from) noexcept
    : PsvGnss() {
    *this = ::std::move(from);
  }

  inline PsvGnss& operator=(PsvGnss&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const PsvGnss& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PsvGnss* internal_default_instance() {
    return reinterpret_cast<const PsvGnss*>(
               &_PsvGnss_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(PsvGnss* other);
  friend void swap(PsvGnss& a, PsvGnss& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PsvGnss* New() const final {
    return CreateMaybeMessage<PsvGnss>(NULL);
  }

  PsvGnss* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<PsvGnss>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const PsvGnss& from);
  void MergeFrom(const PsvGnss& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PsvGnss* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .Nmea2k.Geofence Geofence = 2;
  bool has_geofence() const;
  void clear_geofence();
  static const int kGeofenceFieldNumber = 2;
  private:
  const ::Nmea2k::Geofence& _internal_geofence() const;
  public:
  const ::Nmea2k::Geofence& geofence() const;
  ::Nmea2k::Geofence* release_geofence();
  ::Nmea2k::Geofence* mutable_geofence();
  void set_allocated_geofence(::Nmea2k::Geofence* geofence);

  // uint32 Index = 1;
  void clear_index();
  static const int kIndexFieldNumber = 1;
  ::google::protobuf::uint32 index() const;
  void set_index(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Nmea2k.PsvGnss)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::Nmea2k::Geofence* geofence_;
  ::google::protobuf::uint32 index_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_Nmea2k_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class PsvConfiguration : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Nmea2k.PsvConfiguration) */ {
 public:
  PsvConfiguration();
  virtual ~PsvConfiguration();

  PsvConfiguration(const PsvConfiguration& from);

  inline PsvConfiguration& operator=(const PsvConfiguration& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PsvConfiguration(PsvConfiguration&& from) noexcept
    : PsvConfiguration() {
    *this = ::std::move(from);
  }

  inline PsvConfiguration& operator=(PsvConfiguration&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const PsvConfiguration& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PsvConfiguration* internal_default_instance() {
    return reinterpret_cast<const PsvConfiguration*>(
               &_PsvConfiguration_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(PsvConfiguration* other);
  friend void swap(PsvConfiguration& a, PsvConfiguration& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PsvConfiguration* New() const final {
    return CreateMaybeMessage<PsvConfiguration>(NULL);
  }

  PsvConfiguration* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<PsvConfiguration>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const PsvConfiguration& from);
  void MergeFrom(const PsvConfiguration& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PsvConfiguration* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef PsvConfiguration_eConfigType eConfigType;
  static const eConfigType Gnss =
    PsvConfiguration_eConfigType_Gnss;
  static inline bool eConfigType_IsValid(int value) {
    return PsvConfiguration_eConfigType_IsValid(value);
  }
  static const eConfigType eConfigType_MIN =
    PsvConfiguration_eConfigType_eConfigType_MIN;
  static const eConfigType eConfigType_MAX =
    PsvConfiguration_eConfigType_eConfigType_MAX;
  static const int eConfigType_ARRAYSIZE =
    PsvConfiguration_eConfigType_eConfigType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  eConfigType_descriptor() {
    return PsvConfiguration_eConfigType_descriptor();
  }
  static inline const ::std::string& eConfigType_Name(eConfigType value) {
    return PsvConfiguration_eConfigType_Name(value);
  }
  static inline bool eConfigType_Parse(const ::std::string& name,
      eConfigType* value) {
    return PsvConfiguration_eConfigType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // string Token = 1;
  void clear_token();
  static const int kTokenFieldNumber = 1;
  const ::std::string& token() const;
  void set_token(const ::std::string& value);
  #if LANG_CXX11
  void set_token(::std::string&& value);
  #endif
  void set_token(const char* value);
  void set_token(const char* value, size_t size);
  ::std::string* mutable_token();
  ::std::string* release_token();
  void set_allocated_token(::std::string* token);

  // .Nmea2k.PsvGnss PsvGnss = 3;
  bool has_psvgnss() const;
  void clear_psvgnss();
  static const int kPsvGnssFieldNumber = 3;
  private:
  const ::Nmea2k::PsvGnss& _internal_psvgnss() const;
  public:
  const ::Nmea2k::PsvGnss& psvgnss() const;
  ::Nmea2k::PsvGnss* release_psvgnss();
  ::Nmea2k::PsvGnss* mutable_psvgnss();
  void set_allocated_psvgnss(::Nmea2k::PsvGnss* psvgnss);

  // .Nmea2k.PsvConfiguration.eConfigType ConfigType = 2;
  void clear_configtype();
  static const int kConfigTypeFieldNumber = 2;
  ::Nmea2k::PsvConfiguration_eConfigType configtype() const;
  void set_configtype(::Nmea2k::PsvConfiguration_eConfigType value);

  // @@protoc_insertion_point(class_scope:Nmea2k.PsvConfiguration)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr token_;
  ::Nmea2k::PsvGnss* psvgnss_;
  int configtype_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_Nmea2k_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class FavoriteRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Nmea2k.FavoriteRequest) */ {
 public:
  FavoriteRequest();
  virtual ~FavoriteRequest();

  FavoriteRequest(const FavoriteRequest& from);

  inline FavoriteRequest& operator=(const FavoriteRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  FavoriteRequest(FavoriteRequest&& from) noexcept
    : FavoriteRequest() {
    *this = ::std::move(from);
  }

  inline FavoriteRequest& operator=(FavoriteRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const FavoriteRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FavoriteRequest* internal_default_instance() {
    return reinterpret_cast<const FavoriteRequest*>(
               &_FavoriteRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(FavoriteRequest* other);
  friend void swap(FavoriteRequest& a, FavoriteRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline FavoriteRequest* New() const final {
    return CreateMaybeMessage<FavoriteRequest>(NULL);
  }

  FavoriteRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<FavoriteRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const FavoriteRequest& from);
  void MergeFrom(const FavoriteRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FavoriteRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef FavoriteRequest_eActionType eActionType;
  static const eActionType NormalAction =
    FavoriteRequest_eActionType_NormalAction;
  static const eActionType BoatAction =
    FavoriteRequest_eActionType_BoatAction;
  static const eActionType ClearAction =
    FavoriteRequest_eActionType_ClearAction;
  static inline bool eActionType_IsValid(int value) {
    return FavoriteRequest_eActionType_IsValid(value);
  }
  static const eActionType eActionType_MIN =
    FavoriteRequest_eActionType_eActionType_MIN;
  static const eActionType eActionType_MAX =
    FavoriteRequest_eActionType_eActionType_MAX;
  static const int eActionType_ARRAYSIZE =
    FavoriteRequest_eActionType_eActionType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  eActionType_descriptor() {
    return FavoriteRequest_eActionType_descriptor();
  }
  static inline const ::std::string& eActionType_Name(eActionType value) {
    return FavoriteRequest_eActionType_Name(value);
  }
  static inline bool eActionType_Parse(const ::std::string& name,
      eActionType* value) {
    return FavoriteRequest_eActionType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // string Token = 8;
  void clear_token();
  static const int kTokenFieldNumber = 8;
  const ::std::string& token() const;
  void set_token(const ::std::string& value);
  #if LANG_CXX11
  void set_token(::std::string&& value);
  #endif
  void set_token(const char* value);
  void set_token(const char* value, size_t size);
  ::std::string* mutable_token();
  ::std::string* release_token();
  void set_allocated_token(::std::string* token);

  // .Nmea2k.FavoriteRequest.eActionType ActionType = 1;
  void clear_actiontype();
  static const int kActionTypeFieldNumber = 1;
  ::Nmea2k::FavoriteRequest_eActionType actiontype() const;
  void set_actiontype(::Nmea2k::FavoriteRequest_eActionType value);

  // uint32 Action = 2;
  void clear_action();
  static const int kActionFieldNumber = 2;
  ::google::protobuf::uint32 action() const;
  void set_action(::google::protobuf::uint32 value);

  // uint32 ParentId = 3;
  void clear_parentid();
  static const int kParentIdFieldNumber = 3;
  ::google::protobuf::uint32 parentid() const;
  void set_parentid(::google::protobuf::uint32 value);

  // uint32 ListIndex = 4;
  void clear_listindex();
  static const int kListIndexFieldNumber = 4;
  ::google::protobuf::uint32 listindex() const;
  void set_listindex(::google::protobuf::uint32 value);

  // uint32 NewIndex = 5;
  void clear_newindex();
  static const int kNewIndexFieldNumber = 5;
  ::google::protobuf::uint32 newindex() const;
  void set_newindex(::google::protobuf::uint32 value);

  // uint32 DisplayType = 6;
  void clear_displaytype();
  static const int kDisplayTypeFieldNumber = 6;
  ::google::protobuf::uint32 displaytype() const;
  void set_displaytype(::google::protobuf::uint32 value);

  // uint32 Type = 7;
  void clear_type();
  static const int kTypeFieldNumber = 7;
  ::google::protobuf::uint32 type() const;
  void set_type(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Nmea2k.FavoriteRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr token_;
  int actiontype_;
  ::google::protobuf::uint32 action_;
  ::google::protobuf::uint32 parentid_;
  ::google::protobuf::uint32 listindex_;
  ::google::protobuf::uint32 newindex_;
  ::google::protobuf::uint32 displaytype_;
  ::google::protobuf::uint32 type_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_Nmea2k_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class FavoriteResult : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Nmea2k.FavoriteResult) */ {
 public:
  FavoriteResult();
  virtual ~FavoriteResult();

  FavoriteResult(const FavoriteResult& from);

  inline FavoriteResult& operator=(const FavoriteResult& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  FavoriteResult(FavoriteResult&& from) noexcept
    : FavoriteResult() {
    *this = ::std::move(from);
  }

  inline FavoriteResult& operator=(FavoriteResult&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const FavoriteResult& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FavoriteResult* internal_default_instance() {
    return reinterpret_cast<const FavoriteResult*>(
               &_FavoriteResult_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(FavoriteResult* other);
  friend void swap(FavoriteResult& a, FavoriteResult& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline FavoriteResult* New() const final {
    return CreateMaybeMessage<FavoriteResult>(NULL);
  }

  FavoriteResult* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<FavoriteResult>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const FavoriteResult& from);
  void MergeFrom(const FavoriteResult& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FavoriteResult* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes Info = 1;
  void clear_info();
  static const int kInfoFieldNumber = 1;
  const ::std::string& info() const;
  void set_info(const ::std::string& value);
  #if LANG_CXX11
  void set_info(::std::string&& value);
  #endif
  void set_info(const char* value);
  void set_info(const void* value, size_t size);
  ::std::string* mutable_info();
  ::std::string* release_info();
  void set_allocated_info(::std::string* info);

  // bytes Data = 2;
  void clear_data();
  static const int kDataFieldNumber = 2;
  const ::std::string& data() const;
  void set_data(const ::std::string& value);
  #if LANG_CXX11
  void set_data(::std::string&& value);
  #endif
  void set_data(const char* value);
  void set_data(const void* value, size_t size);
  ::std::string* mutable_data();
  ::std::string* release_data();
  void set_allocated_data(::std::string* data);

  // bool Valid = 3;
  void clear_valid();
  static const int kValidFieldNumber = 3;
  bool valid() const;
  void set_valid(bool value);

  // uint32 Value = 4;
  void clear_value();
  static const int kValueFieldNumber = 4;
  ::google::protobuf::uint32 value() const;
  void set_value(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Nmea2k.FavoriteResult)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr info_;
  ::google::protobuf::internal::ArenaStringPtr data_;
  bool valid_;
  ::google::protobuf::uint32 value_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_Nmea2k_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DataIndex : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Nmea2k.DataIndex) */ {
 public:
  DataIndex();
  virtual ~DataIndex();

  DataIndex(const DataIndex& from);

  inline DataIndex& operator=(const DataIndex& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DataIndex(DataIndex&& from) noexcept
    : DataIndex() {
    *this = ::std::move(from);
  }

  inline DataIndex& operator=(DataIndex&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const DataIndex& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DataIndex* internal_default_instance() {
    return reinterpret_cast<const DataIndex*>(
               &_DataIndex_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void Swap(DataIndex* other);
  friend void swap(DataIndex& a, DataIndex& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DataIndex* New() const final {
    return CreateMaybeMessage<DataIndex>(NULL);
  }

  DataIndex* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<DataIndex>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const DataIndex& from);
  void MergeFrom(const DataIndex& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DataIndex* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef DataIndex_eIndexType eIndexType;
  static const eIndexType Normal =
    DataIndex_eIndexType_Normal;
  static const eIndexType Complex =
    DataIndex_eIndexType_Complex;
  static inline bool eIndexType_IsValid(int value) {
    return DataIndex_eIndexType_IsValid(value);
  }
  static const eIndexType eIndexType_MIN =
    DataIndex_eIndexType_eIndexType_MIN;
  static const eIndexType eIndexType_MAX =
    DataIndex_eIndexType_eIndexType_MAX;
  static const int eIndexType_ARRAYSIZE =
    DataIndex_eIndexType_eIndexType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  eIndexType_descriptor() {
    return DataIndex_eIndexType_descriptor();
  }
  static inline const ::std::string& eIndexType_Name(eIndexType value) {
    return DataIndex_eIndexType_Name(value);
  }
  static inline bool eIndexType_Parse(const ::std::string& name,
      eIndexType* value) {
    return DataIndex_eIndexType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // string Token = 1;
  void clear_token();
  static const int kTokenFieldNumber = 1;
  const ::std::string& token() const;
  void set_token(const ::std::string& value);
  #if LANG_CXX11
  void set_token(::std::string&& value);
  #endif
  void set_token(const char* value);
  void set_token(const char* value, size_t size);
  ::std::string* mutable_token();
  ::std::string* release_token();
  void set_allocated_token(::std::string* token);

  // string BytesData = 5;
  void clear_bytesdata();
  static const int kBytesDataFieldNumber = 5;
  const ::std::string& bytesdata() const;
  void set_bytesdata(const ::std::string& value);
  #if LANG_CXX11
  void set_bytesdata(::std::string&& value);
  #endif
  void set_bytesdata(const char* value);
  void set_bytesdata(const char* value, size_t size);
  ::std::string* mutable_bytesdata();
  ::std::string* release_bytesdata();
  void set_allocated_bytesdata(::std::string* bytesdata);

  // .Nmea2k.DataIndex.eIndexType type = 2;
  void clear_type();
  static const int kTypeFieldNumber = 2;
  ::Nmea2k::DataIndex_eIndexType type() const;
  void set_type(::Nmea2k::DataIndex_eIndexType value);

  // uint32 DataType = 3;
  void clear_datatype();
  static const int kDataTypeFieldNumber = 3;
  ::google::protobuf::uint32 datatype() const;
  void set_datatype(::google::protobuf::uint32 value);

  // uint32 Instance = 4;
  void clear_instance();
  static const int kInstanceFieldNumber = 4;
  ::google::protobuf::uint32 instance() const;
  void set_instance(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Nmea2k.DataIndex)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr token_;
  ::google::protobuf::internal::ArenaStringPtr bytesdata_;
  int type_;
  ::google::protobuf::uint32 datatype_;
  ::google::protobuf::uint32 instance_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_Nmea2k_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DataKey : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Nmea2k.DataKey) */ {
 public:
  DataKey();
  virtual ~DataKey();

  DataKey(const DataKey& from);

  inline DataKey& operator=(const DataKey& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DataKey(DataKey&& from) noexcept
    : DataKey() {
    *this = ::std::move(from);
  }

  inline DataKey& operator=(DataKey&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const DataKey& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DataKey* internal_default_instance() {
    return reinterpret_cast<const DataKey*>(
               &_DataKey_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  void Swap(DataKey* other);
  friend void swap(DataKey& a, DataKey& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DataKey* New() const final {
    return CreateMaybeMessage<DataKey>(NULL);
  }

  DataKey* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<DataKey>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const DataKey& from);
  void MergeFrom(const DataKey& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DataKey* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string Token = 1;
  void clear_token();
  static const int kTokenFieldNumber = 1;
  const ::std::string& token() const;
  void set_token(const ::std::string& value);
  #if LANG_CXX11
  void set_token(::std::string&& value);
  #endif
  void set_token(const char* value);
  void set_token(const char* value, size_t size);
  ::std::string* mutable_token();
  ::std::string* release_token();
  void set_allocated_token(::std::string* token);

  // bool Valid = 2;
  void clear_valid();
  static const int kValidFieldNumber = 2;
  bool valid() const;
  void set_valid(bool value);

  // uint32 Key = 3;
  void clear_key();
  static const int kKeyFieldNumber = 3;
  ::google::protobuf::uint32 key() const;
  void set_key(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Nmea2k.DataKey)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr token_;
  bool valid_;
  ::google::protobuf::uint32 key_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_Nmea2k_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class MonitoringDataLimits : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Nmea2k.MonitoringDataLimits) */ {
 public:
  MonitoringDataLimits();
  virtual ~MonitoringDataLimits();

  MonitoringDataLimits(const MonitoringDataLimits& from);

  inline MonitoringDataLimits& operator=(const MonitoringDataLimits& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  MonitoringDataLimits(MonitoringDataLimits&& from) noexcept
    : MonitoringDataLimits() {
    *this = ::std::move(from);
  }

  inline MonitoringDataLimits& operator=(MonitoringDataLimits&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const MonitoringDataLimits& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MonitoringDataLimits* internal_default_instance() {
    return reinterpret_cast<const MonitoringDataLimits*>(
               &_MonitoringDataLimits_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  void Swap(MonitoringDataLimits* other);
  friend void swap(MonitoringDataLimits& a, MonitoringDataLimits& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline MonitoringDataLimits* New() const final {
    return CreateMaybeMessage<MonitoringDataLimits>(NULL);
  }

  MonitoringDataLimits* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<MonitoringDataLimits>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const MonitoringDataLimits& from);
  void MergeFrom(const MonitoringDataLimits& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MonitoringDataLimits* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bool Valid = 1;
  void clear_valid();
  static const int kValidFieldNumber = 1;
  bool valid() const;
  void set_valid(bool value);

  // float Min = 2;
  void clear_min();
  static const int kMinFieldNumber = 2;
  float min() const;
  void set_min(float value);

  // float Max = 3;
  void clear_max();
  static const int kMaxFieldNumber = 3;
  float max() const;
  void set_max(float value);

  // float WarnLow = 4;
  void clear_warnlow();
  static const int kWarnLowFieldNumber = 4;
  float warnlow() const;
  void set_warnlow(float value);

  // float WarnHigh = 5;
  void clear_warnhigh();
  static const int kWarnHighFieldNumber = 5;
  float warnhigh() const;
  void set_warnhigh(float value);

  // @@protoc_insertion_point(class_scope:Nmea2k.MonitoringDataLimits)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool valid_;
  float min_;
  float max_;
  float warnlow_;
  float warnhigh_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_Nmea2k_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class MonitoringData : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Nmea2k.MonitoringData) */ {
 public:
  MonitoringData();
  virtual ~MonitoringData();

  MonitoringData(const MonitoringData& from);

  inline MonitoringData& operator=(const MonitoringData& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  MonitoringData(MonitoringData&& from) noexcept
    : MonitoringData() {
    *this = ::std::move(from);
  }

  inline MonitoringData& operator=(MonitoringData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const MonitoringData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MonitoringData* internal_default_instance() {
    return reinterpret_cast<const MonitoringData*>(
               &_MonitoringData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  void Swap(MonitoringData* other);
  friend void swap(MonitoringData& a, MonitoringData& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline MonitoringData* New() const final {
    return CreateMaybeMessage<MonitoringData>(NULL);
  }

  MonitoringData* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<MonitoringData>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const MonitoringData& from);
  void MergeFrom(const MonitoringData& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MonitoringData* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bool Valid = 1;
  void clear_valid();
  static const int kValidFieldNumber = 1;
  bool valid() const;
  void set_valid(bool value);

  // float Value = 2;
  void clear_value();
  static const int kValueFieldNumber = 2;
  float value() const;
  void set_value(float value);

  // @@protoc_insertion_point(class_scope:Nmea2k.MonitoringData)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool valid_;
  float value_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_Nmea2k_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ConnectRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Nmea2k.ConnectRequest) */ {
 public:
  ConnectRequest();
  virtual ~ConnectRequest();

  ConnectRequest(const ConnectRequest& from);

  inline ConnectRequest& operator=(const ConnectRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ConnectRequest(ConnectRequest&& from) noexcept
    : ConnectRequest() {
    *this = ::std::move(from);
  }

  inline ConnectRequest& operator=(ConnectRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ConnectRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ConnectRequest* internal_default_instance() {
    return reinterpret_cast<const ConnectRequest*>(
               &_ConnectRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  void Swap(ConnectRequest* other);
  friend void swap(ConnectRequest& a, ConnectRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ConnectRequest* New() const final {
    return CreateMaybeMessage<ConnectRequest>(NULL);
  }

  ConnectRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ConnectRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ConnectRequest& from);
  void MergeFrom(const ConnectRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ConnectRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string ConnectString = 1;
  void clear_connectstring();
  static const int kConnectStringFieldNumber = 1;
  const ::std::string& connectstring() const;
  void set_connectstring(const ::std::string& value);
  #if LANG_CXX11
  void set_connectstring(::std::string&& value);
  #endif
  void set_connectstring(const char* value);
  void set_connectstring(const char* value, size_t size);
  ::std::string* mutable_connectstring();
  ::std::string* release_connectstring();
  void set_allocated_connectstring(::std::string* connectstring);

  // @@protoc_insertion_point(class_scope:Nmea2k.ConnectRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr connectstring_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_Nmea2k_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Token : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Nmea2k.Token) */ {
 public:
  Token();
  virtual ~Token();

  Token(const Token& from);

  inline Token& operator=(const Token& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Token(Token&& from) noexcept
    : Token() {
    *this = ::std::move(from);
  }

  inline Token& operator=(Token&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Token& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Token* internal_default_instance() {
    return reinterpret_cast<const Token*>(
               &_Token_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  void Swap(Token* other);
  friend void swap(Token& a, Token& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Token* New() const final {
    return CreateMaybeMessage<Token>(NULL);
  }

  Token* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Token>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Token& from);
  void MergeFrom(const Token& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Token* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string Value = 1;
  void clear_value();
  static const int kValueFieldNumber = 1;
  const ::std::string& value() const;
  void set_value(const ::std::string& value);
  #if LANG_CXX11
  void set_value(::std::string&& value);
  #endif
  void set_value(const char* value);
  void set_value(const char* value, size_t size);
  ::std::string* mutable_value();
  ::std::string* release_value();
  void set_allocated_value(::std::string* value);

  // bool Result = 2;
  void clear_result();
  static const int kResultFieldNumber = 2;
  bool result() const;
  void set_result(bool value);

  // @@protoc_insertion_point(class_scope:Nmea2k.Token)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr value_;
  bool result_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_Nmea2k_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Authentication : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Nmea2k.Authentication) */ {
 public:
  Authentication();
  virtual ~Authentication();

  Authentication(const Authentication& from);

  inline Authentication& operator=(const Authentication& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Authentication(Authentication&& from) noexcept
    : Authentication() {
    *this = ::std::move(from);
  }

  inline Authentication& operator=(Authentication&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Authentication& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Authentication* internal_default_instance() {
    return reinterpret_cast<const Authentication*>(
               &_Authentication_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  void Swap(Authentication* other);
  friend void swap(Authentication& a, Authentication& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Authentication* New() const final {
    return CreateMaybeMessage<Authentication>(NULL);
  }

  Authentication* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Authentication>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Authentication& from);
  void MergeFrom(const Authentication& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Authentication* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string User = 1;
  void clear_user();
  static const int kUserFieldNumber = 1;
  const ::std::string& user() const;
  void set_user(const ::std::string& value);
  #if LANG_CXX11
  void set_user(::std::string&& value);
  #endif
  void set_user(const char* value);
  void set_user(const char* value, size_t size);
  ::std::string* mutable_user();
  ::std::string* release_user();
  void set_allocated_user(::std::string* user);

  // string Password = 2;
  void clear_password();
  static const int kPasswordFieldNumber = 2;
  const ::std::string& password() const;
  void set_password(const ::std::string& value);
  #if LANG_CXX11
  void set_password(::std::string&& value);
  #endif
  void set_password(const char* value);
  void set_password(const char* value, size_t size);
  ::std::string* mutable_password();
  ::std::string* release_password();
  void set_allocated_password(::std::string* password);

  // @@protoc_insertion_point(class_scope:Nmea2k.Authentication)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr user_;
  ::google::protobuf::internal::ArenaStringPtr password_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_Nmea2k_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class AlarmGlobalStatus : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Nmea2k.AlarmGlobalStatus) */ {
 public:
  AlarmGlobalStatus();
  virtual ~AlarmGlobalStatus();

  AlarmGlobalStatus(const AlarmGlobalStatus& from);

  inline AlarmGlobalStatus& operator=(const AlarmGlobalStatus& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AlarmGlobalStatus(AlarmGlobalStatus&& from) noexcept
    : AlarmGlobalStatus() {
    *this = ::std::move(from);
  }

  inline AlarmGlobalStatus& operator=(AlarmGlobalStatus&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const AlarmGlobalStatus& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AlarmGlobalStatus* internal_default_instance() {
    return reinterpret_cast<const AlarmGlobalStatus*>(
               &_AlarmGlobalStatus_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  void Swap(AlarmGlobalStatus* other);
  friend void swap(AlarmGlobalStatus& a, AlarmGlobalStatus& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AlarmGlobalStatus* New() const final {
    return CreateMaybeMessage<AlarmGlobalStatus>(NULL);
  }

  AlarmGlobalStatus* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<AlarmGlobalStatus>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const AlarmGlobalStatus& from);
  void MergeFrom(const AlarmGlobalStatus& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AlarmGlobalStatus* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .Nmea2k.Alarm.eSeverityType HighestEnabledSeverity = 1;
  void clear_highestenabledseverity();
  static const int kHighestEnabledSeverityFieldNumber = 1;
  ::Nmea2k::Alarm_eSeverityType highestenabledseverity() const;
  void set_highestenabledseverity(::Nmea2k::Alarm_eSeverityType value);

  // .Nmea2k.Alarm.eSeverityType HighestAcknowledgedSeverity = 2;
  void clear_highestacknowledgedseverity();
  static const int kHighestAcknowledgedSeverityFieldNumber = 2;
  ::Nmea2k::Alarm_eSeverityType highestacknowledgedseverity() const;
  void set_highestacknowledgedseverity(::Nmea2k::Alarm_eSeverityType value);

  // @@protoc_insertion_point(class_scope:Nmea2k.AlarmGlobalStatus)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  int highestenabledseverity_;
  int highestacknowledgedseverity_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_Nmea2k_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class AlarmEvent : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Nmea2k.AlarmEvent) */ {
 public:
  AlarmEvent();
  virtual ~AlarmEvent();

  AlarmEvent(const AlarmEvent& from);

  inline AlarmEvent& operator=(const AlarmEvent& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AlarmEvent(AlarmEvent&& from) noexcept
    : AlarmEvent() {
    *this = ::std::move(from);
  }

  inline AlarmEvent& operator=(AlarmEvent&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const AlarmEvent& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AlarmEvent* internal_default_instance() {
    return reinterpret_cast<const AlarmEvent*>(
               &_AlarmEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  void Swap(AlarmEvent* other);
  friend void swap(AlarmEvent& a, AlarmEvent& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AlarmEvent* New() const final {
    return CreateMaybeMessage<AlarmEvent>(NULL);
  }

  AlarmEvent* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<AlarmEvent>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const AlarmEvent& from);
  void MergeFrom(const AlarmEvent& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AlarmEvent* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef AlarmEvent_eActionType eActionType;
  static const eActionType ActionAdded =
    AlarmEvent_eActionType_ActionAdded;
  static const eActionType ActionChanged =
    AlarmEvent_eActionType_ActionChanged;
  static const eActionType ActionRemoved =
    AlarmEvent_eActionType_ActionRemoved;
  static const eActionType ActionActivated =
    AlarmEvent_eActionType_ActionActivated;
  static const eActionType ActionDeactivated =
    AlarmEvent_eActionType_ActionDeactivated;
  static const eActionType ActionErasePending =
    AlarmEvent_eActionType_ActionErasePending;
  static const eActionType ActionLogUpdate =
    AlarmEvent_eActionType_ActionLogUpdate;
  static const eActionType ActionNone =
    AlarmEvent_eActionType_ActionNone;
  static inline bool eActionType_IsValid(int value) {
    return AlarmEvent_eActionType_IsValid(value);
  }
  static const eActionType eActionType_MIN =
    AlarmEvent_eActionType_eActionType_MIN;
  static const eActionType eActionType_MAX =
    AlarmEvent_eActionType_eActionType_MAX;
  static const int eActionType_ARRAYSIZE =
    AlarmEvent_eActionType_eActionType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  eActionType_descriptor() {
    return AlarmEvent_eActionType_descriptor();
  }
  static inline const ::std::string& eActionType_Name(eActionType value) {
    return AlarmEvent_eActionType_Name(value);
  }
  static inline bool eActionType_Parse(const ::std::string& name,
      eActionType* value) {
    return AlarmEvent_eActionType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // string Event = 2;
  void clear_event();
  static const int kEventFieldNumber = 2;
  const ::std::string& event() const;
  void set_event(const ::std::string& value);
  #if LANG_CXX11
  void set_event(::std::string&& value);
  #endif
  void set_event(const char* value);
  void set_event(const char* value, size_t size);
  ::std::string* mutable_event();
  ::std::string* release_event();
  void set_allocated_event(::std::string* event);

  // .Nmea2k.AlarmEvent.eActionType ActionType = 1;
  void clear_actiontype();
  static const int kActionTypeFieldNumber = 1;
  ::Nmea2k::AlarmEvent_eActionType actiontype() const;
  void set_actiontype(::Nmea2k::AlarmEvent_eActionType value);

  // @@protoc_insertion_point(class_scope:Nmea2k.AlarmEvent)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr event_;
  int actiontype_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_Nmea2k_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class AlarmsList : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Nmea2k.AlarmsList) */ {
 public:
  AlarmsList();
  virtual ~AlarmsList();

  AlarmsList(const AlarmsList& from);

  inline AlarmsList& operator=(const AlarmsList& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AlarmsList(AlarmsList&& from) noexcept
    : AlarmsList() {
    *this = ::std::move(from);
  }

  inline AlarmsList& operator=(AlarmsList&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const AlarmsList& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AlarmsList* internal_default_instance() {
    return reinterpret_cast<const AlarmsList*>(
               &_AlarmsList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  void Swap(AlarmsList* other);
  friend void swap(AlarmsList& a, AlarmsList& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AlarmsList* New() const final {
    return CreateMaybeMessage<AlarmsList>(NULL);
  }

  AlarmsList* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<AlarmsList>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const AlarmsList& from);
  void MergeFrom(const AlarmsList& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AlarmsList* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .Nmea2k.Alarm Alarms = 1;
  int alarms_size() const;
  void clear_alarms();
  static const int kAlarmsFieldNumber = 1;
  ::Nmea2k::Alarm* mutable_alarms(int index);
  ::google::protobuf::RepeatedPtrField< ::Nmea2k::Alarm >*
      mutable_alarms();
  const ::Nmea2k::Alarm& alarms(int index) const;
  ::Nmea2k::Alarm* add_alarms();
  const ::google::protobuf::RepeatedPtrField< ::Nmea2k::Alarm >&
      alarms() const;

  // @@protoc_insertion_point(class_scope:Nmea2k.AlarmsList)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::Nmea2k::Alarm > alarms_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_Nmea2k_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class AlarmString : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Nmea2k.AlarmString) */ {
 public:
  AlarmString();
  virtual ~AlarmString();

  AlarmString(const AlarmString& from);

  inline AlarmString& operator=(const AlarmString& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AlarmString(AlarmString&& from) noexcept
    : AlarmString() {
    *this = ::std::move(from);
  }

  inline AlarmString& operator=(AlarmString&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const AlarmString& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AlarmString* internal_default_instance() {
    return reinterpret_cast<const AlarmString*>(
               &_AlarmString_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  void Swap(AlarmString* other);
  friend void swap(AlarmString& a, AlarmString& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AlarmString* New() const final {
    return CreateMaybeMessage<AlarmString>(NULL);
  }

  AlarmString* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<AlarmString>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const AlarmString& from);
  void MergeFrom(const AlarmString& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AlarmString* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string Item = 1;
  void clear_item();
  static const int kItemFieldNumber = 1;
  const ::std::string& item() const;
  void set_item(const ::std::string& value);
  #if LANG_CXX11
  void set_item(::std::string&& value);
  #endif
  void set_item(const char* value);
  void set_item(const char* value, size_t size);
  ::std::string* mutable_item();
  ::std::string* release_item();
  void set_allocated_item(::std::string* item);

  // @@protoc_insertion_point(class_scope:Nmea2k.AlarmString)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr item_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_Nmea2k_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class UnacknowledgedAlarm : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Nmea2k.UnacknowledgedAlarm) */ {
 public:
  UnacknowledgedAlarm();
  virtual ~UnacknowledgedAlarm();

  UnacknowledgedAlarm(const UnacknowledgedAlarm& from);

  inline UnacknowledgedAlarm& operator=(const UnacknowledgedAlarm& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  UnacknowledgedAlarm(UnacknowledgedAlarm&& from) noexcept
    : UnacknowledgedAlarm() {
    *this = ::std::move(from);
  }

  inline UnacknowledgedAlarm& operator=(UnacknowledgedAlarm&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const UnacknowledgedAlarm& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UnacknowledgedAlarm* internal_default_instance() {
    return reinterpret_cast<const UnacknowledgedAlarm*>(
               &_UnacknowledgedAlarm_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  void Swap(UnacknowledgedAlarm* other);
  friend void swap(UnacknowledgedAlarm& a, UnacknowledgedAlarm& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline UnacknowledgedAlarm* New() const final {
    return CreateMaybeMessage<UnacknowledgedAlarm>(NULL);
  }

  UnacknowledgedAlarm* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<UnacknowledgedAlarm>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const UnacknowledgedAlarm& from);
  void MergeFrom(const UnacknowledgedAlarm& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UnacknowledgedAlarm* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .Nmea2k.Alarm Content = 2;
  bool has_content() const;
  void clear_content();
  static const int kContentFieldNumber = 2;
  private:
  const ::Nmea2k::Alarm& _internal_content() const;
  public:
  const ::Nmea2k::Alarm& content() const;
  ::Nmea2k::Alarm* release_content();
  ::Nmea2k::Alarm* mutable_content();
  void set_allocated_content(::Nmea2k::Alarm* content);

  // bool Valid = 1;
  void clear_valid();
  static const int kValidFieldNumber = 1;
  bool valid() const;
  void set_valid(bool value);

  // @@protoc_insertion_point(class_scope:Nmea2k.UnacknowledgedAlarm)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::Nmea2k::Alarm* content_;
  bool valid_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_Nmea2k_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class AlarmRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Nmea2k.AlarmRequest) */ {
 public:
  AlarmRequest();
  virtual ~AlarmRequest();

  AlarmRequest(const AlarmRequest& from);

  inline AlarmRequest& operator=(const AlarmRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AlarmRequest(AlarmRequest&& from) noexcept
    : AlarmRequest() {
    *this = ::std::move(from);
  }

  inline AlarmRequest& operator=(AlarmRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const AlarmRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AlarmRequest* internal_default_instance() {
    return reinterpret_cast<const AlarmRequest*>(
               &_AlarmRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  void Swap(AlarmRequest* other);
  friend void swap(AlarmRequest& a, AlarmRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AlarmRequest* New() const final {
    return CreateMaybeMessage<AlarmRequest>(NULL);
  }

  AlarmRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<AlarmRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const AlarmRequest& from);
  void MergeFrom(const AlarmRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AlarmRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef AlarmRequest_eAlarmStringType eAlarmStringType;
  static const eAlarmStringType AlarmName =
    AlarmRequest_eAlarmStringType_AlarmName;
  static const eAlarmStringType ChannelName =
    AlarmRequest_eAlarmStringType_ChannelName;
  static const eAlarmStringType DeviceName =
    AlarmRequest_eAlarmStringType_DeviceName;
  static const eAlarmStringType Title =
    AlarmRequest_eAlarmStringType_Title;
  static const eAlarmStringType Description =
    AlarmRequest_eAlarmStringType_Description;
  static const eAlarmStringType LogName =
    AlarmRequest_eAlarmStringType_LogName;
  static const eAlarmStringType LogChannelName =
    AlarmRequest_eAlarmStringType_LogChannelName;
  static const eAlarmStringType LogDeviceName =
    AlarmRequest_eAlarmStringType_LogDeviceName;
  static const eAlarmStringType LogTitle =
    AlarmRequest_eAlarmStringType_LogTitle;
  static const eAlarmStringType LogDescription =
    AlarmRequest_eAlarmStringType_LogDescription;
  static const eAlarmStringType DefaultDescription =
    AlarmRequest_eAlarmStringType_DefaultDescription;
  static const eAlarmStringType GroupPolicyDescription =
    AlarmRequest_eAlarmStringType_GroupPolicyDescription;
  static inline bool eAlarmStringType_IsValid(int value) {
    return AlarmRequest_eAlarmStringType_IsValid(value);
  }
  static const eAlarmStringType eAlarmStringType_MIN =
    AlarmRequest_eAlarmStringType_eAlarmStringType_MIN;
  static const eAlarmStringType eAlarmStringType_MAX =
    AlarmRequest_eAlarmStringType_eAlarmStringType_MAX;
  static const int eAlarmStringType_ARRAYSIZE =
    AlarmRequest_eAlarmStringType_eAlarmStringType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  eAlarmStringType_descriptor() {
    return AlarmRequest_eAlarmStringType_descriptor();
  }
  static inline const ::std::string& eAlarmStringType_Name(eAlarmStringType value) {
    return AlarmRequest_eAlarmStringType_Name(value);
  }
  static inline bool eAlarmStringType_Parse(const ::std::string& name,
      eAlarmStringType* value) {
    return AlarmRequest_eAlarmStringType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // repeated uint32 IdsForUnacknowledged = 6;
  int idsforunacknowledged_size() const;
  void clear_idsforunacknowledged();
  static const int kIdsForUnacknowledgedFieldNumber = 6;
  ::google::protobuf::uint32 idsforunacknowledged(int index) const;
  void set_idsforunacknowledged(int index, ::google::protobuf::uint32 value);
  void add_idsforunacknowledged(::google::protobuf::uint32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      idsforunacknowledged() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_idsforunacknowledged();

  // string Token = 8;
  void clear_token();
  static const int kTokenFieldNumber = 8;
  const ::std::string& token() const;
  void set_token(const ::std::string& value);
  #if LANG_CXX11
  void set_token(::std::string&& value);
  #endif
  void set_token(const char* value);
  void set_token(const char* value, size_t size);
  ::std::string* mutable_token();
  ::std::string* release_token();
  void set_allocated_token(::std::string* token);

  // uint32 Id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::uint32 id() const;
  void set_id(::google::protobuf::uint32 value);

  // .Nmea2k.Alarm.eSeverityType Severity = 3;
  void clear_severity();
  static const int kSeverityFieldNumber = 3;
  ::Nmea2k::Alarm_eSeverityType severity() const;
  void set_severity(::Nmea2k::Alarm_eSeverityType value);

  // uint32 Length = 4;
  void clear_length();
  static const int kLengthFieldNumber = 4;
  ::google::protobuf::uint32 length() const;
  void set_length(::google::protobuf::uint32 value);

  // .Nmea2k.AlarmRequest.eAlarmStringType StringType = 5;
  void clear_stringtype();
  static const int kStringTypeFieldNumber = 5;
  ::Nmea2k::AlarmRequest_eAlarmStringType stringtype() const;
  void set_stringtype(::Nmea2k::AlarmRequest_eAlarmStringType value);

  // bool Accepted = 2;
  void clear_accepted();
  static const int kAcceptedFieldNumber = 2;
  bool accepted() const;
  void set_accepted(bool value);

  // bool IsLog = 7;
  void clear_islog();
  static const int kIsLogFieldNumber = 7;
  bool islog() const;
  void set_islog(bool value);

  // bool CZoneRaw = 9;
  void clear_czoneraw();
  static const int kCZoneRawFieldNumber = 9;
  bool czoneraw() const;
  void set_czoneraw(bool value);

  // @@protoc_insertion_point(class_scope:Nmea2k.AlarmRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > idsforunacknowledged_;
  mutable int _idsforunacknowledged_cached_byte_size_;
  ::google::protobuf::internal::ArenaStringPtr token_;
  ::google::protobuf::uint32 id_;
  int severity_;
  ::google::protobuf::uint32 length_;
  int stringtype_;
  bool accepted_;
  bool islog_;
  bool czoneraw_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_Nmea2k_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CategoryRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Nmea2k.CategoryRequest) */ {
 public:
  CategoryRequest();
  virtual ~CategoryRequest();

  CategoryRequest(const CategoryRequest& from);

  inline CategoryRequest& operator=(const CategoryRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CategoryRequest(CategoryRequest&& from) noexcept
    : CategoryRequest() {
    *this = ::std::move(from);
  }

  inline CategoryRequest& operator=(CategoryRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const CategoryRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CategoryRequest* internal_default_instance() {
    return reinterpret_cast<const CategoryRequest*>(
               &_CategoryRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  void Swap(CategoryRequest* other);
  friend void swap(CategoryRequest& a, CategoryRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CategoryRequest* New() const final {
    return CreateMaybeMessage<CategoryRequest>(NULL);
  }

  CategoryRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CategoryRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CategoryRequest& from);
  void MergeFrom(const CategoryRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CategoryRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef CategoryRequest_eCategoryType eCategoryType;
  static const eCategoryType CategoriesAll =
    CategoryRequest_eCategoryType_CategoriesAll;
  static inline bool eCategoryType_IsValid(int value) {
    return CategoryRequest_eCategoryType_IsValid(value);
  }
  static const eCategoryType eCategoryType_MIN =
    CategoryRequest_eCategoryType_eCategoryType_MIN;
  static const eCategoryType eCategoryType_MAX =
    CategoryRequest_eCategoryType_eCategoryType_MAX;
  static const int eCategoryType_ARRAYSIZE =
    CategoryRequest_eCategoryType_eCategoryType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  eCategoryType_descriptor() {
    return CategoryRequest_eCategoryType_descriptor();
  }
  static inline const ::std::string& eCategoryType_Name(eCategoryType value) {
    return CategoryRequest_eCategoryType_Name(value);
  }
  static inline bool eCategoryType_Parse(const ::std::string& name,
      eCategoryType* value) {
    return CategoryRequest_eCategoryType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // string Token = 2;
  void clear_token();
  static const int kTokenFieldNumber = 2;
  const ::std::string& token() const;
  void set_token(const ::std::string& value);
  #if LANG_CXX11
  void set_token(::std::string&& value);
  #endif
  void set_token(const char* value);
  void set_token(const char* value, size_t size);
  ::std::string* mutable_token();
  ::std::string* release_token();
  void set_allocated_token(::std::string* token);

  // .Nmea2k.CategoryRequest.eCategoryType type = 1;
  void clear_type();
  static const int kTypeFieldNumber = 1;
  ::Nmea2k::CategoryRequest_eCategoryType type() const;
  void set_type(::Nmea2k::CategoryRequest_eCategoryType value);

  // @@protoc_insertion_point(class_scope:Nmea2k.CategoryRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr token_;
  int type_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_Nmea2k_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CategoryItem : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Nmea2k.CategoryItem) */ {
 public:
  CategoryItem();
  virtual ~CategoryItem();

  CategoryItem(const CategoryItem& from);

  inline CategoryItem& operator=(const CategoryItem& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CategoryItem(CategoryItem&& from) noexcept
    : CategoryItem() {
    *this = ::std::move(from);
  }

  inline CategoryItem& operator=(CategoryItem&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const CategoryItem& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CategoryItem* internal_default_instance() {
    return reinterpret_cast<const CategoryItem*>(
               &_CategoryItem_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  void Swap(CategoryItem* other);
  friend void swap(CategoryItem& a, CategoryItem& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CategoryItem* New() const final {
    return CreateMaybeMessage<CategoryItem>(NULL);
  }

  CategoryItem* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CategoryItem>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CategoryItem& from);
  void MergeFrom(const CategoryItem& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CategoryItem* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string NameUTF8 = 1;
  void clear_nameutf8();
  static const int kNameUTF8FieldNumber = 1;
  const ::std::string& nameutf8() const;
  void set_nameutf8(const ::std::string& value);
  #if LANG_CXX11
  void set_nameutf8(::std::string&& value);
  #endif
  void set_nameutf8(const char* value);
  void set_nameutf8(const char* value, size_t size);
  ::std::string* mutable_nameutf8();
  ::std::string* release_nameutf8();
  void set_allocated_nameutf8(::std::string* nameutf8);

  // bool Enabled = 2;
  void clear_enabled();
  static const int kEnabledFieldNumber = 2;
  bool enabled() const;
  void set_enabled(bool value);

  // uint32 Index = 3;
  void clear_index();
  static const int kIndexFieldNumber = 3;
  ::google::protobuf::uint32 index() const;
  void set_index(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Nmea2k.CategoryItem)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr nameutf8_;
  bool enabled_;
  ::google::protobuf::uint32 index_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_Nmea2k_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Categories : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Nmea2k.Categories) */ {
 public:
  Categories();
  virtual ~Categories();

  Categories(const Categories& from);

  inline Categories& operator=(const Categories& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Categories(Categories&& from) noexcept
    : Categories() {
    *this = ::std::move(from);
  }

  inline Categories& operator=(Categories&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Categories& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Categories* internal_default_instance() {
    return reinterpret_cast<const Categories*>(
               &_Categories_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  void Swap(Categories* other);
  friend void swap(Categories& a, Categories& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Categories* New() const final {
    return CreateMaybeMessage<Categories>(NULL);
  }

  Categories* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Categories>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Categories& from);
  void MergeFrom(const Categories& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Categories* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .Nmea2k.CategoryItem Items = 1;
  int items_size() const;
  void clear_items();
  static const int kItemsFieldNumber = 1;
  ::Nmea2k::CategoryItem* mutable_items(int index);
  ::google::protobuf::RepeatedPtrField< ::Nmea2k::CategoryItem >*
      mutable_items();
  const ::Nmea2k::CategoryItem& items(int index) const;
  ::Nmea2k::CategoryItem* add_items();
  const ::google::protobuf::RepeatedPtrField< ::Nmea2k::CategoryItem >&
      items() const;

  // @@protoc_insertion_point(class_scope:Nmea2k.Categories)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::Nmea2k::CategoryItem > items_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_Nmea2k_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class FileRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Nmea2k.FileRequest) */ {
 public:
  FileRequest();
  virtual ~FileRequest();

  FileRequest(const FileRequest& from);

  inline FileRequest& operator=(const FileRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  FileRequest(FileRequest&& from) noexcept
    : FileRequest() {
    *this = ::std::move(from);
  }

  inline FileRequest& operator=(FileRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const FileRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FileRequest* internal_default_instance() {
    return reinterpret_cast<const FileRequest*>(
               &_FileRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  void Swap(FileRequest* other);
  friend void swap(FileRequest& a, FileRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline FileRequest* New() const final {
    return CreateMaybeMessage<FileRequest>(NULL);
  }

  FileRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<FileRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const FileRequest& from);
  void MergeFrom(const FileRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FileRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef FileRequest_eResourceType eResourceType;
  static const eResourceType Touch7 =
    FileRequest_eResourceType_Touch7;
  static const eResourceType Touch10 =
    FileRequest_eResourceType_Touch10;
  static const eResourceType Phone =
    FileRequest_eResourceType_Phone;
  static inline bool eResourceType_IsValid(int value) {
    return FileRequest_eResourceType_IsValid(value);
  }
  static const eResourceType eResourceType_MIN =
    FileRequest_eResourceType_eResourceType_MIN;
  static const eResourceType eResourceType_MAX =
    FileRequest_eResourceType_eResourceType_MAX;
  static const int eResourceType_ARRAYSIZE =
    FileRequest_eResourceType_eResourceType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  eResourceType_descriptor() {
    return FileRequest_eResourceType_descriptor();
  }
  static inline const ::std::string& eResourceType_Name(eResourceType value) {
    return FileRequest_eResourceType_Name(value);
  }
  static inline bool eResourceType_Parse(const ::std::string& name,
      eResourceType* value) {
    return FileRequest_eResourceType_Parse(name, value);
  }

  typedef FileRequest_eFileType eFileType;
  static const eFileType DefaultZcf =
    FileRequest_eFileType_DefaultZcf;
  static const eFileType FavouritesCfp =
    FileRequest_eFileType_FavouritesCfp;
  static const eFileType MinMaxLog =
    FileRequest_eFileType_MinMaxLog;
  static const eFileType CircuitsLog =
    FileRequest_eFileType_CircuitsLog;
  static const eFileType AlarmDescription =
    FileRequest_eFileType_AlarmDescription;
  static const eFileType AlarmLog =
    FileRequest_eFileType_AlarmLog;
  static const eFileType AlarmCustomizedDescription =
    FileRequest_eFileType_AlarmCustomizedDescription;
  static const eFileType Resource =
    FileRequest_eFileType_Resource;
  static inline bool eFileType_IsValid(int value) {
    return FileRequest_eFileType_IsValid(value);
  }
  static const eFileType eFileType_MIN =
    FileRequest_eFileType_eFileType_MIN;
  static const eFileType eFileType_MAX =
    FileRequest_eFileType_eFileType_MAX;
  static const int eFileType_ARRAYSIZE =
    FileRequest_eFileType_eFileType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  eFileType_descriptor() {
    return FileRequest_eFileType_descriptor();
  }
  static inline const ::std::string& eFileType_Name(eFileType value) {
    return FileRequest_eFileType_Name(value);
  }
  static inline bool eFileType_Parse(const ::std::string& name,
      eFileType* value) {
    return FileRequest_eFileType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // bytes Content = 2;
  void clear_content();
  static const int kContentFieldNumber = 2;
  const ::std::string& content() const;
  void set_content(const ::std::string& value);
  #if LANG_CXX11
  void set_content(::std::string&& value);
  #endif
  void set_content(const char* value);
  void set_content(const void* value, size_t size);
  ::std::string* mutable_content();
  ::std::string* release_content();
  void set_allocated_content(::std::string* content);

  // string Token = 4;
  void clear_token();
  static const int kTokenFieldNumber = 4;
  const ::std::string& token() const;
  void set_token(const ::std::string& value);
  #if LANG_CXX11
  void set_token(::std::string&& value);
  #endif
  void set_token(const char* value);
  void set_token(const char* value, size_t size);
  ::std::string* mutable_token();
  ::std::string* release_token();
  void set_allocated_token(::std::string* token);

  // string ResourceFile = 6;
  void clear_resourcefile();
  static const int kResourceFileFieldNumber = 6;
  const ::std::string& resourcefile() const;
  void set_resourcefile(const ::std::string& value);
  #if LANG_CXX11
  void set_resourcefile(::std::string&& value);
  #endif
  void set_resourcefile(const char* value);
  void set_resourcefile(const char* value, size_t size);
  ::std::string* mutable_resourcefile();
  ::std::string* release_resourcefile();
  void set_allocated_resourcefile(::std::string* resourcefile);

  // .Nmea2k.FileRequest.eFileType Type = 1;
  void clear_type();
  static const int kTypeFieldNumber = 1;
  ::Nmea2k::FileRequest_eFileType type() const;
  void set_type(::Nmea2k::FileRequest_eFileType value);

  // bool Done = 3;
  void clear_done();
  static const int kDoneFieldNumber = 3;
  bool done() const;
  void set_done(bool value);

  // .Nmea2k.FileRequest.eResourceType ResourceType = 5;
  void clear_resourcetype();
  static const int kResourceTypeFieldNumber = 5;
  ::Nmea2k::FileRequest_eResourceType resourcetype() const;
  void set_resourcetype(::Nmea2k::FileRequest_eResourceType value);

  // @@protoc_insertion_point(class_scope:Nmea2k.FileRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr content_;
  ::google::protobuf::internal::ArenaStringPtr token_;
  ::google::protobuf::internal::ArenaStringPtr resourcefile_;
  int type_;
  bool done_;
  int resourcetype_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_Nmea2k_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class FileResult : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Nmea2k.FileResult) */ {
 public:
  FileResult();
  virtual ~FileResult();

  FileResult(const FileResult& from);

  inline FileResult& operator=(const FileResult& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  FileResult(FileResult&& from) noexcept
    : FileResult() {
    *this = ::std::move(from);
  }

  inline FileResult& operator=(FileResult&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const FileResult& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FileResult* internal_default_instance() {
    return reinterpret_cast<const FileResult*>(
               &_FileResult_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  void Swap(FileResult* other);
  friend void swap(FileResult& a, FileResult& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline FileResult* New() const final {
    return CreateMaybeMessage<FileResult>(NULL);
  }

  FileResult* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<FileResult>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const FileResult& from);
  void MergeFrom(const FileResult& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FileResult* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef FileResult_eFileStatus eFileStatus;
  static const eFileStatus OK =
    FileResult_eFileStatus_OK;
  static const eFileStatus NoPermission =
    FileResult_eFileStatus_NoPermission;
  static const eFileStatus NoSpace =
    FileResult_eFileStatus_NoSpace;
  static const eFileStatus AccessError =
    FileResult_eFileStatus_AccessError;
  static const eFileStatus InputError =
    FileResult_eFileStatus_InputError;
  static inline bool eFileStatus_IsValid(int value) {
    return FileResult_eFileStatus_IsValid(value);
  }
  static const eFileStatus eFileStatus_MIN =
    FileResult_eFileStatus_eFileStatus_MIN;
  static const eFileStatus eFileStatus_MAX =
    FileResult_eFileStatus_eFileStatus_MAX;
  static const int eFileStatus_ARRAYSIZE =
    FileResult_eFileStatus_eFileStatus_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  eFileStatus_descriptor() {
    return FileResult_eFileStatus_descriptor();
  }
  static inline const ::std::string& eFileStatus_Name(eFileStatus value) {
    return FileResult_eFileStatus_Name(value);
  }
  static inline bool eFileStatus_Parse(const ::std::string& name,
      eFileStatus* value) {
    return FileResult_eFileStatus_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // .Nmea2k.FileResult.eFileStatus Status = 1;
  void clear_status();
  static const int kStatusFieldNumber = 1;
  ::Nmea2k::FileResult_eFileStatus status() const;
  void set_status(::Nmea2k::FileResult_eFileStatus value);

  // @@protoc_insertion_point(class_scope:Nmea2k.FileResult)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  int status_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_Nmea2k_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class File : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Nmea2k.File) */ {
 public:
  File();
  virtual ~File();

  File(const File& from);

  inline File& operator=(const File& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  File(File&& from) noexcept
    : File() {
    *this = ::std::move(from);
  }

  inline File& operator=(File&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const File& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const File* internal_default_instance() {
    return reinterpret_cast<const File*>(
               &_File_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  void Swap(File* other);
  friend void swap(File& a, File& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline File* New() const final {
    return CreateMaybeMessage<File>(NULL);
  }

  File* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<File>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const File& from);
  void MergeFrom(const File& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(File* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes Content = 2;
  void clear_content();
  static const int kContentFieldNumber = 2;
  const ::std::string& content() const;
  void set_content(const ::std::string& value);
  #if LANG_CXX11
  void set_content(::std::string&& value);
  #endif
  void set_content(const char* value);
  void set_content(const void* value, size_t size);
  ::std::string* mutable_content();
  ::std::string* release_content();
  void set_allocated_content(::std::string* content);

  // .Nmea2k.FileResult Result = 1;
  bool has_result() const;
  void clear_result();
  static const int kResultFieldNumber = 1;
  private:
  const ::Nmea2k::FileResult& _internal_result() const;
  public:
  const ::Nmea2k::FileResult& result() const;
  ::Nmea2k::FileResult* release_result();
  ::Nmea2k::FileResult* mutable_result();
  void set_allocated_result(::Nmea2k::FileResult* result);

  // @@protoc_insertion_point(class_scope:Nmea2k.File)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr content_;
  ::Nmea2k::FileResult* result_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_Nmea2k_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CZoneRawEvent : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Nmea2k.CZoneRawEvent) */ {
 public:
  CZoneRawEvent();
  virtual ~CZoneRawEvent();

  CZoneRawEvent(const CZoneRawEvent& from);

  inline CZoneRawEvent& operator=(const CZoneRawEvent& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CZoneRawEvent(CZoneRawEvent&& from) noexcept
    : CZoneRawEvent() {
    *this = ::std::move(from);
  }

  inline CZoneRawEvent& operator=(CZoneRawEvent&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const CZoneRawEvent& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CZoneRawEvent* internal_default_instance() {
    return reinterpret_cast<const CZoneRawEvent*>(
               &_CZoneRawEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    24;

  void Swap(CZoneRawEvent* other);
  friend void swap(CZoneRawEvent& a, CZoneRawEvent& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CZoneRawEvent* New() const final {
    return CreateMaybeMessage<CZoneRawEvent>(NULL);
  }

  CZoneRawEvent* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CZoneRawEvent>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CZoneRawEvent& from);
  void MergeFrom(const CZoneRawEvent& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CZoneRawEvent* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes Content = 2;
  void clear_content();
  static const int kContentFieldNumber = 2;
  const ::std::string& content() const;
  void set_content(const ::std::string& value);
  #if LANG_CXX11
  void set_content(::std::string&& value);
  #endif
  void set_content(const char* value);
  void set_content(const void* value, size_t size);
  ::std::string* mutable_content();
  ::std::string* release_content();
  void set_allocated_content(::std::string* content);

  // bytes RawAlarm = 3;
  void clear_rawalarm();
  static const int kRawAlarmFieldNumber = 3;
  const ::std::string& rawalarm() const;
  void set_rawalarm(const ::std::string& value);
  #if LANG_CXX11
  void set_rawalarm(::std::string&& value);
  #endif
  void set_rawalarm(const char* value);
  void set_rawalarm(const void* value, size_t size);
  ::std::string* mutable_rawalarm();
  ::std::string* release_rawalarm();
  void set_allocated_rawalarm(::std::string* rawalarm);

  // bytes DeviceItem = 4;
  void clear_deviceitem();
  static const int kDeviceItemFieldNumber = 4;
  const ::std::string& deviceitem() const;
  void set_deviceitem(const ::std::string& value);
  #if LANG_CXX11
  void set_deviceitem(::std::string&& value);
  #endif
  void set_deviceitem(const char* value);
  void set_deviceitem(const void* value, size_t size);
  ::std::string* mutable_deviceitem();
  ::std::string* release_deviceitem();
  void set_allocated_deviceitem(::std::string* deviceitem);

  // uint32 Type = 1;
  void clear_type();
  static const int kTypeFieldNumber = 1;
  ::google::protobuf::uint32 type() const;
  void set_type(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Nmea2k.CZoneRawEvent)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr content_;
  ::google::protobuf::internal::ArenaStringPtr rawalarm_;
  ::google::protobuf::internal::ArenaStringPtr deviceitem_;
  ::google::protobuf::uint32 type_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_Nmea2k_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Event : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Nmea2k.Event) */ {
 public:
  Event();
  virtual ~Event();

  Event(const Event& from);

  inline Event& operator=(const Event& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Event(Event&& from) noexcept
    : Event() {
    *this = ::std::move(from);
  }

  inline Event& operator=(Event&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Event& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Event* internal_default_instance() {
    return reinterpret_cast<const Event*>(
               &_Event_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    25;

  void Swap(Event* other);
  friend void swap(Event& a, Event& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Event* New() const final {
    return CreateMaybeMessage<Event>(NULL);
  }

  Event* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Event>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Event& from);
  void MergeFrom(const Event& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Event* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Event_eEventType eEventType;
  static const eEventType ConfigChange =
    Event_eEventType_ConfigChange;
  static const eEventType AlarmAdded =
    Event_eEventType_AlarmAdded;
  static const eEventType AlarmChanged =
    Event_eEventType_AlarmChanged;
  static const eEventType AlarmRemoved =
    Event_eEventType_AlarmRemoved;
  static const eEventType AlarmActivated =
    Event_eEventType_AlarmActivated;
  static const eEventType AlarmDeactivated =
    Event_eEventType_AlarmDeactivated;
  static const eEventType AlarmLogUpdate =
    Event_eEventType_AlarmLogUpdate;
  static const eEventType AlarmGlobalStatus =
    Event_eEventType_AlarmGlobalStatus;
  static const eEventType GNSSConfigChanged =
    Event_eEventType_GNSSConfigChanged;
  static const eEventType EngineConfigChanged =
    Event_eEventType_EngineConfigChanged;
  static const eEventType CZoneRaw =
    Event_eEventType_CZoneRaw;
  static const eEventType SystemLowPowerMode =
    Event_eEventType_SystemLowPowerMode;
  static const eEventType SystemHostActive =
    Event_eEventType_SystemHostActive;
  static inline bool eEventType_IsValid(int value) {
    return Event_eEventType_IsValid(value);
  }
  static const eEventType eEventType_MIN =
    Event_eEventType_eEventType_MIN;
  static const eEventType eEventType_MAX =
    Event_eEventType_eEventType_MAX;
  static const int eEventType_ARRAYSIZE =
    Event_eEventType_eEventType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  eEventType_descriptor() {
    return Event_eEventType_descriptor();
  }
  static inline const ::std::string& eEventType_Name(eEventType value) {
    return Event_eEventType_Name(value);
  }
  static inline bool eEventType_Parse(const ::std::string& name,
      eEventType* value) {
    return Event_eEventType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // string Content = 2;
  void clear_content();
  static const int kContentFieldNumber = 2;
  const ::std::string& content() const;
  void set_content(const ::std::string& value);
  #if LANG_CXX11
  void set_content(::std::string&& value);
  #endif
  void set_content(const char* value);
  void set_content(const char* value, size_t size);
  ::std::string* mutable_content();
  ::std::string* release_content();
  void set_allocated_content(::std::string* content);

  // string TimeStamp = 6;
  void clear_timestamp();
  static const int kTimeStampFieldNumber = 6;
  const ::std::string& timestamp() const;
  void set_timestamp(const ::std::string& value);
  #if LANG_CXX11
  void set_timestamp(::std::string&& value);
  #endif
  void set_timestamp(const char* value);
  void set_timestamp(const char* value, size_t size);
  ::std::string* mutable_timestamp();
  ::std::string* release_timestamp();
  void set_allocated_timestamp(::std::string* timestamp);

  // .Nmea2k.Alarm AlarmItem = 3;
  bool has_alarmitem() const;
  void clear_alarmitem();
  static const int kAlarmItemFieldNumber = 3;
  private:
  const ::Nmea2k::Alarm& _internal_alarmitem() const;
  public:
  const ::Nmea2k::Alarm& alarmitem() const;
  ::Nmea2k::Alarm* release_alarmitem();
  ::Nmea2k::Alarm* mutable_alarmitem();
  void set_allocated_alarmitem(::Nmea2k::Alarm* alarmitem);

  // .Nmea2k.AlarmGlobalStatus GlobalStatus = 4;
  bool has_globalstatus() const;
  void clear_globalstatus();
  static const int kGlobalStatusFieldNumber = 4;
  private:
  const ::Nmea2k::AlarmGlobalStatus& _internal_globalstatus() const;
  public:
  const ::Nmea2k::AlarmGlobalStatus& globalstatus() const;
  ::Nmea2k::AlarmGlobalStatus* release_globalstatus();
  ::Nmea2k::AlarmGlobalStatus* mutable_globalstatus();
  void set_allocated_globalstatus(::Nmea2k::AlarmGlobalStatus* globalstatus);

  // .Nmea2k.CZoneRawEvent CZoneEvent = 5;
  bool has_czoneevent() const;
  void clear_czoneevent();
  static const int kCZoneEventFieldNumber = 5;
  private:
  const ::Nmea2k::CZoneRawEvent& _internal_czoneevent() const;
  public:
  const ::Nmea2k::CZoneRawEvent& czoneevent() const;
  ::Nmea2k::CZoneRawEvent* release_czoneevent();
  ::Nmea2k::CZoneRawEvent* mutable_czoneevent();
  void set_allocated_czoneevent(::Nmea2k::CZoneRawEvent* czoneevent);

  // .Nmea2k.Event.eEventType Type = 1;
  void clear_type();
  static const int kTypeFieldNumber = 1;
  ::Nmea2k::Event_eEventType type() const;
  void set_type(::Nmea2k::Event_eEventType value);

  // @@protoc_insertion_point(class_scope:Nmea2k.Event)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr content_;
  ::google::protobuf::internal::ArenaStringPtr timestamp_;
  ::Nmea2k::Alarm* alarmitem_;
  ::Nmea2k::AlarmGlobalStatus* globalstatus_;
  ::Nmea2k::CZoneRawEvent* czoneevent_;
  int type_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_Nmea2k_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class FactoryData : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Nmea2k.FactoryData) */ {
 public:
  FactoryData();
  virtual ~FactoryData();

  FactoryData(const FactoryData& from);

  inline FactoryData& operator=(const FactoryData& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  FactoryData(FactoryData&& from) noexcept
    : FactoryData() {
    *this = ::std::move(from);
  }

  inline FactoryData& operator=(FactoryData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const FactoryData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FactoryData* internal_default_instance() {
    return reinterpret_cast<const FactoryData*>(
               &_FactoryData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    26;

  void Swap(FactoryData* other);
  friend void swap(FactoryData& a, FactoryData& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline FactoryData* New() const final {
    return CreateMaybeMessage<FactoryData>(NULL);
  }

  FactoryData* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<FactoryData>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const FactoryData& from);
  void MergeFrom(const FactoryData& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FactoryData* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string SerialNumber = 1;
  void clear_serialnumber();
  static const int kSerialNumberFieldNumber = 1;
  const ::std::string& serialnumber() const;
  void set_serialnumber(const ::std::string& value);
  #if LANG_CXX11
  void set_serialnumber(::std::string&& value);
  #endif
  void set_serialnumber(const char* value);
  void set_serialnumber(const char* value, size_t size);
  ::std::string* mutable_serialnumber();
  ::std::string* release_serialnumber();
  void set_allocated_serialnumber(::std::string* serialnumber);

  // string FactoryICCID = 2;
  void clear_factoryiccid();
  static const int kFactoryICCIDFieldNumber = 2;
  const ::std::string& factoryiccid() const;
  void set_factoryiccid(const ::std::string& value);
  #if LANG_CXX11
  void set_factoryiccid(::std::string&& value);
  #endif
  void set_factoryiccid(const char* value);
  void set_factoryiccid(const char* value, size_t size);
  ::std::string* mutable_factoryiccid();
  ::std::string* release_factoryiccid();
  void set_allocated_factoryiccid(::std::string* factoryiccid);

  // string FactoryIMEI = 3;
  void clear_factoryimei();
  static const int kFactoryIMEIFieldNumber = 3;
  const ::std::string& factoryimei() const;
  void set_factoryimei(const ::std::string& value);
  #if LANG_CXX11
  void set_factoryimei(::std::string&& value);
  #endif
  void set_factoryimei(const char* value);
  void set_factoryimei(const char* value, size_t size);
  ::std::string* mutable_factoryimei();
  ::std::string* release_factoryimei();
  void set_allocated_factoryimei(::std::string* factoryimei);

  // string RTFirmwareVersion = 4;
  void clear_rtfirmwareversion();
  static const int kRTFirmwareVersionFieldNumber = 4;
  const ::std::string& rtfirmwareversion() const;
  void set_rtfirmwareversion(const ::std::string& value);
  #if LANG_CXX11
  void set_rtfirmwareversion(::std::string&& value);
  #endif
  void set_rtfirmwareversion(const char* value);
  void set_rtfirmwareversion(const char* value, size_t size);
  ::std::string* mutable_rtfirmwareversion();
  ::std::string* release_rtfirmwareversion();
  void set_allocated_rtfirmwareversion(::std::string* rtfirmwareversion);

  // string MenderArtifactInfo = 5;
  void clear_menderartifactinfo();
  static const int kMenderArtifactInfoFieldNumber = 5;
  const ::std::string& menderartifactinfo() const;
  void set_menderartifactinfo(const ::std::string& value);
  #if LANG_CXX11
  void set_menderartifactinfo(::std::string&& value);
  #endif
  void set_menderartifactinfo(const char* value);
  void set_menderartifactinfo(const char* value, size_t size);
  ::std::string* mutable_menderartifactinfo();
  ::std::string* release_menderartifactinfo();
  void set_allocated_menderartifactinfo(::std::string* menderartifactinfo);

  // @@protoc_insertion_point(class_scope:Nmea2k.FactoryData)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr serialnumber_;
  ::google::protobuf::internal::ArenaStringPtr factoryiccid_;
  ::google::protobuf::internal::ArenaStringPtr factoryimei_;
  ::google::protobuf::internal::ArenaStringPtr rtfirmwareversion_;
  ::google::protobuf::internal::ArenaStringPtr menderartifactinfo_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_Nmea2k_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Settings : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Nmea2k.Settings) */ {
 public:
  Settings();
  virtual ~Settings();

  Settings(const Settings& from);

  inline Settings& operator=(const Settings& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Settings(Settings&& from) noexcept
    : Settings() {
    *this = ::std::move(from);
  }

  inline Settings& operator=(Settings&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Settings& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Settings* internal_default_instance() {
    return reinterpret_cast<const Settings*>(
               &_Settings_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    27;

  void Swap(Settings* other);
  friend void swap(Settings& a, Settings& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Settings* New() const final {
    return CreateMaybeMessage<Settings>(NULL);
  }

  Settings* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Settings>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Settings& from);
  void MergeFrom(const Settings& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Settings* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string ConfigName = 11;
  void clear_configname();
  static const int kConfigNameFieldNumber = 11;
  const ::std::string& configname() const;
  void set_configname(const ::std::string& value);
  #if LANG_CXX11
  void set_configname(::std::string&& value);
  #endif
  void set_configname(const char* value);
  void set_configname(const char* value, size_t size);
  ::std::string* mutable_configname();
  ::std::string* release_configname();
  void set_allocated_configname(::std::string* configname);

  // string LibraryVersion = 12;
  void clear_libraryversion();
  static const int kLibraryVersionFieldNumber = 12;
  const ::std::string& libraryversion() const;
  void set_libraryversion(const ::std::string& value);
  #if LANG_CXX11
  void set_libraryversion(::std::string&& value);
  #endif
  void set_libraryversion(const char* value);
  void set_libraryversion(const char* value, size_t size);
  ::std::string* mutable_libraryversion();
  ::std::string* release_libraryversion();
  void set_allocated_libraryversion(::std::string* libraryversion);

  // .Nmea2k.AlarmGlobalStatus AlarmGlobalSettings = 10;
  bool has_alarmglobalsettings() const;
  void clear_alarmglobalsettings();
  static const int kAlarmGlobalSettingsFieldNumber = 10;
  private:
  const ::Nmea2k::AlarmGlobalStatus& _internal_alarmglobalsettings() const;
  public:
  const ::Nmea2k::AlarmGlobalStatus& alarmglobalsettings() const;
  ::Nmea2k::AlarmGlobalStatus* release_alarmglobalsettings();
  ::Nmea2k::AlarmGlobalStatus* mutable_alarmglobalsettings();
  void set_allocated_alarmglobalsettings(::Nmea2k::AlarmGlobalStatus* alarmglobalsettings);

  // .Nmea2k.FactoryData FactoryDataSettings = 13;
  bool has_factorydatasettings() const;
  void clear_factorydatasettings();
  static const int kFactoryDataSettingsFieldNumber = 13;
  private:
  const ::Nmea2k::FactoryData& _internal_factorydatasettings() const;
  public:
  const ::Nmea2k::FactoryData& factorydatasettings() const;
  ::Nmea2k::FactoryData* release_factorydatasettings();
  ::Nmea2k::FactoryData* mutable_factorydatasettings();
  void set_allocated_factorydatasettings(::Nmea2k::FactoryData* factorydatasettings);

  // uint32 ConfigId = 1;
  void clear_configid();
  static const int kConfigIdFieldNumber = 1;
  ::google::protobuf::uint32 configid() const;
  void set_configid(::google::protobuf::uint32 value);

  // uint32 ConfigVersion = 2;
  void clear_configversion();
  static const int kConfigVersionFieldNumber = 2;
  ::google::protobuf::uint32 configversion() const;
  void set_configversion(::google::protobuf::uint32 value);

  // uint32 ConfigFileVersion = 3;
  void clear_configfileversion();
  static const int kConfigFileVersionFieldNumber = 3;
  ::google::protobuf::uint32 configfileversion() const;
  void set_configfileversion(::google::protobuf::uint32 value);

  // uint32 DipswitchValue = 4;
  void clear_dipswitchvalue();
  static const int kDipswitchValueFieldNumber = 4;
  ::google::protobuf::uint32 dipswitchvalue() const;
  void set_dipswitchvalue(::google::protobuf::uint32 value);

  // float DepthOffset = 5;
  void clear_depthoffset();
  static const int kDepthOffsetFieldNumber = 5;
  float depthoffset() const;
  void set_depthoffset(float value);

  // float MagneticVariation = 6;
  void clear_magneticvariation();
  static const int kMagneticVariationFieldNumber = 6;
  float magneticvariation() const;
  void set_magneticvariation(float value);

  // int32 TimeOffset = 7;
  void clear_timeoffset();
  static const int kTimeOffsetFieldNumber = 7;
  ::google::protobuf::int32 timeoffset() const;
  void set_timeoffset(::google::protobuf::int32 value);

  // bool SleepEnabled = 8;
  void clear_sleepenabled();
  static const int kSleepEnabledFieldNumber = 8;
  bool sleepenabled() const;
  void set_sleepenabled(bool value);

  // uint32 SleepCircuitId = 9;
  void clear_sleepcircuitid();
  static const int kSleepCircuitIdFieldNumber = 9;
  ::google::protobuf::uint32 sleepcircuitid() const;
  void set_sleepcircuitid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Nmea2k.Settings)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr configname_;
  ::google::protobuf::internal::ArenaStringPtr libraryversion_;
  ::Nmea2k::AlarmGlobalStatus* alarmglobalsettings_;
  ::Nmea2k::FactoryData* factorydatasettings_;
  ::google::protobuf::uint32 configid_;
  ::google::protobuf::uint32 configversion_;
  ::google::protobuf::uint32 configfileversion_;
  ::google::protobuf::uint32 dipswitchvalue_;
  float depthoffset_;
  float magneticvariation_;
  ::google::protobuf::int32 timeoffset_;
  bool sleepenabled_;
  ::google::protobuf::uint32 sleepcircuitid_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_Nmea2k_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SettingRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Nmea2k.SettingRequest) */ {
 public:
  SettingRequest();
  virtual ~SettingRequest();

  SettingRequest(const SettingRequest& from);

  inline SettingRequest& operator=(const SettingRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SettingRequest(SettingRequest&& from) noexcept
    : SettingRequest() {
    *this = ::std::move(from);
  }

  inline SettingRequest& operator=(SettingRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SettingRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SettingRequest* internal_default_instance() {
    return reinterpret_cast<const SettingRequest*>(
               &_SettingRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    28;

  void Swap(SettingRequest* other);
  friend void swap(SettingRequest& a, SettingRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SettingRequest* New() const final {
    return CreateMaybeMessage<SettingRequest>(NULL);
  }

  SettingRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SettingRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SettingRequest& from);
  void MergeFrom(const SettingRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SettingRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef SettingRequest_eSettingType eSettingType;
  static const eSettingType Config =
    SettingRequest_eSettingType_Config;
  static const eSettingType Dipswitch =
    SettingRequest_eSettingType_Dipswitch;
  static const eSettingType DepthOffset =
    SettingRequest_eSettingType_DepthOffset;
  static const eSettingType MagneticVariation =
    SettingRequest_eSettingType_MagneticVariation;
  static const eSettingType TimeOffset =
    SettingRequest_eSettingType_TimeOffset;
  static const eSettingType Global =
    SettingRequest_eSettingType_Global;
  static const eSettingType DateTime =
    SettingRequest_eSettingType_DateTime;
  static const eSettingType BacklightLevel =
    SettingRequest_eSettingType_BacklightLevel;
  static const eSettingType BatteryFull =
    SettingRequest_eSettingType_BatteryFull;
  static const eSettingType AlarmGlobal =
    SettingRequest_eSettingType_AlarmGlobal;
  static const eSettingType FactoryData =
    SettingRequest_eSettingType_FactoryData;
  static inline bool eSettingType_IsValid(int value) {
    return SettingRequest_eSettingType_IsValid(value);
  }
  static const eSettingType eSettingType_MIN =
    SettingRequest_eSettingType_eSettingType_MIN;
  static const eSettingType eSettingType_MAX =
    SettingRequest_eSettingType_eSettingType_MAX;
  static const int eSettingType_ARRAYSIZE =
    SettingRequest_eSettingType_eSettingType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  eSettingType_descriptor() {
    return SettingRequest_eSettingType_descriptor();
  }
  static inline const ::std::string& eSettingType_Name(eSettingType value) {
    return SettingRequest_eSettingType_Name(value);
  }
  static inline bool eSettingType_Parse(const ::std::string& name,
      eSettingType* value) {
    return SettingRequest_eSettingType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // string Token = 3;
  void clear_token();
  static const int kTokenFieldNumber = 3;
  const ::std::string& token() const;
  void set_token(const ::std::string& value);
  #if LANG_CXX11
  void set_token(::std::string&& value);
  #endif
  void set_token(const char* value);
  void set_token(const char* value, size_t size);
  ::std::string* mutable_token();
  ::std::string* release_token();
  void set_allocated_token(::std::string* token);

  // bytes Payload = 9;
  void clear_payload();
  static const int kPayloadFieldNumber = 9;
  const ::std::string& payload() const;
  void set_payload(const ::std::string& value);
  #if LANG_CXX11
  void set_payload(::std::string&& value);
  #endif
  void set_payload(const char* value);
  void set_payload(const void* value, size_t size);
  ::std::string* mutable_payload();
  ::std::string* release_payload();
  void set_allocated_payload(::std::string* payload);

  // .Nmea2k.SettingRequest.eSettingType Type = 1;
  void clear_type();
  static const int kTypeFieldNumber = 1;
  ::Nmea2k::SettingRequest_eSettingType type() const;
  void set_type(::Nmea2k::SettingRequest_eSettingType value);

  // uint32 DipswitchValue = 2;
  void clear_dipswitchvalue();
  static const int kDipswitchValueFieldNumber = 2;
  ::google::protobuf::uint32 dipswitchvalue() const;
  void set_dipswitchvalue(::google::protobuf::uint32 value);

  // float TimeOffsetValue = 4;
  void clear_timeoffsetvalue();
  static const int kTimeOffsetValueFieldNumber = 4;
  float timeoffsetvalue() const;
  void set_timeoffsetvalue(float value);

  // float MagneticVariationValue = 5;
  void clear_magneticvariationvalue();
  static const int kMagneticVariationValueFieldNumber = 5;
  float magneticvariationvalue() const;
  void set_magneticvariationvalue(float value);

  // float DepthOffsetValue = 6;
  void clear_depthoffsetvalue();
  static const int kDepthOffsetValueFieldNumber = 6;
  float depthoffsetvalue() const;
  void set_depthoffsetvalue(float value);

  // float BacklightValue = 7;
  void clear_backlightvalue();
  static const int kBacklightValueFieldNumber = 7;
  float backlightvalue() const;
  void set_backlightvalue(float value);

  // uint32 BatteryFullValue = 8;
  void clear_batteryfullvalue();
  static const int kBatteryFullValueFieldNumber = 8;
  ::google::protobuf::uint32 batteryfullvalue() const;
  void set_batteryfullvalue(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Nmea2k.SettingRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr token_;
  ::google::protobuf::internal::ArenaStringPtr payload_;
  int type_;
  ::google::protobuf::uint32 dipswitchvalue_;
  float timeoffsetvalue_;
  float magneticvariationvalue_;
  float depthoffsetvalue_;
  float backlightvalue_;
  ::google::protobuf::uint32 batteryfullvalue_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_Nmea2k_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class OperationRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Nmea2k.OperationRequest) */ {
 public:
  OperationRequest();
  virtual ~OperationRequest();

  OperationRequest(const OperationRequest& from);

  inline OperationRequest& operator=(const OperationRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  OperationRequest(OperationRequest&& from) noexcept
    : OperationRequest() {
    *this = ::std::move(from);
  }

  inline OperationRequest& operator=(OperationRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const OperationRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const OperationRequest* internal_default_instance() {
    return reinterpret_cast<const OperationRequest*>(
               &_OperationRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    29;

  void Swap(OperationRequest* other);
  friend void swap(OperationRequest& a, OperationRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline OperationRequest* New() const final {
    return CreateMaybeMessage<OperationRequest>(NULL);
  }

  OperationRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<OperationRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const OperationRequest& from);
  void MergeFrom(const OperationRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OperationRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef OperationRequest_eOperationType eOperationType;
  static const eOperationType ReadConfig =
    OperationRequest_eOperationType_ReadConfig;
  static const eOperationType WriteConfig =
    OperationRequest_eOperationType_WriteConfig;
  static const eOperationType SettingsFactoryReset =
    OperationRequest_eOperationType_SettingsFactoryReset;
  static const eOperationType CZoneRaw =
    OperationRequest_eOperationType_CZoneRaw;
  static const eOperationType SnapshotUpdate =
    OperationRequest_eOperationType_SnapshotUpdate;
  static inline bool eOperationType_IsValid(int value) {
    return OperationRequest_eOperationType_IsValid(value);
  }
  static const eOperationType eOperationType_MIN =
    OperationRequest_eOperationType_eOperationType_MIN;
  static const eOperationType eOperationType_MAX =
    OperationRequest_eOperationType_eOperationType_MAX;
  static const int eOperationType_ARRAYSIZE =
    OperationRequest_eOperationType_eOperationType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  eOperationType_descriptor() {
    return OperationRequest_eOperationType_descriptor();
  }
  static inline const ::std::string& eOperationType_Name(eOperationType value) {
    return OperationRequest_eOperationType_Name(value);
  }
  static inline bool eOperationType_Parse(const ::std::string& name,
      eOperationType* value) {
    return OperationRequest_eOperationType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // string Token = 4;
  void clear_token();
  static const int kTokenFieldNumber = 4;
  const ::std::string& token() const;
  void set_token(const ::std::string& value);
  #if LANG_CXX11
  void set_token(::std::string&& value);
  #endif
  void set_token(const char* value);
  void set_token(const char* value, size_t size);
  ::std::string* mutable_token();
  ::std::string* release_token();
  void set_allocated_token(::std::string* token);

  // .Nmea2k.OperationRequest.eOperationType type = 1;
  void clear_type();
  static const int kTypeFieldNumber = 1;
  ::Nmea2k::OperationRequest_eOperationType type() const;
  void set_type(::Nmea2k::OperationRequest_eOperationType value);

  // bool ReadConfigForce = 2;
  void clear_readconfigforce();
  static const int kReadConfigForceFieldNumber = 2;
  bool readconfigforce() const;
  void set_readconfigforce(bool value);

  // bool ReadConfigMode = 3;
  void clear_readconfigmode();
  static const int kReadConfigModeFieldNumber = 3;
  bool readconfigmode() const;
  void set_readconfigmode(bool value);

  // uint32 CZoneRawOperation = 5;
  void clear_czonerawoperation();
  static const int kCZoneRawOperationFieldNumber = 5;
  ::google::protobuf::uint32 czonerawoperation() const;
  void set_czonerawoperation(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Nmea2k.OperationRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr token_;
  int type_;
  bool readconfigforce_;
  bool readconfigmode_;
  ::google::protobuf::uint32 czonerawoperation_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_Nmea2k_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ConfigRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Nmea2k.ConfigRequest) */ {
 public:
  ConfigRequest();
  virtual ~ConfigRequest();

  ConfigRequest(const ConfigRequest& from);

  inline ConfigRequest& operator=(const ConfigRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ConfigRequest(ConfigRequest&& from) noexcept
    : ConfigRequest() {
    *this = ::std::move(from);
  }

  inline ConfigRequest& operator=(ConfigRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ConfigRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ConfigRequest* internal_default_instance() {
    return reinterpret_cast<const ConfigRequest*>(
               &_ConfigRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    30;

  void Swap(ConfigRequest* other);
  friend void swap(ConfigRequest& a, ConfigRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ConfigRequest* New() const final {
    return CreateMaybeMessage<ConfigRequest>(NULL);
  }

  ConfigRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ConfigRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ConfigRequest& from);
  void MergeFrom(const ConfigRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ConfigRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef ConfigRequest_eConfigType eConfigType;
  static const eConfigType Alarms =
    ConfigRequest_eConfigType_Alarms;
  static const eConfigType Control =
    ConfigRequest_eConfigType_Control;
  static const eConfigType AC =
    ConfigRequest_eConfigType_AC;
  static const eConfigType DC =
    ConfigRequest_eConfigType_DC;
  static const eConfigType Tank =
    ConfigRequest_eConfigType_Tank;
  static const eConfigType Temperature =
    ConfigRequest_eConfigType_Temperature;
  static const eConfigType Pressure =
    ConfigRequest_eConfigType_Pressure;
  static const eConfigType ACMain =
    ConfigRequest_eConfigType_ACMain;
  static const eConfigType InverterCharger =
    ConfigRequest_eConfigType_InverterCharger;
  static const eConfigType Device =
    ConfigRequest_eConfigType_Device;
  static const eConfigType Mode =
    ConfigRequest_eConfigType_Mode;
  static const eConfigType Circuit =
    ConfigRequest_eConfigType_Circuit;
  static const eConfigType ScreenConfigPageImageItem =
    ConfigRequest_eConfigType_ScreenConfigPageImageItem;
  static const eConfigType ScreenConfigPageImage =
    ConfigRequest_eConfigType_ScreenConfigPageImage;
  static const eConfigType ScreenConfigPageGridItem =
    ConfigRequest_eConfigType_ScreenConfigPageGridItem;
  static const eConfigType ScreenConfigPage =
    ConfigRequest_eConfigType_ScreenConfigPage;
  static const eConfigType ScreenConfigMode =
    ConfigRequest_eConfigType_ScreenConfigMode;
  static const eConfigType ScreenConfig =
    ConfigRequest_eConfigType_ScreenConfig;
  static const eConfigType HVAC =
    ConfigRequest_eConfigType_HVAC;
  static const eConfigType ThirdPartyGenerator =
    ConfigRequest_eConfigType_ThirdPartyGenerator;
  static const eConfigType ZipdeeAwning =
    ConfigRequest_eConfigType_ZipdeeAwning;
  static const eConfigType FantasticFan =
    ConfigRequest_eConfigType_FantasticFan;
  static const eConfigType ShoreFuse =
    ConfigRequest_eConfigType_ShoreFuse;
  static const eConfigType TyrePressure =
    ConfigRequest_eConfigType_TyrePressure;
  static const eConfigType AudioStereo =
    ConfigRequest_eConfigType_AudioStereo;
  static const eConfigType CircuitLoads =
    ConfigRequest_eConfigType_CircuitLoads;
  static const eConfigType Categories =
    ConfigRequest_eConfigType_Categories;
  static const eConfigType Engines =
    ConfigRequest_eConfigType_Engines;
  static const eConfigType GNSS =
    ConfigRequest_eConfigType_GNSS;
  static const eConfigType FavouritesMode =
    ConfigRequest_eConfigType_FavouritesMode;
  static const eConfigType FavouritesControl =
    ConfigRequest_eConfigType_FavouritesControl;
  static const eConfigType FavouritesMonitoring =
    ConfigRequest_eConfigType_FavouritesMonitoring;
  static const eConfigType FavouritesAlarm =
    ConfigRequest_eConfigType_FavouritesAlarm;
  static const eConfigType FavouritesACMain =
    ConfigRequest_eConfigType_FavouritesACMain;
  static const eConfigType FavouritesInverterCharger =
    ConfigRequest_eConfigType_FavouritesInverterCharger;
  static const eConfigType FavouritesBoatView =
    ConfigRequest_eConfigType_FavouritesBoatView;
  static const eConfigType UiRelationships =
    ConfigRequest_eConfigType_UiRelationships;
  static const eConfigType BinaryLogicStates =
    ConfigRequest_eConfigType_BinaryLogicStates;
  static const eConfigType CZoneRaw =
    ConfigRequest_eConfigType_CZoneRaw;
  static const eConfigType RTCoreMap =
    ConfigRequest_eConfigType_RTCoreMap;
  static const eConfigType SwitchPositiveNegtive =
    ConfigRequest_eConfigType_SwitchPositiveNegtive;
  static const eConfigType NonVisibleCircuit =
    ConfigRequest_eConfigType_NonVisibleCircuit;
  static inline bool eConfigType_IsValid(int value) {
    return ConfigRequest_eConfigType_IsValid(value);
  }
  static const eConfigType eConfigType_MIN =
    ConfigRequest_eConfigType_eConfigType_MIN;
  static const eConfigType eConfigType_MAX =
    ConfigRequest_eConfigType_eConfigType_MAX;
  static const int eConfigType_ARRAYSIZE =
    ConfigRequest_eConfigType_eConfigType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  eConfigType_descriptor() {
    return ConfigRequest_eConfigType_descriptor();
  }
  static inline const ::std::string& eConfigType_Name(eConfigType value) {
    return ConfigRequest_eConfigType_Name(value);
  }
  static inline bool eConfigType_Parse(const ::std::string& name,
      eConfigType* value) {
    return ConfigRequest_eConfigType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // string Token = 2;
  void clear_token();
  static const int kTokenFieldNumber = 2;
  const ::std::string& token() const;
  void set_token(const ::std::string& value);
  #if LANG_CXX11
  void set_token(::std::string&& value);
  #endif
  void set_token(const char* value);
  void set_token(const char* value, size_t size);
  ::std::string* mutable_token();
  ::std::string* release_token();
  void set_allocated_token(::std::string* token);

  // .Nmea2k.ConfigRequest.eConfigType Type = 1;
  void clear_type();
  static const int kTypeFieldNumber = 1;
  ::Nmea2k::ConfigRequest_eConfigType type() const;
  void set_type(::Nmea2k::ConfigRequest_eConfigType value);

  // uint32 ParentId = 3;
  void clear_parentid();
  static const int kParentIdFieldNumber = 3;
  ::google::protobuf::uint32 parentid() const;
  void set_parentid(::google::protobuf::uint32 value);

  // uint32 Flags = 4;
  void clear_flags();
  static const int kFlagsFieldNumber = 4;
  ::google::protobuf::uint32 flags() const;
  void set_flags(::google::protobuf::uint32 value);

  // uint32 SubType = 5;
  void clear_subtype();
  static const int kSubTypeFieldNumber = 5;
  ::google::protobuf::uint32 subtype() const;
  void set_subtype(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Nmea2k.ConfigRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr token_;
  int type_;
  ::google::protobuf::uint32 parentid_;
  ::google::protobuf::uint32 flags_;
  ::google::protobuf::uint32 subtype_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_Nmea2k_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class AlarmLimit : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Nmea2k.AlarmLimit) */ {
 public:
  AlarmLimit();
  virtual ~AlarmLimit();

  AlarmLimit(const AlarmLimit& from);

  inline AlarmLimit& operator=(const AlarmLimit& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AlarmLimit(AlarmLimit&& from) noexcept
    : AlarmLimit() {
    *this = ::std::move(from);
  }

  inline AlarmLimit& operator=(AlarmLimit&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const AlarmLimit& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AlarmLimit* internal_default_instance() {
    return reinterpret_cast<const AlarmLimit*>(
               &_AlarmLimit_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    31;

  void Swap(AlarmLimit* other);
  friend void swap(AlarmLimit& a, AlarmLimit& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AlarmLimit* New() const final {
    return CreateMaybeMessage<AlarmLimit>(NULL);
  }

  AlarmLimit* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<AlarmLimit>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const AlarmLimit& from);
  void MergeFrom(const AlarmLimit& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AlarmLimit* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bool Enabled = 1;
  void clear_enabled();
  static const int kEnabledFieldNumber = 1;
  bool enabled() const;
  void set_enabled(bool value);

  // float On = 2;
  void clear_on();
  static const int kOnFieldNumber = 2;
  float on() const;
  void set_on(float value);

  // float Off = 3;
  void clear_off();
  static const int kOffFieldNumber = 3;
  float off() const;
  void set_off(float value);

  // uint32 Id = 4;
  void clear_id();
  static const int kIdFieldNumber = 4;
  ::google::protobuf::uint32 id() const;
  void set_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Nmea2k.AlarmLimit)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool enabled_;
  float on_;
  float off_;
  ::google::protobuf::uint32 id_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_Nmea2k_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DataId : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Nmea2k.DataId) */ {
 public:
  DataId();
  virtual ~DataId();

  DataId(const DataId& from);

  inline DataId& operator=(const DataId& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DataId(DataId&& from) noexcept
    : DataId() {
    *this = ::std::move(from);
  }

  inline DataId& operator=(DataId&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const DataId& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DataId* internal_default_instance() {
    return reinterpret_cast<const DataId*>(
               &_DataId_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    32;

  void Swap(DataId* other);
  friend void swap(DataId& a, DataId& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DataId* New() const final {
    return CreateMaybeMessage<DataId>(NULL);
  }

  DataId* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<DataId>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const DataId& from);
  void MergeFrom(const DataId& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DataId* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bool Enabled = 1;
  void clear_enabled();
  static const int kEnabledFieldNumber = 1;
  bool enabled() const;
  void set_enabled(bool value);

  // uint32 Id = 2;
  void clear_id();
  static const int kIdFieldNumber = 2;
  ::google::protobuf::uint32 id() const;
  void set_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Nmea2k.DataId)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool enabled_;
  ::google::protobuf::uint32 id_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_Nmea2k_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Instance : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Nmea2k.Instance) */ {
 public:
  Instance();
  virtual ~Instance();

  Instance(const Instance& from);

  inline Instance& operator=(const Instance& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Instance(Instance&& from) noexcept
    : Instance() {
    *this = ::std::move(from);
  }

  inline Instance& operator=(Instance&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Instance& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Instance* internal_default_instance() {
    return reinterpret_cast<const Instance*>(
               &_Instance_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    33;

  void Swap(Instance* other);
  friend void swap(Instance& a, Instance& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Instance* New() const final {
    return CreateMaybeMessage<Instance>(NULL);
  }

  Instance* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Instance>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Instance& from);
  void MergeFrom(const Instance& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Instance* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bool Enabled = 1;
  void clear_enabled();
  static const int kEnabledFieldNumber = 1;
  bool enabled() const;
  void set_enabled(bool value);

  // uint32 Instance = 2;
  void clear_instance();
  static const int kInstanceFieldNumber = 2;
  ::google::protobuf::uint32 instance() const;
  void set_instance(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Nmea2k.Instance)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool enabled_;
  ::google::protobuf::uint32 instance_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_Nmea2k_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Alarm : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Nmea2k.Alarm) */ {
 public:
  Alarm();
  virtual ~Alarm();

  Alarm(const Alarm& from);

  inline Alarm& operator=(const Alarm& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Alarm(Alarm&& from) noexcept
    : Alarm() {
    *this = ::std::move(from);
  }

  inline Alarm& operator=(Alarm&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Alarm& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Alarm* internal_default_instance() {
    return reinterpret_cast<const Alarm*>(
               &_Alarm_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    34;

  void Swap(Alarm* other);
  friend void swap(Alarm& a, Alarm& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Alarm* New() const final {
    return CreateMaybeMessage<Alarm>(NULL);
  }

  Alarm* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Alarm>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Alarm& from);
  void MergeFrom(const Alarm& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Alarm* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Alarm_eAlarmType eAlarmType;
  static const eAlarmType External =
    Alarm_eAlarmType_External;
  static const eAlarmType DipswitchConflict =
    Alarm_eAlarmType_DipswitchConflict;
  static const eAlarmType TypeDeviceConflict =
    Alarm_eAlarmType_TypeDeviceConflict;
  static const eAlarmType TypeDeviceMissing =
    Alarm_eAlarmType_TypeDeviceMissing;
  static const eAlarmType TypeConfigConflict =
    Alarm_eAlarmType_TypeConfigConflict;
  static const eAlarmType TypeSleepWarning =
    Alarm_eAlarmType_TypeSleepWarning;
  static const eAlarmType TypeNone =
    Alarm_eAlarmType_TypeNone;
  static inline bool eAlarmType_IsValid(int value) {
    return Alarm_eAlarmType_IsValid(value);
  }
  static const eAlarmType eAlarmType_MIN =
    Alarm_eAlarmType_eAlarmType_MIN;
  static const eAlarmType eAlarmType_MAX =
    Alarm_eAlarmType_eAlarmType_MAX;
  static const int eAlarmType_ARRAYSIZE =
    Alarm_eAlarmType_eAlarmType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  eAlarmType_descriptor() {
    return Alarm_eAlarmType_descriptor();
  }
  static inline const ::std::string& eAlarmType_Name(eAlarmType value) {
    return Alarm_eAlarmType_Name(value);
  }
  static inline bool eAlarmType_Parse(const ::std::string& name,
      eAlarmType* value) {
    return Alarm_eAlarmType_Parse(name, value);
  }

  typedef Alarm_eSeverityType eSeverityType;
  static const eSeverityType SeverityCritical =
    Alarm_eSeverityType_SeverityCritical;
  static const eSeverityType SeverityImportant =
    Alarm_eSeverityType_SeverityImportant;
  static const eSeverityType SeverityStandard =
    Alarm_eSeverityType_SeverityStandard;
  static const eSeverityType SeverityWarning =
    Alarm_eSeverityType_SeverityWarning;
  static const eSeverityType SeveritySIO =
    Alarm_eSeverityType_SeveritySIO;
  static const eSeverityType SeverityNone =
    Alarm_eSeverityType_SeverityNone;
  static inline bool eSeverityType_IsValid(int value) {
    return Alarm_eSeverityType_IsValid(value);
  }
  static const eSeverityType eSeverityType_MIN =
    Alarm_eSeverityType_eSeverityType_MIN;
  static const eSeverityType eSeverityType_MAX =
    Alarm_eSeverityType_eSeverityType_MAX;
  static const int eSeverityType_ARRAYSIZE =
    Alarm_eSeverityType_eSeverityType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  eSeverityType_descriptor() {
    return Alarm_eSeverityType_descriptor();
  }
  static inline const ::std::string& eSeverityType_Name(eSeverityType value) {
    return Alarm_eSeverityType_Name(value);
  }
  static inline bool eSeverityType_Parse(const ::std::string& name,
      eSeverityType* value) {
    return Alarm_eSeverityType_Parse(name, value);
  }

  typedef Alarm_eStateType eStateType;
  static const eStateType StateDisabled =
    Alarm_eStateType_StateDisabled;
  static const eStateType StateEnabled =
    Alarm_eStateType_StateEnabled;
  static const eStateType StateAcknowledged =
    Alarm_eStateType_StateAcknowledged;
  static inline bool eStateType_IsValid(int value) {
    return Alarm_eStateType_IsValid(value);
  }
  static const eStateType eStateType_MIN =
    Alarm_eStateType_eStateType_MIN;
  static const eStateType eStateType_MAX =
    Alarm_eStateType_eStateType_MAX;
  static const int eStateType_ARRAYSIZE =
    Alarm_eStateType_eStateType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  eStateType_descriptor() {
    return Alarm_eStateType_descriptor();
  }
  static inline const ::std::string& eStateType_Name(eStateType value) {
    return Alarm_eStateType_Name(value);
  }
  static inline bool eStateType_Parse(const ::std::string& name,
      eStateType* value) {
    return Alarm_eStateType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // string Name = 13;
  void clear_name();
  static const int kNameFieldNumber = 13;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // string Channel = 14;
  void clear_channel();
  static const int kChannelFieldNumber = 14;
  const ::std::string& channel() const;
  void set_channel(const ::std::string& value);
  #if LANG_CXX11
  void set_channel(::std::string&& value);
  #endif
  void set_channel(const char* value);
  void set_channel(const char* value, size_t size);
  ::std::string* mutable_channel();
  ::std::string* release_channel();
  void set_allocated_channel(::std::string* channel);

  // string Device = 15;
  void clear_device();
  static const int kDeviceFieldNumber = 15;
  const ::std::string& device() const;
  void set_device(const ::std::string& value);
  #if LANG_CXX11
  void set_device(::std::string&& value);
  #endif
  void set_device(const char* value);
  void set_device(const char* value, size_t size);
  ::std::string* mutable_device();
  ::std::string* release_device();
  void set_allocated_device(::std::string* device);

  // string Title = 16;
  void clear_title();
  static const int kTitleFieldNumber = 16;
  const ::std::string& title() const;
  void set_title(const ::std::string& value);
  #if LANG_CXX11
  void set_title(::std::string&& value);
  #endif
  void set_title(const char* value);
  void set_title(const char* value, size_t size);
  ::std::string* mutable_title();
  ::std::string* release_title();
  void set_allocated_title(::std::string* title);

  // string Description = 17;
  void clear_description();
  static const int kDescriptionFieldNumber = 17;
  const ::std::string& description() const;
  void set_description(const ::std::string& value);
  #if LANG_CXX11
  void set_description(::std::string&& value);
  #endif
  void set_description(const char* value);
  void set_description(const char* value, size_t size);
  ::std::string* mutable_description();
  ::std::string* release_description();
  void set_allocated_description(::std::string* description);

  // bytes CZoneRawAlarm = 18;
  void clear_czonerawalarm();
  static const int kCZoneRawAlarmFieldNumber = 18;
  const ::std::string& czonerawalarm() const;
  void set_czonerawalarm(const ::std::string& value);
  #if LANG_CXX11
  void set_czonerawalarm(::std::string&& value);
  #endif
  void set_czonerawalarm(const char* value);
  void set_czonerawalarm(const void* value, size_t size);
  ::std::string* mutable_czonerawalarm();
  ::std::string* release_czonerawalarm();
  void set_allocated_czonerawalarm(::std::string* czonerawalarm);

  // string FaultAction = 19;
  void clear_faultaction();
  static const int kFaultActionFieldNumber = 19;
  const ::std::string& faultaction() const;
  void set_faultaction(const ::std::string& value);
  #if LANG_CXX11
  void set_faultaction(::std::string&& value);
  #endif
  void set_faultaction(const char* value);
  void set_faultaction(const char* value, size_t size);
  ::std::string* mutable_faultaction();
  ::std::string* release_faultaction();
  void set_allocated_faultaction(::std::string* faultaction);

  // .Nmea2k.ConfigRequest.eConfigType DisplayType = 1;
  void clear_displaytype();
  static const int kDisplayTypeFieldNumber = 1;
  ::Nmea2k::ConfigRequest_eConfigType displaytype() const;
  void set_displaytype(::Nmea2k::ConfigRequest_eConfigType value);

  // uint32 Id = 2;
  void clear_id();
  static const int kIdFieldNumber = 2;
  ::google::protobuf::uint32 id() const;
  void set_id(::google::protobuf::uint32 value);

  // .Nmea2k.Alarm.eAlarmType AlarmType = 3;
  void clear_alarmtype();
  static const int kAlarmTypeFieldNumber = 3;
  ::Nmea2k::Alarm_eAlarmType alarmtype() const;
  void set_alarmtype(::Nmea2k::Alarm_eAlarmType value);

  // .Nmea2k.Alarm.eSeverityType Severity = 4;
  void clear_severity();
  static const int kSeverityFieldNumber = 4;
  ::Nmea2k::Alarm_eSeverityType severity() const;
  void set_severity(::Nmea2k::Alarm_eSeverityType value);

  // .Nmea2k.Alarm.eStateType CurrentState = 5;
  void clear_currentstate();
  static const int kCurrentStateFieldNumber = 5;
  ::Nmea2k::Alarm_eStateType currentstate() const;
  void set_currentstate(::Nmea2k::Alarm_eStateType value);

  // uint32 ChannelId = 6;
  void clear_channelid();
  static const int kChannelIdFieldNumber = 6;
  ::google::protobuf::uint32 channelid() const;
  void set_channelid(::google::protobuf::uint32 value);

  // uint32 ExternalAlarmId = 7;
  void clear_externalalarmid();
  static const int kExternalAlarmIdFieldNumber = 7;
  ::google::protobuf::uint32 externalalarmid() const;
  void set_externalalarmid(::google::protobuf::uint32 value);

  // uint32 UniqueId = 8;
  void clear_uniqueid();
  static const int kUniqueIdFieldNumber = 8;
  ::google::protobuf::uint32 uniqueid() const;
  void set_uniqueid(::google::protobuf::uint32 value);

  // uint64 ActivatedTime = 10;
  void clear_activatedtime();
  static const int kActivatedTimeFieldNumber = 10;
  ::google::protobuf::uint64 activatedtime() const;
  void set_activatedtime(::google::protobuf::uint64 value);

  // uint64 AcknowledgedTime = 11;
  void clear_acknowledgedtime();
  static const int kAcknowledgedTimeFieldNumber = 11;
  ::google::protobuf::uint64 acknowledgedtime() const;
  void set_acknowledgedtime(::google::protobuf::uint64 value);

  // uint64 ClearedTime = 12;
  void clear_clearedtime();
  static const int kClearedTimeFieldNumber = 12;
  ::google::protobuf::uint64 clearedtime() const;
  void set_clearedtime(::google::protobuf::uint64 value);

  // bool Valid = 9;
  void clear_valid();
  static const int kValidFieldNumber = 9;
  bool valid() const;
  void set_valid(bool value);

  // uint32 FaultType = 20;
  void clear_faulttype();
  static const int kFaultTypeFieldNumber = 20;
  ::google::protobuf::uint32 faulttype() const;
  void set_faulttype(::google::protobuf::uint32 value);

  // uint32 FaultNumber = 21;
  void clear_faultnumber();
  static const int kFaultNumberFieldNumber = 21;
  ::google::protobuf::uint32 faultnumber() const;
  void set_faultnumber(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Nmea2k.Alarm)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr channel_;
  ::google::protobuf::internal::ArenaStringPtr device_;
  ::google::protobuf::internal::ArenaStringPtr title_;
  ::google::protobuf::internal::ArenaStringPtr description_;
  ::google::protobuf::internal::ArenaStringPtr czonerawalarm_;
  ::google::protobuf::internal::ArenaStringPtr faultaction_;
  int displaytype_;
  ::google::protobuf::uint32 id_;
  int alarmtype_;
  int severity_;
  int currentstate_;
  ::google::protobuf::uint32 channelid_;
  ::google::protobuf::uint32 externalalarmid_;
  ::google::protobuf::uint32 uniqueid_;
  ::google::protobuf::uint64 activatedtime_;
  ::google::protobuf::uint64 acknowledgedtime_;
  ::google::protobuf::uint64 clearedtime_;
  bool valid_;
  ::google::protobuf::uint32 faulttype_;
  ::google::protobuf::uint32 faultnumber_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_Nmea2k_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Device : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Nmea2k.Device) */ {
 public:
  Device();
  virtual ~Device();

  Device(const Device& from);

  inline Device& operator=(const Device& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Device(Device&& from) noexcept
    : Device() {
    *this = ::std::move(from);
  }

  inline Device& operator=(Device&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Device& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Device* internal_default_instance() {
    return reinterpret_cast<const Device*>(
               &_Device_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    35;

  void Swap(Device* other);
  friend void swap(Device& a, Device& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Device* New() const final {
    return CreateMaybeMessage<Device>(NULL);
  }

  Device* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Device>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Device& from);
  void MergeFrom(const Device& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Device* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Device_eDeviceType eDeviceType;
  static const eDeviceType None =
    Device_eDeviceType_None;
  static const eDeviceType OutputInterface =
    Device_eDeviceType_OutputInterface;
  static const eDeviceType MeterInterface =
    Device_eDeviceType_MeterInterface;
  static const eDeviceType SignalInterface =
    Device_eDeviceType_SignalInterface;
  static const eDeviceType MotorControlInterface =
    Device_eDeviceType_MotorControlInterface;
  static const eDeviceType SwitchInterface =
    Device_eDeviceType_SwitchInterface;
  static const eDeviceType ACOutputInterface =
    Device_eDeviceType_ACOutputInterface;
  static const eDeviceType ACMainsInterface =
    Device_eDeviceType_ACMainsInterface;
  static const eDeviceType MasterbusInterface =
    Device_eDeviceType_MasterbusInterface;
  static const eDeviceType Contact6 =
    Device_eDeviceType_Contact6;
  static const eDeviceType SwitchPad =
    Device_eDeviceType_SwitchPad;
  static const eDeviceType WirelessInterface =
    Device_eDeviceType_WirelessInterface;
  static const eDeviceType DisplayInterface =
    Device_eDeviceType_DisplayInterface;
  static const eDeviceType SmartBatteryHub =
    Device_eDeviceType_SmartBatteryHub;
  static const eDeviceType Control1 =
    Device_eDeviceType_Control1;
  static const eDeviceType Keypad =
    Device_eDeviceType_Keypad;
  static const eDeviceType Contact6Plus =
    Device_eDeviceType_Contact6Plus;
  static const eDeviceType CombinationOutputInterface =
    Device_eDeviceType_CombinationOutputInterface;
  static const eDeviceType M2VSM =
    Device_eDeviceType_M2VSM;
  static const eDeviceType CZoneDDS =
    Device_eDeviceType_CZoneDDS;
  static const eDeviceType RV1 =
    Device_eDeviceType_RV1;
  static const eDeviceType ControlX =
    Device_eDeviceType_ControlX;
  static const eDeviceType Europa =
    Device_eDeviceType_Europa;
  static const eDeviceType Shunt =
    Device_eDeviceType_Shunt;
  static const eDeviceType Charger =
    Device_eDeviceType_Charger;
  static const eDeviceType InverterCharger =
    Device_eDeviceType_InverterCharger;
  static const eDeviceType Battery =
    Device_eDeviceType_Battery;
  static inline bool eDeviceType_IsValid(int value) {
    return Device_eDeviceType_IsValid(value);
  }
  static const eDeviceType eDeviceType_MIN =
    Device_eDeviceType_eDeviceType_MIN;
  static const eDeviceType eDeviceType_MAX =
    Device_eDeviceType_eDeviceType_MAX;
  static const int eDeviceType_ARRAYSIZE =
    Device_eDeviceType_eDeviceType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  eDeviceType_descriptor() {
    return Device_eDeviceType_descriptor();
  }
  static inline const ::std::string& eDeviceType_Name(eDeviceType value) {
    return Device_eDeviceType_Name(value);
  }
  static inline bool eDeviceType_Parse(const ::std::string& name,
      eDeviceType* value) {
    return Device_eDeviceType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // string NameUTF8 = 3;
  void clear_nameutf8();
  static const int kNameUTF8FieldNumber = 3;
  const ::std::string& nameutf8() const;
  void set_nameutf8(const ::std::string& value);
  #if LANG_CXX11
  void set_nameutf8(::std::string&& value);
  #endif
  void set_nameutf8(const char* value);
  void set_nameutf8(const char* value, size_t size);
  ::std::string* mutable_nameutf8();
  ::std::string* release_nameutf8();
  void set_allocated_nameutf8(::std::string* nameutf8);

  // string Version = 10;
  void clear_version();
  static const int kVersionFieldNumber = 10;
  const ::std::string& version() const;
  void set_version(const ::std::string& value);
  #if LANG_CXX11
  void set_version(::std::string&& value);
  #endif
  void set_version(const char* value);
  void set_version(const char* value, size_t size);
  ::std::string* mutable_version();
  ::std::string* release_version();
  void set_allocated_version(::std::string* version);

  // .Nmea2k.ConfigRequest.eConfigType DisplayType = 1;
  void clear_displaytype();
  static const int kDisplayTypeFieldNumber = 1;
  ::Nmea2k::ConfigRequest_eConfigType displaytype() const;
  void set_displaytype(::Nmea2k::ConfigRequest_eConfigType value);

  // uint32 Dipswitch = 4;
  void clear_dipswitch();
  static const int kDipswitchFieldNumber = 4;
  ::google::protobuf::uint32 dipswitch() const;
  void set_dipswitch(::google::protobuf::uint32 value);

  // uint32 SourceAddress = 5;
  void clear_sourceaddress();
  static const int kSourceAddressFieldNumber = 5;
  ::google::protobuf::uint32 sourceaddress() const;
  void set_sourceaddress(::google::protobuf::uint32 value);

  // .Nmea2k.Device.eDeviceType DeviceType = 7;
  void clear_devicetype();
  static const int kDeviceTypeFieldNumber = 7;
  ::Nmea2k::Device_eDeviceType devicetype() const;
  void set_devicetype(::Nmea2k::Device_eDeviceType value);

  // bool Conflict = 6;
  void clear_conflict();
  static const int kConflictFieldNumber = 6;
  bool conflict() const;
  void set_conflict(bool value);

  // bool Valid = 8;
  void clear_valid();
  static const int kValidFieldNumber = 8;
  bool valid() const;
  void set_valid(bool value);

  // bool Transient = 9;
  void clear_transient();
  static const int kTransientFieldNumber = 9;
  bool transient() const;
  void set_transient(bool value);

  // @@protoc_insertion_point(class_scope:Nmea2k.Device)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr nameutf8_;
  ::google::protobuf::internal::ArenaStringPtr version_;
  int displaytype_;
  ::google::protobuf::uint32 dipswitch_;
  ::google::protobuf::uint32 sourceaddress_;
  int devicetype_;
  bool conflict_;
  bool valid_;
  bool transient_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_Nmea2k_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class UiRelationshipMsg : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Nmea2k.UiRelationshipMsg) */ {
 public:
  UiRelationshipMsg();
  virtual ~UiRelationshipMsg();

  UiRelationshipMsg(const UiRelationshipMsg& from);

  inline UiRelationshipMsg& operator=(const UiRelationshipMsg& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  UiRelationshipMsg(UiRelationshipMsg&& from) noexcept
    : UiRelationshipMsg() {
    *this = ::std::move(from);
  }

  inline UiRelationshipMsg& operator=(UiRelationshipMsg&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const UiRelationshipMsg& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UiRelationshipMsg* internal_default_instance() {
    return reinterpret_cast<const UiRelationshipMsg*>(
               &_UiRelationshipMsg_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    36;

  void Swap(UiRelationshipMsg* other);
  friend void swap(UiRelationshipMsg& a, UiRelationshipMsg& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline UiRelationshipMsg* New() const final {
    return CreateMaybeMessage<UiRelationshipMsg>(NULL);
  }

  UiRelationshipMsg* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<UiRelationshipMsg>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const UiRelationshipMsg& from);
  void MergeFrom(const UiRelationshipMsg& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UiRelationshipMsg* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef UiRelationshipMsg_eItemType eItemType;
  static const eItemType None =
    UiRelationshipMsg_eItemType_None;
  static const eItemType FluidLevel =
    UiRelationshipMsg_eItemType_FluidLevel;
  static const eItemType Pressure =
    UiRelationshipMsg_eItemType_Pressure;
  static const eItemType Temperature =
    UiRelationshipMsg_eItemType_Temperature;
  static const eItemType DcMeter =
    UiRelationshipMsg_eItemType_DcMeter;
  static const eItemType AcMeter =
    UiRelationshipMsg_eItemType_AcMeter;
  static const eItemType BinaryLogicState =
    UiRelationshipMsg_eItemType_BinaryLogicState;
  static const eItemType Circuit =
    UiRelationshipMsg_eItemType_Circuit;
  static const eItemType Category =
    UiRelationshipMsg_eItemType_Category;
  static const eItemType InverterCharger =
    UiRelationshipMsg_eItemType_InverterCharger;
  static inline bool eItemType_IsValid(int value) {
    return UiRelationshipMsg_eItemType_IsValid(value);
  }
  static const eItemType eItemType_MIN =
    UiRelationshipMsg_eItemType_eItemType_MIN;
  static const eItemType eItemType_MAX =
    UiRelationshipMsg_eItemType_eItemType_MAX;
  static const int eItemType_ARRAYSIZE =
    UiRelationshipMsg_eItemType_eItemType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  eItemType_descriptor() {
    return UiRelationshipMsg_eItemType_descriptor();
  }
  static inline const ::std::string& eItemType_Name(eItemType value) {
    return UiRelationshipMsg_eItemType_Name(value);
  }
  static inline bool eItemType_Parse(const ::std::string& name,
      eItemType* value) {
    return UiRelationshipMsg_eItemType_Parse(name, value);
  }

  typedef UiRelationshipMsg_eRelationshipType eRelationshipType;
  static const eRelationshipType Normal =
    UiRelationshipMsg_eRelationshipType_Normal;
  static const eRelationshipType Duplicates =
    UiRelationshipMsg_eRelationshipType_Duplicates;
  static inline bool eRelationshipType_IsValid(int value) {
    return UiRelationshipMsg_eRelationshipType_IsValid(value);
  }
  static const eRelationshipType eRelationshipType_MIN =
    UiRelationshipMsg_eRelationshipType_eRelationshipType_MIN;
  static const eRelationshipType eRelationshipType_MAX =
    UiRelationshipMsg_eRelationshipType_eRelationshipType_MAX;
  static const int eRelationshipType_ARRAYSIZE =
    UiRelationshipMsg_eRelationshipType_eRelationshipType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  eRelationshipType_descriptor() {
    return UiRelationshipMsg_eRelationshipType_descriptor();
  }
  static inline const ::std::string& eRelationshipType_Name(eRelationshipType value) {
    return UiRelationshipMsg_eRelationshipType_Name(value);
  }
  static inline bool eRelationshipType_Parse(const ::std::string& name,
      eRelationshipType* value) {
    return UiRelationshipMsg_eRelationshipType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // .Nmea2k.ConfigRequest.eConfigType DisplayType = 1;
  void clear_displaytype();
  static const int kDisplayTypeFieldNumber = 1;
  ::Nmea2k::ConfigRequest_eConfigType displaytype() const;
  void set_displaytype(::Nmea2k::ConfigRequest_eConfigType value);

  // uint32 Id = 2;
  void clear_id();
  static const int kIdFieldNumber = 2;
  ::google::protobuf::uint32 id() const;
  void set_id(::google::protobuf::uint32 value);

  // .Nmea2k.UiRelationshipMsg.eItemType PrimaryType = 3;
  void clear_primarytype();
  static const int kPrimaryTypeFieldNumber = 3;
  ::Nmea2k::UiRelationshipMsg_eItemType primarytype() const;
  void set_primarytype(::Nmea2k::UiRelationshipMsg_eItemType value);

  // .Nmea2k.UiRelationshipMsg.eItemType SecondaryType = 4;
  void clear_secondarytype();
  static const int kSecondaryTypeFieldNumber = 4;
  ::Nmea2k::UiRelationshipMsg_eItemType secondarytype() const;
  void set_secondarytype(::Nmea2k::UiRelationshipMsg_eItemType value);

  // uint32 PrimaryId = 5;
  void clear_primaryid();
  static const int kPrimaryIdFieldNumber = 5;
  ::google::protobuf::uint32 primaryid() const;
  void set_primaryid(::google::protobuf::uint32 value);

  // uint32 SecondaryId = 6;
  void clear_secondaryid();
  static const int kSecondaryIdFieldNumber = 6;
  ::google::protobuf::uint32 secondaryid() const;
  void set_secondaryid(::google::protobuf::uint32 value);

  // .Nmea2k.UiRelationshipMsg.eRelationshipType RelationshipType = 7;
  void clear_relationshiptype();
  static const int kRelationshipTypeFieldNumber = 7;
  ::Nmea2k::UiRelationshipMsg_eRelationshipType relationshiptype() const;
  void set_relationshiptype(::Nmea2k::UiRelationshipMsg_eRelationshipType value);

  // uint32 PrimaryConfigAddress = 8;
  void clear_primaryconfigaddress();
  static const int kPrimaryConfigAddressFieldNumber = 8;
  ::google::protobuf::uint32 primaryconfigaddress() const;
  void set_primaryconfigaddress(::google::protobuf::uint32 value);

  // uint32 SecondaryConfigAddress = 9;
  void clear_secondaryconfigaddress();
  static const int kSecondaryConfigAddressFieldNumber = 9;
  ::google::protobuf::uint32 secondaryconfigaddress() const;
  void set_secondaryconfigaddress(::google::protobuf::uint32 value);

  // uint32 PrimaryChannelIndex = 10;
  void clear_primarychannelindex();
  static const int kPrimaryChannelIndexFieldNumber = 10;
  ::google::protobuf::uint32 primarychannelindex() const;
  void set_primarychannelindex(::google::protobuf::uint32 value);

  // uint32 SecondaryChannelIndex = 11;
  void clear_secondarychannelindex();
  static const int kSecondaryChannelIndexFieldNumber = 11;
  ::google::protobuf::uint32 secondarychannelindex() const;
  void set_secondarychannelindex(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Nmea2k.UiRelationshipMsg)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  int displaytype_;
  ::google::protobuf::uint32 id_;
  int primarytype_;
  int secondarytype_;
  ::google::protobuf::uint32 primaryid_;
  ::google::protobuf::uint32 secondaryid_;
  int relationshiptype_;
  ::google::protobuf::uint32 primaryconfigaddress_;
  ::google::protobuf::uint32 secondaryconfigaddress_;
  ::google::protobuf::uint32 primarychannelindex_;
  ::google::protobuf::uint32 secondarychannelindex_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_Nmea2k_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class BinaryLogicStateMsg : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Nmea2k.BinaryLogicStateMsg) */ {
 public:
  BinaryLogicStateMsg();
  virtual ~BinaryLogicStateMsg();

  BinaryLogicStateMsg(const BinaryLogicStateMsg& from);

  inline BinaryLogicStateMsg& operator=(const BinaryLogicStateMsg& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  BinaryLogicStateMsg(BinaryLogicStateMsg&& from) noexcept
    : BinaryLogicStateMsg() {
    *this = ::std::move(from);
  }

  inline BinaryLogicStateMsg& operator=(BinaryLogicStateMsg&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const BinaryLogicStateMsg& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BinaryLogicStateMsg* internal_default_instance() {
    return reinterpret_cast<const BinaryLogicStateMsg*>(
               &_BinaryLogicStateMsg_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    37;

  void Swap(BinaryLogicStateMsg* other);
  friend void swap(BinaryLogicStateMsg& a, BinaryLogicStateMsg& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline BinaryLogicStateMsg* New() const final {
    return CreateMaybeMessage<BinaryLogicStateMsg>(NULL);
  }

  BinaryLogicStateMsg* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<BinaryLogicStateMsg>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const BinaryLogicStateMsg& from);
  void MergeFrom(const BinaryLogicStateMsg& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BinaryLogicStateMsg* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string NameUTF8 = 4;
  void clear_nameutf8();
  static const int kNameUTF8FieldNumber = 4;
  const ::std::string& nameutf8() const;
  void set_nameutf8(const ::std::string& value);
  #if LANG_CXX11
  void set_nameutf8(::std::string&& value);
  #endif
  void set_nameutf8(const char* value);
  void set_nameutf8(const char* value, size_t size);
  ::std::string* mutable_nameutf8();
  ::std::string* release_nameutf8();
  void set_allocated_nameutf8(::std::string* nameutf8);

  // .Nmea2k.ConfigRequest.eConfigType DisplayType = 1;
  void clear_displaytype();
  static const int kDisplayTypeFieldNumber = 1;
  ::Nmea2k::ConfigRequest_eConfigType displaytype() const;
  void set_displaytype(::Nmea2k::ConfigRequest_eConfigType value);

  // uint32 Id = 2;
  void clear_id();
  static const int kIdFieldNumber = 2;
  ::google::protobuf::uint32 id() const;
  void set_id(::google::protobuf::uint32 value);

  // uint32 Address = 3;
  void clear_address();
  static const int kAddressFieldNumber = 3;
  ::google::protobuf::uint32 address() const;
  void set_address(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Nmea2k.BinaryLogicStateMsg)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr nameutf8_;
  int displaytype_;
  ::google::protobuf::uint32 id_;
  ::google::protobuf::uint32 address_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_Nmea2k_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class MeteringDevice : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Nmea2k.MeteringDevice) */ {
 public:
  MeteringDevice();
  virtual ~MeteringDevice();

  MeteringDevice(const MeteringDevice& from);

  inline MeteringDevice& operator=(const MeteringDevice& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  MeteringDevice(MeteringDevice&& from) noexcept
    : MeteringDevice() {
    *this = ::std::move(from);
  }

  inline MeteringDevice& operator=(MeteringDevice&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const MeteringDevice& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MeteringDevice* internal_default_instance() {
    return reinterpret_cast<const MeteringDevice*>(
               &_MeteringDevice_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    38;

  void Swap(MeteringDevice* other);
  friend void swap(MeteringDevice& a, MeteringDevice& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline MeteringDevice* New() const final {
    return CreateMaybeMessage<MeteringDevice>(NULL);
  }

  MeteringDevice* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<MeteringDevice>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const MeteringDevice& from);
  void MergeFrom(const MeteringDevice& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MeteringDevice* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef MeteringDevice_eDCType eDCType;
  static const eDCType Battery =
    MeteringDevice_eDCType_Battery;
  static const eDCType Alternator =
    MeteringDevice_eDCType_Alternator;
  static const eDCType Converter =
    MeteringDevice_eDCType_Converter;
  static const eDCType Solar =
    MeteringDevice_eDCType_Solar;
  static const eDCType Wind =
    MeteringDevice_eDCType_Wind;
  static const eDCType Other =
    MeteringDevice_eDCType_Other;
  static inline bool eDCType_IsValid(int value) {
    return MeteringDevice_eDCType_IsValid(value);
  }
  static const eDCType eDCType_MIN =
    MeteringDevice_eDCType_eDCType_MIN;
  static const eDCType eDCType_MAX =
    MeteringDevice_eDCType_eDCType_MAX;
  static const int eDCType_ARRAYSIZE =
    MeteringDevice_eDCType_eDCType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  eDCType_descriptor() {
    return MeteringDevice_eDCType_descriptor();
  }
  static inline const ::std::string& eDCType_Name(eDCType value) {
    return MeteringDevice_eDCType_Name(value);
  }
  static inline bool eDCType_Parse(const ::std::string& name,
      eDCType* value) {
    return MeteringDevice_eDCType_Parse(name, value);
  }

  typedef MeteringDevice_eACLine eACLine;
  static const eACLine Line1 =
    MeteringDevice_eACLine_Line1;
  static const eACLine Line2 =
    MeteringDevice_eACLine_Line2;
  static const eACLine Line3 =
    MeteringDevice_eACLine_Line3;
  static inline bool eACLine_IsValid(int value) {
    return MeteringDevice_eACLine_IsValid(value);
  }
  static const eACLine eACLine_MIN =
    MeteringDevice_eACLine_eACLine_MIN;
  static const eACLine eACLine_MAX =
    MeteringDevice_eACLine_eACLine_MAX;
  static const int eACLine_ARRAYSIZE =
    MeteringDevice_eACLine_eACLine_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  eACLine_descriptor() {
    return MeteringDevice_eACLine_descriptor();
  }
  static inline const ::std::string& eACLine_Name(eACLine value) {
    return MeteringDevice_eACLine_Name(value);
  }
  static inline bool eACLine_Parse(const ::std::string& name,
      eACLine* value) {
    return MeteringDevice_eACLine_Parse(name, value);
  }

  typedef MeteringDevice_eACType eACType;
  static const eACType Unknown =
    MeteringDevice_eACType_Unknown;
  static const eACType Generator =
    MeteringDevice_eACType_Generator;
  static const eACType ShorePower =
    MeteringDevice_eACType_ShorePower;
  static const eACType Inverter =
    MeteringDevice_eACType_Inverter;
  static const eACType Parallel =
    MeteringDevice_eACType_Parallel;
  static const eACType Charger =
    MeteringDevice_eACType_Charger;
  static const eACType Outlet =
    MeteringDevice_eACType_Outlet;
  static inline bool eACType_IsValid(int value) {
    return MeteringDevice_eACType_IsValid(value);
  }
  static const eACType eACType_MIN =
    MeteringDevice_eACType_eACType_MIN;
  static const eACType eACType_MAX =
    MeteringDevice_eACType_eACType_MAX;
  static const int eACType_ARRAYSIZE =
    MeteringDevice_eACType_eACType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  eACType_descriptor() {
    return MeteringDevice_eACType_descriptor();
  }
  static inline const ::std::string& eACType_Name(eACType value) {
    return MeteringDevice_eACType_Name(value);
  }
  static inline bool eACType_Parse(const ::std::string& name,
      eACType* value) {
    return MeteringDevice_eACType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // string NameUTF8 = 3;
  void clear_nameutf8();
  static const int kNameUTF8FieldNumber = 3;
  const ::std::string& nameutf8() const;
  void set_nameutf8(const ::std::string& value);
  #if LANG_CXX11
  void set_nameutf8(::std::string&& value);
  #endif
  void set_nameutf8(const char* value);
  void set_nameutf8(const char* value, size_t size);
  ::std::string* mutable_nameutf8();
  ::std::string* release_nameutf8();
  void set_allocated_nameutf8(::std::string* nameutf8);

  // .Nmea2k.Instance Instance = 4;
  bool has_instance() const;
  void clear_instance();
  static const int kInstanceFieldNumber = 4;
  private:
  const ::Nmea2k::Instance& _internal_instance() const;
  public:
  const ::Nmea2k::Instance& instance() const;
  ::Nmea2k::Instance* release_instance();
  ::Nmea2k::Instance* mutable_instance();
  void set_allocated_instance(::Nmea2k::Instance* instance);

  // .Nmea2k.AlarmLimit LowLimit = 13;
  bool has_lowlimit() const;
  void clear_lowlimit();
  static const int kLowLimitFieldNumber = 13;
  private:
  const ::Nmea2k::AlarmLimit& _internal_lowlimit() const;
  public:
  const ::Nmea2k::AlarmLimit& lowlimit() const;
  ::Nmea2k::AlarmLimit* release_lowlimit();
  ::Nmea2k::AlarmLimit* mutable_lowlimit();
  void set_allocated_lowlimit(::Nmea2k::AlarmLimit* lowlimit);

  // .Nmea2k.AlarmLimit VeryLowLimit = 14;
  bool has_verylowlimit() const;
  void clear_verylowlimit();
  static const int kVeryLowLimitFieldNumber = 14;
  private:
  const ::Nmea2k::AlarmLimit& _internal_verylowlimit() const;
  public:
  const ::Nmea2k::AlarmLimit& verylowlimit() const;
  ::Nmea2k::AlarmLimit* release_verylowlimit();
  ::Nmea2k::AlarmLimit* mutable_verylowlimit();
  void set_allocated_verylowlimit(::Nmea2k::AlarmLimit* verylowlimit);

  // .Nmea2k.AlarmLimit HighLimit = 15;
  bool has_highlimit() const;
  void clear_highlimit();
  static const int kHighLimitFieldNumber = 15;
  private:
  const ::Nmea2k::AlarmLimit& _internal_highlimit() const;
  public:
  const ::Nmea2k::AlarmLimit& highlimit() const;
  ::Nmea2k::AlarmLimit* release_highlimit();
  ::Nmea2k::AlarmLimit* mutable_highlimit();
  void set_allocated_highlimit(::Nmea2k::AlarmLimit* highlimit);

  // .Nmea2k.AlarmLimit VeryHighLimit = 16;
  bool has_veryhighlimit() const;
  void clear_veryhighlimit();
  static const int kVeryHighLimitFieldNumber = 16;
  private:
  const ::Nmea2k::AlarmLimit& _internal_veryhighlimit() const;
  public:
  const ::Nmea2k::AlarmLimit& veryhighlimit() const;
  ::Nmea2k::AlarmLimit* release_veryhighlimit();
  ::Nmea2k::AlarmLimit* mutable_veryhighlimit();
  void set_allocated_veryhighlimit(::Nmea2k::AlarmLimit* veryhighlimit);

  // .Nmea2k.AlarmLimit Frequency = 17;
  bool has_frequency() const;
  void clear_frequency();
  static const int kFrequencyFieldNumber = 17;
  private:
  const ::Nmea2k::AlarmLimit& _internal_frequency() const;
  public:
  const ::Nmea2k::AlarmLimit& frequency() const;
  ::Nmea2k::AlarmLimit* release_frequency();
  ::Nmea2k::AlarmLimit* mutable_frequency();
  void set_allocated_frequency(::Nmea2k::AlarmLimit* frequency);

  // .Nmea2k.AlarmLimit LowVoltage = 18;
  bool has_lowvoltage() const;
  void clear_lowvoltage();
  static const int kLowVoltageFieldNumber = 18;
  private:
  const ::Nmea2k::AlarmLimit& _internal_lowvoltage() const;
  public:
  const ::Nmea2k::AlarmLimit& lowvoltage() const;
  ::Nmea2k::AlarmLimit* release_lowvoltage();
  ::Nmea2k::AlarmLimit* mutable_lowvoltage();
  void set_allocated_lowvoltage(::Nmea2k::AlarmLimit* lowvoltage);

  // .Nmea2k.AlarmLimit VeryLowVoltage = 19;
  bool has_verylowvoltage() const;
  void clear_verylowvoltage();
  static const int kVeryLowVoltageFieldNumber = 19;
  private:
  const ::Nmea2k::AlarmLimit& _internal_verylowvoltage() const;
  public:
  const ::Nmea2k::AlarmLimit& verylowvoltage() const;
  ::Nmea2k::AlarmLimit* release_verylowvoltage();
  ::Nmea2k::AlarmLimit* mutable_verylowvoltage();
  void set_allocated_verylowvoltage(::Nmea2k::AlarmLimit* verylowvoltage);

  // .Nmea2k.AlarmLimit HighVoltage = 20;
  bool has_highvoltage() const;
  void clear_highvoltage();
  static const int kHighVoltageFieldNumber = 20;
  private:
  const ::Nmea2k::AlarmLimit& _internal_highvoltage() const;
  public:
  const ::Nmea2k::AlarmLimit& highvoltage() const;
  ::Nmea2k::AlarmLimit* release_highvoltage();
  ::Nmea2k::AlarmLimit* mutable_highvoltage();
  void set_allocated_highvoltage(::Nmea2k::AlarmLimit* highvoltage);

  // .Nmea2k.ConfigRequest.eConfigType DisplayType = 1;
  void clear_displaytype();
  static const int kDisplayTypeFieldNumber = 1;
  ::Nmea2k::ConfigRequest_eConfigType displaytype() const;
  void set_displaytype(::Nmea2k::ConfigRequest_eConfigType value);

  // uint32 Id = 2;
  void clear_id();
  static const int kIdFieldNumber = 2;
  ::google::protobuf::uint32 id() const;
  void set_id(::google::protobuf::uint32 value);

  // .Nmea2k.MeteringDevice.eACLine Line = 5;
  void clear_line();
  static const int kLineFieldNumber = 5;
  ::Nmea2k::MeteringDevice_eACLine line() const;
  void set_line(::Nmea2k::MeteringDevice_eACLine value);

  // uint32 NominalVoltage = 7;
  void clear_nominalvoltage();
  static const int kNominalVoltageFieldNumber = 7;
  ::google::protobuf::uint32 nominalvoltage() const;
  void set_nominalvoltage(::google::protobuf::uint32 value);

  // uint32 NominalFrequency = 8;
  void clear_nominalfrequency();
  static const int kNominalFrequencyFieldNumber = 8;
  ::google::protobuf::uint32 nominalfrequency() const;
  void set_nominalfrequency(::google::protobuf::uint32 value);

  // uint32 Address = 9;
  void clear_address();
  static const int kAddressFieldNumber = 9;
  ::google::protobuf::uint32 address() const;
  void set_address(::google::protobuf::uint32 value);

  // uint32 Capacity = 10;
  void clear_capacity();
  static const int kCapacityFieldNumber = 10;
  ::google::protobuf::uint32 capacity() const;
  void set_capacity(::google::protobuf::uint32 value);

  // float WarningLow = 11;
  void clear_warninglow();
  static const int kWarningLowFieldNumber = 11;
  float warninglow() const;
  void set_warninglow(float value);

  // float WarningHigh = 12;
  void clear_warninghigh();
  static const int kWarningHighFieldNumber = 12;
  float warninghigh() const;
  void set_warninghigh(float value);

  // bool Output = 6;
  void clear_output();
  static const int kOutputFieldNumber = 6;
  bool output() const;
  void set_output(bool value);

  // bool CanResetCapacity = 21;
  void clear_canresetcapacity();
  static const int kCanResetCapacityFieldNumber = 21;
  bool canresetcapacity() const;
  void set_canresetcapacity(bool value);

  // bool ShowVoltage = 23;
  void clear_showvoltage();
  static const int kShowVoltageFieldNumber = 23;
  bool showvoltage() const;
  void set_showvoltage(bool value);

  // bool ShowCurrent = 24;
  void clear_showcurrent();
  static const int kShowCurrentFieldNumber = 24;
  bool showcurrent() const;
  void set_showcurrent(bool value);

  // .Nmea2k.MeteringDevice.eDCType DCType = 22;
  void clear_dctype();
  static const int kDCTypeFieldNumber = 22;
  ::Nmea2k::MeteringDevice_eDCType dctype() const;
  void set_dctype(::Nmea2k::MeteringDevice_eDCType value);

  // bool ShowStateOfCharge = 25;
  void clear_showstateofcharge();
  static const int kShowStateOfChargeFieldNumber = 25;
  bool showstateofcharge() const;
  void set_showstateofcharge(bool value);

  // bool ShowTemperature = 26;
  void clear_showtemperature();
  static const int kShowTemperatureFieldNumber = 26;
  bool showtemperature() const;
  void set_showtemperature(bool value);

  // bool ShowTimeOfRemaining = 27;
  void clear_showtimeofremaining();
  static const int kShowTimeOfRemainingFieldNumber = 27;
  bool showtimeofremaining() const;
  void set_showtimeofremaining(bool value);

  // .Nmea2k.MeteringDevice.eACType ACType = 31;
  void clear_actype();
  static const int kACTypeFieldNumber = 31;
  ::Nmea2k::MeteringDevice_eACType actype() const;
  void set_actype(::Nmea2k::MeteringDevice_eACType value);

  // @@protoc_insertion_point(class_scope:Nmea2k.MeteringDevice)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr nameutf8_;
  ::Nmea2k::Instance* instance_;
  ::Nmea2k::AlarmLimit* lowlimit_;
  ::Nmea2k::AlarmLimit* verylowlimit_;
  ::Nmea2k::AlarmLimit* highlimit_;
  ::Nmea2k::AlarmLimit* veryhighlimit_;
  ::Nmea2k::AlarmLimit* frequency_;
  ::Nmea2k::AlarmLimit* lowvoltage_;
  ::Nmea2k::AlarmLimit* verylowvoltage_;
  ::Nmea2k::AlarmLimit* highvoltage_;
  int displaytype_;
  ::google::protobuf::uint32 id_;
  int line_;
  ::google::protobuf::uint32 nominalvoltage_;
  ::google::protobuf::uint32 nominalfrequency_;
  ::google::protobuf::uint32 address_;
  ::google::protobuf::uint32 capacity_;
  float warninglow_;
  float warninghigh_;
  bool output_;
  bool canresetcapacity_;
  bool showvoltage_;
  bool showcurrent_;
  int dctype_;
  bool showstateofcharge_;
  bool showtemperature_;
  bool showtimeofremaining_;
  int actype_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_Nmea2k_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class MonitoringType : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Nmea2k.MonitoringType) */ {
 public:
  MonitoringType();
  virtual ~MonitoringType();

  MonitoringType(const MonitoringType& from);

  inline MonitoringType& operator=(const MonitoringType& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  MonitoringType(MonitoringType&& from) noexcept
    : MonitoringType() {
    *this = ::std::move(from);
  }

  inline MonitoringType& operator=(MonitoringType&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const MonitoringType& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MonitoringType* internal_default_instance() {
    return reinterpret_cast<const MonitoringType*>(
               &_MonitoringType_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    39;

  void Swap(MonitoringType* other);
  friend void swap(MonitoringType& a, MonitoringType& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline MonitoringType* New() const final {
    return CreateMaybeMessage<MonitoringType>(NULL);
  }

  MonitoringType* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<MonitoringType>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const MonitoringType& from);
  void MergeFrom(const MonitoringType& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MonitoringType* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef MonitoringType_eTankType eTankType;
  static const eTankType Fuel =
    MonitoringType_eTankType_Fuel;
  static const eTankType FreshWater =
    MonitoringType_eTankType_FreshWater;
  static const eTankType WasteWater =
    MonitoringType_eTankType_WasteWater;
  static const eTankType LiveWell =
    MonitoringType_eTankType_LiveWell;
  static const eTankType Oil =
    MonitoringType_eTankType_Oil;
  static const eTankType BlackWater =
    MonitoringType_eTankType_BlackWater;
  static inline bool eTankType_IsValid(int value) {
    return MonitoringType_eTankType_IsValid(value);
  }
  static const eTankType eTankType_MIN =
    MonitoringType_eTankType_eTankType_MIN;
  static const eTankType eTankType_MAX =
    MonitoringType_eTankType_eTankType_MAX;
  static const int eTankType_ARRAYSIZE =
    MonitoringType_eTankType_eTankType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  eTankType_descriptor() {
    return MonitoringType_eTankType_descriptor();
  }
  static inline const ::std::string& eTankType_Name(eTankType value) {
    return MonitoringType_eTankType_Name(value);
  }
  static inline bool eTankType_Parse(const ::std::string& name,
      eTankType* value) {
    return MonitoringType_eTankType_Parse(name, value);
  }

  typedef MonitoringType_ePressureType ePressureType;
  static const ePressureType Atmospheric =
    MonitoringType_ePressureType_Atmospheric;
  static const ePressureType Water =
    MonitoringType_ePressureType_Water;
  static const ePressureType Steam =
    MonitoringType_ePressureType_Steam;
  static const ePressureType CompressedAir =
    MonitoringType_ePressureType_CompressedAir;
  static const ePressureType Hydraulic =
    MonitoringType_ePressureType_Hydraulic;
  static inline bool ePressureType_IsValid(int value) {
    return MonitoringType_ePressureType_IsValid(value);
  }
  static const ePressureType ePressureType_MIN =
    MonitoringType_ePressureType_ePressureType_MIN;
  static const ePressureType ePressureType_MAX =
    MonitoringType_ePressureType_ePressureType_MAX;
  static const int ePressureType_ARRAYSIZE =
    MonitoringType_ePressureType_ePressureType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ePressureType_descriptor() {
    return MonitoringType_ePressureType_descriptor();
  }
  static inline const ::std::string& ePressureType_Name(ePressureType value) {
    return MonitoringType_ePressureType_Name(value);
  }
  static inline bool ePressureType_Parse(const ::std::string& name,
      ePressureType* value) {
    return MonitoringType_ePressureType_Parse(name, value);
  }

  typedef MonitoringType_eTemperatureType eTemperatureType;
  static const eTemperatureType Sea =
    MonitoringType_eTemperatureType_Sea;
  static const eTemperatureType Outside =
    MonitoringType_eTemperatureType_Outside;
  static const eTemperatureType Inside =
    MonitoringType_eTemperatureType_Inside;
  static const eTemperatureType EngineRoom =
    MonitoringType_eTemperatureType_EngineRoom;
  static const eTemperatureType MainCabin =
    MonitoringType_eTemperatureType_MainCabin;
  static const eTemperatureType LiveWell1 =
    MonitoringType_eTemperatureType_LiveWell1;
  static const eTemperatureType BaitWell =
    MonitoringType_eTemperatureType_BaitWell;
  static const eTemperatureType Refrigeration =
    MonitoringType_eTemperatureType_Refrigeration;
  static const eTemperatureType HeatingSystem =
    MonitoringType_eTemperatureType_HeatingSystem;
  static const eTemperatureType DewPoint =
    MonitoringType_eTemperatureType_DewPoint;
  static const eTemperatureType WindChillApparent =
    MonitoringType_eTemperatureType_WindChillApparent;
  static const eTemperatureType WindChillTheoretical =
    MonitoringType_eTemperatureType_WindChillTheoretical;
  static const eTemperatureType HeadIndex =
    MonitoringType_eTemperatureType_HeadIndex;
  static const eTemperatureType Freezer =
    MonitoringType_eTemperatureType_Freezer;
  static const eTemperatureType ExhaustGas =
    MonitoringType_eTemperatureType_ExhaustGas;
  static inline bool eTemperatureType_IsValid(int value) {
    return MonitoringType_eTemperatureType_IsValid(value);
  }
  static const eTemperatureType eTemperatureType_MIN =
    MonitoringType_eTemperatureType_eTemperatureType_MIN;
  static const eTemperatureType eTemperatureType_MAX =
    MonitoringType_eTemperatureType_eTemperatureType_MAX;
  static const int eTemperatureType_ARRAYSIZE =
    MonitoringType_eTemperatureType_eTemperatureType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  eTemperatureType_descriptor() {
    return MonitoringType_eTemperatureType_descriptor();
  }
  static inline const ::std::string& eTemperatureType_Name(eTemperatureType value) {
    return MonitoringType_eTemperatureType_Name(value);
  }
  static inline bool eTemperatureType_Parse(const ::std::string& name,
      eTemperatureType* value) {
    return MonitoringType_eTemperatureType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:Nmea2k.MonitoringType)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_Nmea2k_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class MonitoringDevice : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Nmea2k.MonitoringDevice) */ {
 public:
  MonitoringDevice();
  virtual ~MonitoringDevice();

  MonitoringDevice(const MonitoringDevice& from);

  inline MonitoringDevice& operator=(const MonitoringDevice& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  MonitoringDevice(MonitoringDevice&& from) noexcept
    : MonitoringDevice() {
    *this = ::std::move(from);
  }

  inline MonitoringDevice& operator=(MonitoringDevice&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const MonitoringDevice& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MonitoringDevice* internal_default_instance() {
    return reinterpret_cast<const MonitoringDevice*>(
               &_MonitoringDevice_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    40;

  void Swap(MonitoringDevice* other);
  friend void swap(MonitoringDevice& a, MonitoringDevice& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline MonitoringDevice* New() const final {
    return CreateMaybeMessage<MonitoringDevice>(NULL);
  }

  MonitoringDevice* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<MonitoringDevice>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const MonitoringDevice& from);
  void MergeFrom(const MonitoringDevice& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MonitoringDevice* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string NameUTF8 = 3;
  void clear_nameutf8();
  static const int kNameUTF8FieldNumber = 3;
  const ::std::string& nameutf8() const;
  void set_nameutf8(const ::std::string& value);
  #if LANG_CXX11
  void set_nameutf8(::std::string&& value);
  #endif
  void set_nameutf8(const char* value);
  void set_nameutf8(const char* value, size_t size);
  ::std::string* mutable_nameutf8();
  ::std::string* release_nameutf8();
  void set_allocated_nameutf8(::std::string* nameutf8);

  // string CircuitNameUTF8 = 11;
  void clear_circuitnameutf8();
  static const int kCircuitNameUTF8FieldNumber = 11;
  const ::std::string& circuitnameutf8() const;
  void set_circuitnameutf8(const ::std::string& value);
  #if LANG_CXX11
  void set_circuitnameutf8(::std::string&& value);
  #endif
  void set_circuitnameutf8(const char* value);
  void set_circuitnameutf8(const char* value, size_t size);
  ::std::string* mutable_circuitnameutf8();
  ::std::string* release_circuitnameutf8();
  void set_allocated_circuitnameutf8(::std::string* circuitnameutf8);

  // .Nmea2k.Instance Instance = 4;
  bool has_instance() const;
  void clear_instance();
  static const int kInstanceFieldNumber = 4;
  private:
  const ::Nmea2k::Instance& _internal_instance() const;
  public:
  const ::Nmea2k::Instance& instance() const;
  ::Nmea2k::Instance* release_instance();
  ::Nmea2k::Instance* mutable_instance();
  void set_allocated_instance(::Nmea2k::Instance* instance);

  // .Nmea2k.DataId CircuitId = 8;
  bool has_circuitid() const;
  void clear_circuitid();
  static const int kCircuitIdFieldNumber = 8;
  private:
  const ::Nmea2k::DataId& _internal_circuitid() const;
  public:
  const ::Nmea2k::DataId& circuitid() const;
  ::Nmea2k::DataId* release_circuitid();
  ::Nmea2k::DataId* mutable_circuitid();
  void set_allocated_circuitid(::Nmea2k::DataId* circuitid);

  // .Nmea2k.AlarmLimit VeryLowLimit = 14;
  bool has_verylowlimit() const;
  void clear_verylowlimit();
  static const int kVeryLowLimitFieldNumber = 14;
  private:
  const ::Nmea2k::AlarmLimit& _internal_verylowlimit() const;
  public:
  const ::Nmea2k::AlarmLimit& verylowlimit() const;
  ::Nmea2k::AlarmLimit* release_verylowlimit();
  ::Nmea2k::AlarmLimit* mutable_verylowlimit();
  void set_allocated_verylowlimit(::Nmea2k::AlarmLimit* verylowlimit);

  // .Nmea2k.AlarmLimit LowLimit = 15;
  bool has_lowlimit() const;
  void clear_lowlimit();
  static const int kLowLimitFieldNumber = 15;
  private:
  const ::Nmea2k::AlarmLimit& _internal_lowlimit() const;
  public:
  const ::Nmea2k::AlarmLimit& lowlimit() const;
  ::Nmea2k::AlarmLimit* release_lowlimit();
  ::Nmea2k::AlarmLimit* mutable_lowlimit();
  void set_allocated_lowlimit(::Nmea2k::AlarmLimit* lowlimit);

  // .Nmea2k.AlarmLimit HighLimit = 16;
  bool has_highlimit() const;
  void clear_highlimit();
  static const int kHighLimitFieldNumber = 16;
  private:
  const ::Nmea2k::AlarmLimit& _internal_highlimit() const;
  public:
  const ::Nmea2k::AlarmLimit& highlimit() const;
  ::Nmea2k::AlarmLimit* release_highlimit();
  ::Nmea2k::AlarmLimit* mutable_highlimit();
  void set_allocated_highlimit(::Nmea2k::AlarmLimit* highlimit);

  // .Nmea2k.AlarmLimit VeryHighLimit = 17;
  bool has_veryhighlimit() const;
  void clear_veryhighlimit();
  static const int kVeryHighLimitFieldNumber = 17;
  private:
  const ::Nmea2k::AlarmLimit& _internal_veryhighlimit() const;
  public:
  const ::Nmea2k::AlarmLimit& veryhighlimit() const;
  ::Nmea2k::AlarmLimit* release_veryhighlimit();
  ::Nmea2k::AlarmLimit* mutable_veryhighlimit();
  void set_allocated_veryhighlimit(::Nmea2k::AlarmLimit* veryhighlimit);

  // .Nmea2k.ConfigRequest.eConfigType DisplayType = 1;
  void clear_displaytype();
  static const int kDisplayTypeFieldNumber = 1;
  ::Nmea2k::ConfigRequest_eConfigType displaytype() const;
  void set_displaytype(::Nmea2k::ConfigRequest_eConfigType value);

  // uint32 Id = 2;
  void clear_id();
  static const int kIdFieldNumber = 2;
  ::google::protobuf::uint32 id() const;
  void set_id(::google::protobuf::uint32 value);

  // .Nmea2k.MonitoringType.eTankType TankType = 5;
  void clear_tanktype();
  static const int kTankTypeFieldNumber = 5;
  ::Nmea2k::MonitoringType_eTankType tanktype() const;
  void set_tanktype(::Nmea2k::MonitoringType_eTankType value);

  // .Nmea2k.MonitoringType.ePressureType PressureType = 6;
  void clear_pressuretype();
  static const int kPressureTypeFieldNumber = 6;
  ::Nmea2k::MonitoringType_ePressureType pressuretype() const;
  void set_pressuretype(::Nmea2k::MonitoringType_ePressureType value);

  // .Nmea2k.MonitoringType.eTemperatureType TemperatureType = 7;
  void clear_temperaturetype();
  static const int kTemperatureTypeFieldNumber = 7;
  ::Nmea2k::MonitoringType_eTemperatureType temperaturetype() const;
  void set_temperaturetype(::Nmea2k::MonitoringType_eTemperatureType value);

  // .Nmea2k.CircuitDevice.eSwitchType SwitchType = 9;
  void clear_switchtype();
  static const int kSwitchTypeFieldNumber = 9;
  ::Nmea2k::CircuitDevice_eSwitchType switchtype() const;
  void set_switchtype(::Nmea2k::CircuitDevice_eSwitchType value);

  // .Nmea2k.CircuitDevice.eConfirmType ConfirmDialog = 10;
  void clear_confirmdialog();
  static const int kConfirmDialogFieldNumber = 10;
  ::Nmea2k::CircuitDevice_eConfirmType confirmdialog() const;
  void set_confirmdialog(::Nmea2k::CircuitDevice_eConfirmType value);

  // bool HighTemperature = 12;
  void clear_hightemperature();
  static const int kHighTemperatureFieldNumber = 12;
  bool hightemperature() const;
  void set_hightemperature(bool value);

  // bool AtmosphericPressure = 13;
  void clear_atmosphericpressure();
  static const int kAtmosphericPressureFieldNumber = 13;
  bool atmosphericpressure() const;
  void set_atmosphericpressure(bool value);

  // float TankCapacity = 20;
  void clear_tankcapacity();
  static const int kTankCapacityFieldNumber = 20;
  float tankcapacity() const;
  void set_tankcapacity(float value);

  // uint32 Address = 22;
  void clear_address();
  static const int kAddressFieldNumber = 22;
  ::google::protobuf::uint32 address() const;
  void set_address(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Nmea2k.MonitoringDevice)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr nameutf8_;
  ::google::protobuf::internal::ArenaStringPtr circuitnameutf8_;
  ::Nmea2k::Instance* instance_;
  ::Nmea2k::DataId* circuitid_;
  ::Nmea2k::AlarmLimit* verylowlimit_;
  ::Nmea2k::AlarmLimit* lowlimit_;
  ::Nmea2k::AlarmLimit* highlimit_;
  ::Nmea2k::AlarmLimit* veryhighlimit_;
  int displaytype_;
  ::google::protobuf::uint32 id_;
  int tanktype_;
  int pressuretype_;
  int temperaturetype_;
  int switchtype_;
  int confirmdialog_;
  bool hightemperature_;
  bool atmosphericpressure_;
  float tankcapacity_;
  ::google::protobuf::uint32 address_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_Nmea2k_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ACMainContactorDevice : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Nmea2k.ACMainContactorDevice) */ {
 public:
  ACMainContactorDevice();
  virtual ~ACMainContactorDevice();

  ACMainContactorDevice(const ACMainContactorDevice& from);

  inline ACMainContactorDevice& operator=(const ACMainContactorDevice& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ACMainContactorDevice(ACMainContactorDevice&& from) noexcept
    : ACMainContactorDevice() {
    *this = ::std::move(from);
  }

  inline ACMainContactorDevice& operator=(ACMainContactorDevice&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ACMainContactorDevice& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ACMainContactorDevice* internal_default_instance() {
    return reinterpret_cast<const ACMainContactorDevice*>(
               &_ACMainContactorDevice_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    41;

  void Swap(ACMainContactorDevice* other);
  friend void swap(ACMainContactorDevice& a, ACMainContactorDevice& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ACMainContactorDevice* New() const final {
    return CreateMaybeMessage<ACMainContactorDevice>(NULL);
  }

  ACMainContactorDevice* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ACMainContactorDevice>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ACMainContactorDevice& from);
  void MergeFrom(const ACMainContactorDevice& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ACMainContactorDevice* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef ACMainContactorDevice_eACInputType eACInputType;
  static const eACInputType ShipPower =
    ACMainContactorDevice_eACInputType_ShipPower;
  static const eACInputType ShorePower =
    ACMainContactorDevice_eACInputType_ShorePower;
  static const eACInputType Inverter =
    ACMainContactorDevice_eACInputType_Inverter;
  static const eACInputType Parallel =
    ACMainContactorDevice_eACInputType_Parallel;
  static inline bool eACInputType_IsValid(int value) {
    return ACMainContactorDevice_eACInputType_IsValid(value);
  }
  static const eACInputType eACInputType_MIN =
    ACMainContactorDevice_eACInputType_eACInputType_MIN;
  static const eACInputType eACInputType_MAX =
    ACMainContactorDevice_eACInputType_eACInputType_MAX;
  static const int eACInputType_ARRAYSIZE =
    ACMainContactorDevice_eACInputType_eACInputType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  eACInputType_descriptor() {
    return ACMainContactorDevice_eACInputType_descriptor();
  }
  static inline const ::std::string& eACInputType_Name(eACInputType value) {
    return ACMainContactorDevice_eACInputType_Name(value);
  }
  static inline bool eACInputType_Parse(const ::std::string& name,
      eACInputType* value) {
    return ACMainContactorDevice_eACInputType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // string NameUTF8 = 2;
  void clear_nameutf8();
  static const int kNameUTF8FieldNumber = 2;
  const ::std::string& nameutf8() const;
  void set_nameutf8(const ::std::string& value);
  #if LANG_CXX11
  void set_nameutf8(::std::string&& value);
  #endif
  void set_nameutf8(const char* value);
  void set_nameutf8(const char* value, size_t size);
  ::std::string* mutable_nameutf8();
  ::std::string* release_nameutf8();
  void set_allocated_nameutf8(::std::string* nameutf8);

  // .Nmea2k.DataId ContactorId = 3;
  bool has_contactorid() const;
  void clear_contactorid();
  static const int kContactorIdFieldNumber = 3;
  private:
  const ::Nmea2k::DataId& _internal_contactorid() const;
  public:
  const ::Nmea2k::DataId& contactorid() const;
  ::Nmea2k::DataId* release_contactorid();
  ::Nmea2k::DataId* mutable_contactorid();
  void set_allocated_contactorid(::Nmea2k::DataId* contactorid);

  // .Nmea2k.DataId ContactorToggleId = 4;
  bool has_contactortoggleid() const;
  void clear_contactortoggleid();
  static const int kContactorToggleIdFieldNumber = 4;
  private:
  const ::Nmea2k::DataId& _internal_contactortoggleid() const;
  public:
  const ::Nmea2k::DataId& contactortoggleid() const;
  ::Nmea2k::DataId* release_contactortoggleid();
  ::Nmea2k::DataId* mutable_contactortoggleid();
  void set_allocated_contactortoggleid(::Nmea2k::DataId* contactortoggleid);

  // .Nmea2k.DataId AC1Id = 5;
  bool has_ac1id() const;
  void clear_ac1id();
  static const int kAC1IdFieldNumber = 5;
  private:
  const ::Nmea2k::DataId& _internal_ac1id() const;
  public:
  const ::Nmea2k::DataId& ac1id() const;
  ::Nmea2k::DataId* release_ac1id();
  ::Nmea2k::DataId* mutable_ac1id();
  void set_allocated_ac1id(::Nmea2k::DataId* ac1id);

  // .Nmea2k.DataId AC2Id = 6;
  bool has_ac2id() const;
  void clear_ac2id();
  static const int kAC2IdFieldNumber = 6;
  private:
  const ::Nmea2k::DataId& _internal_ac2id() const;
  public:
  const ::Nmea2k::DataId& ac2id() const;
  ::Nmea2k::DataId* release_ac2id();
  ::Nmea2k::DataId* mutable_ac2id();
  void set_allocated_ac2id(::Nmea2k::DataId* ac2id);

  // .Nmea2k.DataId AC3Id = 7;
  bool has_ac3id() const;
  void clear_ac3id();
  static const int kAC3IdFieldNumber = 7;
  private:
  const ::Nmea2k::DataId& _internal_ac3id() const;
  public:
  const ::Nmea2k::DataId& ac3id() const;
  ::Nmea2k::DataId* release_ac3id();
  ::Nmea2k::DataId* mutable_ac3id();
  void set_allocated_ac3id(::Nmea2k::DataId* ac3id);

  // uint32 SystemStateId = 1;
  void clear_systemstateid();
  static const int kSystemStateIdFieldNumber = 1;
  ::google::protobuf::uint32 systemstateid() const;
  void set_systemstateid(::google::protobuf::uint32 value);

  // uint32 DisplayIndex = 8;
  void clear_displayindex();
  static const int kDisplayIndexFieldNumber = 8;
  ::google::protobuf::uint32 displayindex() const;
  void set_displayindex(::google::protobuf::uint32 value);

  // uint32 LoadGroupIndex = 9;
  void clear_loadgroupindex();
  static const int kLoadGroupIndexFieldNumber = 9;
  ::google::protobuf::uint32 loadgroupindex() const;
  void set_loadgroupindex(::google::protobuf::uint32 value);

  // uint32 LoadGroupParallelIndex = 10;
  void clear_loadgroupparallelindex();
  static const int kLoadGroupParallelIndexFieldNumber = 10;
  ::google::protobuf::uint32 loadgroupparallelindex() const;
  void set_loadgroupparallelindex(::google::protobuf::uint32 value);

  // bool IsParallel = 11;
  void clear_isparallel();
  static const int kIsParallelFieldNumber = 11;
  bool isparallel() const;
  void set_isparallel(bool value);

  // .Nmea2k.ACMainContactorDevice.eACInputType ACInputType = 12;
  void clear_acinputtype();
  static const int kACInputTypeFieldNumber = 12;
  ::Nmea2k::ACMainContactorDevice_eACInputType acinputtype() const;
  void set_acinputtype(::Nmea2k::ACMainContactorDevice_eACInputType value);

  // @@protoc_insertion_point(class_scope:Nmea2k.ACMainContactorDevice)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr nameutf8_;
  ::Nmea2k::DataId* contactorid_;
  ::Nmea2k::DataId* contactortoggleid_;
  ::Nmea2k::DataId* ac1id_;
  ::Nmea2k::DataId* ac2id_;
  ::Nmea2k::DataId* ac3id_;
  ::google::protobuf::uint32 systemstateid_;
  ::google::protobuf::uint32 displayindex_;
  ::google::protobuf::uint32 loadgroupindex_;
  ::google::protobuf::uint32 loadgroupparallelindex_;
  bool isparallel_;
  int acinputtype_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_Nmea2k_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ACMainLoadGroupDevice : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Nmea2k.ACMainLoadGroupDevice) */ {
 public:
  ACMainLoadGroupDevice();
  virtual ~ACMainLoadGroupDevice();

  ACMainLoadGroupDevice(const ACMainLoadGroupDevice& from);

  inline ACMainLoadGroupDevice& operator=(const ACMainLoadGroupDevice& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ACMainLoadGroupDevice(ACMainLoadGroupDevice&& from) noexcept
    : ACMainLoadGroupDevice() {
    *this = ::std::move(from);
  }

  inline ACMainLoadGroupDevice& operator=(ACMainLoadGroupDevice&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ACMainLoadGroupDevice& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ACMainLoadGroupDevice* internal_default_instance() {
    return reinterpret_cast<const ACMainLoadGroupDevice*>(
               &_ACMainLoadGroupDevice_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    42;

  void Swap(ACMainLoadGroupDevice* other);
  friend void swap(ACMainLoadGroupDevice& a, ACMainLoadGroupDevice& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ACMainLoadGroupDevice* New() const final {
    return CreateMaybeMessage<ACMainLoadGroupDevice>(NULL);
  }

  ACMainLoadGroupDevice* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ACMainLoadGroupDevice>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ACMainLoadGroupDevice& from);
  void MergeFrom(const ACMainLoadGroupDevice& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ACMainLoadGroupDevice* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string NameUTF8 = 1;
  void clear_nameutf8();
  static const int kNameUTF8FieldNumber = 1;
  const ::std::string& nameutf8() const;
  void set_nameutf8(const ::std::string& value);
  #if LANG_CXX11
  void set_nameutf8(::std::string&& value);
  #endif
  void set_nameutf8(const char* value);
  void set_nameutf8(const char* value, size_t size);
  ::std::string* mutable_nameutf8();
  ::std::string* release_nameutf8();
  void set_allocated_nameutf8(::std::string* nameutf8);

  // uint32 LoadGroupIndex = 2;
  void clear_loadgroupindex();
  static const int kLoadGroupIndexFieldNumber = 2;
  ::google::protobuf::uint32 loadgroupindex() const;
  void set_loadgroupindex(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Nmea2k.ACMainLoadGroupDevice)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr nameutf8_;
  ::google::protobuf::uint32 loadgroupindex_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_Nmea2k_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ACMainDevice : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Nmea2k.ACMainDevice) */ {
 public:
  ACMainDevice();
  virtual ~ACMainDevice();

  ACMainDevice(const ACMainDevice& from);

  inline ACMainDevice& operator=(const ACMainDevice& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ACMainDevice(ACMainDevice&& from) noexcept
    : ACMainDevice() {
    *this = ::std::move(from);
  }

  inline ACMainDevice& operator=(ACMainDevice&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ACMainDevice& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ACMainDevice* internal_default_instance() {
    return reinterpret_cast<const ACMainDevice*>(
               &_ACMainDevice_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    43;

  void Swap(ACMainDevice* other);
  friend void swap(ACMainDevice& a, ACMainDevice& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ACMainDevice* New() const final {
    return CreateMaybeMessage<ACMainDevice>(NULL);
  }

  ACMainDevice* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ACMainDevice>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ACMainDevice& from);
  void MergeFrom(const ACMainDevice& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ACMainDevice* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .Nmea2k.ACMainContactorDevice Contactors = 5;
  int contactors_size() const;
  void clear_contactors();
  static const int kContactorsFieldNumber = 5;
  ::Nmea2k::ACMainContactorDevice* mutable_contactors(int index);
  ::google::protobuf::RepeatedPtrField< ::Nmea2k::ACMainContactorDevice >*
      mutable_contactors();
  const ::Nmea2k::ACMainContactorDevice& contactors(int index) const;
  ::Nmea2k::ACMainContactorDevice* add_contactors();
  const ::google::protobuf::RepeatedPtrField< ::Nmea2k::ACMainContactorDevice >&
      contactors() const;

  // repeated .Nmea2k.ACMainLoadGroupDevice LoadGroups = 6;
  int loadgroups_size() const;
  void clear_loadgroups();
  static const int kLoadGroupsFieldNumber = 6;
  ::Nmea2k::ACMainLoadGroupDevice* mutable_loadgroups(int index);
  ::google::protobuf::RepeatedPtrField< ::Nmea2k::ACMainLoadGroupDevice >*
      mutable_loadgroups();
  const ::Nmea2k::ACMainLoadGroupDevice& loadgroups(int index) const;
  ::Nmea2k::ACMainLoadGroupDevice* add_loadgroups();
  const ::google::protobuf::RepeatedPtrField< ::Nmea2k::ACMainLoadGroupDevice >&
      loadgroups() const;

  // string NameUTF8 = 3;
  void clear_nameutf8();
  static const int kNameUTF8FieldNumber = 3;
  const ::std::string& nameutf8() const;
  void set_nameutf8(const ::std::string& value);
  #if LANG_CXX11
  void set_nameutf8(::std::string&& value);
  #endif
  void set_nameutf8(const char* value);
  void set_nameutf8(const char* value, size_t size);
  ::std::string* mutable_nameutf8();
  ::std::string* release_nameutf8();
  void set_allocated_nameutf8(::std::string* nameutf8);

  // .Nmea2k.ConfigRequest.eConfigType DisplayType = 1;
  void clear_displaytype();
  static const int kDisplayTypeFieldNumber = 1;
  ::Nmea2k::ConfigRequest_eConfigType displaytype() const;
  void set_displaytype(::Nmea2k::ConfigRequest_eConfigType value);

  // uint32 Id = 2;
  void clear_id();
  static const int kIdFieldNumber = 2;
  ::google::protobuf::uint32 id() const;
  void set_id(::google::protobuf::uint32 value);

  // uint32 Dipswitch = 4;
  void clear_dipswitch();
  static const int kDipswitchFieldNumber = 4;
  ::google::protobuf::uint32 dipswitch() const;
  void set_dipswitch(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Nmea2k.ACMainDevice)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::Nmea2k::ACMainContactorDevice > contactors_;
  ::google::protobuf::RepeatedPtrField< ::Nmea2k::ACMainLoadGroupDevice > loadgroups_;
  ::google::protobuf::internal::ArenaStringPtr nameutf8_;
  int displaytype_;
  ::google::protobuf::uint32 id_;
  ::google::protobuf::uint32 dipswitch_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_Nmea2k_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class InverterChargerDevice : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Nmea2k.InverterChargerDevice) */ {
 public:
  InverterChargerDevice();
  virtual ~InverterChargerDevice();

  InverterChargerDevice(const InverterChargerDevice& from);

  inline InverterChargerDevice& operator=(const InverterChargerDevice& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  InverterChargerDevice(InverterChargerDevice&& from) noexcept
    : InverterChargerDevice() {
    *this = ::std::move(from);
  }

  inline InverterChargerDevice& operator=(InverterChargerDevice&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const InverterChargerDevice& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const InverterChargerDevice* internal_default_instance() {
    return reinterpret_cast<const InverterChargerDevice*>(
               &_InverterChargerDevice_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    44;

  void Swap(InverterChargerDevice* other);
  friend void swap(InverterChargerDevice& a, InverterChargerDevice& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline InverterChargerDevice* New() const final {
    return CreateMaybeMessage<InverterChargerDevice>(NULL);
  }

  InverterChargerDevice* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<InverterChargerDevice>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const InverterChargerDevice& from);
  void MergeFrom(const InverterChargerDevice& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InverterChargerDevice* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string NameUTF8 = 3;
  void clear_nameutf8();
  static const int kNameUTF8FieldNumber = 3;
  const ::std::string& nameutf8() const;
  void set_nameutf8(const ::std::string& value);
  #if LANG_CXX11
  void set_nameutf8(::std::string&& value);
  #endif
  void set_nameutf8(const char* value);
  void set_nameutf8(const char* value, size_t size);
  ::std::string* mutable_nameutf8();
  ::std::string* release_nameutf8();
  void set_allocated_nameutf8(::std::string* nameutf8);

  // .Nmea2k.Instance InverterInstance = 7;
  bool has_inverterinstance() const;
  void clear_inverterinstance();
  static const int kInverterInstanceFieldNumber = 7;
  private:
  const ::Nmea2k::Instance& _internal_inverterinstance() const;
  public:
  const ::Nmea2k::Instance& inverterinstance() const;
  ::Nmea2k::Instance* release_inverterinstance();
  ::Nmea2k::Instance* mutable_inverterinstance();
  void set_allocated_inverterinstance(::Nmea2k::Instance* inverterinstance);

  // .Nmea2k.DataId InverterACId = 8;
  bool has_inverteracid() const;
  void clear_inverteracid();
  static const int kInverterACIdFieldNumber = 8;
  private:
  const ::Nmea2k::DataId& _internal_inverteracid() const;
  public:
  const ::Nmea2k::DataId& inverteracid() const;
  ::Nmea2k::DataId* release_inverteracid();
  ::Nmea2k::DataId* mutable_inverteracid();
  void set_allocated_inverteracid(::Nmea2k::DataId* inverteracid);

  // .Nmea2k.DataId InverterCircuitId = 9;
  bool has_invertercircuitid() const;
  void clear_invertercircuitid();
  static const int kInverterCircuitIdFieldNumber = 9;
  private:
  const ::Nmea2k::DataId& _internal_invertercircuitid() const;
  public:
  const ::Nmea2k::DataId& invertercircuitid() const;
  ::Nmea2k::DataId* release_invertercircuitid();
  ::Nmea2k::DataId* mutable_invertercircuitid();
  void set_allocated_invertercircuitid(::Nmea2k::DataId* invertercircuitid);

  // .Nmea2k.DataId InverterToggleCircuitId = 10;
  bool has_invertertogglecircuitid() const;
  void clear_invertertogglecircuitid();
  static const int kInverterToggleCircuitIdFieldNumber = 10;
  private:
  const ::Nmea2k::DataId& _internal_invertertogglecircuitid() const;
  public:
  const ::Nmea2k::DataId& invertertogglecircuitid() const;
  ::Nmea2k::DataId* release_invertertogglecircuitid();
  ::Nmea2k::DataId* mutable_invertertogglecircuitid();
  void set_allocated_invertertogglecircuitid(::Nmea2k::DataId* invertertogglecircuitid);

  // .Nmea2k.Instance ChargerInstance = 11;
  bool has_chargerinstance() const;
  void clear_chargerinstance();
  static const int kChargerInstanceFieldNumber = 11;
  private:
  const ::Nmea2k::Instance& _internal_chargerinstance() const;
  public:
  const ::Nmea2k::Instance& chargerinstance() const;
  ::Nmea2k::Instance* release_chargerinstance();
  ::Nmea2k::Instance* mutable_chargerinstance();
  void set_allocated_chargerinstance(::Nmea2k::Instance* chargerinstance);

  // .Nmea2k.DataId ChargerACId = 12;
  bool has_chargeracid() const;
  void clear_chargeracid();
  static const int kChargerACIdFieldNumber = 12;
  private:
  const ::Nmea2k::DataId& _internal_chargeracid() const;
  public:
  const ::Nmea2k::DataId& chargeracid() const;
  ::Nmea2k::DataId* release_chargeracid();
  ::Nmea2k::DataId* mutable_chargeracid();
  void set_allocated_chargeracid(::Nmea2k::DataId* chargeracid);

  // .Nmea2k.DataId ChargerCircuitId = 13;
  bool has_chargercircuitid() const;
  void clear_chargercircuitid();
  static const int kChargerCircuitIdFieldNumber = 13;
  private:
  const ::Nmea2k::DataId& _internal_chargercircuitid() const;
  public:
  const ::Nmea2k::DataId& chargercircuitid() const;
  ::Nmea2k::DataId* release_chargercircuitid();
  ::Nmea2k::DataId* mutable_chargercircuitid();
  void set_allocated_chargercircuitid(::Nmea2k::DataId* chargercircuitid);

  // .Nmea2k.DataId ChargerToggleCircuitId = 14;
  bool has_chargertogglecircuitid() const;
  void clear_chargertogglecircuitid();
  static const int kChargerToggleCircuitIdFieldNumber = 14;
  private:
  const ::Nmea2k::DataId& _internal_chargertogglecircuitid() const;
  public:
  const ::Nmea2k::DataId& chargertogglecircuitid() const;
  ::Nmea2k::DataId* release_chargertogglecircuitid();
  ::Nmea2k::DataId* mutable_chargertogglecircuitid();
  void set_allocated_chargertogglecircuitid(::Nmea2k::DataId* chargertogglecircuitid);

  // .Nmea2k.DataId BatteryBank1Id = 15;
  bool has_batterybank1id() const;
  void clear_batterybank1id();
  static const int kBatteryBank1IdFieldNumber = 15;
  private:
  const ::Nmea2k::DataId& _internal_batterybank1id() const;
  public:
  const ::Nmea2k::DataId& batterybank1id() const;
  ::Nmea2k::DataId* release_batterybank1id();
  ::Nmea2k::DataId* mutable_batterybank1id();
  void set_allocated_batterybank1id(::Nmea2k::DataId* batterybank1id);

  // .Nmea2k.DataId BatteryBank2Id = 16;
  bool has_batterybank2id() const;
  void clear_batterybank2id();
  static const int kBatteryBank2IdFieldNumber = 16;
  private:
  const ::Nmea2k::DataId& _internal_batterybank2id() const;
  public:
  const ::Nmea2k::DataId& batterybank2id() const;
  ::Nmea2k::DataId* release_batterybank2id();
  ::Nmea2k::DataId* mutable_batterybank2id();
  void set_allocated_batterybank2id(::Nmea2k::DataId* batterybank2id);

  // .Nmea2k.DataId BatteryBank3Id = 17;
  bool has_batterybank3id() const;
  void clear_batterybank3id();
  static const int kBatteryBank3IdFieldNumber = 17;
  private:
  const ::Nmea2k::DataId& _internal_batterybank3id() const;
  public:
  const ::Nmea2k::DataId& batterybank3id() const;
  ::Nmea2k::DataId* release_batterybank3id();
  ::Nmea2k::DataId* mutable_batterybank3id();
  void set_allocated_batterybank3id(::Nmea2k::DataId* batterybank3id);

  // .Nmea2k.ConfigRequest.eConfigType DisplayType = 1;
  void clear_displaytype();
  static const int kDisplayTypeFieldNumber = 1;
  ::Nmea2k::ConfigRequest_eConfigType displaytype() const;
  void set_displaytype(::Nmea2k::ConfigRequest_eConfigType value);

  // uint32 Id = 2;
  void clear_id();
  static const int kIdFieldNumber = 2;
  ::google::protobuf::uint32 id() const;
  void set_id(::google::protobuf::uint32 value);

  // uint32 Model = 4;
  void clear_model();
  static const int kModelFieldNumber = 4;
  ::google::protobuf::uint32 model() const;
  void set_model(::google::protobuf::uint32 value);

  // uint32 Type = 5;
  void clear_type();
  static const int kTypeFieldNumber = 5;
  ::google::protobuf::uint32 type() const;
  void set_type(::google::protobuf::uint32 value);

  // uint32 SubType = 6;
  void clear_subtype();
  static const int kSubTypeFieldNumber = 6;
  ::google::protobuf::uint32 subtype() const;
  void set_subtype(::google::protobuf::uint32 value);

  // uint32 PositionColumn = 18;
  void clear_positioncolumn();
  static const int kPositionColumnFieldNumber = 18;
  ::google::protobuf::uint32 positioncolumn() const;
  void set_positioncolumn(::google::protobuf::uint32 value);

  // uint32 PositionRow = 19;
  void clear_positionrow();
  static const int kPositionRowFieldNumber = 19;
  ::google::protobuf::uint32 positionrow() const;
  void set_positionrow(::google::protobuf::uint32 value);

  // bool Clustered = 20;
  void clear_clustered();
  static const int kClusteredFieldNumber = 20;
  bool clustered() const;
  void set_clustered(bool value);

  // bool Primary = 21;
  void clear_primary();
  static const int kPrimaryFieldNumber = 21;
  bool primary() const;
  void set_primary(bool value);

  // uint32 PrimaryPhase = 22;
  void clear_primaryphase();
  static const int kPrimaryPhaseFieldNumber = 22;
  ::google::protobuf::uint32 primaryphase() const;
  void set_primaryphase(::google::protobuf::uint32 value);

  // uint32 DeviceInstance = 23;
  void clear_deviceinstance();
  static const int kDeviceInstanceFieldNumber = 23;
  ::google::protobuf::uint32 deviceinstance() const;
  void set_deviceinstance(::google::protobuf::uint32 value);

  // uint32 Dipswitch = 24;
  void clear_dipswitch();
  static const int kDipswitchFieldNumber = 24;
  ::google::protobuf::uint32 dipswitch() const;
  void set_dipswitch(::google::protobuf::uint32 value);

  // uint32 ChannelIndex = 25;
  void clear_channelindex();
  static const int kChannelIndexFieldNumber = 25;
  ::google::protobuf::uint32 channelindex() const;
  void set_channelindex(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Nmea2k.InverterChargerDevice)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr nameutf8_;
  ::Nmea2k::Instance* inverterinstance_;
  ::Nmea2k::DataId* inverteracid_;
  ::Nmea2k::DataId* invertercircuitid_;
  ::Nmea2k::DataId* invertertogglecircuitid_;
  ::Nmea2k::Instance* chargerinstance_;
  ::Nmea2k::DataId* chargeracid_;
  ::Nmea2k::DataId* chargercircuitid_;
  ::Nmea2k::DataId* chargertogglecircuitid_;
  ::Nmea2k::DataId* batterybank1id_;
  ::Nmea2k::DataId* batterybank2id_;
  ::Nmea2k::DataId* batterybank3id_;
  int displaytype_;
  ::google::protobuf::uint32 id_;
  ::google::protobuf::uint32 model_;
  ::google::protobuf::uint32 type_;
  ::google::protobuf::uint32 subtype_;
  ::google::protobuf::uint32 positioncolumn_;
  ::google::protobuf::uint32 positionrow_;
  bool clustered_;
  bool primary_;
  ::google::protobuf::uint32 primaryphase_;
  ::google::protobuf::uint32 deviceinstance_;
  ::google::protobuf::uint32 dipswitch_;
  ::google::protobuf::uint32 channelindex_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_Nmea2k_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class HVACDevice : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Nmea2k.HVACDevice) */ {
 public:
  HVACDevice();
  virtual ~HVACDevice();

  HVACDevice(const HVACDevice& from);

  inline HVACDevice& operator=(const HVACDevice& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  HVACDevice(HVACDevice&& from) noexcept
    : HVACDevice() {
    *this = ::std::move(from);
  }

  inline HVACDevice& operator=(HVACDevice&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const HVACDevice& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const HVACDevice* internal_default_instance() {
    return reinterpret_cast<const HVACDevice*>(
               &_HVACDevice_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    45;

  void Swap(HVACDevice* other);
  friend void swap(HVACDevice& a, HVACDevice& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline HVACDevice* New() const final {
    return CreateMaybeMessage<HVACDevice>(NULL);
  }

  HVACDevice* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<HVACDevice>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const HVACDevice& from);
  void MergeFrom(const HVACDevice& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(HVACDevice* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string NameUTF8 = 3;
  void clear_nameutf8();
  static const int kNameUTF8FieldNumber = 3;
  const ::std::string& nameutf8() const;
  void set_nameutf8(const ::std::string& value);
  #if LANG_CXX11
  void set_nameutf8(::std::string&& value);
  #endif
  void set_nameutf8(const char* value);
  void set_nameutf8(const char* value, size_t size);
  ::std::string* mutable_nameutf8();
  ::std::string* release_nameutf8();
  void set_allocated_nameutf8(::std::string* nameutf8);

  // .Nmea2k.Instance Instance = 4;
  bool has_instance() const;
  void clear_instance();
  static const int kInstanceFieldNumber = 4;
  private:
  const ::Nmea2k::Instance& _internal_instance() const;
  public:
  const ::Nmea2k::Instance& instance() const;
  ::Nmea2k::Instance* release_instance();
  ::Nmea2k::Instance* mutable_instance();
  void set_allocated_instance(::Nmea2k::Instance* instance);

  // .Nmea2k.DataId OperatingModeId = 5;
  bool has_operatingmodeid() const;
  void clear_operatingmodeid();
  static const int kOperatingModeIdFieldNumber = 5;
  private:
  const ::Nmea2k::DataId& _internal_operatingmodeid() const;
  public:
  const ::Nmea2k::DataId& operatingmodeid() const;
  ::Nmea2k::DataId* release_operatingmodeid();
  ::Nmea2k::DataId* mutable_operatingmodeid();
  void set_allocated_operatingmodeid(::Nmea2k::DataId* operatingmodeid);

  // .Nmea2k.DataId FanModeId = 6;
  bool has_fanmodeid() const;
  void clear_fanmodeid();
  static const int kFanModeIdFieldNumber = 6;
  private:
  const ::Nmea2k::DataId& _internal_fanmodeid() const;
  public:
  const ::Nmea2k::DataId& fanmodeid() const;
  ::Nmea2k::DataId* release_fanmodeid();
  ::Nmea2k::DataId* mutable_fanmodeid();
  void set_allocated_fanmodeid(::Nmea2k::DataId* fanmodeid);

  // .Nmea2k.DataId FanSpeedId = 7;
  bool has_fanspeedid() const;
  void clear_fanspeedid();
  static const int kFanSpeedIdFieldNumber = 7;
  private:
  const ::Nmea2k::DataId& _internal_fanspeedid() const;
  public:
  const ::Nmea2k::DataId& fanspeedid() const;
  ::Nmea2k::DataId* release_fanspeedid();
  ::Nmea2k::DataId* mutable_fanspeedid();
  void set_allocated_fanspeedid(::Nmea2k::DataId* fanspeedid);

  // .Nmea2k.DataId SetpointTemperatureId = 8;
  bool has_setpointtemperatureid() const;
  void clear_setpointtemperatureid();
  static const int kSetpointTemperatureIdFieldNumber = 8;
  private:
  const ::Nmea2k::DataId& _internal_setpointtemperatureid() const;
  public:
  const ::Nmea2k::DataId& setpointtemperatureid() const;
  ::Nmea2k::DataId* release_setpointtemperatureid();
  ::Nmea2k::DataId* mutable_setpointtemperatureid();
  void set_allocated_setpointtemperatureid(::Nmea2k::DataId* setpointtemperatureid);

  // .Nmea2k.DataId OperatingModeToggleId = 9;
  bool has_operatingmodetoggleid() const;
  void clear_operatingmodetoggleid();
  static const int kOperatingModeToggleIdFieldNumber = 9;
  private:
  const ::Nmea2k::DataId& _internal_operatingmodetoggleid() const;
  public:
  const ::Nmea2k::DataId& operatingmodetoggleid() const;
  ::Nmea2k::DataId* release_operatingmodetoggleid();
  ::Nmea2k::DataId* mutable_operatingmodetoggleid();
  void set_allocated_operatingmodetoggleid(::Nmea2k::DataId* operatingmodetoggleid);

  // .Nmea2k.DataId FanModeToggleId = 10;
  bool has_fanmodetoggleid() const;
  void clear_fanmodetoggleid();
  static const int kFanModeToggleIdFieldNumber = 10;
  private:
  const ::Nmea2k::DataId& _internal_fanmodetoggleid() const;
  public:
  const ::Nmea2k::DataId& fanmodetoggleid() const;
  ::Nmea2k::DataId* release_fanmodetoggleid();
  ::Nmea2k::DataId* mutable_fanmodetoggleid();
  void set_allocated_fanmodetoggleid(::Nmea2k::DataId* fanmodetoggleid);

  // .Nmea2k.DataId FanSpeedToggleId = 11;
  bool has_fanspeedtoggleid() const;
  void clear_fanspeedtoggleid();
  static const int kFanSpeedToggleIdFieldNumber = 11;
  private:
  const ::Nmea2k::DataId& _internal_fanspeedtoggleid() const;
  public:
  const ::Nmea2k::DataId& fanspeedtoggleid() const;
  ::Nmea2k::DataId* release_fanspeedtoggleid();
  ::Nmea2k::DataId* mutable_fanspeedtoggleid();
  void set_allocated_fanspeedtoggleid(::Nmea2k::DataId* fanspeedtoggleid);

  // .Nmea2k.DataId SetpointTemperatureToggleId = 12;
  bool has_setpointtemperaturetoggleid() const;
  void clear_setpointtemperaturetoggleid();
  static const int kSetpointTemperatureToggleIdFieldNumber = 12;
  private:
  const ::Nmea2k::DataId& _internal_setpointtemperaturetoggleid() const;
  public:
  const ::Nmea2k::DataId& setpointtemperaturetoggleid() const;
  ::Nmea2k::DataId* release_setpointtemperaturetoggleid();
  ::Nmea2k::DataId* mutable_setpointtemperaturetoggleid();
  void set_allocated_setpointtemperaturetoggleid(::Nmea2k::DataId* setpointtemperaturetoggleid);

  // .Nmea2k.DataId TemperatureMonitoringId = 13;
  bool has_temperaturemonitoringid() const;
  void clear_temperaturemonitoringid();
  static const int kTemperatureMonitoringIdFieldNumber = 13;
  private:
  const ::Nmea2k::DataId& _internal_temperaturemonitoringid() const;
  public:
  const ::Nmea2k::DataId& temperaturemonitoringid() const;
  ::Nmea2k::DataId* release_temperaturemonitoringid();
  ::Nmea2k::DataId* mutable_temperaturemonitoringid();
  void set_allocated_temperaturemonitoringid(::Nmea2k::DataId* temperaturemonitoringid);

  // .Nmea2k.Instance TemperatureInstance = 17;
  bool has_temperatureinstance() const;
  void clear_temperatureinstance();
  static const int kTemperatureInstanceFieldNumber = 17;
  private:
  const ::Nmea2k::Instance& _internal_temperatureinstance() const;
  public:
  const ::Nmea2k::Instance& temperatureinstance() const;
  ::Nmea2k::Instance* release_temperatureinstance();
  ::Nmea2k::Instance* mutable_temperatureinstance();
  void set_allocated_temperatureinstance(::Nmea2k::Instance* temperatureinstance);

  // .Nmea2k.ConfigRequest.eConfigType DisplayType = 1;
  void clear_displaytype();
  static const int kDisplayTypeFieldNumber = 1;
  ::Nmea2k::ConfigRequest_eConfigType displaytype() const;
  void set_displaytype(::Nmea2k::ConfigRequest_eConfigType value);

  // uint32 Id = 2;
  void clear_id();
  static const int kIdFieldNumber = 2;
  ::google::protobuf::uint32 id() const;
  void set_id(::google::protobuf::uint32 value);

  // uint32 FanSpeedCount = 14;
  void clear_fanspeedcount();
  static const int kFanSpeedCountFieldNumber = 14;
  ::google::protobuf::uint32 fanspeedcount() const;
  void set_fanspeedcount(::google::protobuf::uint32 value);

  // uint32 OperatingModesMask = 15;
  void clear_operatingmodesmask();
  static const int kOperatingModesMaskFieldNumber = 15;
  ::google::protobuf::uint32 operatingmodesmask() const;
  void set_operatingmodesmask(::google::protobuf::uint32 value);

  // uint32 Model = 16;
  void clear_model();
  static const int kModelFieldNumber = 16;
  ::google::protobuf::uint32 model() const;
  void set_model(::google::protobuf::uint32 value);

  // float SetpointTemperatureMin = 18;
  void clear_setpointtemperaturemin();
  static const int kSetpointTemperatureMinFieldNumber = 18;
  float setpointtemperaturemin() const;
  void set_setpointtemperaturemin(float value);

  // float SetpointTemperatureMax = 19;
  void clear_setpointtemperaturemax();
  static const int kSetpointTemperatureMaxFieldNumber = 19;
  float setpointtemperaturemax() const;
  void set_setpointtemperaturemax(float value);

  // uint32 FanSpeedOffModesMask = 20;
  void clear_fanspeedoffmodesmask();
  static const int kFanSpeedOffModesMaskFieldNumber = 20;
  ::google::protobuf::uint32 fanspeedoffmodesmask() const;
  void set_fanspeedoffmodesmask(::google::protobuf::uint32 value);

  // uint32 FanSpeedAutoModesMask = 21;
  void clear_fanspeedautomodesmask();
  static const int kFanSpeedAutoModesMaskFieldNumber = 21;
  ::google::protobuf::uint32 fanspeedautomodesmask() const;
  void set_fanspeedautomodesmask(::google::protobuf::uint32 value);

  // uint32 FanSpeedManualModesMask = 22;
  void clear_fanspeedmanualmodesmask();
  static const int kFanSpeedManualModesMaskFieldNumber = 22;
  ::google::protobuf::uint32 fanspeedmanualmodesmask() const;
  void set_fanspeedmanualmodesmask(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Nmea2k.HVACDevice)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr nameutf8_;
  ::Nmea2k::Instance* instance_;
  ::Nmea2k::DataId* operatingmodeid_;
  ::Nmea2k::DataId* fanmodeid_;
  ::Nmea2k::DataId* fanspeedid_;
  ::Nmea2k::DataId* setpointtemperatureid_;
  ::Nmea2k::DataId* operatingmodetoggleid_;
  ::Nmea2k::DataId* fanmodetoggleid_;
  ::Nmea2k::DataId* fanspeedtoggleid_;
  ::Nmea2k::DataId* setpointtemperaturetoggleid_;
  ::Nmea2k::DataId* temperaturemonitoringid_;
  ::Nmea2k::Instance* temperatureinstance_;
  int displaytype_;
  ::google::protobuf::uint32 id_;
  ::google::protobuf::uint32 fanspeedcount_;
  ::google::protobuf::uint32 operatingmodesmask_;
  ::google::protobuf::uint32 model_;
  float setpointtemperaturemin_;
  float setpointtemperaturemax_;
  ::google::protobuf::uint32 fanspeedoffmodesmask_;
  ::google::protobuf::uint32 fanspeedautomodesmask_;
  ::google::protobuf::uint32 fanspeedmanualmodesmask_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_Nmea2k_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class BinarySignalBitAddress : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Nmea2k.BinarySignalBitAddress) */ {
 public:
  BinarySignalBitAddress();
  virtual ~BinarySignalBitAddress();

  BinarySignalBitAddress(const BinarySignalBitAddress& from);

  inline BinarySignalBitAddress& operator=(const BinarySignalBitAddress& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  BinarySignalBitAddress(BinarySignalBitAddress&& from) noexcept
    : BinarySignalBitAddress() {
    *this = ::std::move(from);
  }

  inline BinarySignalBitAddress& operator=(BinarySignalBitAddress&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const BinarySignalBitAddress& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BinarySignalBitAddress* internal_default_instance() {
    return reinterpret_cast<const BinarySignalBitAddress*>(
               &_BinarySignalBitAddress_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    46;

  void Swap(BinarySignalBitAddress* other);
  friend void swap(BinarySignalBitAddress& a, BinarySignalBitAddress& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline BinarySignalBitAddress* New() const final {
    return CreateMaybeMessage<BinarySignalBitAddress>(NULL);
  }

  BinarySignalBitAddress* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<BinarySignalBitAddress>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const BinarySignalBitAddress& from);
  void MergeFrom(const BinarySignalBitAddress& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BinarySignalBitAddress* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint32 DataType = 1;
  void clear_datatype();
  static const int kDataTypeFieldNumber = 1;
  ::google::protobuf::uint32 datatype() const;
  void set_datatype(::google::protobuf::uint32 value);

  // uint32 Dipswitch = 2;
  void clear_dipswitch();
  static const int kDipswitchFieldNumber = 2;
  ::google::protobuf::uint32 dipswitch() const;
  void set_dipswitch(::google::protobuf::uint32 value);

  // uint32 Bit = 3;
  void clear_bit();
  static const int kBitFieldNumber = 3;
  ::google::protobuf::uint32 bit() const;
  void set_bit(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Nmea2k.BinarySignalBitAddress)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 datatype_;
  ::google::protobuf::uint32 dipswitch_;
  ::google::protobuf::uint32 bit_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_Nmea2k_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ZipdeeAwningDevice : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Nmea2k.ZipdeeAwningDevice) */ {
 public:
  ZipdeeAwningDevice();
  virtual ~ZipdeeAwningDevice();

  ZipdeeAwningDevice(const ZipdeeAwningDevice& from);

  inline ZipdeeAwningDevice& operator=(const ZipdeeAwningDevice& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ZipdeeAwningDevice(ZipdeeAwningDevice&& from) noexcept
    : ZipdeeAwningDevice() {
    *this = ::std::move(from);
  }

  inline ZipdeeAwningDevice& operator=(ZipdeeAwningDevice&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ZipdeeAwningDevice& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ZipdeeAwningDevice* internal_default_instance() {
    return reinterpret_cast<const ZipdeeAwningDevice*>(
               &_ZipdeeAwningDevice_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    47;

  void Swap(ZipdeeAwningDevice* other);
  friend void swap(ZipdeeAwningDevice& a, ZipdeeAwningDevice& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ZipdeeAwningDevice* New() const final {
    return CreateMaybeMessage<ZipdeeAwningDevice>(NULL);
  }

  ZipdeeAwningDevice* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ZipdeeAwningDevice>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ZipdeeAwningDevice& from);
  void MergeFrom(const ZipdeeAwningDevice& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ZipdeeAwningDevice* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .Nmea2k.BinarySignalBitAddress BinarySignals = 9;
  int binarysignals_size() const;
  void clear_binarysignals();
  static const int kBinarySignalsFieldNumber = 9;
  ::Nmea2k::BinarySignalBitAddress* mutable_binarysignals(int index);
  ::google::protobuf::RepeatedPtrField< ::Nmea2k::BinarySignalBitAddress >*
      mutable_binarysignals();
  const ::Nmea2k::BinarySignalBitAddress& binarysignals(int index) const;
  ::Nmea2k::BinarySignalBitAddress* add_binarysignals();
  const ::google::protobuf::RepeatedPtrField< ::Nmea2k::BinarySignalBitAddress >&
      binarysignals() const;

  // string NameUTF8 = 3;
  void clear_nameutf8();
  static const int kNameUTF8FieldNumber = 3;
  const ::std::string& nameutf8() const;
  void set_nameutf8(const ::std::string& value);
  #if LANG_CXX11
  void set_nameutf8(::std::string&& value);
  #endif
  void set_nameutf8(const char* value);
  void set_nameutf8(const char* value, size_t size);
  ::std::string* mutable_nameutf8();
  ::std::string* release_nameutf8();
  void set_allocated_nameutf8(::std::string* nameutf8);

  // .Nmea2k.Instance Instance = 4;
  bool has_instance() const;
  void clear_instance();
  static const int kInstanceFieldNumber = 4;
  private:
  const ::Nmea2k::Instance& _internal_instance() const;
  public:
  const ::Nmea2k::Instance& instance() const;
  ::Nmea2k::Instance* release_instance();
  ::Nmea2k::Instance* mutable_instance();
  void set_allocated_instance(::Nmea2k::Instance* instance);

  // .Nmea2k.DataId OpenId = 5;
  bool has_openid() const;
  void clear_openid();
  static const int kOpenIdFieldNumber = 5;
  private:
  const ::Nmea2k::DataId& _internal_openid() const;
  public:
  const ::Nmea2k::DataId& openid() const;
  ::Nmea2k::DataId* release_openid();
  ::Nmea2k::DataId* mutable_openid();
  void set_allocated_openid(::Nmea2k::DataId* openid);

  // .Nmea2k.DataId CloseId = 6;
  bool has_closeid() const;
  void clear_closeid();
  static const int kCloseIdFieldNumber = 6;
  private:
  const ::Nmea2k::DataId& _internal_closeid() const;
  public:
  const ::Nmea2k::DataId& closeid() const;
  ::Nmea2k::DataId* release_closeid();
  ::Nmea2k::DataId* mutable_closeid();
  void set_allocated_closeid(::Nmea2k::DataId* closeid);

  // .Nmea2k.DataId TiltLeftId = 7;
  bool has_tiltleftid() const;
  void clear_tiltleftid();
  static const int kTiltLeftIdFieldNumber = 7;
  private:
  const ::Nmea2k::DataId& _internal_tiltleftid() const;
  public:
  const ::Nmea2k::DataId& tiltleftid() const;
  ::Nmea2k::DataId* release_tiltleftid();
  ::Nmea2k::DataId* mutable_tiltleftid();
  void set_allocated_tiltleftid(::Nmea2k::DataId* tiltleftid);

  // .Nmea2k.DataId TiltRightId = 8;
  bool has_tiltrightid() const;
  void clear_tiltrightid();
  static const int kTiltRightIdFieldNumber = 8;
  private:
  const ::Nmea2k::DataId& _internal_tiltrightid() const;
  public:
  const ::Nmea2k::DataId& tiltrightid() const;
  ::Nmea2k::DataId* release_tiltrightid();
  ::Nmea2k::DataId* mutable_tiltrightid();
  void set_allocated_tiltrightid(::Nmea2k::DataId* tiltrightid);

  // .Nmea2k.ConfigRequest.eConfigType DisplayType = 1;
  void clear_displaytype();
  static const int kDisplayTypeFieldNumber = 1;
  ::Nmea2k::ConfigRequest_eConfigType displaytype() const;
  void set_displaytype(::Nmea2k::ConfigRequest_eConfigType value);

  // uint32 Id = 2;
  void clear_id();
  static const int kIdFieldNumber = 2;
  ::google::protobuf::uint32 id() const;
  void set_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Nmea2k.ZipdeeAwningDevice)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::Nmea2k::BinarySignalBitAddress > binarysignals_;
  ::google::protobuf::internal::ArenaStringPtr nameutf8_;
  ::Nmea2k::Instance* instance_;
  ::Nmea2k::DataId* openid_;
  ::Nmea2k::DataId* closeid_;
  ::Nmea2k::DataId* tiltleftid_;
  ::Nmea2k::DataId* tiltrightid_;
  int displaytype_;
  ::google::protobuf::uint32 id_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_Nmea2k_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ThirdPartyGeneratorDevice : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Nmea2k.ThirdPartyGeneratorDevice) */ {
 public:
  ThirdPartyGeneratorDevice();
  virtual ~ThirdPartyGeneratorDevice();

  ThirdPartyGeneratorDevice(const ThirdPartyGeneratorDevice& from);

  inline ThirdPartyGeneratorDevice& operator=(const ThirdPartyGeneratorDevice& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ThirdPartyGeneratorDevice(ThirdPartyGeneratorDevice&& from) noexcept
    : ThirdPartyGeneratorDevice() {
    *this = ::std::move(from);
  }

  inline ThirdPartyGeneratorDevice& operator=(ThirdPartyGeneratorDevice&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ThirdPartyGeneratorDevice& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ThirdPartyGeneratorDevice* internal_default_instance() {
    return reinterpret_cast<const ThirdPartyGeneratorDevice*>(
               &_ThirdPartyGeneratorDevice_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    48;

  void Swap(ThirdPartyGeneratorDevice* other);
  friend void swap(ThirdPartyGeneratorDevice& a, ThirdPartyGeneratorDevice& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ThirdPartyGeneratorDevice* New() const final {
    return CreateMaybeMessage<ThirdPartyGeneratorDevice>(NULL);
  }

  ThirdPartyGeneratorDevice* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ThirdPartyGeneratorDevice>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ThirdPartyGeneratorDevice& from);
  void MergeFrom(const ThirdPartyGeneratorDevice& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ThirdPartyGeneratorDevice* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string NameUTF8 = 3;
  void clear_nameutf8();
  static const int kNameUTF8FieldNumber = 3;
  const ::std::string& nameutf8() const;
  void set_nameutf8(const ::std::string& value);
  #if LANG_CXX11
  void set_nameutf8(::std::string&& value);
  #endif
  void set_nameutf8(const char* value);
  void set_nameutf8(const char* value, size_t size);
  ::std::string* mutable_nameutf8();
  ::std::string* release_nameutf8();
  void set_allocated_nameutf8(::std::string* nameutf8);

  // .Nmea2k.Instance Instance = 4;
  bool has_instance() const;
  void clear_instance();
  static const int kInstanceFieldNumber = 4;
  private:
  const ::Nmea2k::Instance& _internal_instance() const;
  public:
  const ::Nmea2k::Instance& instance() const;
  ::Nmea2k::Instance* release_instance();
  ::Nmea2k::Instance* mutable_instance();
  void set_allocated_instance(::Nmea2k::Instance* instance);

  // .Nmea2k.DataId StartControlId = 5;
  bool has_startcontrolid() const;
  void clear_startcontrolid();
  static const int kStartControlIdFieldNumber = 5;
  private:
  const ::Nmea2k::DataId& _internal_startcontrolid() const;
  public:
  const ::Nmea2k::DataId& startcontrolid() const;
  ::Nmea2k::DataId* release_startcontrolid();
  ::Nmea2k::DataId* mutable_startcontrolid();
  void set_allocated_startcontrolid(::Nmea2k::DataId* startcontrolid);

  // .Nmea2k.DataId StopControlId = 6;
  bool has_stopcontrolid() const;
  void clear_stopcontrolid();
  static const int kStopControlIdFieldNumber = 6;
  private:
  const ::Nmea2k::DataId& _internal_stopcontrolid() const;
  public:
  const ::Nmea2k::DataId& stopcontrolid() const;
  ::Nmea2k::DataId* release_stopcontrolid();
  ::Nmea2k::DataId* mutable_stopcontrolid();
  void set_allocated_stopcontrolid(::Nmea2k::DataId* stopcontrolid);

  // .Nmea2k.Instance AssociatedAcMetersInstance = 7;
  bool has_associatedacmetersinstance() const;
  void clear_associatedacmetersinstance();
  static const int kAssociatedAcMetersInstanceFieldNumber = 7;
  private:
  const ::Nmea2k::Instance& _internal_associatedacmetersinstance() const;
  public:
  const ::Nmea2k::Instance& associatedacmetersinstance() const;
  ::Nmea2k::Instance* release_associatedacmetersinstance();
  ::Nmea2k::Instance* mutable_associatedacmetersinstance();
  void set_allocated_associatedacmetersinstance(::Nmea2k::Instance* associatedacmetersinstance);

  // .Nmea2k.DataId AcMeterLine1Id = 8;
  bool has_acmeterline1id() const;
  void clear_acmeterline1id();
  static const int kAcMeterLine1IdFieldNumber = 8;
  private:
  const ::Nmea2k::DataId& _internal_acmeterline1id() const;
  public:
  const ::Nmea2k::DataId& acmeterline1id() const;
  ::Nmea2k::DataId* release_acmeterline1id();
  ::Nmea2k::DataId* mutable_acmeterline1id();
  void set_allocated_acmeterline1id(::Nmea2k::DataId* acmeterline1id);

  // .Nmea2k.DataId AcMeterLine2Id = 9;
  bool has_acmeterline2id() const;
  void clear_acmeterline2id();
  static const int kAcMeterLine2IdFieldNumber = 9;
  private:
  const ::Nmea2k::DataId& _internal_acmeterline2id() const;
  public:
  const ::Nmea2k::DataId& acmeterline2id() const;
  ::Nmea2k::DataId* release_acmeterline2id();
  ::Nmea2k::DataId* mutable_acmeterline2id();
  void set_allocated_acmeterline2id(::Nmea2k::DataId* acmeterline2id);

  // .Nmea2k.DataId AcMeterLine3Id = 10;
  bool has_acmeterline3id() const;
  void clear_acmeterline3id();
  static const int kAcMeterLine3IdFieldNumber = 10;
  private:
  const ::Nmea2k::DataId& _internal_acmeterline3id() const;
  public:
  const ::Nmea2k::DataId& acmeterline3id() const;
  ::Nmea2k::DataId* release_acmeterline3id();
  ::Nmea2k::DataId* mutable_acmeterline3id();
  void set_allocated_acmeterline3id(::Nmea2k::DataId* acmeterline3id);

  // .Nmea2k.ConfigRequest.eConfigType DisplayType = 1;
  void clear_displaytype();
  static const int kDisplayTypeFieldNumber = 1;
  ::Nmea2k::ConfigRequest_eConfigType displaytype() const;
  void set_displaytype(::Nmea2k::ConfigRequest_eConfigType value);

  // uint32 Id = 2;
  void clear_id();
  static const int kIdFieldNumber = 2;
  ::google::protobuf::uint32 id() const;
  void set_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Nmea2k.ThirdPartyGeneratorDevice)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr nameutf8_;
  ::Nmea2k::Instance* instance_;
  ::Nmea2k::DataId* startcontrolid_;
  ::Nmea2k::DataId* stopcontrolid_;
  ::Nmea2k::Instance* associatedacmetersinstance_;
  ::Nmea2k::DataId* acmeterline1id_;
  ::Nmea2k::DataId* acmeterline2id_;
  ::Nmea2k::DataId* acmeterline3id_;
  int displaytype_;
  ::google::protobuf::uint32 id_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_Nmea2k_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class TyrePressureDevice : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Nmea2k.TyrePressureDevice) */ {
 public:
  TyrePressureDevice();
  virtual ~TyrePressureDevice();

  TyrePressureDevice(const TyrePressureDevice& from);

  inline TyrePressureDevice& operator=(const TyrePressureDevice& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TyrePressureDevice(TyrePressureDevice&& from) noexcept
    : TyrePressureDevice() {
    *this = ::std::move(from);
  }

  inline TyrePressureDevice& operator=(TyrePressureDevice&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const TyrePressureDevice& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TyrePressureDevice* internal_default_instance() {
    return reinterpret_cast<const TyrePressureDevice*>(
               &_TyrePressureDevice_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    49;

  void Swap(TyrePressureDevice* other);
  friend void swap(TyrePressureDevice& a, TyrePressureDevice& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TyrePressureDevice* New() const final {
    return CreateMaybeMessage<TyrePressureDevice>(NULL);
  }

  TyrePressureDevice* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<TyrePressureDevice>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const TyrePressureDevice& from);
  void MergeFrom(const TyrePressureDevice& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TyrePressureDevice* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .Nmea2k.Instance TyreInstances = 11;
  int tyreinstances_size() const;
  void clear_tyreinstances();
  static const int kTyreInstancesFieldNumber = 11;
  ::Nmea2k::Instance* mutable_tyreinstances(int index);
  ::google::protobuf::RepeatedPtrField< ::Nmea2k::Instance >*
      mutable_tyreinstances();
  const ::Nmea2k::Instance& tyreinstances(int index) const;
  ::Nmea2k::Instance* add_tyreinstances();
  const ::google::protobuf::RepeatedPtrField< ::Nmea2k::Instance >&
      tyreinstances() const;

  // repeated .Nmea2k.Instance TyreSpareInstances = 12;
  int tyrespareinstances_size() const;
  void clear_tyrespareinstances();
  static const int kTyreSpareInstancesFieldNumber = 12;
  ::Nmea2k::Instance* mutable_tyrespareinstances(int index);
  ::google::protobuf::RepeatedPtrField< ::Nmea2k::Instance >*
      mutable_tyrespareinstances();
  const ::Nmea2k::Instance& tyrespareinstances(int index) const;
  ::Nmea2k::Instance* add_tyrespareinstances();
  const ::google::protobuf::RepeatedPtrField< ::Nmea2k::Instance >&
      tyrespareinstances() const;

  // string NameUTF8 = 3;
  void clear_nameutf8();
  static const int kNameUTF8FieldNumber = 3;
  const ::std::string& nameutf8() const;
  void set_nameutf8(const ::std::string& value);
  #if LANG_CXX11
  void set_nameutf8(::std::string&& value);
  #endif
  void set_nameutf8(const char* value);
  void set_nameutf8(const char* value, size_t size);
  ::std::string* mutable_nameutf8();
  ::std::string* release_nameutf8();
  void set_allocated_nameutf8(::std::string* nameutf8);

  // .Nmea2k.Instance Instance = 4;
  bool has_instance() const;
  void clear_instance();
  static const int kInstanceFieldNumber = 4;
  private:
  const ::Nmea2k::Instance& _internal_instance() const;
  public:
  const ::Nmea2k::Instance& instance() const;
  ::Nmea2k::Instance* release_instance();
  ::Nmea2k::Instance* mutable_instance();
  void set_allocated_instance(::Nmea2k::Instance* instance);

  // .Nmea2k.ConfigRequest.eConfigType DisplayType = 1;
  void clear_displaytype();
  static const int kDisplayTypeFieldNumber = 1;
  ::Nmea2k::ConfigRequest_eConfigType displaytype() const;
  void set_displaytype(::Nmea2k::ConfigRequest_eConfigType value);

  // uint32 Id = 2;
  void clear_id();
  static const int kIdFieldNumber = 2;
  ::google::protobuf::uint32 id() const;
  void set_id(::google::protobuf::uint32 value);

  // uint32 NumberOfAxles = 5;
  void clear_numberofaxles();
  static const int kNumberOfAxlesFieldNumber = 5;
  ::google::protobuf::uint32 numberofaxles() const;
  void set_numberofaxles(::google::protobuf::uint32 value);

  // uint32 TyresAxle1 = 6;
  void clear_tyresaxle1();
  static const int kTyresAxle1FieldNumber = 6;
  ::google::protobuf::uint32 tyresaxle1() const;
  void set_tyresaxle1(::google::protobuf::uint32 value);

  // uint32 TyresAxle2 = 7;
  void clear_tyresaxle2();
  static const int kTyresAxle2FieldNumber = 7;
  ::google::protobuf::uint32 tyresaxle2() const;
  void set_tyresaxle2(::google::protobuf::uint32 value);

  // uint32 TyresAxle3 = 8;
  void clear_tyresaxle3();
  static const int kTyresAxle3FieldNumber = 8;
  ::google::protobuf::uint32 tyresaxle3() const;
  void set_tyresaxle3(::google::protobuf::uint32 value);

  // uint32 TyresAxle4 = 9;
  void clear_tyresaxle4();
  static const int kTyresAxle4FieldNumber = 9;
  ::google::protobuf::uint32 tyresaxle4() const;
  void set_tyresaxle4(::google::protobuf::uint32 value);

  // uint32 SpareAxle = 10;
  void clear_spareaxle();
  static const int kSpareAxleFieldNumber = 10;
  ::google::protobuf::uint32 spareaxle() const;
  void set_spareaxle(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Nmea2k.TyrePressureDevice)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::Nmea2k::Instance > tyreinstances_;
  ::google::protobuf::RepeatedPtrField< ::Nmea2k::Instance > tyrespareinstances_;
  ::google::protobuf::internal::ArenaStringPtr nameutf8_;
  ::Nmea2k::Instance* instance_;
  int displaytype_;
  ::google::protobuf::uint32 id_;
  ::google::protobuf::uint32 numberofaxles_;
  ::google::protobuf::uint32 tyresaxle1_;
  ::google::protobuf::uint32 tyresaxle2_;
  ::google::protobuf::uint32 tyresaxle3_;
  ::google::protobuf::uint32 tyresaxle4_;
  ::google::protobuf::uint32 spareaxle_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_Nmea2k_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class AudioStereoDevice : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Nmea2k.AudioStereoDevice) */ {
 public:
  AudioStereoDevice();
  virtual ~AudioStereoDevice();

  AudioStereoDevice(const AudioStereoDevice& from);

  inline AudioStereoDevice& operator=(const AudioStereoDevice& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AudioStereoDevice(AudioStereoDevice&& from) noexcept
    : AudioStereoDevice() {
    *this = ::std::move(from);
  }

  inline AudioStereoDevice& operator=(AudioStereoDevice&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const AudioStereoDevice& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AudioStereoDevice* internal_default_instance() {
    return reinterpret_cast<const AudioStereoDevice*>(
               &_AudioStereoDevice_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    50;

  void Swap(AudioStereoDevice* other);
  friend void swap(AudioStereoDevice& a, AudioStereoDevice& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AudioStereoDevice* New() const final {
    return CreateMaybeMessage<AudioStereoDevice>(NULL);
  }

  AudioStereoDevice* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<AudioStereoDevice>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const AudioStereoDevice& from);
  void MergeFrom(const AudioStereoDevice& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AudioStereoDevice* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .Nmea2k.DataId CircuitIds = 6;
  int circuitids_size() const;
  void clear_circuitids();
  static const int kCircuitIdsFieldNumber = 6;
  ::Nmea2k::DataId* mutable_circuitids(int index);
  ::google::protobuf::RepeatedPtrField< ::Nmea2k::DataId >*
      mutable_circuitids();
  const ::Nmea2k::DataId& circuitids(int index) const;
  ::Nmea2k::DataId* add_circuitids();
  const ::google::protobuf::RepeatedPtrField< ::Nmea2k::DataId >&
      circuitids() const;

  // string NameUTF8 = 3;
  void clear_nameutf8();
  static const int kNameUTF8FieldNumber = 3;
  const ::std::string& nameutf8() const;
  void set_nameutf8(const ::std::string& value);
  #if LANG_CXX11
  void set_nameutf8(::std::string&& value);
  #endif
  void set_nameutf8(const char* value);
  void set_nameutf8(const char* value, size_t size);
  ::std::string* mutable_nameutf8();
  ::std::string* release_nameutf8();
  void set_allocated_nameutf8(::std::string* nameutf8);

  // .Nmea2k.Instance Instance = 4;
  bool has_instance() const;
  void clear_instance();
  static const int kInstanceFieldNumber = 4;
  private:
  const ::Nmea2k::Instance& _internal_instance() const;
  public:
  const ::Nmea2k::Instance& instance() const;
  ::Nmea2k::Instance* release_instance();
  ::Nmea2k::Instance* mutable_instance();
  void set_allocated_instance(::Nmea2k::Instance* instance);

  // .Nmea2k.ConfigRequest.eConfigType DisplayType = 1;
  void clear_displaytype();
  static const int kDisplayTypeFieldNumber = 1;
  ::Nmea2k::ConfigRequest_eConfigType displaytype() const;
  void set_displaytype(::Nmea2k::ConfigRequest_eConfigType value);

  // uint32 Id = 2;
  void clear_id();
  static const int kIdFieldNumber = 2;
  ::google::protobuf::uint32 id() const;
  void set_id(::google::protobuf::uint32 value);

  // bool MuteEnabled = 5;
  void clear_muteenabled();
  static const int kMuteEnabledFieldNumber = 5;
  bool muteenabled() const;
  void set_muteenabled(bool value);

  // @@protoc_insertion_point(class_scope:Nmea2k.AudioStereoDevice)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::Nmea2k::DataId > circuitids_;
  ::google::protobuf::internal::ArenaStringPtr nameutf8_;
  ::Nmea2k::Instance* instance_;
  int displaytype_;
  ::google::protobuf::uint32 id_;
  bool muteenabled_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_Nmea2k_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ShoreFuseDevice : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Nmea2k.ShoreFuseDevice) */ {
 public:
  ShoreFuseDevice();
  virtual ~ShoreFuseDevice();

  ShoreFuseDevice(const ShoreFuseDevice& from);

  inline ShoreFuseDevice& operator=(const ShoreFuseDevice& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ShoreFuseDevice(ShoreFuseDevice&& from) noexcept
    : ShoreFuseDevice() {
    *this = ::std::move(from);
  }

  inline ShoreFuseDevice& operator=(ShoreFuseDevice&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ShoreFuseDevice& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ShoreFuseDevice* internal_default_instance() {
    return reinterpret_cast<const ShoreFuseDevice*>(
               &_ShoreFuseDevice_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    51;

  void Swap(ShoreFuseDevice* other);
  friend void swap(ShoreFuseDevice& a, ShoreFuseDevice& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ShoreFuseDevice* New() const final {
    return CreateMaybeMessage<ShoreFuseDevice>(NULL);
  }

  ShoreFuseDevice* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ShoreFuseDevice>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ShoreFuseDevice& from);
  void MergeFrom(const ShoreFuseDevice& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ShoreFuseDevice* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string NameUTF8 = 3;
  void clear_nameutf8();
  static const int kNameUTF8FieldNumber = 3;
  const ::std::string& nameutf8() const;
  void set_nameutf8(const ::std::string& value);
  #if LANG_CXX11
  void set_nameutf8(::std::string&& value);
  #endif
  void set_nameutf8(const char* value);
  void set_nameutf8(const char* value, size_t size);
  ::std::string* mutable_nameutf8();
  ::std::string* release_nameutf8();
  void set_allocated_nameutf8(::std::string* nameutf8);

  // .Nmea2k.Instance Instance = 4;
  bool has_instance() const;
  void clear_instance();
  static const int kInstanceFieldNumber = 4;
  private:
  const ::Nmea2k::Instance& _internal_instance() const;
  public:
  const ::Nmea2k::Instance& instance() const;
  ::Nmea2k::Instance* release_instance();
  ::Nmea2k::Instance* mutable_instance();
  void set_allocated_instance(::Nmea2k::Instance* instance);

  // .Nmea2k.DataId ShoreFuseControlId = 5;
  bool has_shorefusecontrolid() const;
  void clear_shorefusecontrolid();
  static const int kShoreFuseControlIdFieldNumber = 5;
  private:
  const ::Nmea2k::DataId& _internal_shorefusecontrolid() const;
  public:
  const ::Nmea2k::DataId& shorefusecontrolid() const;
  ::Nmea2k::DataId* release_shorefusecontrolid();
  ::Nmea2k::DataId* mutable_shorefusecontrolid();
  void set_allocated_shorefusecontrolid(::Nmea2k::DataId* shorefusecontrolid);

  // .Nmea2k.ConfigRequest.eConfigType DisplayType = 1;
  void clear_displaytype();
  static const int kDisplayTypeFieldNumber = 1;
  ::Nmea2k::ConfigRequest_eConfigType displaytype() const;
  void set_displaytype(::Nmea2k::ConfigRequest_eConfigType value);

  // uint32 Id = 2;
  void clear_id();
  static const int kIdFieldNumber = 2;
  ::google::protobuf::uint32 id() const;
  void set_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Nmea2k.ShoreFuseDevice)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr nameutf8_;
  ::Nmea2k::Instance* instance_;
  ::Nmea2k::DataId* shorefusecontrolid_;
  int displaytype_;
  ::google::protobuf::uint32 id_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_Nmea2k_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class FantasticFanDevice : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Nmea2k.FantasticFanDevice) */ {
 public:
  FantasticFanDevice();
  virtual ~FantasticFanDevice();

  FantasticFanDevice(const FantasticFanDevice& from);

  inline FantasticFanDevice& operator=(const FantasticFanDevice& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  FantasticFanDevice(FantasticFanDevice&& from) noexcept
    : FantasticFanDevice() {
    *this = ::std::move(from);
  }

  inline FantasticFanDevice& operator=(FantasticFanDevice&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const FantasticFanDevice& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FantasticFanDevice* internal_default_instance() {
    return reinterpret_cast<const FantasticFanDevice*>(
               &_FantasticFanDevice_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    52;

  void Swap(FantasticFanDevice* other);
  friend void swap(FantasticFanDevice& a, FantasticFanDevice& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline FantasticFanDevice* New() const final {
    return CreateMaybeMessage<FantasticFanDevice>(NULL);
  }

  FantasticFanDevice* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<FantasticFanDevice>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const FantasticFanDevice& from);
  void MergeFrom(const FantasticFanDevice& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FantasticFanDevice* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string NameUTF8 = 3;
  void clear_nameutf8();
  static const int kNameUTF8FieldNumber = 3;
  const ::std::string& nameutf8() const;
  void set_nameutf8(const ::std::string& value);
  #if LANG_CXX11
  void set_nameutf8(::std::string&& value);
  #endif
  void set_nameutf8(const char* value);
  void set_nameutf8(const char* value, size_t size);
  ::std::string* mutable_nameutf8();
  ::std::string* release_nameutf8();
  void set_allocated_nameutf8(::std::string* nameutf8);

  // .Nmea2k.Instance Instance = 4;
  bool has_instance() const;
  void clear_instance();
  static const int kInstanceFieldNumber = 4;
  private:
  const ::Nmea2k::Instance& _internal_instance() const;
  public:
  const ::Nmea2k::Instance& instance() const;
  ::Nmea2k::Instance* release_instance();
  ::Nmea2k::Instance* mutable_instance();
  void set_allocated_instance(::Nmea2k::Instance* instance);

  // .Nmea2k.DataId DirectionForwardCircuitId = 5;
  bool has_directionforwardcircuitid() const;
  void clear_directionforwardcircuitid();
  static const int kDirectionForwardCircuitIdFieldNumber = 5;
  private:
  const ::Nmea2k::DataId& _internal_directionforwardcircuitid() const;
  public:
  const ::Nmea2k::DataId& directionforwardcircuitid() const;
  ::Nmea2k::DataId* release_directionforwardcircuitid();
  ::Nmea2k::DataId* mutable_directionforwardcircuitid();
  void set_allocated_directionforwardcircuitid(::Nmea2k::DataId* directionforwardcircuitid);

  // .Nmea2k.DataId DirectionReverseCircuitId = 6;
  bool has_directionreversecircuitid() const;
  void clear_directionreversecircuitid();
  static const int kDirectionReverseCircuitIdFieldNumber = 6;
  private:
  const ::Nmea2k::DataId& _internal_directionreversecircuitid() const;
  public:
  const ::Nmea2k::DataId& directionreversecircuitid() const;
  ::Nmea2k::DataId* release_directionreversecircuitid();
  ::Nmea2k::DataId* mutable_directionreversecircuitid();
  void set_allocated_directionreversecircuitid(::Nmea2k::DataId* directionreversecircuitid);

  // .Nmea2k.DataId LidOpenCircuitId = 7;
  bool has_lidopencircuitid() const;
  void clear_lidopencircuitid();
  static const int kLidOpenCircuitIdFieldNumber = 7;
  private:
  const ::Nmea2k::DataId& _internal_lidopencircuitid() const;
  public:
  const ::Nmea2k::DataId& lidopencircuitid() const;
  ::Nmea2k::DataId* release_lidopencircuitid();
  ::Nmea2k::DataId* mutable_lidopencircuitid();
  void set_allocated_lidopencircuitid(::Nmea2k::DataId* lidopencircuitid);

  // .Nmea2k.DataId LidCloseCircuitId = 8;
  bool has_lidclosecircuitid() const;
  void clear_lidclosecircuitid();
  static const int kLidCloseCircuitIdFieldNumber = 8;
  private:
  const ::Nmea2k::DataId& _internal_lidclosecircuitid() const;
  public:
  const ::Nmea2k::DataId& lidclosecircuitid() const;
  ::Nmea2k::DataId* release_lidclosecircuitid();
  ::Nmea2k::DataId* mutable_lidclosecircuitid();
  void set_allocated_lidclosecircuitid(::Nmea2k::DataId* lidclosecircuitid);

  // .Nmea2k.DataId FanCircuitId = 9;
  bool has_fancircuitid() const;
  void clear_fancircuitid();
  static const int kFanCircuitIdFieldNumber = 9;
  private:
  const ::Nmea2k::DataId& _internal_fancircuitid() const;
  public:
  const ::Nmea2k::DataId& fancircuitid() const;
  ::Nmea2k::DataId* release_fancircuitid();
  ::Nmea2k::DataId* mutable_fancircuitid();
  void set_allocated_fancircuitid(::Nmea2k::DataId* fancircuitid);

  // .Nmea2k.ConfigRequest.eConfigType DisplayType = 1;
  void clear_displaytype();
  static const int kDisplayTypeFieldNumber = 1;
  ::Nmea2k::ConfigRequest_eConfigType displaytype() const;
  void set_displaytype(::Nmea2k::ConfigRequest_eConfigType value);

  // uint32 Id = 2;
  void clear_id();
  static const int kIdFieldNumber = 2;
  ::google::protobuf::uint32 id() const;
  void set_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Nmea2k.FantasticFanDevice)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr nameutf8_;
  ::Nmea2k::Instance* instance_;
  ::Nmea2k::DataId* directionforwardcircuitid_;
  ::Nmea2k::DataId* directionreversecircuitid_;
  ::Nmea2k::DataId* lidopencircuitid_;
  ::Nmea2k::DataId* lidclosecircuitid_;
  ::Nmea2k::DataId* fancircuitid_;
  int displaytype_;
  ::google::protobuf::uint32 id_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_Nmea2k_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SequentialName : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Nmea2k.SequentialName) */ {
 public:
  SequentialName();
  virtual ~SequentialName();

  SequentialName(const SequentialName& from);

  inline SequentialName& operator=(const SequentialName& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SequentialName(SequentialName&& from) noexcept
    : SequentialName() {
    *this = ::std::move(from);
  }

  inline SequentialName& operator=(SequentialName&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SequentialName& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SequentialName* internal_default_instance() {
    return reinterpret_cast<const SequentialName*>(
               &_SequentialName_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    53;

  void Swap(SequentialName* other);
  friend void swap(SequentialName& a, SequentialName& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SequentialName* New() const final {
    return CreateMaybeMessage<SequentialName>(NULL);
  }

  SequentialName* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SequentialName>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SequentialName& from);
  void MergeFrom(const SequentialName& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SequentialName* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string Name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // @@protoc_insertion_point(class_scope:Nmea2k.SequentialName)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_Nmea2k_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CircuitLoad : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Nmea2k.CircuitLoad) */ {
 public:
  CircuitLoad();
  virtual ~CircuitLoad();

  CircuitLoad(const CircuitLoad& from);

  inline CircuitLoad& operator=(const CircuitLoad& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CircuitLoad(CircuitLoad&& from) noexcept
    : CircuitLoad() {
    *this = ::std::move(from);
  }

  inline CircuitLoad& operator=(CircuitLoad&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const CircuitLoad& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CircuitLoad* internal_default_instance() {
    return reinterpret_cast<const CircuitLoad*>(
               &_CircuitLoad_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    54;

  void Swap(CircuitLoad* other);
  friend void swap(CircuitLoad& a, CircuitLoad& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CircuitLoad* New() const final {
    return CreateMaybeMessage<CircuitLoad>(NULL);
  }

  CircuitLoad* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CircuitLoad>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CircuitLoad& from);
  void MergeFrom(const CircuitLoad& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CircuitLoad* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef CircuitLoad_eControlType eControlType;
  static const eControlType SetOutput =
    CircuitLoad_eControlType_SetOutput;
  static const eControlType LimitOneDirection =
    CircuitLoad_eControlType_LimitOneDirection;
  static const eControlType LimitBothDirections =
    CircuitLoad_eControlType_LimitBothDirections;
  static const eControlType SetAndLimit =
    CircuitLoad_eControlType_SetAndLimit;
  static inline bool eControlType_IsValid(int value) {
    return CircuitLoad_eControlType_IsValid(value);
  }
  static const eControlType eControlType_MIN =
    CircuitLoad_eControlType_eControlType_MIN;
  static const eControlType eControlType_MAX =
    CircuitLoad_eControlType_eControlType_MAX;
  static const int eControlType_ARRAYSIZE =
    CircuitLoad_eControlType_eControlType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  eControlType_descriptor() {
    return CircuitLoad_eControlType_descriptor();
  }
  static inline const ::std::string& eControlType_Name(eControlType value) {
    return CircuitLoad_eControlType_Name(value);
  }
  static inline bool eControlType_Parse(const ::std::string& name,
      eControlType* value) {
    return CircuitLoad_eControlType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // string NameUTF8 = 3;
  void clear_nameutf8();
  static const int kNameUTF8FieldNumber = 3;
  const ::std::string& nameutf8() const;
  void set_nameutf8(const ::std::string& value);
  #if LANG_CXX11
  void set_nameutf8(::std::string&& value);
  #endif
  void set_nameutf8(const char* value);
  void set_nameutf8(const char* value, size_t size);
  ::std::string* mutable_nameutf8();
  ::std::string* release_nameutf8();
  void set_allocated_nameutf8(::std::string* nameutf8);

  // .Nmea2k.ConfigRequest.eConfigType DisplayType = 1;
  void clear_displaytype();
  static const int kDisplayTypeFieldNumber = 1;
  ::Nmea2k::ConfigRequest_eConfigType displaytype() const;
  void set_displaytype(::Nmea2k::ConfigRequest_eConfigType value);

  // uint32 Id = 2;
  void clear_id();
  static const int kIdFieldNumber = 2;
  ::google::protobuf::uint32 id() const;
  void set_id(::google::protobuf::uint32 value);

  // uint32 ChannelAddress = 4;
  void clear_channeladdress();
  static const int kChannelAddressFieldNumber = 4;
  ::google::protobuf::uint32 channeladdress() const;
  void set_channeladdress(::google::protobuf::uint32 value);

  // float FuseLevel = 5;
  void clear_fuselevel();
  static const int kFuseLevelFieldNumber = 5;
  float fuselevel() const;
  void set_fuselevel(float value);

  // float RunningCurrent = 6;
  void clear_runningcurrent();
  static const int kRunningCurrentFieldNumber = 6;
  float runningcurrent() const;
  void set_runningcurrent(float value);

  // float SystemOnCurrent = 7;
  void clear_systemoncurrent();
  static const int kSystemOnCurrentFieldNumber = 7;
  float systemoncurrent() const;
  void set_systemoncurrent(float value);

  // uint32 Level = 9;
  void clear_level();
  static const int kLevelFieldNumber = 9;
  ::google::protobuf::uint32 level() const;
  void set_level(::google::protobuf::uint32 value);

  // bool ForceAcknowledgeOn = 8;
  void clear_forceacknowledgeon();
  static const int kForceAcknowledgeOnFieldNumber = 8;
  bool forceacknowledgeon() const;
  void set_forceacknowledgeon(bool value);

  // bool IsSwitchedModule = 11;
  void clear_isswitchedmodule();
  static const int kIsSwitchedModuleFieldNumber = 11;
  bool isswitchedmodule() const;
  void set_isswitchedmodule(bool value);

  // .Nmea2k.CircuitLoad.eControlType ControlType = 10;
  void clear_controltype();
  static const int kControlTypeFieldNumber = 10;
  ::Nmea2k::CircuitLoad_eControlType controltype() const;
  void set_controltype(::Nmea2k::CircuitLoad_eControlType value);

  // @@protoc_insertion_point(class_scope:Nmea2k.CircuitLoad)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr nameutf8_;
  int displaytype_;
  ::google::protobuf::uint32 id_;
  ::google::protobuf::uint32 channeladdress_;
  float fuselevel_;
  float runningcurrent_;
  float systemoncurrent_;
  ::google::protobuf::uint32 level_;
  bool forceacknowledgeon_;
  bool isswitchedmodule_;
  int controltype_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_Nmea2k_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CircuitDevice : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Nmea2k.CircuitDevice) */ {
 public:
  CircuitDevice();
  virtual ~CircuitDevice();

  CircuitDevice(const CircuitDevice& from);

  inline CircuitDevice& operator=(const CircuitDevice& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CircuitDevice(CircuitDevice&& from) noexcept
    : CircuitDevice() {
    *this = ::std::move(from);
  }

  inline CircuitDevice& operator=(CircuitDevice&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const CircuitDevice& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CircuitDevice* internal_default_instance() {
    return reinterpret_cast<const CircuitDevice*>(
               &_CircuitDevice_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    55;

  void Swap(CircuitDevice* other);
  friend void swap(CircuitDevice& a, CircuitDevice& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CircuitDevice* New() const final {
    return CreateMaybeMessage<CircuitDevice>(NULL);
  }

  CircuitDevice* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CircuitDevice>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CircuitDevice& from);
  void MergeFrom(const CircuitDevice& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CircuitDevice* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef CircuitDevice_eConfirmType eConfirmType;
  static const eConfirmType ConfirmNone =
    CircuitDevice_eConfirmType_ConfirmNone;
  static const eConfirmType ConfirmOn =
    CircuitDevice_eConfirmType_ConfirmOn;
  static const eConfirmType ConfirmOff =
    CircuitDevice_eConfirmType_ConfirmOff;
  static const eConfirmType ConfirmOnOff =
    CircuitDevice_eConfirmType_ConfirmOnOff;
  static inline bool eConfirmType_IsValid(int value) {
    return CircuitDevice_eConfirmType_IsValid(value);
  }
  static const eConfirmType eConfirmType_MIN =
    CircuitDevice_eConfirmType_eConfirmType_MIN;
  static const eConfirmType eConfirmType_MAX =
    CircuitDevice_eConfirmType_eConfirmType_MAX;
  static const int eConfirmType_ARRAYSIZE =
    CircuitDevice_eConfirmType_eConfirmType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  eConfirmType_descriptor() {
    return CircuitDevice_eConfirmType_descriptor();
  }
  static inline const ::std::string& eConfirmType_Name(eConfirmType value) {
    return CircuitDevice_eConfirmType_Name(value);
  }
  static inline bool eConfirmType_Parse(const ::std::string& name,
      eConfirmType* value) {
    return CircuitDevice_eConfirmType_Parse(name, value);
  }

  typedef CircuitDevice_eCircuitType eCircuitType;
  static const eCircuitType Circuit =
    CircuitDevice_eCircuitType_Circuit;
  static const eCircuitType ModeGroup1 =
    CircuitDevice_eCircuitType_ModeGroup1;
  static const eCircuitType ModeGroup2 =
    CircuitDevice_eCircuitType_ModeGroup2;
  static const eCircuitType ModeGroup3 =
    CircuitDevice_eCircuitType_ModeGroup3;
  static const eCircuitType ModeGroupExclusive =
    CircuitDevice_eCircuitType_ModeGroupExclusive;
  static inline bool eCircuitType_IsValid(int value) {
    return CircuitDevice_eCircuitType_IsValid(value);
  }
  static const eCircuitType eCircuitType_MIN =
    CircuitDevice_eCircuitType_eCircuitType_MIN;
  static const eCircuitType eCircuitType_MAX =
    CircuitDevice_eCircuitType_eCircuitType_MAX;
  static const int eCircuitType_ARRAYSIZE =
    CircuitDevice_eCircuitType_eCircuitType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  eCircuitType_descriptor() {
    return CircuitDevice_eCircuitType_descriptor();
  }
  static inline const ::std::string& eCircuitType_Name(eCircuitType value) {
    return CircuitDevice_eCircuitType_Name(value);
  }
  static inline bool eCircuitType_Parse(const ::std::string& name,
      eCircuitType* value) {
    return CircuitDevice_eCircuitType_Parse(name, value);
  }

  typedef CircuitDevice_eSwitchType eSwitchType;
  static const eSwitchType None =
    CircuitDevice_eSwitchType_None;
  static const eSwitchType LatchOn =
    CircuitDevice_eSwitchType_LatchOn;
  static const eSwitchType LatchOff =
    CircuitDevice_eSwitchType_LatchOff;
  static const eSwitchType OnOff =
    CircuitDevice_eSwitchType_OnOff;
  static const eSwitchType Toggle =
    CircuitDevice_eSwitchType_Toggle;
  static const eSwitchType MomentaryOn =
    CircuitDevice_eSwitchType_MomentaryOn;
  static const eSwitchType MomentaryOff =
    CircuitDevice_eSwitchType_MomentaryOff;
  static const eSwitchType StepUp =
    CircuitDevice_eSwitchType_StepUp;
  static const eSwitchType StepDown =
    CircuitDevice_eSwitchType_StepDown;
  static const eSwitchType Forward =
    CircuitDevice_eSwitchType_Forward;
  static const eSwitchType Reverse =
    CircuitDevice_eSwitchType_Reverse;
  static const eSwitchType DimLinearUp =
    CircuitDevice_eSwitchType_DimLinearUp;
  static const eSwitchType DimLinearDown =
    CircuitDevice_eSwitchType_DimLinearDown;
  static const eSwitchType DimExponentialUp =
    CircuitDevice_eSwitchType_DimExponentialUp;
  static const eSwitchType DimExponentialDown =
    CircuitDevice_eSwitchType_DimExponentialDown;
  static const eSwitchType SingleDimLinear =
    CircuitDevice_eSwitchType_SingleDimLinear;
  static const eSwitchType SingleDimExponential =
    CircuitDevice_eSwitchType_SingleDimExponential;
  static const eSwitchType Sequential1 =
    CircuitDevice_eSwitchType_Sequential1;
  static const eSwitchType Sequential2 =
    CircuitDevice_eSwitchType_Sequential2;
  static const eSwitchType Sequential3 =
    CircuitDevice_eSwitchType_Sequential3;
  static const eSwitchType Sequential4 =
    CircuitDevice_eSwitchType_Sequential4;
  static const eSwitchType Sequential5 =
    CircuitDevice_eSwitchType_Sequential5;
  static const eSwitchType ToggleReverse =
    CircuitDevice_eSwitchType_ToggleReverse;
  static const eSwitchType LogicAnd =
    CircuitDevice_eSwitchType_LogicAnd;
  static const eSwitchType LogicOr =
    CircuitDevice_eSwitchType_LogicOr;
  static const eSwitchType LogicXor =
    CircuitDevice_eSwitchType_LogicXor;
  static const eSwitchType SetAbsolute =
    CircuitDevice_eSwitchType_SetAbsolute;
  static const eSwitchType SequentialUp =
    CircuitDevice_eSwitchType_SequentialUp;
  static const eSwitchType SequentialDown =
    CircuitDevice_eSwitchType_SequentialDown;
  static const eSwitchType SequentialLong1 =
    CircuitDevice_eSwitchType_SequentialLong1;
  static const eSwitchType SequentialLong2 =
    CircuitDevice_eSwitchType_SequentialLong2;
  static const eSwitchType SequentialLong3 =
    CircuitDevice_eSwitchType_SequentialLong3;
  static const eSwitchType SequentialLong4 =
    CircuitDevice_eSwitchType_SequentialLong4;
  static const eSwitchType SequentialLong5 =
    CircuitDevice_eSwitchType_SequentialLong5;
  static inline bool eSwitchType_IsValid(int value) {
    return CircuitDevice_eSwitchType_IsValid(value);
  }
  static const eSwitchType eSwitchType_MIN =
    CircuitDevice_eSwitchType_eSwitchType_MIN;
  static const eSwitchType eSwitchType_MAX =
    CircuitDevice_eSwitchType_eSwitchType_MAX;
  static const int eSwitchType_ARRAYSIZE =
    CircuitDevice_eSwitchType_eSwitchType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  eSwitchType_descriptor() {
    return CircuitDevice_eSwitchType_descriptor();
  }
  static inline const ::std::string& eSwitchType_Name(eSwitchType value) {
    return CircuitDevice_eSwitchType_Name(value);
  }
  static inline bool eSwitchType_Parse(const ::std::string& name,
      eSwitchType* value) {
    return CircuitDevice_eSwitchType_Parse(name, value);
  }

  typedef CircuitDevice_eModeIcon eModeIcon;
  static const eModeIcon Entertainment =
    CircuitDevice_eModeIcon_Entertainment;
  static const eModeIcon EntertainmentNight =
    CircuitDevice_eModeIcon_EntertainmentNight;
  static const eModeIcon Crusing =
    CircuitDevice_eModeIcon_Crusing;
  static const eModeIcon CrusingNight =
    CircuitDevice_eModeIcon_CrusingNight;
  static const eModeIcon Anchored =
    CircuitDevice_eModeIcon_Anchored;
  static const eModeIcon AnchoredNight =
    CircuitDevice_eModeIcon_AnchoredNight;
  static const eModeIcon DockAttended =
    CircuitDevice_eModeIcon_DockAttended;
  static const eModeIcon DockUnAttended =
    CircuitDevice_eModeIcon_DockUnAttended;
  static const eModeIcon Generic =
    CircuitDevice_eModeIcon_Generic;
  static const eModeIcon Fishing =
    CircuitDevice_eModeIcon_Fishing;
  static const eModeIcon FishingNight =
    CircuitDevice_eModeIcon_FishingNight;
  static const eModeIcon MoodLighting =
    CircuitDevice_eModeIcon_MoodLighting;
  static inline bool eModeIcon_IsValid(int value) {
    return CircuitDevice_eModeIcon_IsValid(value);
  }
  static const eModeIcon eModeIcon_MIN =
    CircuitDevice_eModeIcon_eModeIcon_MIN;
  static const eModeIcon eModeIcon_MAX =
    CircuitDevice_eModeIcon_eModeIcon_MAX;
  static const int eModeIcon_ARRAYSIZE =
    CircuitDevice_eModeIcon_eModeIcon_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  eModeIcon_descriptor() {
    return CircuitDevice_eModeIcon_descriptor();
  }
  static inline const ::std::string& eModeIcon_Name(eModeIcon value) {
    return CircuitDevice_eModeIcon_Name(value);
  }
  static inline bool eModeIcon_Parse(const ::std::string& name,
      eModeIcon* value) {
    return CircuitDevice_eModeIcon_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // repeated .Nmea2k.SequentialName SequentialNamesUTF8 = 5;
  int sequentialnamesutf8_size() const;
  void clear_sequentialnamesutf8();
  static const int kSequentialNamesUTF8FieldNumber = 5;
  ::Nmea2k::SequentialName* mutable_sequentialnamesutf8(int index);
  ::google::protobuf::RepeatedPtrField< ::Nmea2k::SequentialName >*
      mutable_sequentialnamesutf8();
  const ::Nmea2k::SequentialName& sequentialnamesutf8(int index) const;
  ::Nmea2k::SequentialName* add_sequentialnamesutf8();
  const ::google::protobuf::RepeatedPtrField< ::Nmea2k::SequentialName >&
      sequentialnamesutf8() const;

  // repeated .Nmea2k.CircuitLoad CircuitLoads = 21;
  int circuitloads_size() const;
  void clear_circuitloads();
  static const int kCircuitLoadsFieldNumber = 21;
  ::Nmea2k::CircuitLoad* mutable_circuitloads(int index);
  ::google::protobuf::RepeatedPtrField< ::Nmea2k::CircuitLoad >*
      mutable_circuitloads();
  const ::Nmea2k::CircuitLoad& circuitloads(int index) const;
  ::Nmea2k::CircuitLoad* add_circuitloads();
  const ::google::protobuf::RepeatedPtrField< ::Nmea2k::CircuitLoad >&
      circuitloads() const;

  // repeated .Nmea2k.CategoryItem Categories = 22;
  int categories_size() const;
  void clear_categories();
  static const int kCategoriesFieldNumber = 22;
  ::Nmea2k::CategoryItem* mutable_categories(int index);
  ::google::protobuf::RepeatedPtrField< ::Nmea2k::CategoryItem >*
      mutable_categories();
  const ::Nmea2k::CategoryItem& categories(int index) const;
  ::Nmea2k::CategoryItem* add_categories();
  const ::google::protobuf::RepeatedPtrField< ::Nmea2k::CategoryItem >&
      categories() const;

  // string NameUTF8 = 3;
  void clear_nameutf8();
  static const int kNameUTF8FieldNumber = 3;
  const ::std::string& nameutf8() const;
  void set_nameutf8(const ::std::string& value);
  #if LANG_CXX11
  void set_nameutf8(::std::string&& value);
  #endif
  void set_nameutf8(const char* value);
  void set_nameutf8(const char* value, size_t size);
  ::std::string* mutable_nameutf8();
  ::std::string* release_nameutf8();
  void set_allocated_nameutf8(::std::string* nameutf8);

  // string SwitchString = 28;
  void clear_switchstring();
  static const int kSwitchStringFieldNumber = 28;
  const ::std::string& switchstring() const;
  void set_switchstring(const ::std::string& value);
  #if LANG_CXX11
  void set_switchstring(::std::string&& value);
  #endif
  void set_switchstring(const char* value);
  void set_switchstring(const char* value, size_t size);
  ::std::string* mutable_switchstring();
  ::std::string* release_switchstring();
  void set_allocated_switchstring(::std::string* switchstring);

  // .Nmea2k.ValueU32 Id = 2;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 2;
  private:
  const ::Nmea2k::ValueU32& _internal_id() const;
  public:
  const ::Nmea2k::ValueU32& id() const;
  ::Nmea2k::ValueU32* release_id();
  ::Nmea2k::ValueU32* mutable_id();
  void set_allocated_id(::Nmea2k::ValueU32* id);

  // .Nmea2k.DataId SingleThrowId = 4;
  bool has_singlethrowid() const;
  void clear_singlethrowid();
  static const int kSingleThrowIdFieldNumber = 4;
  private:
  const ::Nmea2k::DataId& _internal_singlethrowid() const;
  public:
  const ::Nmea2k::DataId& singlethrowid() const;
  ::Nmea2k::DataId* release_singlethrowid();
  ::Nmea2k::DataId* mutable_singlethrowid();
  void set_allocated_singlethrowid(::Nmea2k::DataId* singlethrowid);

  // .Nmea2k.Instance VoltageSource = 9;
  bool has_voltagesource() const;
  void clear_voltagesource();
  static const int kVoltageSourceFieldNumber = 9;
  private:
  const ::Nmea2k::Instance& _internal_voltagesource() const;
  public:
  const ::Nmea2k::Instance& voltagesource() const;
  ::Nmea2k::Instance* release_voltagesource();
  ::Nmea2k::Instance* mutable_voltagesource();
  void set_allocated_voltagesource(::Nmea2k::Instance* voltagesource);

  // .Nmea2k.ConfigRequest.eConfigType DisplayType = 1;
  void clear_displaytype();
  static const int kDisplayTypeFieldNumber = 1;
  ::Nmea2k::ConfigRequest_eConfigType displaytype() const;
  void set_displaytype(::Nmea2k::ConfigRequest_eConfigType value);

  // uint32 DisplayCategories = 7;
  void clear_displaycategories();
  static const int kDisplayCategoriesFieldNumber = 7;
  ::google::protobuf::uint32 displaycategories() const;
  void set_displaycategories(::google::protobuf::uint32 value);

  // .Nmea2k.CircuitDevice.eConfirmType ConfirmDialog = 8;
  void clear_confirmdialog();
  static const int kConfirmDialogFieldNumber = 8;
  ::Nmea2k::CircuitDevice_eConfirmType confirmdialog() const;
  void set_confirmdialog(::Nmea2k::CircuitDevice_eConfirmType value);

  // .Nmea2k.CircuitDevice.eCircuitType CircuitType = 10;
  void clear_circuittype();
  static const int kCircuitTypeFieldNumber = 10;
  ::Nmea2k::CircuitDevice_eCircuitType circuittype() const;
  void set_circuittype(::Nmea2k::CircuitDevice_eCircuitType value);

  // .Nmea2k.CircuitDevice.eSwitchType SwitchType = 11;
  void clear_switchtype();
  static const int kSwitchTypeFieldNumber = 11;
  ::Nmea2k::CircuitDevice_eSwitchType switchtype() const;
  void set_switchtype(::Nmea2k::CircuitDevice_eSwitchType value);

  // uint32 MinLevel = 12;
  void clear_minlevel();
  static const int kMinLevelFieldNumber = 12;
  ::google::protobuf::uint32 minlevel() const;
  void set_minlevel(::google::protobuf::uint32 value);

  // uint32 MaxLevel = 13;
  void clear_maxlevel();
  static const int kMaxLevelFieldNumber = 13;
  ::google::protobuf::uint32 maxlevel() const;
  void set_maxlevel(::google::protobuf::uint32 value);

  // uint32 Dimstep = 15;
  void clear_dimstep();
  static const int kDimstepFieldNumber = 15;
  ::google::protobuf::uint32 dimstep() const;
  void set_dimstep(::google::protobuf::uint32 value);

  // bool HasComplement = 6;
  void clear_hascomplement();
  static const int kHasComplementFieldNumber = 6;
  bool hascomplement() const;
  void set_hascomplement(bool value);

  // bool NonVisibleCircuit = 14;
  void clear_nonvisiblecircuit();
  static const int kNonVisibleCircuitFieldNumber = 14;
  bool nonvisiblecircuit() const;
  void set_nonvisiblecircuit(bool value);

  // bool Dimmable = 17;
  void clear_dimmable();
  static const int kDimmableFieldNumber = 17;
  bool dimmable() const;
  void set_dimmable(bool value);

  // bool DCCircuit = 23;
  void clear_dccircuit();
  static const int kDCCircuitFieldNumber = 23;
  bool dccircuit() const;
  void set_dccircuit(bool value);

  // uint32 Step = 16;
  void clear_step();
  static const int kStepFieldNumber = 16;
  ::google::protobuf::uint32 step() const;
  void set_step(::google::protobuf::uint32 value);

  // uint32 LoadSmoothStart = 18;
  void clear_loadsmoothstart();
  static const int kLoadSmoothStartFieldNumber = 18;
  ::google::protobuf::uint32 loadsmoothstart() const;
  void set_loadsmoothstart(::google::protobuf::uint32 value);

  // uint32 SequentialStates = 19;
  void clear_sequentialstates();
  static const int kSequentialStatesFieldNumber = 19;
  ::google::protobuf::uint32 sequentialstates() const;
  void set_sequentialstates(::google::protobuf::uint32 value);

  // uint32 ControlId = 20;
  void clear_controlid();
  static const int kControlIdFieldNumber = 20;
  ::google::protobuf::uint32 controlid() const;
  void set_controlid(::google::protobuf::uint32 value);

  // .Nmea2k.CircuitDevice.eModeIcon ModeIcon = 25;
  void clear_modeicon();
  static const int kModeIconFieldNumber = 25;
  ::Nmea2k::CircuitDevice_eModeIcon modeicon() const;
  void set_modeicon(::Nmea2k::CircuitDevice_eModeIcon value);

  // uint32 primaryCircuitId = 26;
  void clear_primarycircuitid();
  static const int kPrimaryCircuitIdFieldNumber = 26;
  ::google::protobuf::uint32 primarycircuitid() const;
  void set_primarycircuitid(::google::protobuf::uint32 value);

  // bool ACCircuit = 24;
  void clear_accircuit();
  static const int kACCircuitFieldNumber = 24;
  bool accircuit() const;
  void set_accircuit(bool value);

  // bool SystemsOnAnd = 29;
  void clear_systemsonand();
  static const int kSystemsOnAndFieldNumber = 29;
  bool systemsonand() const;
  void set_systemsonand(bool value);

  // uint32 remoteVisibility = 27;
  void clear_remotevisibility();
  static const int kRemoteVisibilityFieldNumber = 27;
  ::google::protobuf::uint32 remotevisibility() const;
  void set_remotevisibility(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Nmea2k.CircuitDevice)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::Nmea2k::SequentialName > sequentialnamesutf8_;
  ::google::protobuf::RepeatedPtrField< ::Nmea2k::CircuitLoad > circuitloads_;
  ::google::protobuf::RepeatedPtrField< ::Nmea2k::CategoryItem > categories_;
  ::google::protobuf::internal::ArenaStringPtr nameutf8_;
  ::google::protobuf::internal::ArenaStringPtr switchstring_;
  ::Nmea2k::ValueU32* id_;
  ::Nmea2k::DataId* singlethrowid_;
  ::Nmea2k::Instance* voltagesource_;
  int displaytype_;
  ::google::protobuf::uint32 displaycategories_;
  int confirmdialog_;
  int circuittype_;
  int switchtype_;
  ::google::protobuf::uint32 minlevel_;
  ::google::protobuf::uint32 maxlevel_;
  ::google::protobuf::uint32 dimstep_;
  bool hascomplement_;
  bool nonvisiblecircuit_;
  bool dimmable_;
  bool dccircuit_;
  ::google::protobuf::uint32 step_;
  ::google::protobuf::uint32 loadsmoothstart_;
  ::google::protobuf::uint32 sequentialstates_;
  ::google::protobuf::uint32 controlid_;
  int modeicon_;
  ::google::protobuf::uint32 primarycircuitid_;
  bool accircuit_;
  bool systemsonand_;
  ::google::protobuf::uint32 remotevisibility_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_Nmea2k_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class FavouritesInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Nmea2k.FavouritesInfo) */ {
 public:
  FavouritesInfo();
  virtual ~FavouritesInfo();

  FavouritesInfo(const FavouritesInfo& from);

  inline FavouritesInfo& operator=(const FavouritesInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  FavouritesInfo(FavouritesInfo&& from) noexcept
    : FavouritesInfo() {
    *this = ::std::move(from);
  }

  inline FavouritesInfo& operator=(FavouritesInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const FavouritesInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FavouritesInfo* internal_default_instance() {
    return reinterpret_cast<const FavouritesInfo*>(
               &_FavouritesInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    56;

  void Swap(FavouritesInfo* other);
  friend void swap(FavouritesInfo& a, FavouritesInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline FavouritesInfo* New() const final {
    return CreateMaybeMessage<FavouritesInfo>(NULL);
  }

  FavouritesInfo* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<FavouritesInfo>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const FavouritesInfo& from);
  void MergeFrom(const FavouritesInfo& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FavouritesInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .Nmea2k.ConfigRequest.eConfigType DisplayType = 1;
  void clear_displaytype();
  static const int kDisplayTypeFieldNumber = 1;
  ::Nmea2k::ConfigRequest_eConfigType displaytype() const;
  void set_displaytype(::Nmea2k::ConfigRequest_eConfigType value);

  // uint32 Id = 2;
  void clear_id();
  static const int kIdFieldNumber = 2;
  ::google::protobuf::uint32 id() const;
  void set_id(::google::protobuf::uint32 value);

  // uint32 TargetDisplayType = 3;
  void clear_targetdisplaytype();
  static const int kTargetDisplayTypeFieldNumber = 3;
  ::google::protobuf::uint32 targetdisplaytype() const;
  void set_targetdisplaytype(::google::protobuf::uint32 value);

  // uint32 TargetId = 4;
  void clear_targetid();
  static const int kTargetIdFieldNumber = 4;
  ::google::protobuf::uint32 targetid() const;
  void set_targetid(::google::protobuf::uint32 value);

  // uint32 X = 5;
  void clear_x();
  static const int kXFieldNumber = 5;
  ::google::protobuf::uint32 x() const;
  void set_x(::google::protobuf::uint32 value);

  // uint32 Y = 6;
  void clear_y();
  static const int kYFieldNumber = 6;
  ::google::protobuf::uint32 y() const;
  void set_y(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Nmea2k.FavouritesInfo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  int displaytype_;
  ::google::protobuf::uint32 id_;
  ::google::protobuf::uint32 targetdisplaytype_;
  ::google::protobuf::uint32 targetid_;
  ::google::protobuf::uint32 x_;
  ::google::protobuf::uint32 y_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_Nmea2k_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ScreenConfigHeader : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Nmea2k.ScreenConfigHeader) */ {
 public:
  ScreenConfigHeader();
  virtual ~ScreenConfigHeader();

  ScreenConfigHeader(const ScreenConfigHeader& from);

  inline ScreenConfigHeader& operator=(const ScreenConfigHeader& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ScreenConfigHeader(ScreenConfigHeader&& from) noexcept
    : ScreenConfigHeader() {
    *this = ::std::move(from);
  }

  inline ScreenConfigHeader& operator=(ScreenConfigHeader&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ScreenConfigHeader& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ScreenConfigHeader* internal_default_instance() {
    return reinterpret_cast<const ScreenConfigHeader*>(
               &_ScreenConfigHeader_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    57;

  void Swap(ScreenConfigHeader* other);
  friend void swap(ScreenConfigHeader& a, ScreenConfigHeader& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ScreenConfigHeader* New() const final {
    return CreateMaybeMessage<ScreenConfigHeader>(NULL);
  }

  ScreenConfigHeader* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ScreenConfigHeader>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ScreenConfigHeader& from);
  void MergeFrom(const ScreenConfigHeader& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ScreenConfigHeader* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .Nmea2k.ConfigRequest.eConfigType DisplayType = 1;
  void clear_displaytype();
  static const int kDisplayTypeFieldNumber = 1;
  ::Nmea2k::ConfigRequest_eConfigType displaytype() const;
  void set_displaytype(::Nmea2k::ConfigRequest_eConfigType value);

  // uint32 Id = 2;
  void clear_id();
  static const int kIdFieldNumber = 2;
  ::google::protobuf::uint32 id() const;
  void set_id(::google::protobuf::uint32 value);

  // uint32 TargetDisplayType = 3;
  void clear_targetdisplaytype();
  static const int kTargetDisplayTypeFieldNumber = 3;
  ::google::protobuf::uint32 targetdisplaytype() const;
  void set_targetdisplaytype(::google::protobuf::uint32 value);

  // uint32 TargetId = 4;
  void clear_targetid();
  static const int kTargetIdFieldNumber = 4;
  ::google::protobuf::uint32 targetid() const;
  void set_targetid(::google::protobuf::uint32 value);

  // uint32 ConfirmationType = 5;
  void clear_confirmationtype();
  static const int kConfirmationTypeFieldNumber = 5;
  ::google::protobuf::uint32 confirmationtype() const;
  void set_confirmationtype(::google::protobuf::uint32 value);

  // uint32 SmoothStart = 6;
  void clear_smoothstart();
  static const int kSmoothStartFieldNumber = 6;
  ::google::protobuf::uint32 smoothstart() const;
  void set_smoothstart(::google::protobuf::uint32 value);

  // uint32 Index = 7;
  void clear_index();
  static const int kIndexFieldNumber = 7;
  ::google::protobuf::uint32 index() const;
  void set_index(::google::protobuf::uint32 value);

  // uint32 ParentIndex = 8;
  void clear_parentindex();
  static const int kParentIndexFieldNumber = 8;
  ::google::protobuf::uint32 parentindex() const;
  void set_parentindex(::google::protobuf::uint32 value);

  // uint32 ControlId = 9;
  void clear_controlid();
  static const int kControlIdFieldNumber = 9;
  ::google::protobuf::uint32 controlid() const;
  void set_controlid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Nmea2k.ScreenConfigHeader)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  int displaytype_;
  ::google::protobuf::uint32 id_;
  ::google::protobuf::uint32 targetdisplaytype_;
  ::google::protobuf::uint32 targetid_;
  ::google::protobuf::uint32 confirmationtype_;
  ::google::protobuf::uint32 smoothstart_;
  ::google::protobuf::uint32 index_;
  ::google::protobuf::uint32 parentindex_;
  ::google::protobuf::uint32 controlid_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_Nmea2k_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ScreenConfigPageImageItem : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Nmea2k.ScreenConfigPageImageItem) */ {
 public:
  ScreenConfigPageImageItem();
  virtual ~ScreenConfigPageImageItem();

  ScreenConfigPageImageItem(const ScreenConfigPageImageItem& from);

  inline ScreenConfigPageImageItem& operator=(const ScreenConfigPageImageItem& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ScreenConfigPageImageItem(ScreenConfigPageImageItem&& from) noexcept
    : ScreenConfigPageImageItem() {
    *this = ::std::move(from);
  }

  inline ScreenConfigPageImageItem& operator=(ScreenConfigPageImageItem&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ScreenConfigPageImageItem& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ScreenConfigPageImageItem* internal_default_instance() {
    return reinterpret_cast<const ScreenConfigPageImageItem*>(
               &_ScreenConfigPageImageItem_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    58;

  void Swap(ScreenConfigPageImageItem* other);
  friend void swap(ScreenConfigPageImageItem& a, ScreenConfigPageImageItem& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ScreenConfigPageImageItem* New() const final {
    return CreateMaybeMessage<ScreenConfigPageImageItem>(NULL);
  }

  ScreenConfigPageImageItem* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ScreenConfigPageImageItem>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ScreenConfigPageImageItem& from);
  void MergeFrom(const ScreenConfigPageImageItem& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ScreenConfigPageImageItem* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string Name = 7;
  void clear_name();
  static const int kNameFieldNumber = 7;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // .Nmea2k.ScreenConfigHeader Header = 1;
  bool has_header() const;
  void clear_header();
  static const int kHeaderFieldNumber = 1;
  private:
  const ::Nmea2k::ScreenConfigHeader& _internal_header() const;
  public:
  const ::Nmea2k::ScreenConfigHeader& header() const;
  ::Nmea2k::ScreenConfigHeader* release_header();
  ::Nmea2k::ScreenConfigHeader* mutable_header();
  void set_allocated_header(::Nmea2k::ScreenConfigHeader* header);

  // float LocationX = 2;
  void clear_locationx();
  static const int kLocationXFieldNumber = 2;
  float locationx() const;
  void set_locationx(float value);

  // float LocationY = 3;
  void clear_locationy();
  static const int kLocationYFieldNumber = 3;
  float locationy() const;
  void set_locationy(float value);

  // float TargetX = 4;
  void clear_targetx();
  static const int kTargetXFieldNumber = 4;
  float targetx() const;
  void set_targetx(float value);

  // float TargetY = 5;
  void clear_targety();
  static const int kTargetYFieldNumber = 5;
  float targety() const;
  void set_targety(float value);

  // uint32 Icon = 6;
  void clear_icon();
  static const int kIconFieldNumber = 6;
  ::google::protobuf::uint32 icon() const;
  void set_icon(::google::protobuf::uint32 value);

  // bool HideWhenOff = 8;
  void clear_hidewhenoff();
  static const int kHideWhenOffFieldNumber = 8;
  bool hidewhenoff() const;
  void set_hidewhenoff(bool value);

  // @@protoc_insertion_point(class_scope:Nmea2k.ScreenConfigPageImageItem)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::Nmea2k::ScreenConfigHeader* header_;
  float locationx_;
  float locationy_;
  float targetx_;
  float targety_;
  ::google::protobuf::uint32 icon_;
  bool hidewhenoff_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_Nmea2k_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ScreenConfigPageGridItem : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Nmea2k.ScreenConfigPageGridItem) */ {
 public:
  ScreenConfigPageGridItem();
  virtual ~ScreenConfigPageGridItem();

  ScreenConfigPageGridItem(const ScreenConfigPageGridItem& from);

  inline ScreenConfigPageGridItem& operator=(const ScreenConfigPageGridItem& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ScreenConfigPageGridItem(ScreenConfigPageGridItem&& from) noexcept
    : ScreenConfigPageGridItem() {
    *this = ::std::move(from);
  }

  inline ScreenConfigPageGridItem& operator=(ScreenConfigPageGridItem&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ScreenConfigPageGridItem& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ScreenConfigPageGridItem* internal_default_instance() {
    return reinterpret_cast<const ScreenConfigPageGridItem*>(
               &_ScreenConfigPageGridItem_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    59;

  void Swap(ScreenConfigPageGridItem* other);
  friend void swap(ScreenConfigPageGridItem& a, ScreenConfigPageGridItem& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ScreenConfigPageGridItem* New() const final {
    return CreateMaybeMessage<ScreenConfigPageGridItem>(NULL);
  }

  ScreenConfigPageGridItem* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ScreenConfigPageGridItem>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ScreenConfigPageGridItem& from);
  void MergeFrom(const ScreenConfigPageGridItem& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ScreenConfigPageGridItem* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string Name = 9;
  void clear_name();
  static const int kNameFieldNumber = 9;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // .Nmea2k.ScreenConfigHeader Header = 1;
  bool has_header() const;
  void clear_header();
  static const int kHeaderFieldNumber = 1;
  private:
  const ::Nmea2k::ScreenConfigHeader& _internal_header() const;
  public:
  const ::Nmea2k::ScreenConfigHeader& header() const;
  ::Nmea2k::ScreenConfigHeader* release_header();
  ::Nmea2k::ScreenConfigHeader* mutable_header();
  void set_allocated_header(::Nmea2k::ScreenConfigHeader* header);

  // uint32 GridX = 2;
  void clear_gridx();
  static const int kGridXFieldNumber = 2;
  ::google::protobuf::uint32 gridx() const;
  void set_gridx(::google::protobuf::uint32 value);

  // uint32 GridY = 3;
  void clear_gridy();
  static const int kGridYFieldNumber = 3;
  ::google::protobuf::uint32 gridy() const;
  void set_gridy(::google::protobuf::uint32 value);

  // float TargetX = 4;
  void clear_targetx();
  static const int kTargetXFieldNumber = 4;
  float targetx() const;
  void set_targetx(float value);

  // float TargetY = 5;
  void clear_targety();
  static const int kTargetYFieldNumber = 5;
  float targety() const;
  void set_targety(float value);

  // float TargetWidth = 6;
  void clear_targetwidth();
  static const int kTargetWidthFieldNumber = 6;
  float targetwidth() const;
  void set_targetwidth(float value);

  // float TargetHeight = 7;
  void clear_targetheight();
  static const int kTargetHeightFieldNumber = 7;
  float targetheight() const;
  void set_targetheight(float value);

  // uint32 Icon = 8;
  void clear_icon();
  static const int kIconFieldNumber = 8;
  ::google::protobuf::uint32 icon() const;
  void set_icon(::google::protobuf::uint32 value);

  // uint32 ColumnSpan = 10;
  void clear_columnspan();
  static const int kColumnSpanFieldNumber = 10;
  ::google::protobuf::uint32 columnspan() const;
  void set_columnspan(::google::protobuf::uint32 value);

  // uint32 RowSpan = 11;
  void clear_rowspan();
  static const int kRowSpanFieldNumber = 11;
  ::google::protobuf::uint32 rowspan() const;
  void set_rowspan(::google::protobuf::uint32 value);

  // uint32 DoubleThrowType = 12;
  void clear_doublethrowtype();
  static const int kDoubleThrowTypeFieldNumber = 12;
  ::google::protobuf::uint32 doublethrowtype() const;
  void set_doublethrowtype(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Nmea2k.ScreenConfigPageGridItem)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::Nmea2k::ScreenConfigHeader* header_;
  ::google::protobuf::uint32 gridx_;
  ::google::protobuf::uint32 gridy_;
  float targetx_;
  float targety_;
  float targetwidth_;
  float targetheight_;
  ::google::protobuf::uint32 icon_;
  ::google::protobuf::uint32 columnspan_;
  ::google::protobuf::uint32 rowspan_;
  ::google::protobuf::uint32 doublethrowtype_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_Nmea2k_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ScreenConfigPageImage : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Nmea2k.ScreenConfigPageImage) */ {
 public:
  ScreenConfigPageImage();
  virtual ~ScreenConfigPageImage();

  ScreenConfigPageImage(const ScreenConfigPageImage& from);

  inline ScreenConfigPageImage& operator=(const ScreenConfigPageImage& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ScreenConfigPageImage(ScreenConfigPageImage&& from) noexcept
    : ScreenConfigPageImage() {
    *this = ::std::move(from);
  }

  inline ScreenConfigPageImage& operator=(ScreenConfigPageImage&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ScreenConfigPageImage& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ScreenConfigPageImage* internal_default_instance() {
    return reinterpret_cast<const ScreenConfigPageImage*>(
               &_ScreenConfigPageImage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    60;

  void Swap(ScreenConfigPageImage* other);
  friend void swap(ScreenConfigPageImage& a, ScreenConfigPageImage& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ScreenConfigPageImage* New() const final {
    return CreateMaybeMessage<ScreenConfigPageImage>(NULL);
  }

  ScreenConfigPageImage* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ScreenConfigPageImage>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ScreenConfigPageImage& from);
  void MergeFrom(const ScreenConfigPageImage& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ScreenConfigPageImage* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string FileName = 12;
  void clear_filename();
  static const int kFileNameFieldNumber = 12;
  const ::std::string& filename() const;
  void set_filename(const ::std::string& value);
  #if LANG_CXX11
  void set_filename(::std::string&& value);
  #endif
  void set_filename(const char* value);
  void set_filename(const char* value, size_t size);
  ::std::string* mutable_filename();
  ::std::string* release_filename();
  void set_allocated_filename(::std::string* filename);

  // .Nmea2k.ScreenConfigHeader Header = 1;
  bool has_header() const;
  void clear_header();
  static const int kHeaderFieldNumber = 1;
  private:
  const ::Nmea2k::ScreenConfigHeader& _internal_header() const;
  public:
  const ::Nmea2k::ScreenConfigHeader& header() const;
  ::Nmea2k::ScreenConfigHeader* release_header();
  ::Nmea2k::ScreenConfigHeader* mutable_header();
  void set_allocated_header(::Nmea2k::ScreenConfigHeader* header);

  // uint32 GridX = 2;
  void clear_gridx();
  static const int kGridXFieldNumber = 2;
  ::google::protobuf::uint32 gridx() const;
  void set_gridx(::google::protobuf::uint32 value);

  // uint32 GridY = 3;
  void clear_gridy();
  static const int kGridYFieldNumber = 3;
  ::google::protobuf::uint32 gridy() const;
  void set_gridy(::google::protobuf::uint32 value);

  // uint32 GridWidth = 4;
  void clear_gridwidth();
  static const int kGridWidthFieldNumber = 4;
  ::google::protobuf::uint32 gridwidth() const;
  void set_gridwidth(::google::protobuf::uint32 value);

  // uint32 GridHeight = 5;
  void clear_gridheight();
  static const int kGridHeightFieldNumber = 5;
  ::google::protobuf::uint32 gridheight() const;
  void set_gridheight(::google::protobuf::uint32 value);

  // float SourceWidth = 6;
  void clear_sourcewidth();
  static const int kSourceWidthFieldNumber = 6;
  float sourcewidth() const;
  void set_sourcewidth(float value);

  // float SourceHeight = 7;
  void clear_sourceheight();
  static const int kSourceHeightFieldNumber = 7;
  float sourceheight() const;
  void set_sourceheight(float value);

  // float TargetX = 8;
  void clear_targetx();
  static const int kTargetXFieldNumber = 8;
  float targetx() const;
  void set_targetx(float value);

  // float TargetY = 9;
  void clear_targety();
  static const int kTargetYFieldNumber = 9;
  float targety() const;
  void set_targety(float value);

  // float TargetWidth = 10;
  void clear_targetwidth();
  static const int kTargetWidthFieldNumber = 10;
  float targetwidth() const;
  void set_targetwidth(float value);

  // float TargetHeight = 11;
  void clear_targetheight();
  static const int kTargetHeightFieldNumber = 11;
  float targetheight() const;
  void set_targetheight(float value);

  // uint32 BackgroundColourR = 13;
  void clear_backgroundcolourr();
  static const int kBackgroundColourRFieldNumber = 13;
  ::google::protobuf::uint32 backgroundcolourr() const;
  void set_backgroundcolourr(::google::protobuf::uint32 value);

  // uint32 BackgroundColourG = 14;
  void clear_backgroundcolourg();
  static const int kBackgroundColourGFieldNumber = 14;
  ::google::protobuf::uint32 backgroundcolourg() const;
  void set_backgroundcolourg(::google::protobuf::uint32 value);

  // uint32 BackgroundColourB = 15;
  void clear_backgroundcolourb();
  static const int kBackgroundColourBFieldNumber = 15;
  ::google::protobuf::uint32 backgroundcolourb() const;
  void set_backgroundcolourb(::google::protobuf::uint32 value);

  // uint32 ShowBackground = 16;
  void clear_showbackground();
  static const int kShowBackgroundFieldNumber = 16;
  ::google::protobuf::uint32 showbackground() const;
  void set_showbackground(::google::protobuf::uint32 value);

  // uint32 CropToFit = 17;
  void clear_croptofit();
  static const int kCropToFitFieldNumber = 17;
  ::google::protobuf::uint32 croptofit() const;
  void set_croptofit(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Nmea2k.ScreenConfigPageImage)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr filename_;
  ::Nmea2k::ScreenConfigHeader* header_;
  ::google::protobuf::uint32 gridx_;
  ::google::protobuf::uint32 gridy_;
  ::google::protobuf::uint32 gridwidth_;
  ::google::protobuf::uint32 gridheight_;
  float sourcewidth_;
  float sourceheight_;
  float targetx_;
  float targety_;
  float targetwidth_;
  float targetheight_;
  ::google::protobuf::uint32 backgroundcolourr_;
  ::google::protobuf::uint32 backgroundcolourg_;
  ::google::protobuf::uint32 backgroundcolourb_;
  ::google::protobuf::uint32 showbackground_;
  ::google::protobuf::uint32 croptofit_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_Nmea2k_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ScreenConfigPage : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Nmea2k.ScreenConfigPage) */ {
 public:
  ScreenConfigPage();
  virtual ~ScreenConfigPage();

  ScreenConfigPage(const ScreenConfigPage& from);

  inline ScreenConfigPage& operator=(const ScreenConfigPage& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ScreenConfigPage(ScreenConfigPage&& from) noexcept
    : ScreenConfigPage() {
    *this = ::std::move(from);
  }

  inline ScreenConfigPage& operator=(ScreenConfigPage&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ScreenConfigPage& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ScreenConfigPage* internal_default_instance() {
    return reinterpret_cast<const ScreenConfigPage*>(
               &_ScreenConfigPage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    61;

  void Swap(ScreenConfigPage* other);
  friend void swap(ScreenConfigPage& a, ScreenConfigPage& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ScreenConfigPage* New() const final {
    return CreateMaybeMessage<ScreenConfigPage>(NULL);
  }

  ScreenConfigPage* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ScreenConfigPage>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ScreenConfigPage& from);
  void MergeFrom(const ScreenConfigPage& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ScreenConfigPage* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .Nmea2k.ScreenConfigHeader Header = 1;
  bool has_header() const;
  void clear_header();
  static const int kHeaderFieldNumber = 1;
  private:
  const ::Nmea2k::ScreenConfigHeader& _internal_header() const;
  public:
  const ::Nmea2k::ScreenConfigHeader& header() const;
  ::Nmea2k::ScreenConfigHeader* release_header();
  ::Nmea2k::ScreenConfigHeader* mutable_header();
  void set_allocated_header(::Nmea2k::ScreenConfigHeader* header);

  // @@protoc_insertion_point(class_scope:Nmea2k.ScreenConfigPage)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::Nmea2k::ScreenConfigHeader* header_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_Nmea2k_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ScreenConfigMode : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Nmea2k.ScreenConfigMode) */ {
 public:
  ScreenConfigMode();
  virtual ~ScreenConfigMode();

  ScreenConfigMode(const ScreenConfigMode& from);

  inline ScreenConfigMode& operator=(const ScreenConfigMode& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ScreenConfigMode(ScreenConfigMode&& from) noexcept
    : ScreenConfigMode() {
    *this = ::std::move(from);
  }

  inline ScreenConfigMode& operator=(ScreenConfigMode&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ScreenConfigMode& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ScreenConfigMode* internal_default_instance() {
    return reinterpret_cast<const ScreenConfigMode*>(
               &_ScreenConfigMode_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    62;

  void Swap(ScreenConfigMode* other);
  friend void swap(ScreenConfigMode& a, ScreenConfigMode& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ScreenConfigMode* New() const final {
    return CreateMaybeMessage<ScreenConfigMode>(NULL);
  }

  ScreenConfigMode* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ScreenConfigMode>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ScreenConfigMode& from);
  void MergeFrom(const ScreenConfigMode& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ScreenConfigMode* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string Name = 2;
  void clear_name();
  static const int kNameFieldNumber = 2;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // .Nmea2k.ScreenConfigHeader Header = 1;
  bool has_header() const;
  void clear_header();
  static const int kHeaderFieldNumber = 1;
  private:
  const ::Nmea2k::ScreenConfigHeader& _internal_header() const;
  public:
  const ::Nmea2k::ScreenConfigHeader& header() const;
  ::Nmea2k::ScreenConfigHeader* release_header();
  ::Nmea2k::ScreenConfigHeader* mutable_header();
  void set_allocated_header(::Nmea2k::ScreenConfigHeader* header);

  // @@protoc_insertion_point(class_scope:Nmea2k.ScreenConfigMode)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::Nmea2k::ScreenConfigHeader* header_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_Nmea2k_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ScreenConfig : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Nmea2k.ScreenConfig) */ {
 public:
  ScreenConfig();
  virtual ~ScreenConfig();

  ScreenConfig(const ScreenConfig& from);

  inline ScreenConfig& operator=(const ScreenConfig& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ScreenConfig(ScreenConfig&& from) noexcept
    : ScreenConfig() {
    *this = ::std::move(from);
  }

  inline ScreenConfig& operator=(ScreenConfig&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ScreenConfig& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ScreenConfig* internal_default_instance() {
    return reinterpret_cast<const ScreenConfig*>(
               &_ScreenConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    63;

  void Swap(ScreenConfig* other);
  friend void swap(ScreenConfig& a, ScreenConfig& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ScreenConfig* New() const final {
    return CreateMaybeMessage<ScreenConfig>(NULL);
  }

  ScreenConfig* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ScreenConfig>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ScreenConfig& from);
  void MergeFrom(const ScreenConfig& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ScreenConfig* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string DisplayName = 5;
  void clear_displayname();
  static const int kDisplayNameFieldNumber = 5;
  const ::std::string& displayname() const;
  void set_displayname(const ::std::string& value);
  #if LANG_CXX11
  void set_displayname(::std::string&& value);
  #endif
  void set_displayname(const char* value);
  void set_displayname(const char* value, size_t size);
  ::std::string* mutable_displayname();
  ::std::string* release_displayname();
  void set_allocated_displayname(::std::string* displayname);

  // string RelativePath = 6;
  void clear_relativepath();
  static const int kRelativePathFieldNumber = 6;
  const ::std::string& relativepath() const;
  void set_relativepath(const ::std::string& value);
  #if LANG_CXX11
  void set_relativepath(::std::string&& value);
  #endif
  void set_relativepath(const char* value);
  void set_relativepath(const char* value, size_t size);
  ::std::string* mutable_relativepath();
  ::std::string* release_relativepath();
  void set_allocated_relativepath(::std::string* relativepath);

  // .Nmea2k.ScreenConfigHeader Header = 1;
  bool has_header() const;
  void clear_header();
  static const int kHeaderFieldNumber = 1;
  private:
  const ::Nmea2k::ScreenConfigHeader& _internal_header() const;
  public:
  const ::Nmea2k::ScreenConfigHeader& header() const;
  ::Nmea2k::ScreenConfigHeader* release_header();
  ::Nmea2k::ScreenConfigHeader* mutable_header();
  void set_allocated_header(::Nmea2k::ScreenConfigHeader* header);

  // uint32 GridWidth = 2;
  void clear_gridwidth();
  static const int kGridWidthFieldNumber = 2;
  ::google::protobuf::uint32 gridwidth() const;
  void set_gridwidth(::google::protobuf::uint32 value);

  // uint32 GridHeight = 3;
  void clear_gridheight();
  static const int kGridHeightFieldNumber = 3;
  ::google::protobuf::uint32 gridheight() const;
  void set_gridheight(::google::protobuf::uint32 value);

  // uint32 Landscape = 4;
  void clear_landscape();
  static const int kLandscapeFieldNumber = 4;
  ::google::protobuf::uint32 landscape() const;
  void set_landscape(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Nmea2k.ScreenConfig)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr displayname_;
  ::google::protobuf::internal::ArenaStringPtr relativepath_;
  ::Nmea2k::ScreenConfigHeader* header_;
  ::google::protobuf::uint32 gridwidth_;
  ::google::protobuf::uint32 gridheight_;
  ::google::protobuf::uint32 landscape_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_Nmea2k_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GNSSDevice : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Nmea2k.GNSSDevice) */ {
 public:
  GNSSDevice();
  virtual ~GNSSDevice();

  GNSSDevice(const GNSSDevice& from);

  inline GNSSDevice& operator=(const GNSSDevice& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GNSSDevice(GNSSDevice&& from) noexcept
    : GNSSDevice() {
    *this = ::std::move(from);
  }

  inline GNSSDevice& operator=(GNSSDevice&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GNSSDevice& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GNSSDevice* internal_default_instance() {
    return reinterpret_cast<const GNSSDevice*>(
               &_GNSSDevice_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    64;

  void Swap(GNSSDevice* other);
  friend void swap(GNSSDevice& a, GNSSDevice& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GNSSDevice* New() const final {
    return CreateMaybeMessage<GNSSDevice>(NULL);
  }

  GNSSDevice* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GNSSDevice>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const GNSSDevice& from);
  void MergeFrom(const GNSSDevice& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GNSSDevice* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string NameUTF8 = 3;
  void clear_nameutf8();
  static const int kNameUTF8FieldNumber = 3;
  const ::std::string& nameutf8() const;
  void set_nameutf8(const ::std::string& value);
  #if LANG_CXX11
  void set_nameutf8(::std::string&& value);
  #endif
  void set_nameutf8(const char* value);
  void set_nameutf8(const char* value, size_t size);
  ::std::string* mutable_nameutf8();
  ::std::string* release_nameutf8();
  void set_allocated_nameutf8(::std::string* nameutf8);

  // .Nmea2k.Instance Instance = 4;
  bool has_instance() const;
  void clear_instance();
  static const int kInstanceFieldNumber = 4;
  private:
  const ::Nmea2k::Instance& _internal_instance() const;
  public:
  const ::Nmea2k::Instance& instance() const;
  ::Nmea2k::Instance* release_instance();
  ::Nmea2k::Instance* mutable_instance();
  void set_allocated_instance(::Nmea2k::Instance* instance);

  // .Nmea2k.ConfigRequest.eConfigType DisplayType = 1;
  void clear_displaytype();
  static const int kDisplayTypeFieldNumber = 1;
  ::Nmea2k::ConfigRequest_eConfigType displaytype() const;
  void set_displaytype(::Nmea2k::ConfigRequest_eConfigType value);

  // uint32 Id = 2;
  void clear_id();
  static const int kIdFieldNumber = 2;
  ::google::protobuf::uint32 id() const;
  void set_id(::google::protobuf::uint32 value);

  // bool IsExternal = 5;
  void clear_isexternal();
  static const int kIsExternalFieldNumber = 5;
  bool isexternal() const;
  void set_isexternal(bool value);

  // @@protoc_insertion_point(class_scope:Nmea2k.GNSSDevice)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr nameutf8_;
  ::Nmea2k::Instance* instance_;
  int displaytype_;
  ::google::protobuf::uint32 id_;
  bool isexternal_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_Nmea2k_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class EngineDevice : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Nmea2k.EngineDevice) */ {
 public:
  EngineDevice();
  virtual ~EngineDevice();

  EngineDevice(const EngineDevice& from);

  inline EngineDevice& operator=(const EngineDevice& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  EngineDevice(EngineDevice&& from) noexcept
    : EngineDevice() {
    *this = ::std::move(from);
  }

  inline EngineDevice& operator=(EngineDevice&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const EngineDevice& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const EngineDevice* internal_default_instance() {
    return reinterpret_cast<const EngineDevice*>(
               &_EngineDevice_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    65;

  void Swap(EngineDevice* other);
  friend void swap(EngineDevice& a, EngineDevice& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline EngineDevice* New() const final {
    return CreateMaybeMessage<EngineDevice>(NULL);
  }

  EngineDevice* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<EngineDevice>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const EngineDevice& from);
  void MergeFrom(const EngineDevice& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EngineDevice* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef EngineDevice_eEngineType eEngineType;
  static const eEngineType SmartCraft =
    EngineDevice_eEngineType_SmartCraft;
  static const eEngineType NMEA2000 =
    EngineDevice_eEngineType_NMEA2000;
  static inline bool eEngineType_IsValid(int value) {
    return EngineDevice_eEngineType_IsValid(value);
  }
  static const eEngineType eEngineType_MIN =
    EngineDevice_eEngineType_eEngineType_MIN;
  static const eEngineType eEngineType_MAX =
    EngineDevice_eEngineType_eEngineType_MAX;
  static const int eEngineType_ARRAYSIZE =
    EngineDevice_eEngineType_eEngineType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  eEngineType_descriptor() {
    return EngineDevice_eEngineType_descriptor();
  }
  static inline const ::std::string& eEngineType_Name(eEngineType value) {
    return EngineDevice_eEngineType_Name(value);
  }
  static inline bool eEngineType_Parse(const ::std::string& name,
      eEngineType* value) {
    return EngineDevice_eEngineType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // string NameUTF8 = 3;
  void clear_nameutf8();
  static const int kNameUTF8FieldNumber = 3;
  const ::std::string& nameutf8() const;
  void set_nameutf8(const ::std::string& value);
  #if LANG_CXX11
  void set_nameutf8(::std::string&& value);
  #endif
  void set_nameutf8(const char* value);
  void set_nameutf8(const char* value, size_t size);
  ::std::string* mutable_nameutf8();
  ::std::string* release_nameutf8();
  void set_allocated_nameutf8(::std::string* nameutf8);

  // string SoftwareId = 5;
  void clear_softwareid();
  static const int kSoftwareIdFieldNumber = 5;
  const ::std::string& softwareid() const;
  void set_softwareid(const ::std::string& value);
  #if LANG_CXX11
  void set_softwareid(::std::string&& value);
  #endif
  void set_softwareid(const char* value);
  void set_softwareid(const char* value, size_t size);
  ::std::string* mutable_softwareid();
  ::std::string* release_softwareid();
  void set_allocated_softwareid(::std::string* softwareid);

  // string CalibrationId = 6;
  void clear_calibrationid();
  static const int kCalibrationIdFieldNumber = 6;
  const ::std::string& calibrationid() const;
  void set_calibrationid(const ::std::string& value);
  #if LANG_CXX11
  void set_calibrationid(::std::string&& value);
  #endif
  void set_calibrationid(const char* value);
  void set_calibrationid(const char* value, size_t size);
  ::std::string* mutable_calibrationid();
  ::std::string* release_calibrationid();
  void set_allocated_calibrationid(::std::string* calibrationid);

  // string SerialNumber = 7;
  void clear_serialnumber();
  static const int kSerialNumberFieldNumber = 7;
  const ::std::string& serialnumber() const;
  void set_serialnumber(const ::std::string& value);
  #if LANG_CXX11
  void set_serialnumber(::std::string&& value);
  #endif
  void set_serialnumber(const char* value);
  void set_serialnumber(const char* value, size_t size);
  ::std::string* mutable_serialnumber();
  ::std::string* release_serialnumber();
  void set_allocated_serialnumber(::std::string* serialnumber);

  // string ECUSerialNumber = 8;
  void clear_ecuserialnumber();
  static const int kECUSerialNumberFieldNumber = 8;
  const ::std::string& ecuserialnumber() const;
  void set_ecuserialnumber(const ::std::string& value);
  #if LANG_CXX11
  void set_ecuserialnumber(::std::string&& value);
  #endif
  void set_ecuserialnumber(const char* value);
  void set_ecuserialnumber(const char* value, size_t size);
  ::std::string* mutable_ecuserialnumber();
  ::std::string* release_ecuserialnumber();
  void set_allocated_ecuserialnumber(::std::string* ecuserialnumber);

  // .Nmea2k.Instance Instance = 4;
  bool has_instance() const;
  void clear_instance();
  static const int kInstanceFieldNumber = 4;
  private:
  const ::Nmea2k::Instance& _internal_instance() const;
  public:
  const ::Nmea2k::Instance& instance() const;
  ::Nmea2k::Instance* release_instance();
  ::Nmea2k::Instance* mutable_instance();
  void set_allocated_instance(::Nmea2k::Instance* instance);

  // .Nmea2k.ConfigRequest.eConfigType DisplayType = 1;
  void clear_displaytype();
  static const int kDisplayTypeFieldNumber = 1;
  ::Nmea2k::ConfigRequest_eConfigType displaytype() const;
  void set_displaytype(::Nmea2k::ConfigRequest_eConfigType value);

  // uint32 Id = 2;
  void clear_id();
  static const int kIdFieldNumber = 2;
  ::google::protobuf::uint32 id() const;
  void set_id(::google::protobuf::uint32 value);

  // .Nmea2k.EngineDevice.eEngineType EngineType = 9;
  void clear_enginetype();
  static const int kEngineTypeFieldNumber = 9;
  ::Nmea2k::EngineDevice_eEngineType enginetype() const;
  void set_enginetype(::Nmea2k::EngineDevice_eEngineType value);

  // @@protoc_insertion_point(class_scope:Nmea2k.EngineDevice)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr nameutf8_;
  ::google::protobuf::internal::ArenaStringPtr softwareid_;
  ::google::protobuf::internal::ArenaStringPtr calibrationid_;
  ::google::protobuf::internal::ArenaStringPtr serialnumber_;
  ::google::protobuf::internal::ArenaStringPtr ecuserialnumber_;
  ::Nmea2k::Instance* instance_;
  int displaytype_;
  ::google::protobuf::uint32 id_;
  int enginetype_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_Nmea2k_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CZoneRawConfig : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Nmea2k.CZoneRawConfig) */ {
 public:
  CZoneRawConfig();
  virtual ~CZoneRawConfig();

  CZoneRawConfig(const CZoneRawConfig& from);

  inline CZoneRawConfig& operator=(const CZoneRawConfig& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CZoneRawConfig(CZoneRawConfig&& from) noexcept
    : CZoneRawConfig() {
    *this = ::std::move(from);
  }

  inline CZoneRawConfig& operator=(CZoneRawConfig&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const CZoneRawConfig& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CZoneRawConfig* internal_default_instance() {
    return reinterpret_cast<const CZoneRawConfig*>(
               &_CZoneRawConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    66;

  void Swap(CZoneRawConfig* other);
  friend void swap(CZoneRawConfig& a, CZoneRawConfig& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CZoneRawConfig* New() const final {
    return CreateMaybeMessage<CZoneRawConfig>(NULL);
  }

  CZoneRawConfig* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CZoneRawConfig>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CZoneRawConfig& from);
  void MergeFrom(const CZoneRawConfig& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CZoneRawConfig* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes Content = 2;
  void clear_content();
  static const int kContentFieldNumber = 2;
  const ::std::string& content() const;
  void set_content(const ::std::string& value);
  #if LANG_CXX11
  void set_content(::std::string&& value);
  #endif
  void set_content(const char* value);
  void set_content(const void* value, size_t size);
  ::std::string* mutable_content();
  ::std::string* release_content();
  void set_allocated_content(::std::string* content);

  // uint32 Type = 1;
  void clear_type();
  static const int kTypeFieldNumber = 1;
  ::google::protobuf::uint32 type() const;
  void set_type(::google::protobuf::uint32 value);

  // uint32 Length = 3;
  void clear_length();
  static const int kLengthFieldNumber = 3;
  ::google::protobuf::uint32 length() const;
  void set_length(::google::protobuf::uint32 value);

  // uint32 SizeOfData = 4;
  void clear_sizeofdata();
  static const int kSizeOfDataFieldNumber = 4;
  ::google::protobuf::uint32 sizeofdata() const;
  void set_sizeofdata(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Nmea2k.CZoneRawConfig)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr content_;
  ::google::protobuf::uint32 type_;
  ::google::protobuf::uint32 length_;
  ::google::protobuf::uint32 sizeofdata_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_Nmea2k_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SwitchPositiveNegtive : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Nmea2k.SwitchPositiveNegtive) */ {
 public:
  SwitchPositiveNegtive();
  virtual ~SwitchPositiveNegtive();

  SwitchPositiveNegtive(const SwitchPositiveNegtive& from);

  inline SwitchPositiveNegtive& operator=(const SwitchPositiveNegtive& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SwitchPositiveNegtive(SwitchPositiveNegtive&& from) noexcept
    : SwitchPositiveNegtive() {
    *this = ::std::move(from);
  }

  inline SwitchPositiveNegtive& operator=(SwitchPositiveNegtive&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SwitchPositiveNegtive& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SwitchPositiveNegtive* internal_default_instance() {
    return reinterpret_cast<const SwitchPositiveNegtive*>(
               &_SwitchPositiveNegtive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    67;

  void Swap(SwitchPositiveNegtive* other);
  friend void swap(SwitchPositiveNegtive& a, SwitchPositiveNegtive& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SwitchPositiveNegtive* New() const final {
    return CreateMaybeMessage<SwitchPositiveNegtive>(NULL);
  }

  SwitchPositiveNegtive* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SwitchPositiveNegtive>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SwitchPositiveNegtive& from);
  void MergeFrom(const SwitchPositiveNegtive& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SwitchPositiveNegtive* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef SwitchPositiveNegtive_eSwitchPositiveNegtiveMode eSwitchPositiveNegtiveMode;
  static const eSwitchPositiveNegtiveMode SwitchBatteryPositive =
    SwitchPositiveNegtive_eSwitchPositiveNegtiveMode_SwitchBatteryPositive;
  static const eSwitchPositiveNegtiveMode SwitchBatteryNegtive =
    SwitchPositiveNegtive_eSwitchPositiveNegtiveMode_SwitchBatteryNegtive;
  static inline bool eSwitchPositiveNegtiveMode_IsValid(int value) {
    return SwitchPositiveNegtive_eSwitchPositiveNegtiveMode_IsValid(value);
  }
  static const eSwitchPositiveNegtiveMode eSwitchPositiveNegtiveMode_MIN =
    SwitchPositiveNegtive_eSwitchPositiveNegtiveMode_eSwitchPositiveNegtiveMode_MIN;
  static const eSwitchPositiveNegtiveMode eSwitchPositiveNegtiveMode_MAX =
    SwitchPositiveNegtive_eSwitchPositiveNegtiveMode_eSwitchPositiveNegtiveMode_MAX;
  static const int eSwitchPositiveNegtiveMode_ARRAYSIZE =
    SwitchPositiveNegtive_eSwitchPositiveNegtiveMode_eSwitchPositiveNegtiveMode_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  eSwitchPositiveNegtiveMode_descriptor() {
    return SwitchPositiveNegtive_eSwitchPositiveNegtiveMode_descriptor();
  }
  static inline const ::std::string& eSwitchPositiveNegtiveMode_Name(eSwitchPositiveNegtiveMode value) {
    return SwitchPositiveNegtive_eSwitchPositiveNegtiveMode_Name(value);
  }
  static inline bool eSwitchPositiveNegtiveMode_Parse(const ::std::string& name,
      eSwitchPositiveNegtiveMode* value) {
    return SwitchPositiveNegtive_eSwitchPositiveNegtiveMode_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // uint32 ChannelAddress = 1;
  void clear_channeladdress();
  static const int kChannelAddressFieldNumber = 1;
  ::google::protobuf::uint32 channeladdress() const;
  void set_channeladdress(::google::protobuf::uint32 value);

  // uint32 Channel = 2;
  void clear_channel();
  static const int kChannelFieldNumber = 2;
  ::google::protobuf::uint32 channel() const;
  void set_channel(::google::protobuf::uint32 value);

  // .Nmea2k.SwitchPositiveNegtive.eSwitchPositiveNegtiveMode Mode = 3;
  void clear_mode();
  static const int kModeFieldNumber = 3;
  ::Nmea2k::SwitchPositiveNegtive_eSwitchPositiveNegtiveMode mode() const;
  void set_mode(::Nmea2k::SwitchPositiveNegtive_eSwitchPositiveNegtiveMode value);

  // uint32 BinaryStatusIndex = 4;
  void clear_binarystatusindex();
  static const int kBinaryStatusIndexFieldNumber = 4;
  ::google::protobuf::uint32 binarystatusindex() const;
  void set_binarystatusindex(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Nmea2k.SwitchPositiveNegtive)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 channeladdress_;
  ::google::protobuf::uint32 channel_;
  int mode_;
  ::google::protobuf::uint32 binarystatusindex_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_Nmea2k_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class RTCoreMapEntry_AlarmsEntry_DoNotUse : public ::google::protobuf::internal::MapEntry<RTCoreMapEntry_AlarmsEntry_DoNotUse, 
    ::std::string, ::Nmea2k::Alarm,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
    0 > {
public:
  typedef ::google::protobuf::internal::MapEntry<RTCoreMapEntry_AlarmsEntry_DoNotUse, 
    ::std::string, ::Nmea2k::Alarm,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
    0 > SuperType;
  RTCoreMapEntry_AlarmsEntry_DoNotUse();
  RTCoreMapEntry_AlarmsEntry_DoNotUse(::google::protobuf::Arena* arena);
  void MergeFrom(const RTCoreMapEntry_AlarmsEntry_DoNotUse& other);
  static const RTCoreMapEntry_AlarmsEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const RTCoreMapEntry_AlarmsEntry_DoNotUse*>(&_RTCoreMapEntry_AlarmsEntry_DoNotUse_default_instance_); }
  void MergeFrom(const ::google::protobuf::Message& other) final;
  ::google::protobuf::Metadata GetMetadata() const;
};

// -------------------------------------------------------------------

class RTCoreMapEntry : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Nmea2k.RTCoreMapEntry) */ {
 public:
  RTCoreMapEntry();
  virtual ~RTCoreMapEntry();

  RTCoreMapEntry(const RTCoreMapEntry& from);

  inline RTCoreMapEntry& operator=(const RTCoreMapEntry& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RTCoreMapEntry(RTCoreMapEntry&& from) noexcept
    : RTCoreMapEntry() {
    *this = ::std::move(from);
  }

  inline RTCoreMapEntry& operator=(RTCoreMapEntry&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const RTCoreMapEntry& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RTCoreMapEntry* internal_default_instance() {
    return reinterpret_cast<const RTCoreMapEntry*>(
               &_RTCoreMapEntry_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    69;

  void Swap(RTCoreMapEntry* other);
  friend void swap(RTCoreMapEntry& a, RTCoreMapEntry& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RTCoreMapEntry* New() const final {
    return CreateMaybeMessage<RTCoreMapEntry>(NULL);
  }

  RTCoreMapEntry* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<RTCoreMapEntry>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const RTCoreMapEntry& from);
  void MergeFrom(const RTCoreMapEntry& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RTCoreMapEntry* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  // map<string, .Nmea2k.Alarm> Alarms = 6;
  int alarms_size() const;
  void clear_alarms();
  static const int kAlarmsFieldNumber = 6;
  const ::google::protobuf::Map< ::std::string, ::Nmea2k::Alarm >&
      alarms() const;
  ::google::protobuf::Map< ::std::string, ::Nmea2k::Alarm >*
      mutable_alarms();

  // repeated .Nmea2k.CircuitDevice Circuits = 7;
  int circuits_size() const;
  void clear_circuits();
  static const int kCircuitsFieldNumber = 7;
  ::Nmea2k::CircuitDevice* mutable_circuits(int index);
  ::google::protobuf::RepeatedPtrField< ::Nmea2k::CircuitDevice >*
      mutable_circuits();
  const ::Nmea2k::CircuitDevice& circuits(int index) const;
  ::Nmea2k::CircuitDevice* add_circuits();
  const ::google::protobuf::RepeatedPtrField< ::Nmea2k::CircuitDevice >&
      circuits() const;

  // .Nmea2k.CircuitLoad CircuitLoads = 2;
  bool has_circuitloads() const;
  void clear_circuitloads();
  static const int kCircuitLoadsFieldNumber = 2;
  private:
  const ::Nmea2k::CircuitLoad& _internal_circuitloads() const;
  public:
  const ::Nmea2k::CircuitLoad& circuitloads() const;
  ::Nmea2k::CircuitLoad* release_circuitloads();
  ::Nmea2k::CircuitLoad* mutable_circuitloads();
  void set_allocated_circuitloads(::Nmea2k::CircuitLoad* circuitloads);

  // .Nmea2k.MeteringDevice DCMeters = 3;
  bool has_dcmeters() const;
  void clear_dcmeters();
  static const int kDCMetersFieldNumber = 3;
  private:
  const ::Nmea2k::MeteringDevice& _internal_dcmeters() const;
  public:
  const ::Nmea2k::MeteringDevice& dcmeters() const;
  ::Nmea2k::MeteringDevice* release_dcmeters();
  ::Nmea2k::MeteringDevice* mutable_dcmeters();
  void set_allocated_dcmeters(::Nmea2k::MeteringDevice* dcmeters);

  // .Nmea2k.MonitoringDevice MonitoringDevice = 4;
  bool has_monitoringdevice() const;
  void clear_monitoringdevice();
  static const int kMonitoringDeviceFieldNumber = 4;
  private:
  const ::Nmea2k::MonitoringDevice& _internal_monitoringdevice() const;
  public:
  const ::Nmea2k::MonitoringDevice& monitoringdevice() const;
  ::Nmea2k::MonitoringDevice* release_monitoringdevice();
  ::Nmea2k::MonitoringDevice* mutable_monitoringdevice();
  void set_allocated_monitoringdevice(::Nmea2k::MonitoringDevice* monitoringdevice);

  // .Nmea2k.SwitchPositiveNegtive SwitchPositiveNegtive = 5;
  bool has_switchpositivenegtive() const;
  void clear_switchpositivenegtive();
  static const int kSwitchPositiveNegtiveFieldNumber = 5;
  private:
  const ::Nmea2k::SwitchPositiveNegtive& _internal_switchpositivenegtive() const;
  public:
  const ::Nmea2k::SwitchPositiveNegtive& switchpositivenegtive() const;
  ::Nmea2k::SwitchPositiveNegtive* release_switchpositivenegtive();
  ::Nmea2k::SwitchPositiveNegtive* mutable_switchpositivenegtive();
  void set_allocated_switchpositivenegtive(::Nmea2k::SwitchPositiveNegtive* switchpositivenegtive);

  // .Nmea2k.ConfigRequest.eConfigType DisplayType = 1;
  void clear_displaytype();
  static const int kDisplayTypeFieldNumber = 1;
  ::Nmea2k::ConfigRequest_eConfigType displaytype() const;
  void set_displaytype(::Nmea2k::ConfigRequest_eConfigType value);

  // @@protoc_insertion_point(class_scope:Nmea2k.RTCoreMapEntry)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::MapField<
      RTCoreMapEntry_AlarmsEntry_DoNotUse,
      ::std::string, ::Nmea2k::Alarm,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
      0 > alarms_;
  ::google::protobuf::RepeatedPtrField< ::Nmea2k::CircuitDevice > circuits_;
  ::Nmea2k::CircuitLoad* circuitloads_;
  ::Nmea2k::MeteringDevice* dcmeters_;
  ::Nmea2k::MonitoringDevice* monitoringdevice_;
  ::Nmea2k::SwitchPositiveNegtive* switchpositivenegtive_;
  int displaytype_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_Nmea2k_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class RTCoreLogicalIdToDeviceConfig_CircuitLoadsEntry_DoNotUse : public ::google::protobuf::internal::MapEntry<RTCoreLogicalIdToDeviceConfig_CircuitLoadsEntry_DoNotUse, 
    ::google::protobuf::uint32, ::Nmea2k::RTCoreMapEntry,
    ::google::protobuf::internal::WireFormatLite::TYPE_UINT32,
    ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
    0 > {
public:
  typedef ::google::protobuf::internal::MapEntry<RTCoreLogicalIdToDeviceConfig_CircuitLoadsEntry_DoNotUse, 
    ::google::protobuf::uint32, ::Nmea2k::RTCoreMapEntry,
    ::google::protobuf::internal::WireFormatLite::TYPE_UINT32,
    ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
    0 > SuperType;
  RTCoreLogicalIdToDeviceConfig_CircuitLoadsEntry_DoNotUse();
  RTCoreLogicalIdToDeviceConfig_CircuitLoadsEntry_DoNotUse(::google::protobuf::Arena* arena);
  void MergeFrom(const RTCoreLogicalIdToDeviceConfig_CircuitLoadsEntry_DoNotUse& other);
  static const RTCoreLogicalIdToDeviceConfig_CircuitLoadsEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const RTCoreLogicalIdToDeviceConfig_CircuitLoadsEntry_DoNotUse*>(&_RTCoreLogicalIdToDeviceConfig_CircuitLoadsEntry_DoNotUse_default_instance_); }
  void MergeFrom(const ::google::protobuf::Message& other) final;
  ::google::protobuf::Metadata GetMetadata() const;
};

// -------------------------------------------------------------------

class RTCoreLogicalIdToDeviceConfig_DCMetersEntry_DoNotUse : public ::google::protobuf::internal::MapEntry<RTCoreLogicalIdToDeviceConfig_DCMetersEntry_DoNotUse, 
    ::google::protobuf::uint32, ::Nmea2k::RTCoreMapEntry,
    ::google::protobuf::internal::WireFormatLite::TYPE_UINT32,
    ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
    0 > {
public:
  typedef ::google::protobuf::internal::MapEntry<RTCoreLogicalIdToDeviceConfig_DCMetersEntry_DoNotUse, 
    ::google::protobuf::uint32, ::Nmea2k::RTCoreMapEntry,
    ::google::protobuf::internal::WireFormatLite::TYPE_UINT32,
    ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
    0 > SuperType;
  RTCoreLogicalIdToDeviceConfig_DCMetersEntry_DoNotUse();
  RTCoreLogicalIdToDeviceConfig_DCMetersEntry_DoNotUse(::google::protobuf::Arena* arena);
  void MergeFrom(const RTCoreLogicalIdToDeviceConfig_DCMetersEntry_DoNotUse& other);
  static const RTCoreLogicalIdToDeviceConfig_DCMetersEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const RTCoreLogicalIdToDeviceConfig_DCMetersEntry_DoNotUse*>(&_RTCoreLogicalIdToDeviceConfig_DCMetersEntry_DoNotUse_default_instance_); }
  void MergeFrom(const ::google::protobuf::Message& other) final;
  ::google::protobuf::Metadata GetMetadata() const;
};

// -------------------------------------------------------------------

class RTCoreLogicalIdToDeviceConfig_MonitoringDeviceEntry_DoNotUse : public ::google::protobuf::internal::MapEntry<RTCoreLogicalIdToDeviceConfig_MonitoringDeviceEntry_DoNotUse, 
    ::google::protobuf::uint32, ::Nmea2k::RTCoreMapEntry,
    ::google::protobuf::internal::WireFormatLite::TYPE_UINT32,
    ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
    0 > {
public:
  typedef ::google::protobuf::internal::MapEntry<RTCoreLogicalIdToDeviceConfig_MonitoringDeviceEntry_DoNotUse, 
    ::google::protobuf::uint32, ::Nmea2k::RTCoreMapEntry,
    ::google::protobuf::internal::WireFormatLite::TYPE_UINT32,
    ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
    0 > SuperType;
  RTCoreLogicalIdToDeviceConfig_MonitoringDeviceEntry_DoNotUse();
  RTCoreLogicalIdToDeviceConfig_MonitoringDeviceEntry_DoNotUse(::google::protobuf::Arena* arena);
  void MergeFrom(const RTCoreLogicalIdToDeviceConfig_MonitoringDeviceEntry_DoNotUse& other);
  static const RTCoreLogicalIdToDeviceConfig_MonitoringDeviceEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const RTCoreLogicalIdToDeviceConfig_MonitoringDeviceEntry_DoNotUse*>(&_RTCoreLogicalIdToDeviceConfig_MonitoringDeviceEntry_DoNotUse_default_instance_); }
  void MergeFrom(const ::google::protobuf::Message& other) final;
  ::google::protobuf::Metadata GetMetadata() const;
};

// -------------------------------------------------------------------

class RTCoreLogicalIdToDeviceConfig_SwitchPositiveNegtiveEntry_DoNotUse : public ::google::protobuf::internal::MapEntry<RTCoreLogicalIdToDeviceConfig_SwitchPositiveNegtiveEntry_DoNotUse, 
    ::google::protobuf::uint32, ::Nmea2k::RTCoreMapEntry,
    ::google::protobuf::internal::WireFormatLite::TYPE_UINT32,
    ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
    0 > {
public:
  typedef ::google::protobuf::internal::MapEntry<RTCoreLogicalIdToDeviceConfig_SwitchPositiveNegtiveEntry_DoNotUse, 
    ::google::protobuf::uint32, ::Nmea2k::RTCoreMapEntry,
    ::google::protobuf::internal::WireFormatLite::TYPE_UINT32,
    ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
    0 > SuperType;
  RTCoreLogicalIdToDeviceConfig_SwitchPositiveNegtiveEntry_DoNotUse();
  RTCoreLogicalIdToDeviceConfig_SwitchPositiveNegtiveEntry_DoNotUse(::google::protobuf::Arena* arena);
  void MergeFrom(const RTCoreLogicalIdToDeviceConfig_SwitchPositiveNegtiveEntry_DoNotUse& other);
  static const RTCoreLogicalIdToDeviceConfig_SwitchPositiveNegtiveEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const RTCoreLogicalIdToDeviceConfig_SwitchPositiveNegtiveEntry_DoNotUse*>(&_RTCoreLogicalIdToDeviceConfig_SwitchPositiveNegtiveEntry_DoNotUse_default_instance_); }
  void MergeFrom(const ::google::protobuf::Message& other) final;
  ::google::protobuf::Metadata GetMetadata() const;
};

// -------------------------------------------------------------------

class RTCoreLogicalIdToDeviceConfig : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Nmea2k.RTCoreLogicalIdToDeviceConfig) */ {
 public:
  RTCoreLogicalIdToDeviceConfig();
  virtual ~RTCoreLogicalIdToDeviceConfig();

  RTCoreLogicalIdToDeviceConfig(const RTCoreLogicalIdToDeviceConfig& from);

  inline RTCoreLogicalIdToDeviceConfig& operator=(const RTCoreLogicalIdToDeviceConfig& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RTCoreLogicalIdToDeviceConfig(RTCoreLogicalIdToDeviceConfig&& from) noexcept
    : RTCoreLogicalIdToDeviceConfig() {
    *this = ::std::move(from);
  }

  inline RTCoreLogicalIdToDeviceConfig& operator=(RTCoreLogicalIdToDeviceConfig&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const RTCoreLogicalIdToDeviceConfig& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RTCoreLogicalIdToDeviceConfig* internal_default_instance() {
    return reinterpret_cast<const RTCoreLogicalIdToDeviceConfig*>(
               &_RTCoreLogicalIdToDeviceConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    74;

  void Swap(RTCoreLogicalIdToDeviceConfig* other);
  friend void swap(RTCoreLogicalIdToDeviceConfig& a, RTCoreLogicalIdToDeviceConfig& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RTCoreLogicalIdToDeviceConfig* New() const final {
    return CreateMaybeMessage<RTCoreLogicalIdToDeviceConfig>(NULL);
  }

  RTCoreLogicalIdToDeviceConfig* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<RTCoreLogicalIdToDeviceConfig>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const RTCoreLogicalIdToDeviceConfig& from);
  void MergeFrom(const RTCoreLogicalIdToDeviceConfig& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RTCoreLogicalIdToDeviceConfig* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  // map<uint32, .Nmea2k.RTCoreMapEntry> CircuitLoads = 1;
  int circuitloads_size() const;
  void clear_circuitloads();
  static const int kCircuitLoadsFieldNumber = 1;
  const ::google::protobuf::Map< ::google::protobuf::uint32, ::Nmea2k::RTCoreMapEntry >&
      circuitloads() const;
  ::google::protobuf::Map< ::google::protobuf::uint32, ::Nmea2k::RTCoreMapEntry >*
      mutable_circuitloads();

  // map<uint32, .Nmea2k.RTCoreMapEntry> DCMeters = 2;
  int dcmeters_size() const;
  void clear_dcmeters();
  static const int kDCMetersFieldNumber = 2;
  const ::google::protobuf::Map< ::google::protobuf::uint32, ::Nmea2k::RTCoreMapEntry >&
      dcmeters() const;
  ::google::protobuf::Map< ::google::protobuf::uint32, ::Nmea2k::RTCoreMapEntry >*
      mutable_dcmeters();

  // map<uint32, .Nmea2k.RTCoreMapEntry> MonitoringDevice = 3;
  int monitoringdevice_size() const;
  void clear_monitoringdevice();
  static const int kMonitoringDeviceFieldNumber = 3;
  const ::google::protobuf::Map< ::google::protobuf::uint32, ::Nmea2k::RTCoreMapEntry >&
      monitoringdevice() const;
  ::google::protobuf::Map< ::google::protobuf::uint32, ::Nmea2k::RTCoreMapEntry >*
      mutable_monitoringdevice();

  // map<uint32, .Nmea2k.RTCoreMapEntry> SwitchPositiveNegtive = 4;
  int switchpositivenegtive_size() const;
  void clear_switchpositivenegtive();
  static const int kSwitchPositiveNegtiveFieldNumber = 4;
  const ::google::protobuf::Map< ::google::protobuf::uint32, ::Nmea2k::RTCoreMapEntry >&
      switchpositivenegtive() const;
  ::google::protobuf::Map< ::google::protobuf::uint32, ::Nmea2k::RTCoreMapEntry >*
      mutable_switchpositivenegtive();

  // @@protoc_insertion_point(class_scope:Nmea2k.RTCoreLogicalIdToDeviceConfig)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::MapField<
      RTCoreLogicalIdToDeviceConfig_CircuitLoadsEntry_DoNotUse,
      ::google::protobuf::uint32, ::Nmea2k::RTCoreMapEntry,
      ::google::protobuf::internal::WireFormatLite::TYPE_UINT32,
      ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
      0 > circuitloads_;
  ::google::protobuf::internal::MapField<
      RTCoreLogicalIdToDeviceConfig_DCMetersEntry_DoNotUse,
      ::google::protobuf::uint32, ::Nmea2k::RTCoreMapEntry,
      ::google::protobuf::internal::WireFormatLite::TYPE_UINT32,
      ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
      0 > dcmeters_;
  ::google::protobuf::internal::MapField<
      RTCoreLogicalIdToDeviceConfig_MonitoringDeviceEntry_DoNotUse,
      ::google::protobuf::uint32, ::Nmea2k::RTCoreMapEntry,
      ::google::protobuf::internal::WireFormatLite::TYPE_UINT32,
      ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
      0 > monitoringdevice_;
  ::google::protobuf::internal::MapField<
      RTCoreLogicalIdToDeviceConfig_SwitchPositiveNegtiveEntry_DoNotUse,
      ::google::protobuf::uint32, ::Nmea2k::RTCoreMapEntry,
      ::google::protobuf::internal::WireFormatLite::TYPE_UINT32,
      ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
      0 > switchpositivenegtive_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_Nmea2k_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ConfigResult : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Nmea2k.ConfigResult) */ {
 public:
  ConfigResult();
  virtual ~ConfigResult();

  ConfigResult(const ConfigResult& from);

  inline ConfigResult& operator=(const ConfigResult& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ConfigResult(ConfigResult&& from) noexcept
    : ConfigResult() {
    *this = ::std::move(from);
  }

  inline ConfigResult& operator=(ConfigResult&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ConfigResult& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ConfigResult* internal_default_instance() {
    return reinterpret_cast<const ConfigResult*>(
               &_ConfigResult_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    75;

  void Swap(ConfigResult* other);
  friend void swap(ConfigResult& a, ConfigResult& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ConfigResult* New() const final {
    return CreateMaybeMessage<ConfigResult>(NULL);
  }

  ConfigResult* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ConfigResult>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ConfigResult& from);
  void MergeFrom(const ConfigResult& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ConfigResult* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef ConfigResult_eConfigResultStatus eConfigResultStatus;
  static const eConfigResultStatus Ok =
    ConfigResult_eConfigResultStatus_Ok;
  static const eConfigResultStatus NotReady =
    ConfigResult_eConfigResultStatus_NotReady;
  static inline bool eConfigResultStatus_IsValid(int value) {
    return ConfigResult_eConfigResultStatus_IsValid(value);
  }
  static const eConfigResultStatus eConfigResultStatus_MIN =
    ConfigResult_eConfigResultStatus_eConfigResultStatus_MIN;
  static const eConfigResultStatus eConfigResultStatus_MAX =
    ConfigResult_eConfigResultStatus_eConfigResultStatus_MAX;
  static const int eConfigResultStatus_ARRAYSIZE =
    ConfigResult_eConfigResultStatus_eConfigResultStatus_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  eConfigResultStatus_descriptor() {
    return ConfigResult_eConfigResultStatus_descriptor();
  }
  static inline const ::std::string& eConfigResultStatus_Name(eConfigResultStatus value) {
    return ConfigResult_eConfigResultStatus_Name(value);
  }
  static inline bool eConfigResultStatus_Parse(const ::std::string& name,
      eConfigResultStatus* value) {
    return ConfigResult_eConfigResultStatus_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // repeated .Nmea2k.MeteringDevice DCs = 1;
  int dcs_size() const;
  void clear_dcs();
  static const int kDCsFieldNumber = 1;
  ::Nmea2k::MeteringDevice* mutable_dcs(int index);
  ::google::protobuf::RepeatedPtrField< ::Nmea2k::MeteringDevice >*
      mutable_dcs();
  const ::Nmea2k::MeteringDevice& dcs(int index) const;
  ::Nmea2k::MeteringDevice* add_dcs();
  const ::google::protobuf::RepeatedPtrField< ::Nmea2k::MeteringDevice >&
      dcs() const;

  // repeated .Nmea2k.MeteringDevice ACs = 2;
  int acs_size() const;
  void clear_acs();
  static const int kACsFieldNumber = 2;
  ::Nmea2k::MeteringDevice* mutable_acs(int index);
  ::google::protobuf::RepeatedPtrField< ::Nmea2k::MeteringDevice >*
      mutable_acs();
  const ::Nmea2k::MeteringDevice& acs(int index) const;
  ::Nmea2k::MeteringDevice* add_acs();
  const ::google::protobuf::RepeatedPtrField< ::Nmea2k::MeteringDevice >&
      acs() const;

  // repeated .Nmea2k.MonitoringDevice Pressures = 3;
  int pressures_size() const;
  void clear_pressures();
  static const int kPressuresFieldNumber = 3;
  ::Nmea2k::MonitoringDevice* mutable_pressures(int index);
  ::google::protobuf::RepeatedPtrField< ::Nmea2k::MonitoringDevice >*
      mutable_pressures();
  const ::Nmea2k::MonitoringDevice& pressures(int index) const;
  ::Nmea2k::MonitoringDevice* add_pressures();
  const ::google::protobuf::RepeatedPtrField< ::Nmea2k::MonitoringDevice >&
      pressures() const;

  // repeated .Nmea2k.MonitoringDevice Tanks = 4;
  int tanks_size() const;
  void clear_tanks();
  static const int kTanksFieldNumber = 4;
  ::Nmea2k::MonitoringDevice* mutable_tanks(int index);
  ::google::protobuf::RepeatedPtrField< ::Nmea2k::MonitoringDevice >*
      mutable_tanks();
  const ::Nmea2k::MonitoringDevice& tanks(int index) const;
  ::Nmea2k::MonitoringDevice* add_tanks();
  const ::google::protobuf::RepeatedPtrField< ::Nmea2k::MonitoringDevice >&
      tanks() const;

  // repeated .Nmea2k.MonitoringDevice Temperatures = 5;
  int temperatures_size() const;
  void clear_temperatures();
  static const int kTemperaturesFieldNumber = 5;
  ::Nmea2k::MonitoringDevice* mutable_temperatures(int index);
  ::google::protobuf::RepeatedPtrField< ::Nmea2k::MonitoringDevice >*
      mutable_temperatures();
  const ::Nmea2k::MonitoringDevice& temperatures(int index) const;
  ::Nmea2k::MonitoringDevice* add_temperatures();
  const ::google::protobuf::RepeatedPtrField< ::Nmea2k::MonitoringDevice >&
      temperatures() const;

  // repeated .Nmea2k.ACMainDevice ACMains = 6;
  int acmains_size() const;
  void clear_acmains();
  static const int kACMainsFieldNumber = 6;
  ::Nmea2k::ACMainDevice* mutable_acmains(int index);
  ::google::protobuf::RepeatedPtrField< ::Nmea2k::ACMainDevice >*
      mutable_acmains();
  const ::Nmea2k::ACMainDevice& acmains(int index) const;
  ::Nmea2k::ACMainDevice* add_acmains();
  const ::google::protobuf::RepeatedPtrField< ::Nmea2k::ACMainDevice >&
      acmains() const;

  // repeated .Nmea2k.InverterChargerDevice InverterChargers = 7;
  int inverterchargers_size() const;
  void clear_inverterchargers();
  static const int kInverterChargersFieldNumber = 7;
  ::Nmea2k::InverterChargerDevice* mutable_inverterchargers(int index);
  ::google::protobuf::RepeatedPtrField< ::Nmea2k::InverterChargerDevice >*
      mutable_inverterchargers();
  const ::Nmea2k::InverterChargerDevice& inverterchargers(int index) const;
  ::Nmea2k::InverterChargerDevice* add_inverterchargers();
  const ::google::protobuf::RepeatedPtrField< ::Nmea2k::InverterChargerDevice >&
      inverterchargers() const;

  // repeated .Nmea2k.HVACDevice HVACs = 8;
  int hvacs_size() const;
  void clear_hvacs();
  static const int kHVACsFieldNumber = 8;
  ::Nmea2k::HVACDevice* mutable_hvacs(int index);
  ::google::protobuf::RepeatedPtrField< ::Nmea2k::HVACDevice >*
      mutable_hvacs();
  const ::Nmea2k::HVACDevice& hvacs(int index) const;
  ::Nmea2k::HVACDevice* add_hvacs();
  const ::google::protobuf::RepeatedPtrField< ::Nmea2k::HVACDevice >&
      hvacs() const;

  // repeated .Nmea2k.ZipdeeAwningDevice ZipdeeAwnings = 9;
  int zipdeeawnings_size() const;
  void clear_zipdeeawnings();
  static const int kZipdeeAwningsFieldNumber = 9;
  ::Nmea2k::ZipdeeAwningDevice* mutable_zipdeeawnings(int index);
  ::google::protobuf::RepeatedPtrField< ::Nmea2k::ZipdeeAwningDevice >*
      mutable_zipdeeawnings();
  const ::Nmea2k::ZipdeeAwningDevice& zipdeeawnings(int index) const;
  ::Nmea2k::ZipdeeAwningDevice* add_zipdeeawnings();
  const ::google::protobuf::RepeatedPtrField< ::Nmea2k::ZipdeeAwningDevice >&
      zipdeeawnings() const;

  // repeated .Nmea2k.ThirdPartyGeneratorDevice ThirdPartyGenerators = 10;
  int thirdpartygenerators_size() const;
  void clear_thirdpartygenerators();
  static const int kThirdPartyGeneratorsFieldNumber = 10;
  ::Nmea2k::ThirdPartyGeneratorDevice* mutable_thirdpartygenerators(int index);
  ::google::protobuf::RepeatedPtrField< ::Nmea2k::ThirdPartyGeneratorDevice >*
      mutable_thirdpartygenerators();
  const ::Nmea2k::ThirdPartyGeneratorDevice& thirdpartygenerators(int index) const;
  ::Nmea2k::ThirdPartyGeneratorDevice* add_thirdpartygenerators();
  const ::google::protobuf::RepeatedPtrField< ::Nmea2k::ThirdPartyGeneratorDevice >&
      thirdpartygenerators() const;

  // repeated .Nmea2k.TyrePressureDevice TyrePressures = 11;
  int tyrepressures_size() const;
  void clear_tyrepressures();
  static const int kTyrePressuresFieldNumber = 11;
  ::Nmea2k::TyrePressureDevice* mutable_tyrepressures(int index);
  ::google::protobuf::RepeatedPtrField< ::Nmea2k::TyrePressureDevice >*
      mutable_tyrepressures();
  const ::Nmea2k::TyrePressureDevice& tyrepressures(int index) const;
  ::Nmea2k::TyrePressureDevice* add_tyrepressures();
  const ::google::protobuf::RepeatedPtrField< ::Nmea2k::TyrePressureDevice >&
      tyrepressures() const;

  // repeated .Nmea2k.AudioStereoDevice AudioStereos = 12;
  int audiostereos_size() const;
  void clear_audiostereos();
  static const int kAudioStereosFieldNumber = 12;
  ::Nmea2k::AudioStereoDevice* mutable_audiostereos(int index);
  ::google::protobuf::RepeatedPtrField< ::Nmea2k::AudioStereoDevice >*
      mutable_audiostereos();
  const ::Nmea2k::AudioStereoDevice& audiostereos(int index) const;
  ::Nmea2k::AudioStereoDevice* add_audiostereos();
  const ::google::protobuf::RepeatedPtrField< ::Nmea2k::AudioStereoDevice >&
      audiostereos() const;

  // repeated .Nmea2k.ShoreFuseDevice ShoreFuses = 13;
  int shorefuses_size() const;
  void clear_shorefuses();
  static const int kShoreFusesFieldNumber = 13;
  ::Nmea2k::ShoreFuseDevice* mutable_shorefuses(int index);
  ::google::protobuf::RepeatedPtrField< ::Nmea2k::ShoreFuseDevice >*
      mutable_shorefuses();
  const ::Nmea2k::ShoreFuseDevice& shorefuses(int index) const;
  ::Nmea2k::ShoreFuseDevice* add_shorefuses();
  const ::google::protobuf::RepeatedPtrField< ::Nmea2k::ShoreFuseDevice >&
      shorefuses() const;

  // repeated .Nmea2k.CircuitDevice Circuits = 14;
  int circuits_size() const;
  void clear_circuits();
  static const int kCircuitsFieldNumber = 14;
  ::Nmea2k::CircuitDevice* mutable_circuits(int index);
  ::google::protobuf::RepeatedPtrField< ::Nmea2k::CircuitDevice >*
      mutable_circuits();
  const ::Nmea2k::CircuitDevice& circuits(int index) const;
  ::Nmea2k::CircuitDevice* add_circuits();
  const ::google::protobuf::RepeatedPtrField< ::Nmea2k::CircuitDevice >&
      circuits() const;

  // repeated .Nmea2k.CircuitDevice Modes = 15;
  int modes_size() const;
  void clear_modes();
  static const int kModesFieldNumber = 15;
  ::Nmea2k::CircuitDevice* mutable_modes(int index);
  ::google::protobuf::RepeatedPtrField< ::Nmea2k::CircuitDevice >*
      mutable_modes();
  const ::Nmea2k::CircuitDevice& modes(int index) const;
  ::Nmea2k::CircuitDevice* add_modes();
  const ::google::protobuf::RepeatedPtrField< ::Nmea2k::CircuitDevice >&
      modes() const;

  // repeated .Nmea2k.FantasticFanDevice FantasticFans = 16;
  int fantasticfans_size() const;
  void clear_fantasticfans();
  static const int kFantasticFansFieldNumber = 16;
  ::Nmea2k::FantasticFanDevice* mutable_fantasticfans(int index);
  ::google::protobuf::RepeatedPtrField< ::Nmea2k::FantasticFanDevice >*
      mutable_fantasticfans();
  const ::Nmea2k::FantasticFanDevice& fantasticfans(int index) const;
  ::Nmea2k::FantasticFanDevice* add_fantasticfans();
  const ::google::protobuf::RepeatedPtrField< ::Nmea2k::FantasticFanDevice >&
      fantasticfans() const;

  // repeated .Nmea2k.ScreenConfigPageImageItem ScreenConfigPageImageItems = 17;
  int screenconfigpageimageitems_size() const;
  void clear_screenconfigpageimageitems();
  static const int kScreenConfigPageImageItemsFieldNumber = 17;
  ::Nmea2k::ScreenConfigPageImageItem* mutable_screenconfigpageimageitems(int index);
  ::google::protobuf::RepeatedPtrField< ::Nmea2k::ScreenConfigPageImageItem >*
      mutable_screenconfigpageimageitems();
  const ::Nmea2k::ScreenConfigPageImageItem& screenconfigpageimageitems(int index) const;
  ::Nmea2k::ScreenConfigPageImageItem* add_screenconfigpageimageitems();
  const ::google::protobuf::RepeatedPtrField< ::Nmea2k::ScreenConfigPageImageItem >&
      screenconfigpageimageitems() const;

  // repeated .Nmea2k.ScreenConfigPageGridItem ScreenConfigPageGridItems = 18;
  int screenconfigpagegriditems_size() const;
  void clear_screenconfigpagegriditems();
  static const int kScreenConfigPageGridItemsFieldNumber = 18;
  ::Nmea2k::ScreenConfigPageGridItem* mutable_screenconfigpagegriditems(int index);
  ::google::protobuf::RepeatedPtrField< ::Nmea2k::ScreenConfigPageGridItem >*
      mutable_screenconfigpagegriditems();
  const ::Nmea2k::ScreenConfigPageGridItem& screenconfigpagegriditems(int index) const;
  ::Nmea2k::ScreenConfigPageGridItem* add_screenconfigpagegriditems();
  const ::google::protobuf::RepeatedPtrField< ::Nmea2k::ScreenConfigPageGridItem >&
      screenconfigpagegriditems() const;

  // repeated .Nmea2k.ScreenConfigPageImage ScreenConfigPageImages = 19;
  int screenconfigpageimages_size() const;
  void clear_screenconfigpageimages();
  static const int kScreenConfigPageImagesFieldNumber = 19;
  ::Nmea2k::ScreenConfigPageImage* mutable_screenconfigpageimages(int index);
  ::google::protobuf::RepeatedPtrField< ::Nmea2k::ScreenConfigPageImage >*
      mutable_screenconfigpageimages();
  const ::Nmea2k::ScreenConfigPageImage& screenconfigpageimages(int index) const;
  ::Nmea2k::ScreenConfigPageImage* add_screenconfigpageimages();
  const ::google::protobuf::RepeatedPtrField< ::Nmea2k::ScreenConfigPageImage >&
      screenconfigpageimages() const;

  // repeated .Nmea2k.ScreenConfigPage ScreenConfigPages = 20;
  int screenconfigpages_size() const;
  void clear_screenconfigpages();
  static const int kScreenConfigPagesFieldNumber = 20;
  ::Nmea2k::ScreenConfigPage* mutable_screenconfigpages(int index);
  ::google::protobuf::RepeatedPtrField< ::Nmea2k::ScreenConfigPage >*
      mutable_screenconfigpages();
  const ::Nmea2k::ScreenConfigPage& screenconfigpages(int index) const;
  ::Nmea2k::ScreenConfigPage* add_screenconfigpages();
  const ::google::protobuf::RepeatedPtrField< ::Nmea2k::ScreenConfigPage >&
      screenconfigpages() const;

  // repeated .Nmea2k.ScreenConfigMode ScreenConfigModes = 21;
  int screenconfigmodes_size() const;
  void clear_screenconfigmodes();
  static const int kScreenConfigModesFieldNumber = 21;
  ::Nmea2k::ScreenConfigMode* mutable_screenconfigmodes(int index);
  ::google::protobuf::RepeatedPtrField< ::Nmea2k::ScreenConfigMode >*
      mutable_screenconfigmodes();
  const ::Nmea2k::ScreenConfigMode& screenconfigmodes(int index) const;
  ::Nmea2k::ScreenConfigMode* add_screenconfigmodes();
  const ::google::protobuf::RepeatedPtrField< ::Nmea2k::ScreenConfigMode >&
      screenconfigmodes() const;

  // repeated .Nmea2k.ScreenConfig ScreenConfigs = 22;
  int screenconfigs_size() const;
  void clear_screenconfigs();
  static const int kScreenConfigsFieldNumber = 22;
  ::Nmea2k::ScreenConfig* mutable_screenconfigs(int index);
  ::google::protobuf::RepeatedPtrField< ::Nmea2k::ScreenConfig >*
      mutable_screenconfigs();
  const ::Nmea2k::ScreenConfig& screenconfigs(int index) const;
  ::Nmea2k::ScreenConfig* add_screenconfigs();
  const ::google::protobuf::RepeatedPtrField< ::Nmea2k::ScreenConfig >&
      screenconfigs() const;

  // repeated .Nmea2k.FavouritesInfo FavouritesModes = 23;
  int favouritesmodes_size() const;
  void clear_favouritesmodes();
  static const int kFavouritesModesFieldNumber = 23;
  ::Nmea2k::FavouritesInfo* mutable_favouritesmodes(int index);
  ::google::protobuf::RepeatedPtrField< ::Nmea2k::FavouritesInfo >*
      mutable_favouritesmodes();
  const ::Nmea2k::FavouritesInfo& favouritesmodes(int index) const;
  ::Nmea2k::FavouritesInfo* add_favouritesmodes();
  const ::google::protobuf::RepeatedPtrField< ::Nmea2k::FavouritesInfo >&
      favouritesmodes() const;

  // repeated .Nmea2k.FavouritesInfo FavouritesControls = 24;
  int favouritescontrols_size() const;
  void clear_favouritescontrols();
  static const int kFavouritesControlsFieldNumber = 24;
  ::Nmea2k::FavouritesInfo* mutable_favouritescontrols(int index);
  ::google::protobuf::RepeatedPtrField< ::Nmea2k::FavouritesInfo >*
      mutable_favouritescontrols();
  const ::Nmea2k::FavouritesInfo& favouritescontrols(int index) const;
  ::Nmea2k::FavouritesInfo* add_favouritescontrols();
  const ::google::protobuf::RepeatedPtrField< ::Nmea2k::FavouritesInfo >&
      favouritescontrols() const;

  // repeated .Nmea2k.FavouritesInfo FavouritesMonitorings = 25;
  int favouritesmonitorings_size() const;
  void clear_favouritesmonitorings();
  static const int kFavouritesMonitoringsFieldNumber = 25;
  ::Nmea2k::FavouritesInfo* mutable_favouritesmonitorings(int index);
  ::google::protobuf::RepeatedPtrField< ::Nmea2k::FavouritesInfo >*
      mutable_favouritesmonitorings();
  const ::Nmea2k::FavouritesInfo& favouritesmonitorings(int index) const;
  ::Nmea2k::FavouritesInfo* add_favouritesmonitorings();
  const ::google::protobuf::RepeatedPtrField< ::Nmea2k::FavouritesInfo >&
      favouritesmonitorings() const;

  // repeated .Nmea2k.FavouritesInfo FavouritesAlarms = 26;
  int favouritesalarms_size() const;
  void clear_favouritesalarms();
  static const int kFavouritesAlarmsFieldNumber = 26;
  ::Nmea2k::FavouritesInfo* mutable_favouritesalarms(int index);
  ::google::protobuf::RepeatedPtrField< ::Nmea2k::FavouritesInfo >*
      mutable_favouritesalarms();
  const ::Nmea2k::FavouritesInfo& favouritesalarms(int index) const;
  ::Nmea2k::FavouritesInfo* add_favouritesalarms();
  const ::google::protobuf::RepeatedPtrField< ::Nmea2k::FavouritesInfo >&
      favouritesalarms() const;

  // repeated .Nmea2k.FavouritesInfo FavouritesACMains = 27;
  int favouritesacmains_size() const;
  void clear_favouritesacmains();
  static const int kFavouritesACMainsFieldNumber = 27;
  ::Nmea2k::FavouritesInfo* mutable_favouritesacmains(int index);
  ::google::protobuf::RepeatedPtrField< ::Nmea2k::FavouritesInfo >*
      mutable_favouritesacmains();
  const ::Nmea2k::FavouritesInfo& favouritesacmains(int index) const;
  ::Nmea2k::FavouritesInfo* add_favouritesacmains();
  const ::google::protobuf::RepeatedPtrField< ::Nmea2k::FavouritesInfo >&
      favouritesacmains() const;

  // repeated .Nmea2k.FavouritesInfo FavouritesInverterChargers = 28;
  int favouritesinverterchargers_size() const;
  void clear_favouritesinverterchargers();
  static const int kFavouritesInverterChargersFieldNumber = 28;
  ::Nmea2k::FavouritesInfo* mutable_favouritesinverterchargers(int index);
  ::google::protobuf::RepeatedPtrField< ::Nmea2k::FavouritesInfo >*
      mutable_favouritesinverterchargers();
  const ::Nmea2k::FavouritesInfo& favouritesinverterchargers(int index) const;
  ::Nmea2k::FavouritesInfo* add_favouritesinverterchargers();
  const ::google::protobuf::RepeatedPtrField< ::Nmea2k::FavouritesInfo >&
      favouritesinverterchargers() const;

  // repeated .Nmea2k.FavouritesInfo FavouritesBoatViews = 29;
  int favouritesboatviews_size() const;
  void clear_favouritesboatviews();
  static const int kFavouritesBoatViewsFieldNumber = 29;
  ::Nmea2k::FavouritesInfo* mutable_favouritesboatviews(int index);
  ::google::protobuf::RepeatedPtrField< ::Nmea2k::FavouritesInfo >*
      mutable_favouritesboatviews();
  const ::Nmea2k::FavouritesInfo& favouritesboatviews(int index) const;
  ::Nmea2k::FavouritesInfo* add_favouritesboatviews();
  const ::google::protobuf::RepeatedPtrField< ::Nmea2k::FavouritesInfo >&
      favouritesboatviews() const;

  // repeated .Nmea2k.Alarm Alarms = 30;
  int alarms_size() const;
  void clear_alarms();
  static const int kAlarmsFieldNumber = 30;
  ::Nmea2k::Alarm* mutable_alarms(int index);
  ::google::protobuf::RepeatedPtrField< ::Nmea2k::Alarm >*
      mutable_alarms();
  const ::Nmea2k::Alarm& alarms(int index) const;
  ::Nmea2k::Alarm* add_alarms();
  const ::google::protobuf::RepeatedPtrField< ::Nmea2k::Alarm >&
      alarms() const;

  // repeated .Nmea2k.Device Devices = 31;
  int devices_size() const;
  void clear_devices();
  static const int kDevicesFieldNumber = 31;
  ::Nmea2k::Device* mutable_devices(int index);
  ::google::protobuf::RepeatedPtrField< ::Nmea2k::Device >*
      mutable_devices();
  const ::Nmea2k::Device& devices(int index) const;
  ::Nmea2k::Device* add_devices();
  const ::google::protobuf::RepeatedPtrField< ::Nmea2k::Device >&
      devices() const;

  // repeated .Nmea2k.GNSSDevice GNSS = 32;
  int gnss_size() const;
  void clear_gnss();
  static const int kGNSSFieldNumber = 32;
  ::Nmea2k::GNSSDevice* mutable_gnss(int index);
  ::google::protobuf::RepeatedPtrField< ::Nmea2k::GNSSDevice >*
      mutable_gnss();
  const ::Nmea2k::GNSSDevice& gnss(int index) const;
  ::Nmea2k::GNSSDevice* add_gnss();
  const ::google::protobuf::RepeatedPtrField< ::Nmea2k::GNSSDevice >&
      gnss() const;

  // repeated .Nmea2k.EngineDevice Engines = 33;
  int engines_size() const;
  void clear_engines();
  static const int kEnginesFieldNumber = 33;
  ::Nmea2k::EngineDevice* mutable_engines(int index);
  ::google::protobuf::RepeatedPtrField< ::Nmea2k::EngineDevice >*
      mutable_engines();
  const ::Nmea2k::EngineDevice& engines(int index) const;
  ::Nmea2k::EngineDevice* add_engines();
  const ::google::protobuf::RepeatedPtrField< ::Nmea2k::EngineDevice >&
      engines() const;

  // repeated .Nmea2k.UiRelationshipMsg UiRelationships = 34;
  int uirelationships_size() const;
  void clear_uirelationships();
  static const int kUiRelationshipsFieldNumber = 34;
  ::Nmea2k::UiRelationshipMsg* mutable_uirelationships(int index);
  ::google::protobuf::RepeatedPtrField< ::Nmea2k::UiRelationshipMsg >*
      mutable_uirelationships();
  const ::Nmea2k::UiRelationshipMsg& uirelationships(int index) const;
  ::Nmea2k::UiRelationshipMsg* add_uirelationships();
  const ::google::protobuf::RepeatedPtrField< ::Nmea2k::UiRelationshipMsg >&
      uirelationships() const;

  // repeated .Nmea2k.BinaryLogicStateMsg BinaryLogicStates = 35;
  int binarylogicstates_size() const;
  void clear_binarylogicstates();
  static const int kBinaryLogicStatesFieldNumber = 35;
  ::Nmea2k::BinaryLogicStateMsg* mutable_binarylogicstates(int index);
  ::google::protobuf::RepeatedPtrField< ::Nmea2k::BinaryLogicStateMsg >*
      mutable_binarylogicstates();
  const ::Nmea2k::BinaryLogicStateMsg& binarylogicstates(int index) const;
  ::Nmea2k::BinaryLogicStateMsg* add_binarylogicstates();
  const ::google::protobuf::RepeatedPtrField< ::Nmea2k::BinaryLogicStateMsg >&
      binarylogicstates() const;

  // .Nmea2k.CZoneRawConfig DisplayList = 36;
  bool has_displaylist() const;
  void clear_displaylist();
  static const int kDisplayListFieldNumber = 36;
  private:
  const ::Nmea2k::CZoneRawConfig& _internal_displaylist() const;
  public:
  const ::Nmea2k::CZoneRawConfig& displaylist() const;
  ::Nmea2k::CZoneRawConfig* release_displaylist();
  ::Nmea2k::CZoneRawConfig* mutable_displaylist();
  void set_allocated_displaylist(::Nmea2k::CZoneRawConfig* displaylist);

  // .Nmea2k.RTCoreLogicalIdToDeviceConfig RTCoreLogicalIdToDeviceConfig = 37;
  bool has_rtcorelogicalidtodeviceconfig() const;
  void clear_rtcorelogicalidtodeviceconfig();
  static const int kRTCoreLogicalIdToDeviceConfigFieldNumber = 37;
  private:
  const ::Nmea2k::RTCoreLogicalIdToDeviceConfig& _internal_rtcorelogicalidtodeviceconfig() const;
  public:
  const ::Nmea2k::RTCoreLogicalIdToDeviceConfig& rtcorelogicalidtodeviceconfig() const;
  ::Nmea2k::RTCoreLogicalIdToDeviceConfig* release_rtcorelogicalidtodeviceconfig();
  ::Nmea2k::RTCoreLogicalIdToDeviceConfig* mutable_rtcorelogicalidtodeviceconfig();
  void set_allocated_rtcorelogicalidtodeviceconfig(::Nmea2k::RTCoreLogicalIdToDeviceConfig* rtcorelogicalidtodeviceconfig);

  // .Nmea2k.ConfigResult.eConfigResultStatus Status = 38;
  void clear_status();
  static const int kStatusFieldNumber = 38;
  ::Nmea2k::ConfigResult_eConfigResultStatus status() const;
  void set_status(::Nmea2k::ConfigResult_eConfigResultStatus value);

  // @@protoc_insertion_point(class_scope:Nmea2k.ConfigResult)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::Nmea2k::MeteringDevice > dcs_;
  ::google::protobuf::RepeatedPtrField< ::Nmea2k::MeteringDevice > acs_;
  ::google::protobuf::RepeatedPtrField< ::Nmea2k::MonitoringDevice > pressures_;
  ::google::protobuf::RepeatedPtrField< ::Nmea2k::MonitoringDevice > tanks_;
  ::google::protobuf::RepeatedPtrField< ::Nmea2k::MonitoringDevice > temperatures_;
  ::google::protobuf::RepeatedPtrField< ::Nmea2k::ACMainDevice > acmains_;
  ::google::protobuf::RepeatedPtrField< ::Nmea2k::InverterChargerDevice > inverterchargers_;
  ::google::protobuf::RepeatedPtrField< ::Nmea2k::HVACDevice > hvacs_;
  ::google::protobuf::RepeatedPtrField< ::Nmea2k::ZipdeeAwningDevice > zipdeeawnings_;
  ::google::protobuf::RepeatedPtrField< ::Nmea2k::ThirdPartyGeneratorDevice > thirdpartygenerators_;
  ::google::protobuf::RepeatedPtrField< ::Nmea2k::TyrePressureDevice > tyrepressures_;
  ::google::protobuf::RepeatedPtrField< ::Nmea2k::AudioStereoDevice > audiostereos_;
  ::google::protobuf::RepeatedPtrField< ::Nmea2k::ShoreFuseDevice > shorefuses_;
  ::google::protobuf::RepeatedPtrField< ::Nmea2k::CircuitDevice > circuits_;
  ::google::protobuf::RepeatedPtrField< ::Nmea2k::CircuitDevice > modes_;
  ::google::protobuf::RepeatedPtrField< ::Nmea2k::FantasticFanDevice > fantasticfans_;
  ::google::protobuf::RepeatedPtrField< ::Nmea2k::ScreenConfigPageImageItem > screenconfigpageimageitems_;
  ::google::protobuf::RepeatedPtrField< ::Nmea2k::ScreenConfigPageGridItem > screenconfigpagegriditems_;
  ::google::protobuf::RepeatedPtrField< ::Nmea2k::ScreenConfigPageImage > screenconfigpageimages_;
  ::google::protobuf::RepeatedPtrField< ::Nmea2k::ScreenConfigPage > screenconfigpages_;
  ::google::protobuf::RepeatedPtrField< ::Nmea2k::ScreenConfigMode > screenconfigmodes_;
  ::google::protobuf::RepeatedPtrField< ::Nmea2k::ScreenConfig > screenconfigs_;
  ::google::protobuf::RepeatedPtrField< ::Nmea2k::FavouritesInfo > favouritesmodes_;
  ::google::protobuf::RepeatedPtrField< ::Nmea2k::FavouritesInfo > favouritescontrols_;
  ::google::protobuf::RepeatedPtrField< ::Nmea2k::FavouritesInfo > favouritesmonitorings_;
  ::google::protobuf::RepeatedPtrField< ::Nmea2k::FavouritesInfo > favouritesalarms_;
  ::google::protobuf::RepeatedPtrField< ::Nmea2k::FavouritesInfo > favouritesacmains_;
  ::google::protobuf::RepeatedPtrField< ::Nmea2k::FavouritesInfo > favouritesinverterchargers_;
  ::google::protobuf::RepeatedPtrField< ::Nmea2k::FavouritesInfo > favouritesboatviews_;
  ::google::protobuf::RepeatedPtrField< ::Nmea2k::Alarm > alarms_;
  ::google::protobuf::RepeatedPtrField< ::Nmea2k::Device > devices_;
  ::google::protobuf::RepeatedPtrField< ::Nmea2k::GNSSDevice > gnss_;
  ::google::protobuf::RepeatedPtrField< ::Nmea2k::EngineDevice > engines_;
  ::google::protobuf::RepeatedPtrField< ::Nmea2k::UiRelationshipMsg > uirelationships_;
  ::google::protobuf::RepeatedPtrField< ::Nmea2k::BinaryLogicStateMsg > binarylogicstates_;
  ::Nmea2k::CZoneRawConfig* displaylist_;
  ::Nmea2k::RTCoreLogicalIdToDeviceConfig* rtcorelogicalidtodeviceconfig_;
  int status_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_Nmea2k_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ControlTypeValueRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Nmea2k.ControlTypeValueRequest) */ {
 public:
  ControlTypeValueRequest();
  virtual ~ControlTypeValueRequest();

  ControlTypeValueRequest(const ControlTypeValueRequest& from);

  inline ControlTypeValueRequest& operator=(const ControlTypeValueRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ControlTypeValueRequest(ControlTypeValueRequest&& from) noexcept
    : ControlTypeValueRequest() {
    *this = ::std::move(from);
  }

  inline ControlTypeValueRequest& operator=(ControlTypeValueRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ControlTypeValueRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ControlTypeValueRequest* internal_default_instance() {
    return reinterpret_cast<const ControlTypeValueRequest*>(
               &_ControlTypeValueRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    76;

  void Swap(ControlTypeValueRequest* other);
  friend void swap(ControlTypeValueRequest& a, ControlTypeValueRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ControlTypeValueRequest* New() const final {
    return CreateMaybeMessage<ControlTypeValueRequest>(NULL);
  }

  ControlTypeValueRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ControlTypeValueRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ControlTypeValueRequest& from);
  void MergeFrom(const ControlTypeValueRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ControlTypeValueRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef ControlTypeValueRequest_eHVACType eHVACType;
  static const eHVACType OperationMode =
    ControlTypeValueRequest_eHVACType_OperationMode;
  static const eHVACType FanSpeed =
    ControlTypeValueRequest_eHVACType_FanSpeed;
  static const eHVACType SetTemperature =
    ControlTypeValueRequest_eHVACType_SetTemperature;
  static inline bool eHVACType_IsValid(int value) {
    return ControlTypeValueRequest_eHVACType_IsValid(value);
  }
  static const eHVACType eHVACType_MIN =
    ControlTypeValueRequest_eHVACType_eHVACType_MIN;
  static const eHVACType eHVACType_MAX =
    ControlTypeValueRequest_eHVACType_eHVACType_MAX;
  static const int eHVACType_ARRAYSIZE =
    ControlTypeValueRequest_eHVACType_eHVACType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  eHVACType_descriptor() {
    return ControlTypeValueRequest_eHVACType_descriptor();
  }
  static inline const ::std::string& eHVACType_Name(eHVACType value) {
    return ControlTypeValueRequest_eHVACType_Name(value);
  }
  static inline bool eHVACType_Parse(const ::std::string& name,
      eHVACType* value) {
    return ControlTypeValueRequest_eHVACType_Parse(name, value);
  }

  typedef ControlTypeValueRequest_eFantasticFanType eFantasticFanType;
  static const eFantasticFanType DirectionForward =
    ControlTypeValueRequest_eFantasticFanType_DirectionForward;
  static const eFantasticFanType DirectionReverse =
    ControlTypeValueRequest_eFantasticFanType_DirectionReverse;
  static const eFantasticFanType LidOpen =
    ControlTypeValueRequest_eFantasticFanType_LidOpen;
  static const eFantasticFanType LidClose =
    ControlTypeValueRequest_eFantasticFanType_LidClose;
  static const eFantasticFanType Speed =
    ControlTypeValueRequest_eFantasticFanType_Speed;
  static inline bool eFantasticFanType_IsValid(int value) {
    return ControlTypeValueRequest_eFantasticFanType_IsValid(value);
  }
  static const eFantasticFanType eFantasticFanType_MIN =
    ControlTypeValueRequest_eFantasticFanType_eFantasticFanType_MIN;
  static const eFantasticFanType eFantasticFanType_MAX =
    ControlTypeValueRequest_eFantasticFanType_eFantasticFanType_MAX;
  static const int eFantasticFanType_ARRAYSIZE =
    ControlTypeValueRequest_eFantasticFanType_eFantasticFanType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  eFantasticFanType_descriptor() {
    return ControlTypeValueRequest_eFantasticFanType_descriptor();
  }
  static inline const ::std::string& eFantasticFanType_Name(eFantasticFanType value) {
    return ControlTypeValueRequest_eFantasticFanType_Name(value);
  }
  static inline bool eFantasticFanType_Parse(const ::std::string& name,
      eFantasticFanType* value) {
    return ControlTypeValueRequest_eFantasticFanType_Parse(name, value);
  }

  typedef ControlTypeValueRequest_eAudioStereoType eAudioStereoType;
  static const eAudioStereoType Power =
    ControlTypeValueRequest_eAudioStereoType_Power;
  static const eAudioStereoType Mute =
    ControlTypeValueRequest_eAudioStereoType_Mute;
  static const eAudioStereoType VolumeUp =
    ControlTypeValueRequest_eAudioStereoType_VolumeUp;
  static const eAudioStereoType VolumeDown =
    ControlTypeValueRequest_eAudioStereoType_VolumeDown;
  static const eAudioStereoType TrackUp =
    ControlTypeValueRequest_eAudioStereoType_TrackUp;
  static const eAudioStereoType TrackDown =
    ControlTypeValueRequest_eAudioStereoType_TrackDown;
  static const eAudioStereoType Play =
    ControlTypeValueRequest_eAudioStereoType_Play;
  static const eAudioStereoType Source =
    ControlTypeValueRequest_eAudioStereoType_Source;
  static inline bool eAudioStereoType_IsValid(int value) {
    return ControlTypeValueRequest_eAudioStereoType_IsValid(value);
  }
  static const eAudioStereoType eAudioStereoType_MIN =
    ControlTypeValueRequest_eAudioStereoType_eAudioStereoType_MIN;
  static const eAudioStereoType eAudioStereoType_MAX =
    ControlTypeValueRequest_eAudioStereoType_eAudioStereoType_MAX;
  static const int eAudioStereoType_ARRAYSIZE =
    ControlTypeValueRequest_eAudioStereoType_eAudioStereoType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  eAudioStereoType_descriptor() {
    return ControlTypeValueRequest_eAudioStereoType_descriptor();
  }
  static inline const ::std::string& eAudioStereoType_Name(eAudioStereoType value) {
    return ControlTypeValueRequest_eAudioStereoType_Name(value);
  }
  static inline bool eAudioStereoType_Parse(const ::std::string& name,
      eAudioStereoType* value) {
    return ControlTypeValueRequest_eAudioStereoType_Parse(name, value);
  }

  typedef ControlTypeValueRequest_eAwningType eAwningType;
  static const eAwningType Open =
    ControlTypeValueRequest_eAwningType_Open;
  static const eAwningType Close =
    ControlTypeValueRequest_eAwningType_Close;
  static const eAwningType TitleLeft =
    ControlTypeValueRequest_eAwningType_TitleLeft;
  static const eAwningType TitleRight =
    ControlTypeValueRequest_eAwningType_TitleRight;
  static inline bool eAwningType_IsValid(int value) {
    return ControlTypeValueRequest_eAwningType_IsValid(value);
  }
  static const eAwningType eAwningType_MIN =
    ControlTypeValueRequest_eAwningType_eAwningType_MIN;
  static const eAwningType eAwningType_MAX =
    ControlTypeValueRequest_eAwningType_eAwningType_MAX;
  static const int eAwningType_ARRAYSIZE =
    ControlTypeValueRequest_eAwningType_eAwningType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  eAwningType_descriptor() {
    return ControlTypeValueRequest_eAwningType_descriptor();
  }
  static inline const ::std::string& eAwningType_Name(eAwningType value) {
    return ControlTypeValueRequest_eAwningType_Name(value);
  }
  static inline bool eAwningType_Parse(const ::std::string& name,
      eAwningType* value) {
    return ControlTypeValueRequest_eAwningType_Parse(name, value);
  }

  typedef ControlTypeValueRequest_eShoreFuseType eShoreFuseType;
  static const eShoreFuseType Control =
    ControlTypeValueRequest_eShoreFuseType_Control;
  static inline bool eShoreFuseType_IsValid(int value) {
    return ControlTypeValueRequest_eShoreFuseType_IsValid(value);
  }
  static const eShoreFuseType eShoreFuseType_MIN =
    ControlTypeValueRequest_eShoreFuseType_eShoreFuseType_MIN;
  static const eShoreFuseType eShoreFuseType_MAX =
    ControlTypeValueRequest_eShoreFuseType_eShoreFuseType_MAX;
  static const int eShoreFuseType_ARRAYSIZE =
    ControlTypeValueRequest_eShoreFuseType_eShoreFuseType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  eShoreFuseType_descriptor() {
    return ControlTypeValueRequest_eShoreFuseType_descriptor();
  }
  static inline const ::std::string& eShoreFuseType_Name(eShoreFuseType value) {
    return ControlTypeValueRequest_eShoreFuseType_Name(value);
  }
  static inline bool eShoreFuseType_Parse(const ::std::string& name,
      eShoreFuseType* value) {
    return ControlTypeValueRequest_eShoreFuseType_Parse(name, value);
  }

  typedef ControlTypeValueRequest_eThirdPartyGeneratorType eThirdPartyGeneratorType;
  static const eThirdPartyGeneratorType Start =
    ControlTypeValueRequest_eThirdPartyGeneratorType_Start;
  static const eThirdPartyGeneratorType Stop =
    ControlTypeValueRequest_eThirdPartyGeneratorType_Stop;
  static inline bool eThirdPartyGeneratorType_IsValid(int value) {
    return ControlTypeValueRequest_eThirdPartyGeneratorType_IsValid(value);
  }
  static const eThirdPartyGeneratorType eThirdPartyGeneratorType_MIN =
    ControlTypeValueRequest_eThirdPartyGeneratorType_eThirdPartyGeneratorType_MIN;
  static const eThirdPartyGeneratorType eThirdPartyGeneratorType_MAX =
    ControlTypeValueRequest_eThirdPartyGeneratorType_eThirdPartyGeneratorType_MAX;
  static const int eThirdPartyGeneratorType_ARRAYSIZE =
    ControlTypeValueRequest_eThirdPartyGeneratorType_eThirdPartyGeneratorType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  eThirdPartyGeneratorType_descriptor() {
    return ControlTypeValueRequest_eThirdPartyGeneratorType_descriptor();
  }
  static inline const ::std::string& eThirdPartyGeneratorType_Name(eThirdPartyGeneratorType value) {
    return ControlTypeValueRequest_eThirdPartyGeneratorType_Name(value);
  }
  static inline bool eThirdPartyGeneratorType_Parse(const ::std::string& name,
      eThirdPartyGeneratorType* value) {
    return ControlTypeValueRequest_eThirdPartyGeneratorType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // string Token = 4;
  void clear_token();
  static const int kTokenFieldNumber = 4;
  const ::std::string& token() const;
  void set_token(const ::std::string& value);
  #if LANG_CXX11
  void set_token(::std::string&& value);
  #endif
  void set_token(const char* value);
  void set_token(const char* value, size_t size);
  ::std::string* mutable_token();
  ::std::string* release_token();
  void set_allocated_token(::std::string* token);

  // uint32 Instance = 1;
  void clear_instance();
  static const int kInstanceFieldNumber = 1;
  ::google::protobuf::uint32 instance() const;
  void set_instance(::google::protobuf::uint32 value);

  // uint32 Type = 2;
  void clear_type();
  static const int kTypeFieldNumber = 2;
  ::google::protobuf::uint32 type() const;
  void set_type(::google::protobuf::uint32 value);

  // uint32 Value = 3;
  void clear_value();
  static const int kValueFieldNumber = 3;
  ::google::protobuf::uint32 value() const;
  void set_value(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Nmea2k.ControlTypeValueRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr token_;
  ::google::protobuf::uint32 instance_;
  ::google::protobuf::uint32 type_;
  ::google::protobuf::uint32 value_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_Nmea2k_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ControlRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Nmea2k.ControlRequest) */ {
 public:
  ControlRequest();
  virtual ~ControlRequest();

  ControlRequest(const ControlRequest& from);

  inline ControlRequest& operator=(const ControlRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ControlRequest(ControlRequest&& from) noexcept
    : ControlRequest() {
    *this = ::std::move(from);
  }

  inline ControlRequest& operator=(ControlRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ControlRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ControlRequest* internal_default_instance() {
    return reinterpret_cast<const ControlRequest*>(
               &_ControlRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    77;

  void Swap(ControlRequest* other);
  friend void swap(ControlRequest& a, ControlRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ControlRequest* New() const final {
    return CreateMaybeMessage<ControlRequest>(NULL);
  }

  ControlRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ControlRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ControlRequest& from);
  void MergeFrom(const ControlRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ControlRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef ControlRequest_eControlType eControlType;
  static const eControlType Activate =
    ControlRequest_eControlType_Activate;
  static const eControlType Release =
    ControlRequest_eControlType_Release;
  static const eControlType Ping =
    ControlRequest_eControlType_Ping;
  static const eControlType SetAbsolute =
    ControlRequest_eControlType_SetAbsolute;
  static inline bool eControlType_IsValid(int value) {
    return ControlRequest_eControlType_IsValid(value);
  }
  static const eControlType eControlType_MIN =
    ControlRequest_eControlType_eControlType_MIN;
  static const eControlType eControlType_MAX =
    ControlRequest_eControlType_eControlType_MAX;
  static const int eControlType_ARRAYSIZE =
    ControlRequest_eControlType_eControlType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  eControlType_descriptor() {
    return ControlRequest_eControlType_descriptor();
  }
  static inline const ::std::string& eControlType_Name(eControlType value) {
    return ControlRequest_eControlType_Name(value);
  }
  static inline bool eControlType_Parse(const ::std::string& name,
      eControlType* value) {
    return ControlRequest_eControlType_Parse(name, value);
  }

  typedef ControlRequest_eThrowType eThrowType;
  static const eThrowType DoubleThrow =
    ControlRequest_eThrowType_DoubleThrow;
  static const eThrowType SingleThrow =
    ControlRequest_eThrowType_SingleThrow;
  static inline bool eThrowType_IsValid(int value) {
    return ControlRequest_eThrowType_IsValid(value);
  }
  static const eThrowType eThrowType_MIN =
    ControlRequest_eThrowType_eThrowType_MIN;
  static const eThrowType eThrowType_MAX =
    ControlRequest_eThrowType_eThrowType_MAX;
  static const int eThrowType_ARRAYSIZE =
    ControlRequest_eThrowType_eThrowType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  eThrowType_descriptor() {
    return ControlRequest_eThrowType_descriptor();
  }
  static inline const ::std::string& eThrowType_Name(eThrowType value) {
    return ControlRequest_eThrowType_Name(value);
  }
  static inline bool eThrowType_Parse(const ::std::string& name,
      eThrowType* value) {
    return ControlRequest_eThrowType_Parse(name, value);
  }

  typedef ControlRequest_eButtonInfoType eButtonInfoType;
  static const eButtonInfoType ButtonInfo0 =
    ControlRequest_eButtonInfoType_ButtonInfo0;
  static const eButtonInfoType ButtonInfo1 =
    ControlRequest_eButtonInfoType_ButtonInfo1;
  static inline bool eButtonInfoType_IsValid(int value) {
    return ControlRequest_eButtonInfoType_IsValid(value);
  }
  static const eButtonInfoType eButtonInfoType_MIN =
    ControlRequest_eButtonInfoType_eButtonInfoType_MIN;
  static const eButtonInfoType eButtonInfoType_MAX =
    ControlRequest_eButtonInfoType_eButtonInfoType_MAX;
  static const int eButtonInfoType_ARRAYSIZE =
    ControlRequest_eButtonInfoType_eButtonInfoType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  eButtonInfoType_descriptor() {
    return ControlRequest_eButtonInfoType_descriptor();
  }
  static inline const ::std::string& eButtonInfoType_Name(eButtonInfoType value) {
    return ControlRequest_eButtonInfoType_Name(value);
  }
  static inline bool eButtonInfoType_Parse(const ::std::string& name,
      eButtonInfoType* value) {
    return ControlRequest_eButtonInfoType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // string Token = 6;
  void clear_token();
  static const int kTokenFieldNumber = 6;
  const ::std::string& token() const;
  void set_token(const ::std::string& value);
  #if LANG_CXX11
  void set_token(::std::string&& value);
  #endif
  void set_token(const char* value);
  void set_token(const char* value, size_t size);
  ::std::string* mutable_token();
  ::std::string* release_token();
  void set_allocated_token(::std::string* token);

  // .Nmea2k.ControlRequest.eControlType Type = 1;
  void clear_type();
  static const int kTypeFieldNumber = 1;
  ::Nmea2k::ControlRequest_eControlType type() const;
  void set_type(::Nmea2k::ControlRequest_eControlType value);

  // uint32 Id = 2;
  void clear_id();
  static const int kIdFieldNumber = 2;
  ::google::protobuf::uint32 id() const;
  void set_id(::google::protobuf::uint32 value);

  // .Nmea2k.ControlRequest.eThrowType ThrowType = 3;
  void clear_throwtype();
  static const int kThrowTypeFieldNumber = 3;
  ::Nmea2k::ControlRequest_eThrowType throwtype() const;
  void set_throwtype(::Nmea2k::ControlRequest_eThrowType value);

  // uint32 Value = 4;
  void clear_value();
  static const int kValueFieldNumber = 4;
  ::google::protobuf::uint32 value() const;
  void set_value(::google::protobuf::uint32 value);

  // .Nmea2k.ControlRequest.eButtonInfoType ButtonType = 5;
  void clear_buttontype();
  static const int kButtonTypeFieldNumber = 5;
  ::Nmea2k::ControlRequest_eButtonInfoType buttontype() const;
  void set_buttontype(::Nmea2k::ControlRequest_eButtonInfoType value);

  // @@protoc_insertion_point(class_scope:Nmea2k.ControlRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr token_;
  int type_;
  ::google::protobuf::uint32 id_;
  int throwtype_;
  ::google::protobuf::uint32 value_;
  int buttontype_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_Nmea2k_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CircuitButtonInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Nmea2k.CircuitButtonInfo) */ {
 public:
  CircuitButtonInfo();
  virtual ~CircuitButtonInfo();

  CircuitButtonInfo(const CircuitButtonInfo& from);

  inline CircuitButtonInfo& operator=(const CircuitButtonInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CircuitButtonInfo(CircuitButtonInfo&& from) noexcept
    : CircuitButtonInfo() {
    *this = ::std::move(from);
  }

  inline CircuitButtonInfo& operator=(CircuitButtonInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const CircuitButtonInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CircuitButtonInfo* internal_default_instance() {
    return reinterpret_cast<const CircuitButtonInfo*>(
               &_CircuitButtonInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    78;

  void Swap(CircuitButtonInfo* other);
  friend void swap(CircuitButtonInfo& a, CircuitButtonInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CircuitButtonInfo* New() const final {
    return CreateMaybeMessage<CircuitButtonInfo>(NULL);
  }

  CircuitButtonInfo* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CircuitButtonInfo>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CircuitButtonInfo& from);
  void MergeFrom(const CircuitButtonInfo& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CircuitButtonInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string Name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // uint32 IconType = 2;
  void clear_icontype();
  static const int kIconTypeFieldNumber = 2;
  ::google::protobuf::uint32 icontype() const;
  void set_icontype(::google::protobuf::uint32 value);

  // bool Invert = 3;
  void clear_invert();
  static const int kInvertFieldNumber = 3;
  bool invert() const;
  void set_invert(bool value);

  // uint32 SingleThrowIconType = 4;
  void clear_singlethrowicontype();
  static const int kSingleThrowIconTypeFieldNumber = 4;
  ::google::protobuf::uint32 singlethrowicontype() const;
  void set_singlethrowicontype(::google::protobuf::uint32 value);

  // uint32 DoubleThrowIconType = 5;
  void clear_doublethrowicontype();
  static const int kDoubleThrowIconTypeFieldNumber = 5;
  ::google::protobuf::uint32 doublethrowicontype() const;
  void set_doublethrowicontype(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Nmea2k.CircuitButtonInfo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::uint32 icontype_;
  bool invert_;
  ::google::protobuf::uint32 singlethrowicontype_;
  ::google::protobuf::uint32 doublethrowicontype_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_Nmea2k_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Request : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Nmea2k.Request) */ {
 public:
  Request();
  virtual ~Request();

  Request(const Request& from);

  inline Request& operator=(const Request& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Request(Request&& from) noexcept
    : Request() {
    *this = ::std::move(from);
  }

  inline Request& operator=(Request&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Request& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Request* internal_default_instance() {
    return reinterpret_cast<const Request*>(
               &_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    79;

  void Swap(Request* other);
  friend void swap(Request& a, Request& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Request* New() const final {
    return CreateMaybeMessage<Request>(NULL);
  }

  Request* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Request>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Request& from);
  void MergeFrom(const Request& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Request* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Request_eRequestType eRequestType;
  static const eRequestType Invaid =
    Request_eRequestType_Invaid;
  static const eRequestType Alarms =
    Request_eRequestType_Alarms;
  static const eRequestType Modes =
    Request_eRequestType_Modes;
  static const eRequestType Control =
    Request_eRequestType_Control;
  static const eRequestType AC =
    Request_eRequestType_AC;
  static const eRequestType DC =
    Request_eRequestType_DC;
  static const eRequestType Pressure =
    Request_eRequestType_Pressure;
  static const eRequestType Tanks =
    Request_eRequestType_Tanks;
  static const eRequestType Temperature =
    Request_eRequestType_Temperature;
  static const eRequestType SnapshotAll =
    Request_eRequestType_SnapshotAll;
  static const eRequestType Snapshot20Hz =
    Request_eRequestType_Snapshot20Hz;
  static const eRequestType Snapshot10Hz =
    Request_eRequestType_Snapshot10Hz;
  static const eRequestType Snapshot5Hz =
    Request_eRequestType_Snapshot5Hz;
  static const eRequestType Snapshot2Hz =
    Request_eRequestType_Snapshot2Hz;
  static const eRequestType Snapshot1Hz =
    Request_eRequestType_Snapshot1Hz;
  static const eRequestType ACMain =
    Request_eRequestType_ACMain;
  static const eRequestType InverterCharger =
    Request_eRequestType_InverterCharger;
  static const eRequestType HVAC =
    Request_eRequestType_HVAC;
  static const eRequestType ZipdeeAwning =
    Request_eRequestType_ZipdeeAwning;
  static const eRequestType Generator =
    Request_eRequestType_Generator;
  static const eRequestType TyrePressure =
    Request_eRequestType_TyrePressure;
  static const eRequestType AudioStereo =
    Request_eRequestType_AudioStereo;
  static const eRequestType ShoreFuse =
    Request_eRequestType_ShoreFuse;
  static const eRequestType All =
    Request_eRequestType_All;
  static const eRequestType SingleSnapshot =
    Request_eRequestType_SingleSnapshot;
  static const eRequestType Health =
    Request_eRequestType_Health;
  static inline bool eRequestType_IsValid(int value) {
    return Request_eRequestType_IsValid(value);
  }
  static const eRequestType eRequestType_MIN =
    Request_eRequestType_eRequestType_MIN;
  static const eRequestType eRequestType_MAX =
    Request_eRequestType_eRequestType_MAX;
  static const int eRequestType_ARRAYSIZE =
    Request_eRequestType_eRequestType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  eRequestType_descriptor() {
    return Request_eRequestType_descriptor();
  }
  static inline const ::std::string& eRequestType_Name(eRequestType value) {
    return Request_eRequestType_Name(value);
  }
  static inline bool eRequestType_Parse(const ::std::string& name,
      eRequestType* value) {
    return Request_eRequestType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // string Token = 4;
  void clear_token();
  static const int kTokenFieldNumber = 4;
  const ::std::string& token() const;
  void set_token(const ::std::string& value);
  #if LANG_CXX11
  void set_token(::std::string&& value);
  #endif
  void set_token(const char* value);
  void set_token(const char* value, size_t size);
  ::std::string* mutable_token();
  ::std::string* release_token();
  void set_allocated_token(::std::string* token);

  // uint32 Source = 1;
  void clear_source();
  static const int kSourceFieldNumber = 1;
  ::google::protobuf::uint32 source() const;
  void set_source(::google::protobuf::uint32 value);

  // uint32 Instance = 2;
  void clear_instance();
  static const int kInstanceFieldNumber = 2;
  ::google::protobuf::uint32 instance() const;
  void set_instance(::google::protobuf::uint32 value);

  // .Nmea2k.Request.eRequestType type = 3;
  void clear_type();
  static const int kTypeFieldNumber = 3;
  ::Nmea2k::Request_eRequestType type() const;
  void set_type(::Nmea2k::Request_eRequestType value);

  // bool RequestCZoneRawEvent = 5;
  void clear_requestczonerawevent();
  static const int kRequestCZoneRawEventFieldNumber = 5;
  bool requestczonerawevent() const;
  void set_requestczonerawevent(bool value);

  // @@protoc_insertion_point(class_scope:Nmea2k.Request)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr token_;
  ::google::protobuf::uint32 source_;
  ::google::protobuf::uint32 instance_;
  int type_;
  bool requestczonerawevent_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_Nmea2k_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Result : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Nmea2k.Result) */ {
 public:
  Result();
  virtual ~Result();

  Result(const Result& from);

  inline Result& operator=(const Result& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Result(Result&& from) noexcept
    : Result() {
    *this = ::std::move(from);
  }

  inline Result& operator=(Result&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Result& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Result* internal_default_instance() {
    return reinterpret_cast<const Result*>(
               &_Result_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    80;

  void Swap(Result* other);
  friend void swap(Result& a, Result& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Result* New() const final {
    return CreateMaybeMessage<Result>(NULL);
  }

  Result* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Result>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Result& from);
  void MergeFrom(const Result& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Result* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Result_eResultType eResultType;
  static const eResultType Ok =
    Result_eResultType_Ok;
  static const eResultType Fail =
    Result_eResultType_Fail;
  static inline bool eResultType_IsValid(int value) {
    return Result_eResultType_IsValid(value);
  }
  static const eResultType eResultType_MIN =
    Result_eResultType_eResultType_MIN;
  static const eResultType eResultType_MAX =
    Result_eResultType_eResultType_MAX;
  static const int eResultType_ARRAYSIZE =
    Result_eResultType_eResultType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  eResultType_descriptor() {
    return Result_eResultType_descriptor();
  }
  static inline const ::std::string& eResultType_Name(eResultType value) {
    return Result_eResultType_Name(value);
  }
  static inline bool eResultType_Parse(const ::std::string& name,
      eResultType* value) {
    return Result_eResultType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // .Nmea2k.Result.eResultType Result = 1;
  void clear_result();
  static const int kResultFieldNumber = 1;
  ::Nmea2k::Result_eResultType result() const;
  void set_result(::Nmea2k::Result_eResultType value);

  // @@protoc_insertion_point(class_scope:Nmea2k.Result)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  int result_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_Nmea2k_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ValueF : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Nmea2k.ValueF) */ {
 public:
  ValueF();
  virtual ~ValueF();

  ValueF(const ValueF& from);

  inline ValueF& operator=(const ValueF& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ValueF(ValueF&& from) noexcept
    : ValueF() {
    *this = ::std::move(from);
  }

  inline ValueF& operator=(ValueF&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ValueF& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ValueF* internal_default_instance() {
    return reinterpret_cast<const ValueF*>(
               &_ValueF_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    81;

  void Swap(ValueF* other);
  friend void swap(ValueF& a, ValueF& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ValueF* New() const final {
    return CreateMaybeMessage<ValueF>(NULL);
  }

  ValueF* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ValueF>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ValueF& from);
  void MergeFrom(const ValueF& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ValueF* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bool Valid = 1;
  void clear_valid();
  static const int kValidFieldNumber = 1;
  bool valid() const;
  void set_valid(bool value);

  // float Value = 2;
  void clear_value();
  static const int kValueFieldNumber = 2;
  float value() const;
  void set_value(float value);

  // @@protoc_insertion_point(class_scope:Nmea2k.ValueF)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool valid_;
  float value_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_Nmea2k_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ValueDouble : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Nmea2k.ValueDouble) */ {
 public:
  ValueDouble();
  virtual ~ValueDouble();

  ValueDouble(const ValueDouble& from);

  inline ValueDouble& operator=(const ValueDouble& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ValueDouble(ValueDouble&& from) noexcept
    : ValueDouble() {
    *this = ::std::move(from);
  }

  inline ValueDouble& operator=(ValueDouble&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ValueDouble& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ValueDouble* internal_default_instance() {
    return reinterpret_cast<const ValueDouble*>(
               &_ValueDouble_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    82;

  void Swap(ValueDouble* other);
  friend void swap(ValueDouble& a, ValueDouble& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ValueDouble* New() const final {
    return CreateMaybeMessage<ValueDouble>(NULL);
  }

  ValueDouble* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ValueDouble>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ValueDouble& from);
  void MergeFrom(const ValueDouble& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ValueDouble* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // double Value = 2;
  void clear_value();
  static const int kValueFieldNumber = 2;
  double value() const;
  void set_value(double value);

  // bool Valid = 1;
  void clear_valid();
  static const int kValidFieldNumber = 1;
  bool valid() const;
  void set_valid(bool value);

  // @@protoc_insertion_point(class_scope:Nmea2k.ValueDouble)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  double value_;
  bool valid_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_Nmea2k_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ValueU32 : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Nmea2k.ValueU32) */ {
 public:
  ValueU32();
  virtual ~ValueU32();

  ValueU32(const ValueU32& from);

  inline ValueU32& operator=(const ValueU32& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ValueU32(ValueU32&& from) noexcept
    : ValueU32() {
    *this = ::std::move(from);
  }

  inline ValueU32& operator=(ValueU32&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ValueU32& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ValueU32* internal_default_instance() {
    return reinterpret_cast<const ValueU32*>(
               &_ValueU32_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    83;

  void Swap(ValueU32* other);
  friend void swap(ValueU32& a, ValueU32& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ValueU32* New() const final {
    return CreateMaybeMessage<ValueU32>(NULL);
  }

  ValueU32* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ValueU32>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ValueU32& from);
  void MergeFrom(const ValueU32& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ValueU32* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bool Valid = 1;
  void clear_valid();
  static const int kValidFieldNumber = 1;
  bool valid() const;
  void set_valid(bool value);

  // uint32 Value = 2;
  void clear_value();
  static const int kValueFieldNumber = 2;
  ::google::protobuf::uint32 value() const;
  void set_value(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Nmea2k.ValueU32)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool valid_;
  ::google::protobuf::uint32 value_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_Nmea2k_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ValueS32 : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Nmea2k.ValueS32) */ {
 public:
  ValueS32();
  virtual ~ValueS32();

  ValueS32(const ValueS32& from);

  inline ValueS32& operator=(const ValueS32& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ValueS32(ValueS32&& from) noexcept
    : ValueS32() {
    *this = ::std::move(from);
  }

  inline ValueS32& operator=(ValueS32&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ValueS32& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ValueS32* internal_default_instance() {
    return reinterpret_cast<const ValueS32*>(
               &_ValueS32_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    84;

  void Swap(ValueS32* other);
  friend void swap(ValueS32& a, ValueS32& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ValueS32* New() const final {
    return CreateMaybeMessage<ValueS32>(NULL);
  }

  ValueS32* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ValueS32>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ValueS32& from);
  void MergeFrom(const ValueS32& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ValueS32* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bool Valid = 1;
  void clear_valid();
  static const int kValidFieldNumber = 1;
  bool valid() const;
  void set_valid(bool value);

  // int32 Value = 2;
  void clear_value();
  static const int kValueFieldNumber = 2;
  ::google::protobuf::int32 value() const;
  void set_value(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:Nmea2k.ValueS32)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool valid_;
  ::google::protobuf::int32 value_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_Nmea2k_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ValueBool : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Nmea2k.ValueBool) */ {
 public:
  ValueBool();
  virtual ~ValueBool();

  ValueBool(const ValueBool& from);

  inline ValueBool& operator=(const ValueBool& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ValueBool(ValueBool&& from) noexcept
    : ValueBool() {
    *this = ::std::move(from);
  }

  inline ValueBool& operator=(ValueBool&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ValueBool& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ValueBool* internal_default_instance() {
    return reinterpret_cast<const ValueBool*>(
               &_ValueBool_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    85;

  void Swap(ValueBool* other);
  friend void swap(ValueBool& a, ValueBool& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ValueBool* New() const final {
    return CreateMaybeMessage<ValueBool>(NULL);
  }

  ValueBool* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ValueBool>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ValueBool& from);
  void MergeFrom(const ValueBool& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ValueBool* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bool Valid = 1;
  void clear_valid();
  static const int kValidFieldNumber = 1;
  bool valid() const;
  void set_valid(bool value);

  // bool Value = 2;
  void clear_value();
  static const int kValueFieldNumber = 2;
  bool value() const;
  void set_value(bool value);

  // @@protoc_insertion_point(class_scope:Nmea2k.ValueBool)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool valid_;
  bool value_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_Nmea2k_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ValueTankType : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Nmea2k.ValueTankType) */ {
 public:
  ValueTankType();
  virtual ~ValueTankType();

  ValueTankType(const ValueTankType& from);

  inline ValueTankType& operator=(const ValueTankType& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ValueTankType(ValueTankType&& from) noexcept
    : ValueTankType() {
    *this = ::std::move(from);
  }

  inline ValueTankType& operator=(ValueTankType&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ValueTankType& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ValueTankType* internal_default_instance() {
    return reinterpret_cast<const ValueTankType*>(
               &_ValueTankType_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    86;

  void Swap(ValueTankType* other);
  friend void swap(ValueTankType& a, ValueTankType& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ValueTankType* New() const final {
    return CreateMaybeMessage<ValueTankType>(NULL);
  }

  ValueTankType* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ValueTankType>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ValueTankType& from);
  void MergeFrom(const ValueTankType& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ValueTankType* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bool Valid = 1;
  void clear_valid();
  static const int kValidFieldNumber = 1;
  bool valid() const;
  void set_valid(bool value);

  // .Nmea2k.MonitoringType.eTankType Value = 2;
  void clear_value();
  static const int kValueFieldNumber = 2;
  ::Nmea2k::MonitoringType_eTankType value() const;
  void set_value(::Nmea2k::MonitoringType_eTankType value);

  // @@protoc_insertion_point(class_scope:Nmea2k.ValueTankType)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool valid_;
  int value_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_Nmea2k_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Tank : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Nmea2k.Tank) */ {
 public:
  Tank();
  virtual ~Tank();

  Tank(const Tank& from);

  inline Tank& operator=(const Tank& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Tank(Tank&& from) noexcept
    : Tank() {
    *this = ::std::move(from);
  }

  inline Tank& operator=(Tank&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Tank& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Tank* internal_default_instance() {
    return reinterpret_cast<const Tank*>(
               &_Tank_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    87;

  void Swap(Tank* other);
  friend void swap(Tank& a, Tank& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Tank* New() const final {
    return CreateMaybeMessage<Tank>(NULL);
  }

  Tank* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Tank>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Tank& from);
  void MergeFrom(const Tank& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Tank* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .Nmea2k.ValueU32 LevelPercent = 2;
  bool has_levelpercent() const;
  void clear_levelpercent();
  static const int kLevelPercentFieldNumber = 2;
  private:
  const ::Nmea2k::ValueU32& _internal_levelpercent() const;
  public:
  const ::Nmea2k::ValueU32& levelpercent() const;
  ::Nmea2k::ValueU32* release_levelpercent();
  ::Nmea2k::ValueU32* mutable_levelpercent();
  void set_allocated_levelpercent(::Nmea2k::ValueU32* levelpercent);

  // .Nmea2k.ValueU32 Level = 3;
  bool has_level() const;
  void clear_level();
  static const int kLevelFieldNumber = 3;
  private:
  const ::Nmea2k::ValueU32& _internal_level() const;
  public:
  const ::Nmea2k::ValueU32& level() const;
  ::Nmea2k::ValueU32* release_level();
  ::Nmea2k::ValueU32* mutable_level();
  void set_allocated_level(::Nmea2k::ValueU32* level);

  // .Nmea2k.ValueU32 Capacity = 4;
  bool has_capacity() const;
  void clear_capacity();
  static const int kCapacityFieldNumber = 4;
  private:
  const ::Nmea2k::ValueU32& _internal_capacity() const;
  public:
  const ::Nmea2k::ValueU32& capacity() const;
  ::Nmea2k::ValueU32* release_capacity();
  ::Nmea2k::ValueU32* mutable_capacity();
  void set_allocated_capacity(::Nmea2k::ValueU32* capacity);

  // .Nmea2k.ValueTankType TankType = 5;
  bool has_tanktype() const;
  void clear_tanktype();
  static const int kTankTypeFieldNumber = 5;
  private:
  const ::Nmea2k::ValueTankType& _internal_tanktype() const;
  public:
  const ::Nmea2k::ValueTankType& tanktype() const;
  ::Nmea2k::ValueTankType* release_tanktype();
  ::Nmea2k::ValueTankType* mutable_tanktype();
  void set_allocated_tanktype(::Nmea2k::ValueTankType* tanktype);

  // uint32 Instance = 1;
  void clear_instance();
  static const int kInstanceFieldNumber = 1;
  ::google::protobuf::uint32 instance() const;
  void set_instance(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Nmea2k.Tank)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::Nmea2k::ValueU32* levelpercent_;
  ::Nmea2k::ValueU32* level_;
  ::Nmea2k::ValueU32* capacity_;
  ::Nmea2k::ValueTankType* tanktype_;
  ::google::protobuf::uint32 instance_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_Nmea2k_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class BinaryLogicState : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Nmea2k.BinaryLogicState) */ {
 public:
  BinaryLogicState();
  virtual ~BinaryLogicState();

  BinaryLogicState(const BinaryLogicState& from);

  inline BinaryLogicState& operator=(const BinaryLogicState& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  BinaryLogicState(BinaryLogicState&& from) noexcept
    : BinaryLogicState() {
    *this = ::std::move(from);
  }

  inline BinaryLogicState& operator=(BinaryLogicState&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const BinaryLogicState& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BinaryLogicState* internal_default_instance() {
    return reinterpret_cast<const BinaryLogicState*>(
               &_BinaryLogicState_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    88;

  void Swap(BinaryLogicState* other);
  friend void swap(BinaryLogicState& a, BinaryLogicState& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline BinaryLogicState* New() const final {
    return CreateMaybeMessage<BinaryLogicState>(NULL);
  }

  BinaryLogicState* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<BinaryLogicState>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const BinaryLogicState& from);
  void MergeFrom(const BinaryLogicState& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BinaryLogicState* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .Nmea2k.ValueU32 States = 3;
  bool has_states() const;
  void clear_states();
  static const int kStatesFieldNumber = 3;
  private:
  const ::Nmea2k::ValueU32& _internal_states() const;
  public:
  const ::Nmea2k::ValueU32& states() const;
  ::Nmea2k::ValueU32* release_states();
  ::Nmea2k::ValueU32* mutable_states();
  void set_allocated_states(::Nmea2k::ValueU32* states);

  // uint32 Dipswitch = 1;
  void clear_dipswitch();
  static const int kDipswitchFieldNumber = 1;
  ::google::protobuf::uint32 dipswitch() const;
  void set_dipswitch(::google::protobuf::uint32 value);

  // uint32 Instance = 2;
  void clear_instance();
  static const int kInstanceFieldNumber = 2;
  ::google::protobuf::uint32 instance() const;
  void set_instance(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Nmea2k.BinaryLogicState)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::Nmea2k::ValueU32* states_;
  ::google::protobuf::uint32 dipswitch_;
  ::google::protobuf::uint32 instance_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_Nmea2k_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ValueEngineState : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Nmea2k.ValueEngineState) */ {
 public:
  ValueEngineState();
  virtual ~ValueEngineState();

  ValueEngineState(const ValueEngineState& from);

  inline ValueEngineState& operator=(const ValueEngineState& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ValueEngineState(ValueEngineState&& from) noexcept
    : ValueEngineState() {
    *this = ::std::move(from);
  }

  inline ValueEngineState& operator=(ValueEngineState&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ValueEngineState& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ValueEngineState* internal_default_instance() {
    return reinterpret_cast<const ValueEngineState*>(
               &_ValueEngineState_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    89;

  void Swap(ValueEngineState* other);
  friend void swap(ValueEngineState& a, ValueEngineState& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ValueEngineState* New() const final {
    return CreateMaybeMessage<ValueEngineState>(NULL);
  }

  ValueEngineState* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ValueEngineState>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ValueEngineState& from);
  void MergeFrom(const ValueEngineState& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ValueEngineState* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef ValueEngineState_eEngineState eEngineState;
  static const eEngineState Dead =
    ValueEngineState_eEngineState_Dead;
  static const eEngineState Stall =
    ValueEngineState_eEngineState_Stall;
  static const eEngineState Crank =
    ValueEngineState_eEngineState_Crank;
  static const eEngineState Run =
    ValueEngineState_eEngineState_Run;
  static const eEngineState PowerOff =
    ValueEngineState_eEngineState_PowerOff;
  static inline bool eEngineState_IsValid(int value) {
    return ValueEngineState_eEngineState_IsValid(value);
  }
  static const eEngineState eEngineState_MIN =
    ValueEngineState_eEngineState_eEngineState_MIN;
  static const eEngineState eEngineState_MAX =
    ValueEngineState_eEngineState_eEngineState_MAX;
  static const int eEngineState_ARRAYSIZE =
    ValueEngineState_eEngineState_eEngineState_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  eEngineState_descriptor() {
    return ValueEngineState_eEngineState_descriptor();
  }
  static inline const ::std::string& eEngineState_Name(eEngineState value) {
    return ValueEngineState_eEngineState_Name(value);
  }
  static inline bool eEngineState_Parse(const ::std::string& name,
      eEngineState* value) {
    return ValueEngineState_eEngineState_Parse(name, value);
  }

  typedef ValueEngineState_EngineInstance EngineInstance;
  static const EngineInstance StarboardEngine =
    ValueEngineState_EngineInstance_StarboardEngine;
  static const EngineInstance Port =
    ValueEngineState_EngineInstance_Port;
  static const EngineInstance StarboardInnerEngine =
    ValueEngineState_EngineInstance_StarboardInnerEngine;
  static const EngineInstance PortInnerEngine =
    ValueEngineState_EngineInstance_PortInnerEngine;
  static const EngineInstance EngineCount =
    ValueEngineState_EngineInstance_EngineCount;
  static inline bool EngineInstance_IsValid(int value) {
    return ValueEngineState_EngineInstance_IsValid(value);
  }
  static const EngineInstance EngineInstance_MIN =
    ValueEngineState_EngineInstance_EngineInstance_MIN;
  static const EngineInstance EngineInstance_MAX =
    ValueEngineState_EngineInstance_EngineInstance_MAX;
  static const int EngineInstance_ARRAYSIZE =
    ValueEngineState_EngineInstance_EngineInstance_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  EngineInstance_descriptor() {
    return ValueEngineState_EngineInstance_descriptor();
  }
  static inline const ::std::string& EngineInstance_Name(EngineInstance value) {
    return ValueEngineState_EngineInstance_Name(value);
  }
  static inline bool EngineInstance_Parse(const ::std::string& name,
      EngineInstance* value) {
    return ValueEngineState_EngineInstance_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // bool Valid = 1;
  void clear_valid();
  static const int kValidFieldNumber = 1;
  bool valid() const;
  void set_valid(bool value);

  // .Nmea2k.ValueEngineState.eEngineState Value = 2;
  void clear_value();
  static const int kValueFieldNumber = 2;
  ::Nmea2k::ValueEngineState_eEngineState value() const;
  void set_value(::Nmea2k::ValueEngineState_eEngineState value);

  // @@protoc_insertion_point(class_scope:Nmea2k.ValueEngineState)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool valid_;
  int value_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_Nmea2k_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Engine : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Nmea2k.Engine) */ {
 public:
  Engine();
  virtual ~Engine();

  Engine(const Engine& from);

  inline Engine& operator=(const Engine& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Engine(Engine&& from) noexcept
    : Engine() {
    *this = ::std::move(from);
  }

  inline Engine& operator=(Engine&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Engine& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Engine* internal_default_instance() {
    return reinterpret_cast<const Engine*>(
               &_Engine_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    90;

  void Swap(Engine* other);
  friend void swap(Engine& a, Engine& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Engine* New() const final {
    return CreateMaybeMessage<Engine>(NULL);
  }

  Engine* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Engine>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Engine& from);
  void MergeFrom(const Engine& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Engine* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Engine_DiscreteStatus1Mask DiscreteStatus1Mask;
  static const DiscreteStatus1Mask None1 =
    Engine_DiscreteStatus1Mask_None1;
  static const DiscreteStatus1Mask CheckEngine =
    Engine_DiscreteStatus1Mask_CheckEngine;
  static const DiscreteStatus1Mask OverTemperature =
    Engine_DiscreteStatus1Mask_OverTemperature;
  static const DiscreteStatus1Mask LowOilPressure =
    Engine_DiscreteStatus1Mask_LowOilPressure;
  static const DiscreteStatus1Mask LowOilLevel =
    Engine_DiscreteStatus1Mask_LowOilLevel;
  static const DiscreteStatus1Mask LowFuelPressure =
    Engine_DiscreteStatus1Mask_LowFuelPressure;
  static const DiscreteStatus1Mask LowSystemVoltage =
    Engine_DiscreteStatus1Mask_LowSystemVoltage;
  static const DiscreteStatus1Mask LowCoolantLevel =
    Engine_DiscreteStatus1Mask_LowCoolantLevel;
  static const DiscreteStatus1Mask WaterFlow =
    Engine_DiscreteStatus1Mask_WaterFlow;
  static const DiscreteStatus1Mask WaterInFuel =
    Engine_DiscreteStatus1Mask_WaterInFuel;
  static const DiscreteStatus1Mask ChargeIndicator =
    Engine_DiscreteStatus1Mask_ChargeIndicator;
  static const DiscreteStatus1Mask PreheatIndicator =
    Engine_DiscreteStatus1Mask_PreheatIndicator;
  static const DiscreteStatus1Mask HighBoostPressure =
    Engine_DiscreteStatus1Mask_HighBoostPressure;
  static const DiscreteStatus1Mask RevLimitExceeded =
    Engine_DiscreteStatus1Mask_RevLimitExceeded;
  static const DiscreteStatus1Mask EGRSystem =
    Engine_DiscreteStatus1Mask_EGRSystem;
  static const DiscreteStatus1Mask ThrottlePositionSensor =
    Engine_DiscreteStatus1Mask_ThrottlePositionSensor;
  static const DiscreteStatus1Mask EngineEmergencyStopMode =
    Engine_DiscreteStatus1Mask_EngineEmergencyStopMode;
  static inline bool DiscreteStatus1Mask_IsValid(int value) {
    return Engine_DiscreteStatus1Mask_IsValid(value);
  }
  static const DiscreteStatus1Mask DiscreteStatus1Mask_MIN =
    Engine_DiscreteStatus1Mask_DiscreteStatus1Mask_MIN;
  static const DiscreteStatus1Mask DiscreteStatus1Mask_MAX =
    Engine_DiscreteStatus1Mask_DiscreteStatus1Mask_MAX;
  static const int DiscreteStatus1Mask_ARRAYSIZE =
    Engine_DiscreteStatus1Mask_DiscreteStatus1Mask_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  DiscreteStatus1Mask_descriptor() {
    return Engine_DiscreteStatus1Mask_descriptor();
  }
  static inline const ::std::string& DiscreteStatus1Mask_Name(DiscreteStatus1Mask value) {
    return Engine_DiscreteStatus1Mask_Name(value);
  }
  static inline bool DiscreteStatus1Mask_Parse(const ::std::string& name,
      DiscreteStatus1Mask* value) {
    return Engine_DiscreteStatus1Mask_Parse(name, value);
  }

  typedef Engine_DiscreteStatus2Mask DiscreteStatus2Mask;
  static const DiscreteStatus2Mask None2 =
    Engine_DiscreteStatus2Mask_None2;
  static const DiscreteStatus2Mask WarningLevel1 =
    Engine_DiscreteStatus2Mask_WarningLevel1;
  static const DiscreteStatus2Mask WarningLevel2 =
    Engine_DiscreteStatus2Mask_WarningLevel2;
  static const DiscreteStatus2Mask PowerReduction =
    Engine_DiscreteStatus2Mask_PowerReduction;
  static const DiscreteStatus2Mask MaintenanceNeeded =
    Engine_DiscreteStatus2Mask_MaintenanceNeeded;
  static const DiscreteStatus2Mask EngineCommError =
    Engine_DiscreteStatus2Mask_EngineCommError;
  static const DiscreteStatus2Mask SubOrSecondaryThrottle =
    Engine_DiscreteStatus2Mask_SubOrSecondaryThrottle;
  static const DiscreteStatus2Mask NeutralStartProtect =
    Engine_DiscreteStatus2Mask_NeutralStartProtect;
  static const DiscreteStatus2Mask EngineShuttingDown =
    Engine_DiscreteStatus2Mask_EngineShuttingDown;
  static inline bool DiscreteStatus2Mask_IsValid(int value) {
    return Engine_DiscreteStatus2Mask_IsValid(value);
  }
  static const DiscreteStatus2Mask DiscreteStatus2Mask_MIN =
    Engine_DiscreteStatus2Mask_DiscreteStatus2Mask_MIN;
  static const DiscreteStatus2Mask DiscreteStatus2Mask_MAX =
    Engine_DiscreteStatus2Mask_DiscreteStatus2Mask_MAX;
  static const int DiscreteStatus2Mask_ARRAYSIZE =
    Engine_DiscreteStatus2Mask_DiscreteStatus2Mask_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  DiscreteStatus2Mask_descriptor() {
    return Engine_DiscreteStatus2Mask_descriptor();
  }
  static inline const ::std::string& DiscreteStatus2Mask_Name(DiscreteStatus2Mask value) {
    return Engine_DiscreteStatus2Mask_Name(value);
  }
  static inline bool DiscreteStatus2Mask_Parse(const ::std::string& name,
      DiscreteStatus2Mask* value) {
    return Engine_DiscreteStatus2Mask_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // .Nmea2k.ValueU32 Speed = 2;
  bool has_speed() const;
  void clear_speed();
  static const int kSpeedFieldNumber = 2;
  private:
  const ::Nmea2k::ValueU32& _internal_speed() const;
  public:
  const ::Nmea2k::ValueU32& speed() const;
  ::Nmea2k::ValueU32* release_speed();
  ::Nmea2k::ValueU32* mutable_speed();
  void set_allocated_speed(::Nmea2k::ValueU32* speed);

  // .Nmea2k.ValueF BoostPressure = 3;
  bool has_boostpressure() const;
  void clear_boostpressure();
  static const int kBoostPressureFieldNumber = 3;
  private:
  const ::Nmea2k::ValueF& _internal_boostpressure() const;
  public:
  const ::Nmea2k::ValueF& boostpressure() const;
  ::Nmea2k::ValueF* release_boostpressure();
  ::Nmea2k::ValueF* mutable_boostpressure();
  void set_allocated_boostpressure(::Nmea2k::ValueF* boostpressure);

  // .Nmea2k.ValueS32 Trim = 4;
  bool has_trim() const;
  void clear_trim();
  static const int kTrimFieldNumber = 4;
  private:
  const ::Nmea2k::ValueS32& _internal_trim() const;
  public:
  const ::Nmea2k::ValueS32& trim() const;
  ::Nmea2k::ValueS32* release_trim();
  ::Nmea2k::ValueS32* mutable_trim();
  void set_allocated_trim(::Nmea2k::ValueS32* trim);

  // .Nmea2k.ValueU32 OilPressure = 5;
  bool has_oilpressure() const;
  void clear_oilpressure();
  static const int kOilPressureFieldNumber = 5;
  private:
  const ::Nmea2k::ValueU32& _internal_oilpressure() const;
  public:
  const ::Nmea2k::ValueU32& oilpressure() const;
  ::Nmea2k::ValueU32* release_oilpressure();
  ::Nmea2k::ValueU32* mutable_oilpressure();
  void set_allocated_oilpressure(::Nmea2k::ValueU32* oilpressure);

  // .Nmea2k.ValueF OilTemperature = 6;
  bool has_oiltemperature() const;
  void clear_oiltemperature();
  static const int kOilTemperatureFieldNumber = 6;
  private:
  const ::Nmea2k::ValueF& _internal_oiltemperature() const;
  public:
  const ::Nmea2k::ValueF& oiltemperature() const;
  ::Nmea2k::ValueF* release_oiltemperature();
  ::Nmea2k::ValueF* mutable_oiltemperature();
  void set_allocated_oiltemperature(::Nmea2k::ValueF* oiltemperature);

  // .Nmea2k.ValueF Temperature = 7;
  bool has_temperature() const;
  void clear_temperature();
  static const int kTemperatureFieldNumber = 7;
  private:
  const ::Nmea2k::ValueF& _internal_temperature() const;
  public:
  const ::Nmea2k::ValueF& temperature() const;
  ::Nmea2k::ValueF* release_temperature();
  ::Nmea2k::ValueF* mutable_temperature();
  void set_allocated_temperature(::Nmea2k::ValueF* temperature);

  // .Nmea2k.ValueF AlternatorPotential = 8;
  bool has_alternatorpotential() const;
  void clear_alternatorpotential();
  static const int kAlternatorPotentialFieldNumber = 8;
  private:
  const ::Nmea2k::ValueF& _internal_alternatorpotential() const;
  public:
  const ::Nmea2k::ValueF& alternatorpotential() const;
  ::Nmea2k::ValueF* release_alternatorpotential();
  ::Nmea2k::ValueF* mutable_alternatorpotential();
  void set_allocated_alternatorpotential(::Nmea2k::ValueF* alternatorpotential);

  // .Nmea2k.ValueF FuelRate = 9;
  bool has_fuelrate() const;
  void clear_fuelrate();
  static const int kFuelRateFieldNumber = 9;
  private:
  const ::Nmea2k::ValueF& _internal_fuelrate() const;
  public:
  const ::Nmea2k::ValueF& fuelrate() const;
  ::Nmea2k::ValueF* release_fuelrate();
  ::Nmea2k::ValueF* mutable_fuelrate();
  void set_allocated_fuelrate(::Nmea2k::ValueF* fuelrate);

  // .Nmea2k.ValueU32 TotalEngineHours = 10;
  bool has_totalenginehours() const;
  void clear_totalenginehours();
  static const int kTotalEngineHoursFieldNumber = 10;
  private:
  const ::Nmea2k::ValueU32& _internal_totalenginehours() const;
  public:
  const ::Nmea2k::ValueU32& totalenginehours() const;
  ::Nmea2k::ValueU32* release_totalenginehours();
  ::Nmea2k::ValueU32* mutable_totalenginehours();
  void set_allocated_totalenginehours(::Nmea2k::ValueU32* totalenginehours);

  // .Nmea2k.ValueF CoolantPressure = 11;
  bool has_coolantpressure() const;
  void clear_coolantpressure();
  static const int kCoolantPressureFieldNumber = 11;
  private:
  const ::Nmea2k::ValueF& _internal_coolantpressure() const;
  public:
  const ::Nmea2k::ValueF& coolantpressure() const;
  ::Nmea2k::ValueF* release_coolantpressure();
  ::Nmea2k::ValueF* mutable_coolantpressure();
  void set_allocated_coolantpressure(::Nmea2k::ValueF* coolantpressure);

  // .Nmea2k.ValueF CoolantTemperature = 12;
  bool has_coolanttemperature() const;
  void clear_coolanttemperature();
  static const int kCoolantTemperatureFieldNumber = 12;
  private:
  const ::Nmea2k::ValueF& _internal_coolanttemperature() const;
  public:
  const ::Nmea2k::ValueF& coolanttemperature() const;
  ::Nmea2k::ValueF* release_coolanttemperature();
  ::Nmea2k::ValueF* mutable_coolanttemperature();
  void set_allocated_coolanttemperature(::Nmea2k::ValueF* coolanttemperature);

  // .Nmea2k.ValueF FuelPressure = 13;
  bool has_fuelpressure() const;
  void clear_fuelpressure();
  static const int kFuelPressureFieldNumber = 13;
  private:
  const ::Nmea2k::ValueF& _internal_fuelpressure() const;
  public:
  const ::Nmea2k::ValueF& fuelpressure() const;
  ::Nmea2k::ValueF* release_fuelpressure();
  ::Nmea2k::ValueF* mutable_fuelpressure();
  void set_allocated_fuelpressure(::Nmea2k::ValueF* fuelpressure);

  // .Nmea2k.ValueU32 DiscreteStatus1 = 14;
  bool has_discretestatus1() const;
  void clear_discretestatus1();
  static const int kDiscreteStatus1FieldNumber = 14;
  private:
  const ::Nmea2k::ValueU32& _internal_discretestatus1() const;
  public:
  const ::Nmea2k::ValueU32& discretestatus1() const;
  ::Nmea2k::ValueU32* release_discretestatus1();
  ::Nmea2k::ValueU32* mutable_discretestatus1();
  void set_allocated_discretestatus1(::Nmea2k::ValueU32* discretestatus1);

  // .Nmea2k.ValueU32 DiscreteStatus2 = 15;
  bool has_discretestatus2() const;
  void clear_discretestatus2();
  static const int kDiscreteStatus2FieldNumber = 15;
  private:
  const ::Nmea2k::ValueU32& _internal_discretestatus2() const;
  public:
  const ::Nmea2k::ValueU32& discretestatus2() const;
  ::Nmea2k::ValueU32* release_discretestatus2();
  ::Nmea2k::ValueU32* mutable_discretestatus2();
  void set_allocated_discretestatus2(::Nmea2k::ValueU32* discretestatus2);

  // .Nmea2k.ValueS32 PercentEngineLoad = 16;
  bool has_percentengineload() const;
  void clear_percentengineload();
  static const int kPercentEngineLoadFieldNumber = 16;
  private:
  const ::Nmea2k::ValueS32& _internal_percentengineload() const;
  public:
  const ::Nmea2k::ValueS32& percentengineload() const;
  ::Nmea2k::ValueS32* release_percentengineload();
  ::Nmea2k::ValueS32* mutable_percentengineload();
  void set_allocated_percentengineload(::Nmea2k::ValueS32* percentengineload);

  // .Nmea2k.ValueS32 PercentEngineTorque = 17;
  bool has_percentenginetorque() const;
  void clear_percentenginetorque();
  static const int kPercentEngineTorqueFieldNumber = 17;
  private:
  const ::Nmea2k::ValueS32& _internal_percentenginetorque() const;
  public:
  const ::Nmea2k::ValueS32& percentenginetorque() const;
  ::Nmea2k::ValueS32* release_percentenginetorque();
  ::Nmea2k::ValueS32* mutable_percentenginetorque();
  void set_allocated_percentenginetorque(::Nmea2k::ValueS32* percentenginetorque);

  // .Nmea2k.ValueEngineState EngineState = 18;
  bool has_enginestate() const;
  void clear_enginestate();
  static const int kEngineStateFieldNumber = 18;
  private:
  const ::Nmea2k::ValueEngineState& _internal_enginestate() const;
  public:
  const ::Nmea2k::ValueEngineState& enginestate() const;
  ::Nmea2k::ValueEngineState* release_enginestate();
  ::Nmea2k::ValueEngineState* mutable_enginestate();
  void set_allocated_enginestate(::Nmea2k::ValueEngineState* enginestate);

  // .Nmea2k.ValueU32 ActiveEnginesId = 19;
  bool has_activeenginesid() const;
  void clear_activeenginesid();
  static const int kActiveEnginesIdFieldNumber = 19;
  private:
  const ::Nmea2k::ValueU32& _internal_activeenginesid() const;
  public:
  const ::Nmea2k::ValueU32& activeenginesid() const;
  ::Nmea2k::ValueU32* release_activeenginesid();
  ::Nmea2k::ValueU32* mutable_activeenginesid();
  void set_allocated_activeenginesid(::Nmea2k::ValueU32* activeenginesid);

  // uint32 Instance = 1;
  void clear_instance();
  static const int kInstanceFieldNumber = 1;
  ::google::protobuf::uint32 instance() const;
  void set_instance(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Nmea2k.Engine)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::Nmea2k::ValueU32* speed_;
  ::Nmea2k::ValueF* boostpressure_;
  ::Nmea2k::ValueS32* trim_;
  ::Nmea2k::ValueU32* oilpressure_;
  ::Nmea2k::ValueF* oiltemperature_;
  ::Nmea2k::ValueF* temperature_;
  ::Nmea2k::ValueF* alternatorpotential_;
  ::Nmea2k::ValueF* fuelrate_;
  ::Nmea2k::ValueU32* totalenginehours_;
  ::Nmea2k::ValueF* coolantpressure_;
  ::Nmea2k::ValueF* coolanttemperature_;
  ::Nmea2k::ValueF* fuelpressure_;
  ::Nmea2k::ValueU32* discretestatus1_;
  ::Nmea2k::ValueU32* discretestatus2_;
  ::Nmea2k::ValueS32* percentengineload_;
  ::Nmea2k::ValueS32* percentenginetorque_;
  ::Nmea2k::ValueEngineState* enginestate_;
  ::Nmea2k::ValueU32* activeenginesid_;
  ::google::protobuf::uint32 instance_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_Nmea2k_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ACLine : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Nmea2k.ACLine) */ {
 public:
  ACLine();
  virtual ~ACLine();

  ACLine(const ACLine& from);

  inline ACLine& operator=(const ACLine& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ACLine(ACLine&& from) noexcept
    : ACLine() {
    *this = ::std::move(from);
  }

  inline ACLine& operator=(ACLine&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ACLine& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ACLine* internal_default_instance() {
    return reinterpret_cast<const ACLine*>(
               &_ACLine_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    91;

  void Swap(ACLine* other);
  friend void swap(ACLine& a, ACLine& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ACLine* New() const final {
    return CreateMaybeMessage<ACLine>(NULL);
  }

  ACLine* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ACLine>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ACLine& from);
  void MergeFrom(const ACLine& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ACLine* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .Nmea2k.ValueF Voltage = 3;
  bool has_voltage() const;
  void clear_voltage();
  static const int kVoltageFieldNumber = 3;
  private:
  const ::Nmea2k::ValueF& _internal_voltage() const;
  public:
  const ::Nmea2k::ValueF& voltage() const;
  ::Nmea2k::ValueF* release_voltage();
  ::Nmea2k::ValueF* mutable_voltage();
  void set_allocated_voltage(::Nmea2k::ValueF* voltage);

  // .Nmea2k.ValueF Current = 4;
  bool has_current() const;
  void clear_current();
  static const int kCurrentFieldNumber = 4;
  private:
  const ::Nmea2k::ValueF& _internal_current() const;
  public:
  const ::Nmea2k::ValueF& current() const;
  ::Nmea2k::ValueF* release_current();
  ::Nmea2k::ValueF* mutable_current();
  void set_allocated_current(::Nmea2k::ValueF* current);

  // .Nmea2k.ValueF Frequency = 5;
  bool has_frequency() const;
  void clear_frequency();
  static const int kFrequencyFieldNumber = 5;
  private:
  const ::Nmea2k::ValueF& _internal_frequency() const;
  public:
  const ::Nmea2k::ValueF& frequency() const;
  ::Nmea2k::ValueF* release_frequency();
  ::Nmea2k::ValueF* mutable_frequency();
  void set_allocated_frequency(::Nmea2k::ValueF* frequency);

  // .Nmea2k.ValueF Power = 6;
  bool has_power() const;
  void clear_power();
  static const int kPowerFieldNumber = 6;
  private:
  const ::Nmea2k::ValueF& _internal_power() const;
  public:
  const ::Nmea2k::ValueF& power() const;
  ::Nmea2k::ValueF* release_power();
  ::Nmea2k::ValueF* mutable_power();
  void set_allocated_power(::Nmea2k::ValueF* power);

  // uint32 Instance = 1;
  void clear_instance();
  static const int kInstanceFieldNumber = 1;
  ::google::protobuf::uint32 instance() const;
  void set_instance(::google::protobuf::uint32 value);

  // .Nmea2k.MeteringDevice.eACLine Line = 2;
  void clear_line();
  static const int kLineFieldNumber = 2;
  ::Nmea2k::MeteringDevice_eACLine line() const;
  void set_line(::Nmea2k::MeteringDevice_eACLine value);

  // @@protoc_insertion_point(class_scope:Nmea2k.ACLine)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::Nmea2k::ValueF* voltage_;
  ::Nmea2k::ValueF* current_;
  ::Nmea2k::ValueF* frequency_;
  ::Nmea2k::ValueF* power_;
  ::google::protobuf::uint32 instance_;
  int line_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_Nmea2k_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class AC_AClinesEntry_DoNotUse : public ::google::protobuf::internal::MapEntry<AC_AClinesEntry_DoNotUse, 
    ::google::protobuf::uint32, ::Nmea2k::ACLine,
    ::google::protobuf::internal::WireFormatLite::TYPE_UINT32,
    ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
    0 > {
public:
  typedef ::google::protobuf::internal::MapEntry<AC_AClinesEntry_DoNotUse, 
    ::google::protobuf::uint32, ::Nmea2k::ACLine,
    ::google::protobuf::internal::WireFormatLite::TYPE_UINT32,
    ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
    0 > SuperType;
  AC_AClinesEntry_DoNotUse();
  AC_AClinesEntry_DoNotUse(::google::protobuf::Arena* arena);
  void MergeFrom(const AC_AClinesEntry_DoNotUse& other);
  static const AC_AClinesEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const AC_AClinesEntry_DoNotUse*>(&_AC_AClinesEntry_DoNotUse_default_instance_); }
  void MergeFrom(const ::google::protobuf::Message& other) final;
  ::google::protobuf::Metadata GetMetadata() const;
};

// -------------------------------------------------------------------

class AC : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Nmea2k.AC) */ {
 public:
  AC();
  virtual ~AC();

  AC(const AC& from);

  inline AC& operator=(const AC& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AC(AC&& from) noexcept
    : AC() {
    *this = ::std::move(from);
  }

  inline AC& operator=(AC&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const AC& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AC* internal_default_instance() {
    return reinterpret_cast<const AC*>(
               &_AC_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    93;

  void Swap(AC* other);
  friend void swap(AC& a, AC& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AC* New() const final {
    return CreateMaybeMessage<AC>(NULL);
  }

  AC* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<AC>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const AC& from);
  void MergeFrom(const AC& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AC* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  // map<uint32, .Nmea2k.ACLine> AClines = 2;
  int aclines_size() const;
  void clear_aclines();
  static const int kAClinesFieldNumber = 2;
  const ::google::protobuf::Map< ::google::protobuf::uint32, ::Nmea2k::ACLine >&
      aclines() const;
  ::google::protobuf::Map< ::google::protobuf::uint32, ::Nmea2k::ACLine >*
      mutable_aclines();

  // uint32 Instance = 1;
  void clear_instance();
  static const int kInstanceFieldNumber = 1;
  ::google::protobuf::uint32 instance() const;
  void set_instance(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Nmea2k.AC)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::MapField<
      AC_AClinesEntry_DoNotUse,
      ::google::protobuf::uint32, ::Nmea2k::ACLine,
      ::google::protobuf::internal::WireFormatLite::TYPE_UINT32,
      ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
      0 > aclines_;
  ::google::protobuf::uint32 instance_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_Nmea2k_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DC : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Nmea2k.DC) */ {
 public:
  DC();
  virtual ~DC();

  DC(const DC& from);

  inline DC& operator=(const DC& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DC(DC&& from) noexcept
    : DC() {
    *this = ::std::move(from);
  }

  inline DC& operator=(DC&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const DC& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DC* internal_default_instance() {
    return reinterpret_cast<const DC*>(
               &_DC_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    94;

  void Swap(DC* other);
  friend void swap(DC& a, DC& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DC* New() const final {
    return CreateMaybeMessage<DC>(NULL);
  }

  DC* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<DC>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const DC& from);
  void MergeFrom(const DC& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DC* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .Nmea2k.ValueF Voltage = 2;
  bool has_voltage() const;
  void clear_voltage();
  static const int kVoltageFieldNumber = 2;
  private:
  const ::Nmea2k::ValueF& _internal_voltage() const;
  public:
  const ::Nmea2k::ValueF& voltage() const;
  ::Nmea2k::ValueF* release_voltage();
  ::Nmea2k::ValueF* mutable_voltage();
  void set_allocated_voltage(::Nmea2k::ValueF* voltage);

  // .Nmea2k.ValueF Current = 3;
  bool has_current() const;
  void clear_current();
  static const int kCurrentFieldNumber = 3;
  private:
  const ::Nmea2k::ValueF& _internal_current() const;
  public:
  const ::Nmea2k::ValueF& current() const;
  ::Nmea2k::ValueF* release_current();
  ::Nmea2k::ValueF* mutable_current();
  void set_allocated_current(::Nmea2k::ValueF* current);

  // .Nmea2k.ValueF Temperature = 4;
  bool has_temperature() const;
  void clear_temperature();
  static const int kTemperatureFieldNumber = 4;
  private:
  const ::Nmea2k::ValueF& _internal_temperature() const;
  public:
  const ::Nmea2k::ValueF& temperature() const;
  ::Nmea2k::ValueF* release_temperature();
  ::Nmea2k::ValueF* mutable_temperature();
  void set_allocated_temperature(::Nmea2k::ValueF* temperature);

  // .Nmea2k.ValueS32 StateOfCharge = 5;
  bool has_stateofcharge() const;
  void clear_stateofcharge();
  static const int kStateOfChargeFieldNumber = 5;
  private:
  const ::Nmea2k::ValueS32& _internal_stateofcharge() const;
  public:
  const ::Nmea2k::ValueS32& stateofcharge() const;
  ::Nmea2k::ValueS32* release_stateofcharge();
  ::Nmea2k::ValueS32* mutable_stateofcharge();
  void set_allocated_stateofcharge(::Nmea2k::ValueS32* stateofcharge);

  // .Nmea2k.ValueF CapacityRemaining = 6;
  bool has_capacityremaining() const;
  void clear_capacityremaining();
  static const int kCapacityRemainingFieldNumber = 6;
  private:
  const ::Nmea2k::ValueF& _internal_capacityremaining() const;
  public:
  const ::Nmea2k::ValueF& capacityremaining() const;
  ::Nmea2k::ValueF* release_capacityremaining();
  ::Nmea2k::ValueF* mutable_capacityremaining();
  void set_allocated_capacityremaining(::Nmea2k::ValueF* capacityremaining);

  // .Nmea2k.ValueU32 TimeRemaining = 7;
  bool has_timeremaining() const;
  void clear_timeremaining();
  static const int kTimeRemainingFieldNumber = 7;
  private:
  const ::Nmea2k::ValueU32& _internal_timeremaining() const;
  public:
  const ::Nmea2k::ValueU32& timeremaining() const;
  ::Nmea2k::ValueU32* release_timeremaining();
  ::Nmea2k::ValueU32* mutable_timeremaining();
  void set_allocated_timeremaining(::Nmea2k::ValueU32* timeremaining);

  // .Nmea2k.ValueU32 TimeToCharge = 8;
  bool has_timetocharge() const;
  void clear_timetocharge();
  static const int kTimeToChargeFieldNumber = 8;
  private:
  const ::Nmea2k::ValueU32& _internal_timetocharge() const;
  public:
  const ::Nmea2k::ValueU32& timetocharge() const;
  ::Nmea2k::ValueU32* release_timetocharge();
  ::Nmea2k::ValueU32* mutable_timetocharge();
  void set_allocated_timetocharge(::Nmea2k::ValueU32* timetocharge);

  // .Nmea2k.ValueU32 TimeRemainingOrToCharge = 9;
  bool has_timeremainingortocharge() const;
  void clear_timeremainingortocharge();
  static const int kTimeRemainingOrToChargeFieldNumber = 9;
  private:
  const ::Nmea2k::ValueU32& _internal_timeremainingortocharge() const;
  public:
  const ::Nmea2k::ValueU32& timeremainingortocharge() const;
  ::Nmea2k::ValueU32* release_timeremainingortocharge();
  ::Nmea2k::ValueU32* mutable_timeremainingortocharge();
  void set_allocated_timeremainingortocharge(::Nmea2k::ValueU32* timeremainingortocharge);

  // uint32 Instance = 1;
  void clear_instance();
  static const int kInstanceFieldNumber = 1;
  ::google::protobuf::uint32 instance() const;
  void set_instance(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Nmea2k.DC)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::Nmea2k::ValueF* voltage_;
  ::Nmea2k::ValueF* current_;
  ::Nmea2k::ValueF* temperature_;
  ::Nmea2k::ValueS32* stateofcharge_;
  ::Nmea2k::ValueF* capacityremaining_;
  ::Nmea2k::ValueU32* timeremaining_;
  ::Nmea2k::ValueU32* timetocharge_;
  ::Nmea2k::ValueU32* timeremainingortocharge_;
  ::google::protobuf::uint32 instance_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_Nmea2k_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ValueFaultState : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Nmea2k.ValueFaultState) */ {
 public:
  ValueFaultState();
  virtual ~ValueFaultState();

  ValueFaultState(const ValueFaultState& from);

  inline ValueFaultState& operator=(const ValueFaultState& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ValueFaultState(ValueFaultState&& from) noexcept
    : ValueFaultState() {
    *this = ::std::move(from);
  }

  inline ValueFaultState& operator=(ValueFaultState&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ValueFaultState& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ValueFaultState* internal_default_instance() {
    return reinterpret_cast<const ValueFaultState*>(
               &_ValueFaultState_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    95;

  void Swap(ValueFaultState* other);
  friend void swap(ValueFaultState& a, ValueFaultState& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ValueFaultState* New() const final {
    return CreateMaybeMessage<ValueFaultState>(NULL);
  }

  ValueFaultState* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ValueFaultState>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ValueFaultState& from);
  void MergeFrom(const ValueFaultState& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ValueFaultState* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef ValueFaultState_eFaultState eFaultState;
  static const eFaultState None =
    ValueFaultState_eFaultState_None;
  static const eFaultState ConfigurationConflict =
    ValueFaultState_eFaultState_ConfigurationConflict;
  static const eFaultState DipswitchConflict =
    ValueFaultState_eFaultState_DipswitchConflict;
  static const eFaultState EepromFailure =
    ValueFaultState_eFaultState_EepromFailure;
  static const eFaultState NoCZoneNetwork =
    ValueFaultState_eFaultState_NoCZoneNetwork;
  static const eFaultState LowRunCurrent =
    ValueFaultState_eFaultState_LowRunCurrent;
  static const eFaultState OverCurrent =
    ValueFaultState_eFaultState_OverCurrent;
  static const eFaultState ShortCircuit =
    ValueFaultState_eFaultState_ShortCircuit;
  static const eFaultState MissingCommander =
    ValueFaultState_eFaultState_MissingCommander;
  static const eFaultState MissingModeCommander =
    ValueFaultState_eFaultState_MissingModeCommander;
  static const eFaultState ReverseCurrent =
    ValueFaultState_eFaultState_ReverseCurrent;
  static const eFaultState CurrentCalibration =
    ValueFaultState_eFaultState_CurrentCalibration;
  static inline bool eFaultState_IsValid(int value) {
    return ValueFaultState_eFaultState_IsValid(value);
  }
  static const eFaultState eFaultState_MIN =
    ValueFaultState_eFaultState_eFaultState_MIN;
  static const eFaultState eFaultState_MAX =
    ValueFaultState_eFaultState_eFaultState_MAX;
  static const int eFaultState_ARRAYSIZE =
    ValueFaultState_eFaultState_eFaultState_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  eFaultState_descriptor() {
    return ValueFaultState_eFaultState_descriptor();
  }
  static inline const ::std::string& eFaultState_Name(eFaultState value) {
    return ValueFaultState_eFaultState_Name(value);
  }
  static inline bool eFaultState_Parse(const ::std::string& name,
      eFaultState* value) {
    return ValueFaultState_eFaultState_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // bool Valid = 1;
  void clear_valid();
  static const int kValidFieldNumber = 1;
  bool valid() const;
  void set_valid(bool value);

  // .Nmea2k.ValueFaultState.eFaultState Value = 2;
  void clear_value();
  static const int kValueFieldNumber = 2;
  ::Nmea2k::ValueFaultState_eFaultState value() const;
  void set_value(::Nmea2k::ValueFaultState_eFaultState value);

  // @@protoc_insertion_point(class_scope:Nmea2k.ValueFaultState)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool valid_;
  int value_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_Nmea2k_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ValueSystemOnState : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Nmea2k.ValueSystemOnState) */ {
 public:
  ValueSystemOnState();
  virtual ~ValueSystemOnState();

  ValueSystemOnState(const ValueSystemOnState& from);

  inline ValueSystemOnState& operator=(const ValueSystemOnState& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ValueSystemOnState(ValueSystemOnState&& from) noexcept
    : ValueSystemOnState() {
    *this = ::std::move(from);
  }

  inline ValueSystemOnState& operator=(ValueSystemOnState&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ValueSystemOnState& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ValueSystemOnState* internal_default_instance() {
    return reinterpret_cast<const ValueSystemOnState*>(
               &_ValueSystemOnState_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    96;

  void Swap(ValueSystemOnState* other);
  friend void swap(ValueSystemOnState& a, ValueSystemOnState& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ValueSystemOnState* New() const final {
    return CreateMaybeMessage<ValueSystemOnState>(NULL);
  }

  ValueSystemOnState* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ValueSystemOnState>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ValueSystemOnState& from);
  void MergeFrom(const ValueSystemOnState& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ValueSystemOnState* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef ValueSystemOnState_eSystemOnState eSystemOnState;
  static const eSystemOnState StateOff =
    ValueSystemOnState_eSystemOnState_StateOff;
  static const eSystemOnState StateOn =
    ValueSystemOnState_eSystemOnState_StateOn;
  static const eSystemOnState StateOnTimer =
    ValueSystemOnState_eSystemOnState_StateOnTimer;
  static inline bool eSystemOnState_IsValid(int value) {
    return ValueSystemOnState_eSystemOnState_IsValid(value);
  }
  static const eSystemOnState eSystemOnState_MIN =
    ValueSystemOnState_eSystemOnState_eSystemOnState_MIN;
  static const eSystemOnState eSystemOnState_MAX =
    ValueSystemOnState_eSystemOnState_eSystemOnState_MAX;
  static const int eSystemOnState_ARRAYSIZE =
    ValueSystemOnState_eSystemOnState_eSystemOnState_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  eSystemOnState_descriptor() {
    return ValueSystemOnState_eSystemOnState_descriptor();
  }
  static inline const ::std::string& eSystemOnState_Name(eSystemOnState value) {
    return ValueSystemOnState_eSystemOnState_Name(value);
  }
  static inline bool eSystemOnState_Parse(const ::std::string& name,
      eSystemOnState* value) {
    return ValueSystemOnState_eSystemOnState_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // bool Valid = 1;
  void clear_valid();
  static const int kValidFieldNumber = 1;
  bool valid() const;
  void set_valid(bool value);

  // .Nmea2k.ValueSystemOnState.eSystemOnState Value = 2;
  void clear_value();
  static const int kValueFieldNumber = 2;
  ::Nmea2k::ValueSystemOnState_eSystemOnState value() const;
  void set_value(::Nmea2k::ValueSystemOnState_eSystemOnState value);

  // @@protoc_insertion_point(class_scope:Nmea2k.ValueSystemOnState)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool valid_;
  int value_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_Nmea2k_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ValueSourceAvailable : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Nmea2k.ValueSourceAvailable) */ {
 public:
  ValueSourceAvailable();
  virtual ~ValueSourceAvailable();

  ValueSourceAvailable(const ValueSourceAvailable& from);

  inline ValueSourceAvailable& operator=(const ValueSourceAvailable& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ValueSourceAvailable(ValueSourceAvailable&& from) noexcept
    : ValueSourceAvailable() {
    *this = ::std::move(from);
  }

  inline ValueSourceAvailable& operator=(ValueSourceAvailable&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ValueSourceAvailable& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ValueSourceAvailable* internal_default_instance() {
    return reinterpret_cast<const ValueSourceAvailable*>(
               &_ValueSourceAvailable_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    97;

  void Swap(ValueSourceAvailable* other);
  friend void swap(ValueSourceAvailable& a, ValueSourceAvailable& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ValueSourceAvailable* New() const final {
    return CreateMaybeMessage<ValueSourceAvailable>(NULL);
  }

  ValueSourceAvailable* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ValueSourceAvailable>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ValueSourceAvailable& from);
  void MergeFrom(const ValueSourceAvailable& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ValueSourceAvailable* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef ValueSourceAvailable_eSourceAvailable eSourceAvailable;
  static const eSourceAvailable SourceInvalid =
    ValueSourceAvailable_eSourceAvailable_SourceInvalid;
  static const eSourceAvailable SourceUnAvailable =
    ValueSourceAvailable_eSourceAvailable_SourceUnAvailable;
  static const eSourceAvailable SourceAvailable =
    ValueSourceAvailable_eSourceAvailable_SourceAvailable;
  static inline bool eSourceAvailable_IsValid(int value) {
    return ValueSourceAvailable_eSourceAvailable_IsValid(value);
  }
  static const eSourceAvailable eSourceAvailable_MIN =
    ValueSourceAvailable_eSourceAvailable_eSourceAvailable_MIN;
  static const eSourceAvailable eSourceAvailable_MAX =
    ValueSourceAvailable_eSourceAvailable_eSourceAvailable_MAX;
  static const int eSourceAvailable_ARRAYSIZE =
    ValueSourceAvailable_eSourceAvailable_eSourceAvailable_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  eSourceAvailable_descriptor() {
    return ValueSourceAvailable_eSourceAvailable_descriptor();
  }
  static inline const ::std::string& eSourceAvailable_Name(eSourceAvailable value) {
    return ValueSourceAvailable_eSourceAvailable_Name(value);
  }
  static inline bool eSourceAvailable_Parse(const ::std::string& name,
      eSourceAvailable* value) {
    return ValueSourceAvailable_eSourceAvailable_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // bool Valid = 1;
  void clear_valid();
  static const int kValidFieldNumber = 1;
  bool valid() const;
  void set_valid(bool value);

  // .Nmea2k.ValueSourceAvailable.eSourceAvailable Value = 2;
  void clear_value();
  static const int kValueFieldNumber = 2;
  ::Nmea2k::ValueSourceAvailable_eSourceAvailable value() const;
  void set_value(::Nmea2k::ValueSourceAvailable_eSourceAvailable value);

  // @@protoc_insertion_point(class_scope:Nmea2k.ValueSourceAvailable)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool valid_;
  int value_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_Nmea2k_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Circuit : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Nmea2k.Circuit) */ {
 public:
  Circuit();
  virtual ~Circuit();

  Circuit(const Circuit& from);

  inline Circuit& operator=(const Circuit& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Circuit(Circuit&& from) noexcept
    : Circuit() {
    *this = ::std::move(from);
  }

  inline Circuit& operator=(Circuit&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Circuit& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Circuit* internal_default_instance() {
    return reinterpret_cast<const Circuit*>(
               &_Circuit_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    98;

  void Swap(Circuit* other);
  friend void swap(Circuit& a, Circuit& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Circuit* New() const final {
    return CreateMaybeMessage<Circuit>(NULL);
  }

  Circuit* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Circuit>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Circuit& from);
  void MergeFrom(const Circuit& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Circuit* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .Nmea2k.ValueSystemOnState SystemsOn = 2;
  bool has_systemson() const;
  void clear_systemson();
  static const int kSystemsOnFieldNumber = 2;
  private:
  const ::Nmea2k::ValueSystemOnState& _internal_systemson() const;
  public:
  const ::Nmea2k::ValueSystemOnState& systemson() const;
  ::Nmea2k::ValueSystemOnState* release_systemson();
  ::Nmea2k::ValueSystemOnState* mutable_systemson();
  void set_allocated_systemson(::Nmea2k::ValueSystemOnState* systemson);

  // .Nmea2k.ValueU32 Level = 3;
  bool has_level() const;
  void clear_level();
  static const int kLevelFieldNumber = 3;
  private:
  const ::Nmea2k::ValueU32& _internal_level() const;
  public:
  const ::Nmea2k::ValueU32& level() const;
  ::Nmea2k::ValueU32* release_level();
  ::Nmea2k::ValueU32* mutable_level();
  void set_allocated_level(::Nmea2k::ValueU32* level);

  // .Nmea2k.ValueF Current = 4;
  bool has_current() const;
  void clear_current();
  static const int kCurrentFieldNumber = 4;
  private:
  const ::Nmea2k::ValueF& _internal_current() const;
  public:
  const ::Nmea2k::ValueF& current() const;
  ::Nmea2k::ValueF* release_current();
  ::Nmea2k::ValueF* mutable_current();
  void set_allocated_current(::Nmea2k::ValueF* current);

  // .Nmea2k.ValueFaultState Fault = 5;
  bool has_fault() const;
  void clear_fault();
  static const int kFaultFieldNumber = 5;
  private:
  const ::Nmea2k::ValueFaultState& _internal_fault() const;
  public:
  const ::Nmea2k::ValueFaultState& fault() const;
  ::Nmea2k::ValueFaultState* release_fault();
  ::Nmea2k::ValueFaultState* mutable_fault();
  void set_allocated_fault(::Nmea2k::ValueFaultState* fault);

  // .Nmea2k.ValueU32 OnCount = 6;
  bool has_oncount() const;
  void clear_oncount();
  static const int kOnCountFieldNumber = 6;
  private:
  const ::Nmea2k::ValueU32& _internal_oncount() const;
  public:
  const ::Nmea2k::ValueU32& oncount() const;
  ::Nmea2k::ValueU32* release_oncount();
  ::Nmea2k::ValueU32* mutable_oncount();
  void set_allocated_oncount(::Nmea2k::ValueU32* oncount);

  // .Nmea2k.ValueU32 OnTime = 7;
  bool has_ontime() const;
  void clear_ontime();
  static const int kOnTimeFieldNumber = 7;
  private:
  const ::Nmea2k::ValueU32& _internal_ontime() const;
  public:
  const ::Nmea2k::ValueU32& ontime() const;
  ::Nmea2k::ValueU32* release_ontime();
  ::Nmea2k::ValueU32* mutable_ontime();
  void set_allocated_ontime(::Nmea2k::ValueU32* ontime);

  // .Nmea2k.ValueU32 SequentialState = 8;
  bool has_sequentialstate() const;
  void clear_sequentialstate();
  static const int kSequentialStateFieldNumber = 8;
  private:
  const ::Nmea2k::ValueU32& _internal_sequentialstate() const;
  public:
  const ::Nmea2k::ValueU32& sequentialstate() const;
  ::Nmea2k::ValueU32* release_sequentialstate();
  ::Nmea2k::ValueU32* mutable_sequentialstate();
  void set_allocated_sequentialstate(::Nmea2k::ValueU32* sequentialstate);

  // .Nmea2k.ValueU32 ModesSystemOn = 9;
  bool has_modessystemon() const;
  void clear_modessystemon();
  static const int kModesSystemOnFieldNumber = 9;
  private:
  const ::Nmea2k::ValueU32& _internal_modessystemon() const;
  public:
  const ::Nmea2k::ValueU32& modessystemon() const;
  ::Nmea2k::ValueU32* release_modessystemon();
  ::Nmea2k::ValueU32* mutable_modessystemon();
  void set_allocated_modessystemon(::Nmea2k::ValueU32* modessystemon);

  // .Nmea2k.ValueSourceAvailable ACSourceAvailable = 10;
  bool has_acsourceavailable() const;
  void clear_acsourceavailable();
  static const int kACSourceAvailableFieldNumber = 10;
  private:
  const ::Nmea2k::ValueSourceAvailable& _internal_acsourceavailable() const;
  public:
  const ::Nmea2k::ValueSourceAvailable& acsourceavailable() const;
  ::Nmea2k::ValueSourceAvailable* release_acsourceavailable();
  ::Nmea2k::ValueSourceAvailable* mutable_acsourceavailable();
  void set_allocated_acsourceavailable(::Nmea2k::ValueSourceAvailable* acsourceavailable);

  // .Nmea2k.ValueBool IsOffline = 11;
  bool has_isoffline() const;
  void clear_isoffline();
  static const int kIsOfflineFieldNumber = 11;
  private:
  const ::Nmea2k::ValueBool& _internal_isoffline() const;
  public:
  const ::Nmea2k::ValueBool& isoffline() const;
  ::Nmea2k::ValueBool* release_isoffline();
  ::Nmea2k::ValueBool* mutable_isoffline();
  void set_allocated_isoffline(::Nmea2k::ValueBool* isoffline);

  // uint32 Id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::uint32 id() const;
  void set_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Nmea2k.Circuit)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::Nmea2k::ValueSystemOnState* systemson_;
  ::Nmea2k::ValueU32* level_;
  ::Nmea2k::ValueF* current_;
  ::Nmea2k::ValueFaultState* fault_;
  ::Nmea2k::ValueU32* oncount_;
  ::Nmea2k::ValueU32* ontime_;
  ::Nmea2k::ValueU32* sequentialstate_;
  ::Nmea2k::ValueU32* modessystemon_;
  ::Nmea2k::ValueSourceAvailable* acsourceavailable_;
  ::Nmea2k::ValueBool* isoffline_;
  ::google::protobuf::uint32 id_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_Nmea2k_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ValueContactorOnState : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Nmea2k.ValueContactorOnState) */ {
 public:
  ValueContactorOnState();
  virtual ~ValueContactorOnState();

  ValueContactorOnState(const ValueContactorOnState& from);

  inline ValueContactorOnState& operator=(const ValueContactorOnState& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ValueContactorOnState(ValueContactorOnState&& from) noexcept
    : ValueContactorOnState() {
    *this = ::std::move(from);
  }

  inline ValueContactorOnState& operator=(ValueContactorOnState&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ValueContactorOnState& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ValueContactorOnState* internal_default_instance() {
    return reinterpret_cast<const ValueContactorOnState*>(
               &_ValueContactorOnState_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    99;

  void Swap(ValueContactorOnState* other);
  friend void swap(ValueContactorOnState& a, ValueContactorOnState& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ValueContactorOnState* New() const final {
    return CreateMaybeMessage<ValueContactorOnState>(NULL);
  }

  ValueContactorOnState* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ValueContactorOnState>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ValueContactorOnState& from);
  void MergeFrom(const ValueContactorOnState& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ValueContactorOnState* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef ValueContactorOnState_eContactorOnState eContactorOnState;
  static const eContactorOnState ContactorOff =
    ValueContactorOnState_eContactorOnState_ContactorOff;
  static const eContactorOnState ContactorOn =
    ValueContactorOnState_eContactorOnState_ContactorOn;
  static const eContactorOnState ContactorAvailable =
    ValueContactorOnState_eContactorOnState_ContactorAvailable;
  static const eContactorOnState ContactorUnAvailable =
    ValueContactorOnState_eContactorOnState_ContactorUnAvailable;
  static const eContactorOnState ContactorFault =
    ValueContactorOnState_eContactorOnState_ContactorFault;
  static const eContactorOnState ContactorOverride =
    ValueContactorOnState_eContactorOnState_ContactorOverride;
  static const eContactorOnState ContactorStarting =
    ValueContactorOnState_eContactorOnState_ContactorStarting;
  static inline bool eContactorOnState_IsValid(int value) {
    return ValueContactorOnState_eContactorOnState_IsValid(value);
  }
  static const eContactorOnState eContactorOnState_MIN =
    ValueContactorOnState_eContactorOnState_eContactorOnState_MIN;
  static const eContactorOnState eContactorOnState_MAX =
    ValueContactorOnState_eContactorOnState_eContactorOnState_MAX;
  static const int eContactorOnState_ARRAYSIZE =
    ValueContactorOnState_eContactorOnState_eContactorOnState_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  eContactorOnState_descriptor() {
    return ValueContactorOnState_eContactorOnState_descriptor();
  }
  static inline const ::std::string& eContactorOnState_Name(eContactorOnState value) {
    return ValueContactorOnState_eContactorOnState_Name(value);
  }
  static inline bool eContactorOnState_Parse(const ::std::string& name,
      eContactorOnState* value) {
    return ValueContactorOnState_eContactorOnState_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // bool Valid = 1;
  void clear_valid();
  static const int kValidFieldNumber = 1;
  bool valid() const;
  void set_valid(bool value);

  // .Nmea2k.ValueContactorOnState.eContactorOnState Value = 2;
  void clear_value();
  static const int kValueFieldNumber = 2;
  ::Nmea2k::ValueContactorOnState_eContactorOnState value() const;
  void set_value(::Nmea2k::ValueContactorOnState_eContactorOnState value);

  // @@protoc_insertion_point(class_scope:Nmea2k.ValueContactorOnState)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool valid_;
  int value_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_Nmea2k_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ACMainContactor : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Nmea2k.ACMainContactor) */ {
 public:
  ACMainContactor();
  virtual ~ACMainContactor();

  ACMainContactor(const ACMainContactor& from);

  inline ACMainContactor& operator=(const ACMainContactor& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ACMainContactor(ACMainContactor&& from) noexcept
    : ACMainContactor() {
    *this = ::std::move(from);
  }

  inline ACMainContactor& operator=(ACMainContactor&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ACMainContactor& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ACMainContactor* internal_default_instance() {
    return reinterpret_cast<const ACMainContactor*>(
               &_ACMainContactor_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    100;

  void Swap(ACMainContactor* other);
  friend void swap(ACMainContactor& a, ACMainContactor& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ACMainContactor* New() const final {
    return CreateMaybeMessage<ACMainContactor>(NULL);
  }

  ACMainContactor* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ACMainContactor>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ACMainContactor& from);
  void MergeFrom(const ACMainContactor& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ACMainContactor* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .Nmea2k.ValueContactorOnState ACContactorSystemsState = 2;
  bool has_accontactorsystemsstate() const;
  void clear_accontactorsystemsstate();
  static const int kACContactorSystemsStateFieldNumber = 2;
  private:
  const ::Nmea2k::ValueContactorOnState& _internal_accontactorsystemsstate() const;
  public:
  const ::Nmea2k::ValueContactorOnState& accontactorsystemsstate() const;
  ::Nmea2k::ValueContactorOnState* release_accontactorsystemsstate();
  ::Nmea2k::ValueContactorOnState* mutable_accontactorsystemsstate();
  void set_allocated_accontactorsystemsstate(::Nmea2k::ValueContactorOnState* accontactorsystemsstate);

  // .Nmea2k.ValueBool ACContactorSourceAvailable = 3;
  bool has_accontactorsourceavailable() const;
  void clear_accontactorsourceavailable();
  static const int kACContactorSourceAvailableFieldNumber = 3;
  private:
  const ::Nmea2k::ValueBool& _internal_accontactorsourceavailable() const;
  public:
  const ::Nmea2k::ValueBool& accontactorsourceavailable() const;
  ::Nmea2k::ValueBool* release_accontactorsourceavailable();
  ::Nmea2k::ValueBool* mutable_accontactorsourceavailable();
  void set_allocated_accontactorsourceavailable(::Nmea2k::ValueBool* accontactorsourceavailable);

  // .Nmea2k.ValueBool ReversePolarity = 4;
  bool has_reversepolarity() const;
  void clear_reversepolarity();
  static const int kReversePolarityFieldNumber = 4;
  private:
  const ::Nmea2k::ValueBool& _internal_reversepolarity() const;
  public:
  const ::Nmea2k::ValueBool& reversepolarity() const;
  ::Nmea2k::ValueBool* release_reversepolarity();
  ::Nmea2k::ValueBool* mutable_reversepolarity();
  void set_allocated_reversepolarity(::Nmea2k::ValueBool* reversepolarity);

  // .Nmea2k.ValueBool ACContactorAutoChangeOver = 5;
  bool has_accontactorautochangeover() const;
  void clear_accontactorautochangeover();
  static const int kACContactorAutoChangeOverFieldNumber = 5;
  private:
  const ::Nmea2k::ValueBool& _internal_accontactorautochangeover() const;
  public:
  const ::Nmea2k::ValueBool& accontactorautochangeover() const;
  ::Nmea2k::ValueBool* release_accontactorautochangeover();
  ::Nmea2k::ValueBool* mutable_accontactorautochangeover();
  void set_allocated_accontactorautochangeover(::Nmea2k::ValueBool* accontactorautochangeover);

  // .Nmea2k.ValueBool ManualOverride = 6;
  bool has_manualoverride() const;
  void clear_manualoverride();
  static const int kManualOverrideFieldNumber = 6;
  private:
  const ::Nmea2k::ValueBool& _internal_manualoverride() const;
  public:
  const ::Nmea2k::ValueBool& manualoverride() const;
  ::Nmea2k::ValueBool* release_manualoverride();
  ::Nmea2k::ValueBool* mutable_manualoverride();
  void set_allocated_manualoverride(::Nmea2k::ValueBool* manualoverride);

  // uint32 SystemStateId = 1;
  void clear_systemstateid();
  static const int kSystemStateIdFieldNumber = 1;
  ::google::protobuf::uint32 systemstateid() const;
  void set_systemstateid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Nmea2k.ACMainContactor)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::Nmea2k::ValueContactorOnState* accontactorsystemsstate_;
  ::Nmea2k::ValueBool* accontactorsourceavailable_;
  ::Nmea2k::ValueBool* reversepolarity_;
  ::Nmea2k::ValueBool* accontactorautochangeover_;
  ::Nmea2k::ValueBool* manualoverride_;
  ::google::protobuf::uint32 systemstateid_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_Nmea2k_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Temperature : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Nmea2k.Temperature) */ {
 public:
  Temperature();
  virtual ~Temperature();

  Temperature(const Temperature& from);

  inline Temperature& operator=(const Temperature& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Temperature(Temperature&& from) noexcept
    : Temperature() {
    *this = ::std::move(from);
  }

  inline Temperature& operator=(Temperature&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Temperature& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Temperature* internal_default_instance() {
    return reinterpret_cast<const Temperature*>(
               &_Temperature_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    101;

  void Swap(Temperature* other);
  friend void swap(Temperature& a, Temperature& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Temperature* New() const final {
    return CreateMaybeMessage<Temperature>(NULL);
  }

  Temperature* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Temperature>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Temperature& from);
  void MergeFrom(const Temperature& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Temperature* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .Nmea2k.ValueF Temperature = 2;
  bool has_temperature() const;
  void clear_temperature();
  static const int kTemperatureFieldNumber = 2;
  private:
  const ::Nmea2k::ValueF& _internal_temperature() const;
  public:
  const ::Nmea2k::ValueF& temperature() const;
  ::Nmea2k::ValueF* release_temperature();
  ::Nmea2k::ValueF* mutable_temperature();
  void set_allocated_temperature(::Nmea2k::ValueF* temperature);

  // uint32 Instance = 1;
  void clear_instance();
  static const int kInstanceFieldNumber = 1;
  ::google::protobuf::uint32 instance() const;
  void set_instance(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Nmea2k.Temperature)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::Nmea2k::ValueF* temperature_;
  ::google::protobuf::uint32 instance_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_Nmea2k_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Pressure : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Nmea2k.Pressure) */ {
 public:
  Pressure();
  virtual ~Pressure();

  Pressure(const Pressure& from);

  inline Pressure& operator=(const Pressure& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Pressure(Pressure&& from) noexcept
    : Pressure() {
    *this = ::std::move(from);
  }

  inline Pressure& operator=(Pressure&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Pressure& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Pressure* internal_default_instance() {
    return reinterpret_cast<const Pressure*>(
               &_Pressure_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    102;

  void Swap(Pressure* other);
  friend void swap(Pressure& a, Pressure& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Pressure* New() const final {
    return CreateMaybeMessage<Pressure>(NULL);
  }

  Pressure* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Pressure>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Pressure& from);
  void MergeFrom(const Pressure& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Pressure* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .Nmea2k.ValueF Pressure = 2;
  bool has_pressure() const;
  void clear_pressure();
  static const int kPressureFieldNumber = 2;
  private:
  const ::Nmea2k::ValueF& _internal_pressure() const;
  public:
  const ::Nmea2k::ValueF& pressure() const;
  ::Nmea2k::ValueF* release_pressure();
  ::Nmea2k::ValueF* mutable_pressure();
  void set_allocated_pressure(::Nmea2k::ValueF* pressure);

  // uint32 Instance = 1;
  void clear_instance();
  static const int kInstanceFieldNumber = 1;
  ::google::protobuf::uint32 instance() const;
  void set_instance(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Nmea2k.Pressure)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::Nmea2k::ValueF* pressure_;
  ::google::protobuf::uint32 instance_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_Nmea2k_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ValueHVACOperatingMode : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Nmea2k.ValueHVACOperatingMode) */ {
 public:
  ValueHVACOperatingMode();
  virtual ~ValueHVACOperatingMode();

  ValueHVACOperatingMode(const ValueHVACOperatingMode& from);

  inline ValueHVACOperatingMode& operator=(const ValueHVACOperatingMode& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ValueHVACOperatingMode(ValueHVACOperatingMode&& from) noexcept
    : ValueHVACOperatingMode() {
    *this = ::std::move(from);
  }

  inline ValueHVACOperatingMode& operator=(ValueHVACOperatingMode&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ValueHVACOperatingMode& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ValueHVACOperatingMode* internal_default_instance() {
    return reinterpret_cast<const ValueHVACOperatingMode*>(
               &_ValueHVACOperatingMode_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    103;

  void Swap(ValueHVACOperatingMode* other);
  friend void swap(ValueHVACOperatingMode& a, ValueHVACOperatingMode& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ValueHVACOperatingMode* New() const final {
    return CreateMaybeMessage<ValueHVACOperatingMode>(NULL);
  }

  ValueHVACOperatingMode* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ValueHVACOperatingMode>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ValueHVACOperatingMode& from);
  void MergeFrom(const ValueHVACOperatingMode& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ValueHVACOperatingMode* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef ValueHVACOperatingMode_eHVACOperatingMode eHVACOperatingMode;
  static const eHVACOperatingMode NoChange =
    ValueHVACOperatingMode_eHVACOperatingMode_NoChange;
  static const eHVACOperatingMode Off =
    ValueHVACOperatingMode_eHVACOperatingMode_Off;
  static const eHVACOperatingMode Moisture =
    ValueHVACOperatingMode_eHVACOperatingMode_Moisture;
  static const eHVACOperatingMode Auto =
    ValueHVACOperatingMode_eHVACOperatingMode_Auto;
  static const eHVACOperatingMode Heat =
    ValueHVACOperatingMode_eHVACOperatingMode_Heat;
  static const eHVACOperatingMode Cool =
    ValueHVACOperatingMode_eHVACOperatingMode_Cool;
  static const eHVACOperatingMode AutoAux =
    ValueHVACOperatingMode_eHVACOperatingMode_AutoAux;
  static const eHVACOperatingMode Aux =
    ValueHVACOperatingMode_eHVACOperatingMode_Aux;
  static const eHVACOperatingMode FanOnly =
    ValueHVACOperatingMode_eHVACOperatingMode_FanOnly;
  static const eHVACOperatingMode Pet =
    ValueHVACOperatingMode_eHVACOperatingMode_Pet;
  static inline bool eHVACOperatingMode_IsValid(int value) {
    return ValueHVACOperatingMode_eHVACOperatingMode_IsValid(value);
  }
  static const eHVACOperatingMode eHVACOperatingMode_MIN =
    ValueHVACOperatingMode_eHVACOperatingMode_eHVACOperatingMode_MIN;
  static const eHVACOperatingMode eHVACOperatingMode_MAX =
    ValueHVACOperatingMode_eHVACOperatingMode_eHVACOperatingMode_MAX;
  static const int eHVACOperatingMode_ARRAYSIZE =
    ValueHVACOperatingMode_eHVACOperatingMode_eHVACOperatingMode_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  eHVACOperatingMode_descriptor() {
    return ValueHVACOperatingMode_eHVACOperatingMode_descriptor();
  }
  static inline const ::std::string& eHVACOperatingMode_Name(eHVACOperatingMode value) {
    return ValueHVACOperatingMode_eHVACOperatingMode_Name(value);
  }
  static inline bool eHVACOperatingMode_Parse(const ::std::string& name,
      eHVACOperatingMode* value) {
    return ValueHVACOperatingMode_eHVACOperatingMode_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // bool Valid = 1;
  void clear_valid();
  static const int kValidFieldNumber = 1;
  bool valid() const;
  void set_valid(bool value);

  // .Nmea2k.ValueHVACOperatingMode.eHVACOperatingMode Value = 2;
  void clear_value();
  static const int kValueFieldNumber = 2;
  ::Nmea2k::ValueHVACOperatingMode_eHVACOperatingMode value() const;
  void set_value(::Nmea2k::ValueHVACOperatingMode_eHVACOperatingMode value);

  // @@protoc_insertion_point(class_scope:Nmea2k.ValueHVACOperatingMode)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool valid_;
  int value_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_Nmea2k_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class HVAC : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Nmea2k.HVAC) */ {
 public:
  HVAC();
  virtual ~HVAC();

  HVAC(const HVAC& from);

  inline HVAC& operator=(const HVAC& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  HVAC(HVAC&& from) noexcept
    : HVAC() {
    *this = ::std::move(from);
  }

  inline HVAC& operator=(HVAC&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const HVAC& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const HVAC* internal_default_instance() {
    return reinterpret_cast<const HVAC*>(
               &_HVAC_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    104;

  void Swap(HVAC* other);
  friend void swap(HVAC& a, HVAC& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline HVAC* New() const final {
    return CreateMaybeMessage<HVAC>(NULL);
  }

  HVAC* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<HVAC>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const HVAC& from);
  void MergeFrom(const HVAC& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(HVAC* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .Nmea2k.ValueHVACOperatingMode OperationMode = 2;
  bool has_operationmode() const;
  void clear_operationmode();
  static const int kOperationModeFieldNumber = 2;
  private:
  const ::Nmea2k::ValueHVACOperatingMode& _internal_operationmode() const;
  public:
  const ::Nmea2k::ValueHVACOperatingMode& operationmode() const;
  ::Nmea2k::ValueHVACOperatingMode* release_operationmode();
  ::Nmea2k::ValueHVACOperatingMode* mutable_operationmode();
  void set_allocated_operationmode(::Nmea2k::ValueHVACOperatingMode* operationmode);

  // .Nmea2k.ValueU32 FanMode = 3;
  bool has_fanmode() const;
  void clear_fanmode();
  static const int kFanModeFieldNumber = 3;
  private:
  const ::Nmea2k::ValueU32& _internal_fanmode() const;
  public:
  const ::Nmea2k::ValueU32& fanmode() const;
  ::Nmea2k::ValueU32* release_fanmode();
  ::Nmea2k::ValueU32* mutable_fanmode();
  void set_allocated_fanmode(::Nmea2k::ValueU32* fanmode);

  // .Nmea2k.ValueU32 FanSpeed = 4;
  bool has_fanspeed() const;
  void clear_fanspeed();
  static const int kFanSpeedFieldNumber = 4;
  private:
  const ::Nmea2k::ValueU32& _internal_fanspeed() const;
  public:
  const ::Nmea2k::ValueU32& fanspeed() const;
  ::Nmea2k::ValueU32* release_fanspeed();
  ::Nmea2k::ValueU32* mutable_fanspeed();
  void set_allocated_fanspeed(::Nmea2k::ValueU32* fanspeed);

  // .Nmea2k.ValueF EnvironmentSetTemperature = 5;
  bool has_environmentsettemperature() const;
  void clear_environmentsettemperature();
  static const int kEnvironmentSetTemperatureFieldNumber = 5;
  private:
  const ::Nmea2k::ValueF& _internal_environmentsettemperature() const;
  public:
  const ::Nmea2k::ValueF& environmentsettemperature() const;
  ::Nmea2k::ValueF* release_environmentsettemperature();
  ::Nmea2k::ValueF* mutable_environmentsettemperature();
  void set_allocated_environmentsettemperature(::Nmea2k::ValueF* environmentsettemperature);

  // .Nmea2k.ValueF EnvironmentTemperature = 6;
  bool has_environmenttemperature() const;
  void clear_environmenttemperature();
  static const int kEnvironmentTemperatureFieldNumber = 6;
  private:
  const ::Nmea2k::ValueF& _internal_environmenttemperature() const;
  public:
  const ::Nmea2k::ValueF& environmenttemperature() const;
  ::Nmea2k::ValueF* release_environmenttemperature();
  ::Nmea2k::ValueF* mutable_environmenttemperature();
  void set_allocated_environmenttemperature(::Nmea2k::ValueF* environmenttemperature);

  // uint32 Instance = 1;
  void clear_instance();
  static const int kInstanceFieldNumber = 1;
  ::google::protobuf::uint32 instance() const;
  void set_instance(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Nmea2k.HVAC)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::Nmea2k::ValueHVACOperatingMode* operationmode_;
  ::Nmea2k::ValueU32* fanmode_;
  ::Nmea2k::ValueU32* fanspeed_;
  ::Nmea2k::ValueF* environmentsettemperature_;
  ::Nmea2k::ValueF* environmenttemperature_;
  ::google::protobuf::uint32 instance_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_Nmea2k_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ValueAwningState : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Nmea2k.ValueAwningState) */ {
 public:
  ValueAwningState();
  virtual ~ValueAwningState();

  ValueAwningState(const ValueAwningState& from);

  inline ValueAwningState& operator=(const ValueAwningState& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ValueAwningState(ValueAwningState&& from) noexcept
    : ValueAwningState() {
    *this = ::std::move(from);
  }

  inline ValueAwningState& operator=(ValueAwningState&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ValueAwningState& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ValueAwningState* internal_default_instance() {
    return reinterpret_cast<const ValueAwningState*>(
               &_ValueAwningState_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    105;

  void Swap(ValueAwningState* other);
  friend void swap(ValueAwningState& a, ValueAwningState& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ValueAwningState* New() const final {
    return CreateMaybeMessage<ValueAwningState>(NULL);
  }

  ValueAwningState* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ValueAwningState>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ValueAwningState& from);
  void MergeFrom(const ValueAwningState& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ValueAwningState* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef ValueAwningState_eAwningState eAwningState;
  static const eAwningState AwningNoPower =
    ValueAwningState_eAwningState_AwningNoPower;
  static const eAwningState AwningParked =
    ValueAwningState_eAwningState_AwningParked;
  static const eAwningState AwningTiltedLeft =
    ValueAwningState_eAwningState_AwningTiltedLeft;
  static const eAwningState AwningTiltedLeftRight =
    ValueAwningState_eAwningState_AwningTiltedLeftRight;
  static const eAwningState AwningTiltedRight =
    ValueAwningState_eAwningState_AwningTiltedRight;
  static const eAwningState AwningOpenUnknown =
    ValueAwningState_eAwningState_AwningOpenUnknown;
  static const eAwningState AwningOpenFull =
    ValueAwningState_eAwningState_AwningOpenFull;
  static const eAwningState AwningMoving =
    ValueAwningState_eAwningState_AwningMoving;
  static inline bool eAwningState_IsValid(int value) {
    return ValueAwningState_eAwningState_IsValid(value);
  }
  static const eAwningState eAwningState_MIN =
    ValueAwningState_eAwningState_eAwningState_MIN;
  static const eAwningState eAwningState_MAX =
    ValueAwningState_eAwningState_eAwningState_MAX;
  static const int eAwningState_ARRAYSIZE =
    ValueAwningState_eAwningState_eAwningState_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  eAwningState_descriptor() {
    return ValueAwningState_eAwningState_descriptor();
  }
  static inline const ::std::string& eAwningState_Name(eAwningState value) {
    return ValueAwningState_eAwningState_Name(value);
  }
  static inline bool eAwningState_Parse(const ::std::string& name,
      eAwningState* value) {
    return ValueAwningState_eAwningState_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // bool Valid = 1;
  void clear_valid();
  static const int kValidFieldNumber = 1;
  bool valid() const;
  void set_valid(bool value);

  // .Nmea2k.ValueAwningState.eAwningState Value = 2;
  void clear_value();
  static const int kValueFieldNumber = 2;
  ::Nmea2k::ValueAwningState_eAwningState value() const;
  void set_value(::Nmea2k::ValueAwningState_eAwningState value);

  // @@protoc_insertion_point(class_scope:Nmea2k.ValueAwningState)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool valid_;
  int value_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_Nmea2k_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ZipdeeAwning : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Nmea2k.ZipdeeAwning) */ {
 public:
  ZipdeeAwning();
  virtual ~ZipdeeAwning();

  ZipdeeAwning(const ZipdeeAwning& from);

  inline ZipdeeAwning& operator=(const ZipdeeAwning& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ZipdeeAwning(ZipdeeAwning&& from) noexcept
    : ZipdeeAwning() {
    *this = ::std::move(from);
  }

  inline ZipdeeAwning& operator=(ZipdeeAwning&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ZipdeeAwning& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ZipdeeAwning* internal_default_instance() {
    return reinterpret_cast<const ZipdeeAwning*>(
               &_ZipdeeAwning_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    106;

  void Swap(ZipdeeAwning* other);
  friend void swap(ZipdeeAwning& a, ZipdeeAwning& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ZipdeeAwning* New() const final {
    return CreateMaybeMessage<ZipdeeAwning>(NULL);
  }

  ZipdeeAwning* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ZipdeeAwning>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ZipdeeAwning& from);
  void MergeFrom(const ZipdeeAwning& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ZipdeeAwning* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .Nmea2k.ValueAwningState State = 2;
  bool has_state() const;
  void clear_state();
  static const int kStateFieldNumber = 2;
  private:
  const ::Nmea2k::ValueAwningState& _internal_state() const;
  public:
  const ::Nmea2k::ValueAwningState& state() const;
  ::Nmea2k::ValueAwningState* release_state();
  ::Nmea2k::ValueAwningState* mutable_state();
  void set_allocated_state(::Nmea2k::ValueAwningState* state);

  // uint32 Instance = 1;
  void clear_instance();
  static const int kInstanceFieldNumber = 1;
  ::google::protobuf::uint32 instance() const;
  void set_instance(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Nmea2k.ZipdeeAwning)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::Nmea2k::ValueAwningState* state_;
  ::google::protobuf::uint32 instance_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_Nmea2k_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ValueGeneratorState : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Nmea2k.ValueGeneratorState) */ {
 public:
  ValueGeneratorState();
  virtual ~ValueGeneratorState();

  ValueGeneratorState(const ValueGeneratorState& from);

  inline ValueGeneratorState& operator=(const ValueGeneratorState& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ValueGeneratorState(ValueGeneratorState&& from) noexcept
    : ValueGeneratorState() {
    *this = ::std::move(from);
  }

  inline ValueGeneratorState& operator=(ValueGeneratorState&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ValueGeneratorState& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ValueGeneratorState* internal_default_instance() {
    return reinterpret_cast<const ValueGeneratorState*>(
               &_ValueGeneratorState_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    107;

  void Swap(ValueGeneratorState* other);
  friend void swap(ValueGeneratorState& a, ValueGeneratorState& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ValueGeneratorState* New() const final {
    return CreateMaybeMessage<ValueGeneratorState>(NULL);
  }

  ValueGeneratorState* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ValueGeneratorState>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ValueGeneratorState& from);
  void MergeFrom(const ValueGeneratorState& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ValueGeneratorState* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef ValueGeneratorState_eGeneratorState eGeneratorState;
  static const eGeneratorState GeneratorOff =
    ValueGeneratorState_eGeneratorState_GeneratorOff;
  static const eGeneratorState GeneratorOn =
    ValueGeneratorState_eGeneratorState_GeneratorOn;
  static const eGeneratorState GeneratorUnknown =
    ValueGeneratorState_eGeneratorState_GeneratorUnknown;
  static inline bool eGeneratorState_IsValid(int value) {
    return ValueGeneratorState_eGeneratorState_IsValid(value);
  }
  static const eGeneratorState eGeneratorState_MIN =
    ValueGeneratorState_eGeneratorState_eGeneratorState_MIN;
  static const eGeneratorState eGeneratorState_MAX =
    ValueGeneratorState_eGeneratorState_eGeneratorState_MAX;
  static const int eGeneratorState_ARRAYSIZE =
    ValueGeneratorState_eGeneratorState_eGeneratorState_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  eGeneratorState_descriptor() {
    return ValueGeneratorState_eGeneratorState_descriptor();
  }
  static inline const ::std::string& eGeneratorState_Name(eGeneratorState value) {
    return ValueGeneratorState_eGeneratorState_Name(value);
  }
  static inline bool eGeneratorState_Parse(const ::std::string& name,
      eGeneratorState* value) {
    return ValueGeneratorState_eGeneratorState_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // bool Valid = 1;
  void clear_valid();
  static const int kValidFieldNumber = 1;
  bool valid() const;
  void set_valid(bool value);

  // .Nmea2k.ValueGeneratorState.eGeneratorState Value = 2;
  void clear_value();
  static const int kValueFieldNumber = 2;
  ::Nmea2k::ValueGeneratorState_eGeneratorState value() const;
  void set_value(::Nmea2k::ValueGeneratorState_eGeneratorState value);

  // @@protoc_insertion_point(class_scope:Nmea2k.ValueGeneratorState)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool valid_;
  int value_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_Nmea2k_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ThirdPartyGenerator : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Nmea2k.ThirdPartyGenerator) */ {
 public:
  ThirdPartyGenerator();
  virtual ~ThirdPartyGenerator();

  ThirdPartyGenerator(const ThirdPartyGenerator& from);

  inline ThirdPartyGenerator& operator=(const ThirdPartyGenerator& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ThirdPartyGenerator(ThirdPartyGenerator&& from) noexcept
    : ThirdPartyGenerator() {
    *this = ::std::move(from);
  }

  inline ThirdPartyGenerator& operator=(ThirdPartyGenerator&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ThirdPartyGenerator& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ThirdPartyGenerator* internal_default_instance() {
    return reinterpret_cast<const ThirdPartyGenerator*>(
               &_ThirdPartyGenerator_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    108;

  void Swap(ThirdPartyGenerator* other);
  friend void swap(ThirdPartyGenerator& a, ThirdPartyGenerator& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ThirdPartyGenerator* New() const final {
    return CreateMaybeMessage<ThirdPartyGenerator>(NULL);
  }

  ThirdPartyGenerator* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ThirdPartyGenerator>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ThirdPartyGenerator& from);
  void MergeFrom(const ThirdPartyGenerator& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ThirdPartyGenerator* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .Nmea2k.ValueU32 OnTime = 2;
  bool has_ontime() const;
  void clear_ontime();
  static const int kOnTimeFieldNumber = 2;
  private:
  const ::Nmea2k::ValueU32& _internal_ontime() const;
  public:
  const ::Nmea2k::ValueU32& ontime() const;
  ::Nmea2k::ValueU32* release_ontime();
  ::Nmea2k::ValueU32* mutable_ontime();
  void set_allocated_ontime(::Nmea2k::ValueU32* ontime);

  // .Nmea2k.ValueGeneratorState Status = 3;
  bool has_status() const;
  void clear_status();
  static const int kStatusFieldNumber = 3;
  private:
  const ::Nmea2k::ValueGeneratorState& _internal_status() const;
  public:
  const ::Nmea2k::ValueGeneratorState& status() const;
  ::Nmea2k::ValueGeneratorState* release_status();
  ::Nmea2k::ValueGeneratorState* mutable_status();
  void set_allocated_status(::Nmea2k::ValueGeneratorState* status);

  // uint32 Instance = 1;
  void clear_instance();
  static const int kInstanceFieldNumber = 1;
  ::google::protobuf::uint32 instance() const;
  void set_instance(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Nmea2k.ThirdPartyGenerator)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::Nmea2k::ValueU32* ontime_;
  ::Nmea2k::ValueGeneratorState* status_;
  ::google::protobuf::uint32 instance_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_Nmea2k_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ValueInverterState : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Nmea2k.ValueInverterState) */ {
 public:
  ValueInverterState();
  virtual ~ValueInverterState();

  ValueInverterState(const ValueInverterState& from);

  inline ValueInverterState& operator=(const ValueInverterState& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ValueInverterState(ValueInverterState&& from) noexcept
    : ValueInverterState() {
    *this = ::std::move(from);
  }

  inline ValueInverterState& operator=(ValueInverterState&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ValueInverterState& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ValueInverterState* internal_default_instance() {
    return reinterpret_cast<const ValueInverterState*>(
               &_ValueInverterState_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    109;

  void Swap(ValueInverterState* other);
  friend void swap(ValueInverterState& a, ValueInverterState& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ValueInverterState* New() const final {
    return CreateMaybeMessage<ValueInverterState>(NULL);
  }

  ValueInverterState* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ValueInverterState>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ValueInverterState& from);
  void MergeFrom(const ValueInverterState& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ValueInverterState* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef ValueInverterState_eInverterState eInverterState;
  static const eInverterState Inverting =
    ValueInverterState_eInverterState_Inverting;
  static const eInverterState ACPassthru =
    ValueInverterState_eInverterState_ACPassthru;
  static const eInverterState LoadSense =
    ValueInverterState_eInverterState_LoadSense;
  static const eInverterState Fault =
    ValueInverterState_eInverterState_Fault;
  static const eInverterState Disabled =
    ValueInverterState_eInverterState_Disabled;
  static const eInverterState Charging =
    ValueInverterState_eInverterState_Charging;
  static const eInverterState EnergySaving =
    ValueInverterState_eInverterState_EnergySaving;
  static const eInverterState Supporting =
    ValueInverterState_eInverterState_Supporting;
  static const eInverterState EnergySaving2 =
    ValueInverterState_eInverterState_EnergySaving2;
  static const eInverterState Supporting2 =
    ValueInverterState_eInverterState_Supporting2;
  static const eInverterState Error =
    ValueInverterState_eInverterState_Error;
  static const eInverterState DataNotAvailable =
    ValueInverterState_eInverterState_DataNotAvailable;
  static inline bool eInverterState_IsValid(int value) {
    return ValueInverterState_eInverterState_IsValid(value);
  }
  static const eInverterState eInverterState_MIN =
    ValueInverterState_eInverterState_eInverterState_MIN;
  static const eInverterState eInverterState_MAX =
    ValueInverterState_eInverterState_eInverterState_MAX;
  static const int eInverterState_ARRAYSIZE =
    ValueInverterState_eInverterState_eInverterState_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  eInverterState_descriptor() {
    return ValueInverterState_eInverterState_descriptor();
  }
  static inline const ::std::string& eInverterState_Name(eInverterState value) {
    return ValueInverterState_eInverterState_Name(value);
  }
  static inline bool eInverterState_Parse(const ::std::string& name,
      eInverterState* value) {
    return ValueInverterState_eInverterState_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // bool Valid = 1;
  void clear_valid();
  static const int kValidFieldNumber = 1;
  bool valid() const;
  void set_valid(bool value);

  // .Nmea2k.ValueInverterState.eInverterState Value = 2;
  void clear_value();
  static const int kValueFieldNumber = 2;
  ::Nmea2k::ValueInverterState_eInverterState value() const;
  void set_value(::Nmea2k::ValueInverterState_eInverterState value);

  // @@protoc_insertion_point(class_scope:Nmea2k.ValueInverterState)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool valid_;
  int value_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_Nmea2k_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ValueChargerState : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Nmea2k.ValueChargerState) */ {
 public:
  ValueChargerState();
  virtual ~ValueChargerState();

  ValueChargerState(const ValueChargerState& from);

  inline ValueChargerState& operator=(const ValueChargerState& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ValueChargerState(ValueChargerState&& from) noexcept
    : ValueChargerState() {
    *this = ::std::move(from);
  }

  inline ValueChargerState& operator=(ValueChargerState&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ValueChargerState& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ValueChargerState* internal_default_instance() {
    return reinterpret_cast<const ValueChargerState*>(
               &_ValueChargerState_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    110;

  void Swap(ValueChargerState* other);
  friend void swap(ValueChargerState& a, ValueChargerState& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ValueChargerState* New() const final {
    return CreateMaybeMessage<ValueChargerState>(NULL);
  }

  ValueChargerState* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ValueChargerState>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ValueChargerState& from);
  void MergeFrom(const ValueChargerState& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ValueChargerState* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef ValueChargerState_eChargerState eChargerState;
  static const eChargerState NotCharging =
    ValueChargerState_eChargerState_NotCharging;
  static const eChargerState Bulk =
    ValueChargerState_eChargerState_Bulk;
  static const eChargerState Absorption =
    ValueChargerState_eChargerState_Absorption;
  static const eChargerState Overcharge =
    ValueChargerState_eChargerState_Overcharge;
  static const eChargerState Equalize =
    ValueChargerState_eChargerState_Equalize;
  static const eChargerState Float =
    ValueChargerState_eChargerState_Float;
  static const eChargerState NoFloat =
    ValueChargerState_eChargerState_NoFloat;
  static const eChargerState ConstantVI =
    ValueChargerState_eChargerState_ConstantVI;
  static const eChargerState Disabled =
    ValueChargerState_eChargerState_Disabled;
  static const eChargerState Fault =
    ValueChargerState_eChargerState_Fault;
  static inline bool eChargerState_IsValid(int value) {
    return ValueChargerState_eChargerState_IsValid(value);
  }
  static const eChargerState eChargerState_MIN =
    ValueChargerState_eChargerState_eChargerState_MIN;
  static const eChargerState eChargerState_MAX =
    ValueChargerState_eChargerState_eChargerState_MAX;
  static const int eChargerState_ARRAYSIZE =
    ValueChargerState_eChargerState_eChargerState_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  eChargerState_descriptor() {
    return ValueChargerState_eChargerState_descriptor();
  }
  static inline const ::std::string& eChargerState_Name(eChargerState value) {
    return ValueChargerState_eChargerState_Name(value);
  }
  static inline bool eChargerState_Parse(const ::std::string& name,
      eChargerState* value) {
    return ValueChargerState_eChargerState_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // bool Valid = 1;
  void clear_valid();
  static const int kValidFieldNumber = 1;
  bool valid() const;
  void set_valid(bool value);

  // .Nmea2k.ValueChargerState.eChargerState Value = 2;
  void clear_value();
  static const int kValueFieldNumber = 2;
  ::Nmea2k::ValueChargerState_eChargerState value() const;
  void set_value(::Nmea2k::ValueChargerState_eChargerState value);

  // @@protoc_insertion_point(class_scope:Nmea2k.ValueChargerState)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool valid_;
  int value_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_Nmea2k_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ValueInverterChargerEnabled : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Nmea2k.ValueInverterChargerEnabled) */ {
 public:
  ValueInverterChargerEnabled();
  virtual ~ValueInverterChargerEnabled();

  ValueInverterChargerEnabled(const ValueInverterChargerEnabled& from);

  inline ValueInverterChargerEnabled& operator=(const ValueInverterChargerEnabled& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ValueInverterChargerEnabled(ValueInverterChargerEnabled&& from) noexcept
    : ValueInverterChargerEnabled() {
    *this = ::std::move(from);
  }

  inline ValueInverterChargerEnabled& operator=(ValueInverterChargerEnabled&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ValueInverterChargerEnabled& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ValueInverterChargerEnabled* internal_default_instance() {
    return reinterpret_cast<const ValueInverterChargerEnabled*>(
               &_ValueInverterChargerEnabled_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    111;

  void Swap(ValueInverterChargerEnabled* other);
  friend void swap(ValueInverterChargerEnabled& a, ValueInverterChargerEnabled& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ValueInverterChargerEnabled* New() const final {
    return CreateMaybeMessage<ValueInverterChargerEnabled>(NULL);
  }

  ValueInverterChargerEnabled* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ValueInverterChargerEnabled>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ValueInverterChargerEnabled& from);
  void MergeFrom(const ValueInverterChargerEnabled& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ValueInverterChargerEnabled* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef ValueInverterChargerEnabled_eInverterChargerEnabled eInverterChargerEnabled;
  static const eInverterChargerEnabled Off =
    ValueInverterChargerEnabled_eInverterChargerEnabled_Off;
  static const eInverterChargerEnabled On =
    ValueInverterChargerEnabled_eInverterChargerEnabled_On;
  static const eInverterChargerEnabled Error =
    ValueInverterChargerEnabled_eInverterChargerEnabled_Error;
  static const eInverterChargerEnabled Unavailable =
    ValueInverterChargerEnabled_eInverterChargerEnabled_Unavailable;
  static inline bool eInverterChargerEnabled_IsValid(int value) {
    return ValueInverterChargerEnabled_eInverterChargerEnabled_IsValid(value);
  }
  static const eInverterChargerEnabled eInverterChargerEnabled_MIN =
    ValueInverterChargerEnabled_eInverterChargerEnabled_eInverterChargerEnabled_MIN;
  static const eInverterChargerEnabled eInverterChargerEnabled_MAX =
    ValueInverterChargerEnabled_eInverterChargerEnabled_eInverterChargerEnabled_MAX;
  static const int eInverterChargerEnabled_ARRAYSIZE =
    ValueInverterChargerEnabled_eInverterChargerEnabled_eInverterChargerEnabled_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  eInverterChargerEnabled_descriptor() {
    return ValueInverterChargerEnabled_eInverterChargerEnabled_descriptor();
  }
  static inline const ::std::string& eInverterChargerEnabled_Name(eInverterChargerEnabled value) {
    return ValueInverterChargerEnabled_eInverterChargerEnabled_Name(value);
  }
  static inline bool eInverterChargerEnabled_Parse(const ::std::string& name,
      eInverterChargerEnabled* value) {
    return ValueInverterChargerEnabled_eInverterChargerEnabled_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // bool Valid = 1;
  void clear_valid();
  static const int kValidFieldNumber = 1;
  bool valid() const;
  void set_valid(bool value);

  // .Nmea2k.ValueInverterChargerEnabled.eInverterChargerEnabled Value = 2;
  void clear_value();
  static const int kValueFieldNumber = 2;
  ::Nmea2k::ValueInverterChargerEnabled_eInverterChargerEnabled value() const;
  void set_value(::Nmea2k::ValueInverterChargerEnabled_eInverterChargerEnabled value);

  // @@protoc_insertion_point(class_scope:Nmea2k.ValueInverterChargerEnabled)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool valid_;
  int value_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_Nmea2k_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class InverterCharger : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Nmea2k.InverterCharger) */ {
 public:
  InverterCharger();
  virtual ~InverterCharger();

  InverterCharger(const InverterCharger& from);

  inline InverterCharger& operator=(const InverterCharger& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  InverterCharger(InverterCharger&& from) noexcept
    : InverterCharger() {
    *this = ::std::move(from);
  }

  inline InverterCharger& operator=(InverterCharger&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const InverterCharger& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const InverterCharger* internal_default_instance() {
    return reinterpret_cast<const InverterCharger*>(
               &_InverterCharger_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    112;

  void Swap(InverterCharger* other);
  friend void swap(InverterCharger& a, InverterCharger& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline InverterCharger* New() const final {
    return CreateMaybeMessage<InverterCharger>(NULL);
  }

  InverterCharger* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<InverterCharger>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const InverterCharger& from);
  void MergeFrom(const InverterCharger& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InverterCharger* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .Nmea2k.ValueU32 InverterInstance = 2;
  bool has_inverterinstance() const;
  void clear_inverterinstance();
  static const int kInverterInstanceFieldNumber = 2;
  private:
  const ::Nmea2k::ValueU32& _internal_inverterinstance() const;
  public:
  const ::Nmea2k::ValueU32& inverterinstance() const;
  ::Nmea2k::ValueU32* release_inverterinstance();
  ::Nmea2k::ValueU32* mutable_inverterinstance();
  void set_allocated_inverterinstance(::Nmea2k::ValueU32* inverterinstance);

  // .Nmea2k.ValueU32 ChargerInstance = 3;
  bool has_chargerinstance() const;
  void clear_chargerinstance();
  static const int kChargerInstanceFieldNumber = 3;
  private:
  const ::Nmea2k::ValueU32& _internal_chargerinstance() const;
  public:
  const ::Nmea2k::ValueU32& chargerinstance() const;
  ::Nmea2k::ValueU32* release_chargerinstance();
  ::Nmea2k::ValueU32* mutable_chargerinstance();
  void set_allocated_chargerinstance(::Nmea2k::ValueU32* chargerinstance);

  // .Nmea2k.ValueInverterChargerEnabled InverterEnable = 4;
  bool has_inverterenable() const;
  void clear_inverterenable();
  static const int kInverterEnableFieldNumber = 4;
  private:
  const ::Nmea2k::ValueInverterChargerEnabled& _internal_inverterenable() const;
  public:
  const ::Nmea2k::ValueInverterChargerEnabled& inverterenable() const;
  ::Nmea2k::ValueInverterChargerEnabled* release_inverterenable();
  ::Nmea2k::ValueInverterChargerEnabled* mutable_inverterenable();
  void set_allocated_inverterenable(::Nmea2k::ValueInverterChargerEnabled* inverterenable);

  // .Nmea2k.ValueInverterState InverterState = 5;
  bool has_inverterstate() const;
  void clear_inverterstate();
  static const int kInverterStateFieldNumber = 5;
  private:
  const ::Nmea2k::ValueInverterState& _internal_inverterstate() const;
  public:
  const ::Nmea2k::ValueInverterState& inverterstate() const;
  ::Nmea2k::ValueInverterState* release_inverterstate();
  ::Nmea2k::ValueInverterState* mutable_inverterstate();
  void set_allocated_inverterstate(::Nmea2k::ValueInverterState* inverterstate);

  // .Nmea2k.ValueInverterChargerEnabled ChargerEnable = 6;
  bool has_chargerenable() const;
  void clear_chargerenable();
  static const int kChargerEnableFieldNumber = 6;
  private:
  const ::Nmea2k::ValueInverterChargerEnabled& _internal_chargerenable() const;
  public:
  const ::Nmea2k::ValueInverterChargerEnabled& chargerenable() const;
  ::Nmea2k::ValueInverterChargerEnabled* release_chargerenable();
  ::Nmea2k::ValueInverterChargerEnabled* mutable_chargerenable();
  void set_allocated_chargerenable(::Nmea2k::ValueInverterChargerEnabled* chargerenable);

  // .Nmea2k.ValueChargerState ChargerState = 7;
  bool has_chargerstate() const;
  void clear_chargerstate();
  static const int kChargerStateFieldNumber = 7;
  private:
  const ::Nmea2k::ValueChargerState& _internal_chargerstate() const;
  public:
  const ::Nmea2k::ValueChargerState& chargerstate() const;
  ::Nmea2k::ValueChargerState* release_chargerstate();
  ::Nmea2k::ValueChargerState* mutable_chargerstate();
  void set_allocated_chargerstate(::Nmea2k::ValueChargerState* chargerstate);

  // uint32 Instance = 1;
  void clear_instance();
  static const int kInstanceFieldNumber = 1;
  ::google::protobuf::uint32 instance() const;
  void set_instance(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Nmea2k.InverterCharger)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::Nmea2k::ValueU32* inverterinstance_;
  ::Nmea2k::ValueU32* chargerinstance_;
  ::Nmea2k::ValueInverterChargerEnabled* inverterenable_;
  ::Nmea2k::ValueInverterState* inverterstate_;
  ::Nmea2k::ValueInverterChargerEnabled* chargerenable_;
  ::Nmea2k::ValueChargerState* chargerstate_;
  ::google::protobuf::uint32 instance_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_Nmea2k_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ValueTyreStatus : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Nmea2k.ValueTyreStatus) */ {
 public:
  ValueTyreStatus();
  virtual ~ValueTyreStatus();

  ValueTyreStatus(const ValueTyreStatus& from);

  inline ValueTyreStatus& operator=(const ValueTyreStatus& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ValueTyreStatus(ValueTyreStatus&& from) noexcept
    : ValueTyreStatus() {
    *this = ::std::move(from);
  }

  inline ValueTyreStatus& operator=(ValueTyreStatus&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ValueTyreStatus& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ValueTyreStatus* internal_default_instance() {
    return reinterpret_cast<const ValueTyreStatus*>(
               &_ValueTyreStatus_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    113;

  void Swap(ValueTyreStatus* other);
  friend void swap(ValueTyreStatus& a, ValueTyreStatus& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ValueTyreStatus* New() const final {
    return CreateMaybeMessage<ValueTyreStatus>(NULL);
  }

  ValueTyreStatus* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ValueTyreStatus>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ValueTyreStatus& from);
  void MergeFrom(const ValueTyreStatus& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ValueTyreStatus* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef ValueTyreStatus_eTyreStatus eTyreStatus;
  static const eTyreStatus Ok =
    ValueTyreStatus_eTyreStatus_Ok;
  static const eTyreStatus Leak =
    ValueTyreStatus_eTyreStatus_Leak;
  static const eTyreStatus Error =
    ValueTyreStatus_eTyreStatus_Error;
  static inline bool eTyreStatus_IsValid(int value) {
    return ValueTyreStatus_eTyreStatus_IsValid(value);
  }
  static const eTyreStatus eTyreStatus_MIN =
    ValueTyreStatus_eTyreStatus_eTyreStatus_MIN;
  static const eTyreStatus eTyreStatus_MAX =
    ValueTyreStatus_eTyreStatus_eTyreStatus_MAX;
  static const int eTyreStatus_ARRAYSIZE =
    ValueTyreStatus_eTyreStatus_eTyreStatus_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  eTyreStatus_descriptor() {
    return ValueTyreStatus_eTyreStatus_descriptor();
  }
  static inline const ::std::string& eTyreStatus_Name(eTyreStatus value) {
    return ValueTyreStatus_eTyreStatus_Name(value);
  }
  static inline bool eTyreStatus_Parse(const ::std::string& name,
      eTyreStatus* value) {
    return ValueTyreStatus_eTyreStatus_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // bool Valid = 1;
  void clear_valid();
  static const int kValidFieldNumber = 1;
  bool valid() const;
  void set_valid(bool value);

  // .Nmea2k.ValueTyreStatus.eTyreStatus Value = 2;
  void clear_value();
  static const int kValueFieldNumber = 2;
  ::Nmea2k::ValueTyreStatus_eTyreStatus value() const;
  void set_value(::Nmea2k::ValueTyreStatus_eTyreStatus value);

  // @@protoc_insertion_point(class_scope:Nmea2k.ValueTyreStatus)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool valid_;
  int value_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_Nmea2k_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ValueTyreLimitStatus : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Nmea2k.ValueTyreLimitStatus) */ {
 public:
  ValueTyreLimitStatus();
  virtual ~ValueTyreLimitStatus();

  ValueTyreLimitStatus(const ValueTyreLimitStatus& from);

  inline ValueTyreLimitStatus& operator=(const ValueTyreLimitStatus& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ValueTyreLimitStatus(ValueTyreLimitStatus&& from) noexcept
    : ValueTyreLimitStatus() {
    *this = ::std::move(from);
  }

  inline ValueTyreLimitStatus& operator=(ValueTyreLimitStatus&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ValueTyreLimitStatus& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ValueTyreLimitStatus* internal_default_instance() {
    return reinterpret_cast<const ValueTyreLimitStatus*>(
               &_ValueTyreLimitStatus_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    114;

  void Swap(ValueTyreLimitStatus* other);
  friend void swap(ValueTyreLimitStatus& a, ValueTyreLimitStatus& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ValueTyreLimitStatus* New() const final {
    return CreateMaybeMessage<ValueTyreLimitStatus>(NULL);
  }

  ValueTyreLimitStatus* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ValueTyreLimitStatus>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ValueTyreLimitStatus& from);
  void MergeFrom(const ValueTyreLimitStatus& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ValueTyreLimitStatus* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef ValueTyreLimitStatus_eTyreLimitStatus eTyreLimitStatus;
  static const eTyreLimitStatus ExtremeOverPressure =
    ValueTyreLimitStatus_eTyreLimitStatus_ExtremeOverPressure;
  static const eTyreLimitStatus OverPressure =
    ValueTyreLimitStatus_eTyreLimitStatus_OverPressure;
  static const eTyreLimitStatus NoAlarm =
    ValueTyreLimitStatus_eTyreLimitStatus_NoAlarm;
  static const eTyreLimitStatus LowPressure =
    ValueTyreLimitStatus_eTyreLimitStatus_LowPressure;
  static const eTyreLimitStatus ExtremeLowPressure =
    ValueTyreLimitStatus_eTyreLimitStatus_ExtremeLowPressure;
  static const eTyreLimitStatus NA =
    ValueTyreLimitStatus_eTyreLimitStatus_NA;
  static const eTyreLimitStatus Error =
    ValueTyreLimitStatus_eTyreLimitStatus_Error;
  static inline bool eTyreLimitStatus_IsValid(int value) {
    return ValueTyreLimitStatus_eTyreLimitStatus_IsValid(value);
  }
  static const eTyreLimitStatus eTyreLimitStatus_MIN =
    ValueTyreLimitStatus_eTyreLimitStatus_eTyreLimitStatus_MIN;
  static const eTyreLimitStatus eTyreLimitStatus_MAX =
    ValueTyreLimitStatus_eTyreLimitStatus_eTyreLimitStatus_MAX;
  static const int eTyreLimitStatus_ARRAYSIZE =
    ValueTyreLimitStatus_eTyreLimitStatus_eTyreLimitStatus_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  eTyreLimitStatus_descriptor() {
    return ValueTyreLimitStatus_eTyreLimitStatus_descriptor();
  }
  static inline const ::std::string& eTyreLimitStatus_Name(eTyreLimitStatus value) {
    return ValueTyreLimitStatus_eTyreLimitStatus_Name(value);
  }
  static inline bool eTyreLimitStatus_Parse(const ::std::string& name,
      eTyreLimitStatus* value) {
    return ValueTyreLimitStatus_eTyreLimitStatus_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // bool Valid = 1;
  void clear_valid();
  static const int kValidFieldNumber = 1;
  bool valid() const;
  void set_valid(bool value);

  // .Nmea2k.ValueTyreLimitStatus.eTyreLimitStatus Value = 2;
  void clear_value();
  static const int kValueFieldNumber = 2;
  ::Nmea2k::ValueTyreLimitStatus_eTyreLimitStatus value() const;
  void set_value(::Nmea2k::ValueTyreLimitStatus_eTyreLimitStatus value);

  // @@protoc_insertion_point(class_scope:Nmea2k.ValueTyreLimitStatus)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool valid_;
  int value_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_Nmea2k_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class TyrePressure : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Nmea2k.TyrePressure) */ {
 public:
  TyrePressure();
  virtual ~TyrePressure();

  TyrePressure(const TyrePressure& from);

  inline TyrePressure& operator=(const TyrePressure& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TyrePressure(TyrePressure&& from) noexcept
    : TyrePressure() {
    *this = ::std::move(from);
  }

  inline TyrePressure& operator=(TyrePressure&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const TyrePressure& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TyrePressure* internal_default_instance() {
    return reinterpret_cast<const TyrePressure*>(
               &_TyrePressure_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    115;

  void Swap(TyrePressure* other);
  friend void swap(TyrePressure& a, TyrePressure& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TyrePressure* New() const final {
    return CreateMaybeMessage<TyrePressure>(NULL);
  }

  TyrePressure* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<TyrePressure>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const TyrePressure& from);
  void MergeFrom(const TyrePressure& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TyrePressure* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .Nmea2k.ValueF Pressure = 2;
  bool has_pressure() const;
  void clear_pressure();
  static const int kPressureFieldNumber = 2;
  private:
  const ::Nmea2k::ValueF& _internal_pressure() const;
  public:
  const ::Nmea2k::ValueF& pressure() const;
  ::Nmea2k::ValueF* release_pressure();
  ::Nmea2k::ValueF* mutable_pressure();
  void set_allocated_pressure(::Nmea2k::ValueF* pressure);

  // .Nmea2k.ValueF Temperature = 3;
  bool has_temperature() const;
  void clear_temperature();
  static const int kTemperatureFieldNumber = 3;
  private:
  const ::Nmea2k::ValueF& _internal_temperature() const;
  public:
  const ::Nmea2k::ValueF& temperature() const;
  ::Nmea2k::ValueF* release_temperature();
  ::Nmea2k::ValueF* mutable_temperature();
  void set_allocated_temperature(::Nmea2k::ValueF* temperature);

  // .Nmea2k.ValueTyreStatus Status = 4;
  bool has_status() const;
  void clear_status();
  static const int kStatusFieldNumber = 4;
  private:
  const ::Nmea2k::ValueTyreStatus& _internal_status() const;
  public:
  const ::Nmea2k::ValueTyreStatus& status() const;
  ::Nmea2k::ValueTyreStatus* release_status();
  ::Nmea2k::ValueTyreStatus* mutable_status();
  void set_allocated_status(::Nmea2k::ValueTyreStatus* status);

  // .Nmea2k.ValueTyreLimitStatus LimitStatus = 5;
  bool has_limitstatus() const;
  void clear_limitstatus();
  static const int kLimitStatusFieldNumber = 5;
  private:
  const ::Nmea2k::ValueTyreLimitStatus& _internal_limitstatus() const;
  public:
  const ::Nmea2k::ValueTyreLimitStatus& limitstatus() const;
  ::Nmea2k::ValueTyreLimitStatus* release_limitstatus();
  ::Nmea2k::ValueTyreLimitStatus* mutable_limitstatus();
  void set_allocated_limitstatus(::Nmea2k::ValueTyreLimitStatus* limitstatus);

  // uint32 Instance = 1;
  void clear_instance();
  static const int kInstanceFieldNumber = 1;
  ::google::protobuf::uint32 instance() const;
  void set_instance(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Nmea2k.TyrePressure)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::Nmea2k::ValueF* pressure_;
  ::Nmea2k::ValueF* temperature_;
  ::Nmea2k::ValueTyreStatus* status_;
  ::Nmea2k::ValueTyreLimitStatus* limitstatus_;
  ::google::protobuf::uint32 instance_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_Nmea2k_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ValueAudioSource : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Nmea2k.ValueAudioSource) */ {
 public:
  ValueAudioSource();
  virtual ~ValueAudioSource();

  ValueAudioSource(const ValueAudioSource& from);

  inline ValueAudioSource& operator=(const ValueAudioSource& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ValueAudioSource(ValueAudioSource&& from) noexcept
    : ValueAudioSource() {
    *this = ::std::move(from);
  }

  inline ValueAudioSource& operator=(ValueAudioSource&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ValueAudioSource& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ValueAudioSource* internal_default_instance() {
    return reinterpret_cast<const ValueAudioSource*>(
               &_ValueAudioSource_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    116;

  void Swap(ValueAudioSource* other);
  friend void swap(ValueAudioSource& a, ValueAudioSource& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ValueAudioSource* New() const final {
    return CreateMaybeMessage<ValueAudioSource>(NULL);
  }

  ValueAudioSource* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ValueAudioSource>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ValueAudioSource& from);
  void MergeFrom(const ValueAudioSource& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ValueAudioSource* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef ValueAudioSource_eAudioSource eAudioSource;
  static const eAudioSource VesselAlarm =
    ValueAudioSource_eAudioSource_VesselAlarm;
  static const eAudioSource AM =
    ValueAudioSource_eAudioSource_AM;
  static const eAudioSource FM =
    ValueAudioSource_eAudioSource_FM;
  static const eAudioSource Weather =
    ValueAudioSource_eAudioSource_Weather;
  static const eAudioSource DAB =
    ValueAudioSource_eAudioSource_DAB;
  static const eAudioSource AUX =
    ValueAudioSource_eAudioSource_AUX;
  static const eAudioSource USB =
    ValueAudioSource_eAudioSource_USB;
  static const eAudioSource CD =
    ValueAudioSource_eAudioSource_CD;
  static const eAudioSource MP3 =
    ValueAudioSource_eAudioSource_MP3;
  static const eAudioSource AppleiOS =
    ValueAudioSource_eAudioSource_AppleiOS;
  static const eAudioSource Android =
    ValueAudioSource_eAudioSource_Android;
  static const eAudioSource Bluetooth =
    ValueAudioSource_eAudioSource_Bluetooth;
  static const eAudioSource SiriusXM =
    ValueAudioSource_eAudioSource_SiriusXM;
  static const eAudioSource Pandora =
    ValueAudioSource_eAudioSource_Pandora;
  static const eAudioSource Spotify =
    ValueAudioSource_eAudioSource_Spotify;
  static const eAudioSource Slacker =
    ValueAudioSource_eAudioSource_Slacker;
  static const eAudioSource Songza =
    ValueAudioSource_eAudioSource_Songza;
  static const eAudioSource AppleRadio =
    ValueAudioSource_eAudioSource_AppleRadio;
  static const eAudioSource LastFM =
    ValueAudioSource_eAudioSource_LastFM;
  static const eAudioSource Ethernet =
    ValueAudioSource_eAudioSource_Ethernet;
  static const eAudioSource VideoMP4 =
    ValueAudioSource_eAudioSource_VideoMP4;
  static const eAudioSource VideoDVD =
    ValueAudioSource_eAudioSource_VideoDVD;
  static const eAudioSource VideoBlueRay =
    ValueAudioSource_eAudioSource_VideoBlueRay;
  static const eAudioSource HDMI =
    ValueAudioSource_eAudioSource_HDMI;
  static const eAudioSource Video =
    ValueAudioSource_eAudioSource_Video;
  static const eAudioSource NoSource =
    ValueAudioSource_eAudioSource_NoSource;
  static inline bool eAudioSource_IsValid(int value) {
    return ValueAudioSource_eAudioSource_IsValid(value);
  }
  static const eAudioSource eAudioSource_MIN =
    ValueAudioSource_eAudioSource_eAudioSource_MIN;
  static const eAudioSource eAudioSource_MAX =
    ValueAudioSource_eAudioSource_eAudioSource_MAX;
  static const int eAudioSource_ARRAYSIZE =
    ValueAudioSource_eAudioSource_eAudioSource_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  eAudioSource_descriptor() {
    return ValueAudioSource_eAudioSource_descriptor();
  }
  static inline const ::std::string& eAudioSource_Name(eAudioSource value) {
    return ValueAudioSource_eAudioSource_Name(value);
  }
  static inline bool eAudioSource_Parse(const ::std::string& name,
      eAudioSource* value) {
    return ValueAudioSource_eAudioSource_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // bool Valid = 1;
  void clear_valid();
  static const int kValidFieldNumber = 1;
  bool valid() const;
  void set_valid(bool value);

  // .Nmea2k.ValueAudioSource.eAudioSource Value = 2;
  void clear_value();
  static const int kValueFieldNumber = 2;
  ::Nmea2k::ValueAudioSource_eAudioSource value() const;
  void set_value(::Nmea2k::ValueAudioSource_eAudioSource value);

  // @@protoc_insertion_point(class_scope:Nmea2k.ValueAudioSource)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool valid_;
  int value_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_Nmea2k_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ValueAudioStatus : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Nmea2k.ValueAudioStatus) */ {
 public:
  ValueAudioStatus();
  virtual ~ValueAudioStatus();

  ValueAudioStatus(const ValueAudioStatus& from);

  inline ValueAudioStatus& operator=(const ValueAudioStatus& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ValueAudioStatus(ValueAudioStatus&& from) noexcept
    : ValueAudioStatus() {
    *this = ::std::move(from);
  }

  inline ValueAudioStatus& operator=(ValueAudioStatus&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ValueAudioStatus& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ValueAudioStatus* internal_default_instance() {
    return reinterpret_cast<const ValueAudioStatus*>(
               &_ValueAudioStatus_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    117;

  void Swap(ValueAudioStatus* other);
  friend void swap(ValueAudioStatus& a, ValueAudioStatus& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ValueAudioStatus* New() const final {
    return CreateMaybeMessage<ValueAudioStatus>(NULL);
  }

  ValueAudioStatus* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ValueAudioStatus>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ValueAudioStatus& from);
  void MergeFrom(const ValueAudioStatus& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ValueAudioStatus* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef ValueAudioStatus_eAudioStatus eAudioStatus;
  static const eAudioStatus AudioStatusInitialising =
    ValueAudioStatus_eAudioStatus_AudioStatusInitialising;
  static const eAudioStatus AudioStatusReady =
    ValueAudioStatus_eAudioStatus_AudioStatusReady;
  static const eAudioStatus AudioStatusUnknown =
    ValueAudioStatus_eAudioStatus_AudioStatusUnknown;
  static inline bool eAudioStatus_IsValid(int value) {
    return ValueAudioStatus_eAudioStatus_IsValid(value);
  }
  static const eAudioStatus eAudioStatus_MIN =
    ValueAudioStatus_eAudioStatus_eAudioStatus_MIN;
  static const eAudioStatus eAudioStatus_MAX =
    ValueAudioStatus_eAudioStatus_eAudioStatus_MAX;
  static const int eAudioStatus_ARRAYSIZE =
    ValueAudioStatus_eAudioStatus_eAudioStatus_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  eAudioStatus_descriptor() {
    return ValueAudioStatus_eAudioStatus_descriptor();
  }
  static inline const ::std::string& eAudioStatus_Name(eAudioStatus value) {
    return ValueAudioStatus_eAudioStatus_Name(value);
  }
  static inline bool eAudioStatus_Parse(const ::std::string& name,
      eAudioStatus* value) {
    return ValueAudioStatus_eAudioStatus_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // bool Valid = 1;
  void clear_valid();
  static const int kValidFieldNumber = 1;
  bool valid() const;
  void set_valid(bool value);

  // .Nmea2k.ValueAudioStatus.eAudioStatus Value = 2;
  void clear_value();
  static const int kValueFieldNumber = 2;
  ::Nmea2k::ValueAudioStatus_eAudioStatus value() const;
  void set_value(::Nmea2k::ValueAudioStatus_eAudioStatus value);

  // @@protoc_insertion_point(class_scope:Nmea2k.ValueAudioStatus)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool valid_;
  int value_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_Nmea2k_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class AudioStereo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Nmea2k.AudioStereo) */ {
 public:
  AudioStereo();
  virtual ~AudioStereo();

  AudioStereo(const AudioStereo& from);

  inline AudioStereo& operator=(const AudioStereo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AudioStereo(AudioStereo&& from) noexcept
    : AudioStereo() {
    *this = ::std::move(from);
  }

  inline AudioStereo& operator=(AudioStereo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const AudioStereo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AudioStereo* internal_default_instance() {
    return reinterpret_cast<const AudioStereo*>(
               &_AudioStereo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    118;

  void Swap(AudioStereo* other);
  friend void swap(AudioStereo& a, AudioStereo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AudioStereo* New() const final {
    return CreateMaybeMessage<AudioStereo>(NULL);
  }

  AudioStereo* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<AudioStereo>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const AudioStereo& from);
  void MergeFrom(const AudioStereo& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AudioStereo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .Nmea2k.ValueBool Power = 2;
  bool has_power() const;
  void clear_power();
  static const int kPowerFieldNumber = 2;
  private:
  const ::Nmea2k::ValueBool& _internal_power() const;
  public:
  const ::Nmea2k::ValueBool& power() const;
  ::Nmea2k::ValueBool* release_power();
  ::Nmea2k::ValueBool* mutable_power();
  void set_allocated_power(::Nmea2k::ValueBool* power);

  // .Nmea2k.ValueBool Mute = 3;
  bool has_mute() const;
  void clear_mute();
  static const int kMuteFieldNumber = 3;
  private:
  const ::Nmea2k::ValueBool& _internal_mute() const;
  public:
  const ::Nmea2k::ValueBool& mute() const;
  ::Nmea2k::ValueBool* release_mute();
  ::Nmea2k::ValueBool* mutable_mute();
  void set_allocated_mute(::Nmea2k::ValueBool* mute);

  // .Nmea2k.ValueAudioStatus AudioStatus = 4;
  bool has_audiostatus() const;
  void clear_audiostatus();
  static const int kAudioStatusFieldNumber = 4;
  private:
  const ::Nmea2k::ValueAudioStatus& _internal_audiostatus() const;
  public:
  const ::Nmea2k::ValueAudioStatus& audiostatus() const;
  ::Nmea2k::ValueAudioStatus* release_audiostatus();
  ::Nmea2k::ValueAudioStatus* mutable_audiostatus();
  void set_allocated_audiostatus(::Nmea2k::ValueAudioStatus* audiostatus);

  // .Nmea2k.ValueAudioSource SourceMode = 5;
  bool has_sourcemode() const;
  void clear_sourcemode();
  static const int kSourceModeFieldNumber = 5;
  private:
  const ::Nmea2k::ValueAudioSource& _internal_sourcemode() const;
  public:
  const ::Nmea2k::ValueAudioSource& sourcemode() const;
  ::Nmea2k::ValueAudioSource* release_sourcemode();
  ::Nmea2k::ValueAudioSource* mutable_sourcemode();
  void set_allocated_sourcemode(::Nmea2k::ValueAudioSource* sourcemode);

  // .Nmea2k.ValueU32 Volume = 6;
  bool has_volume() const;
  void clear_volume();
  static const int kVolumeFieldNumber = 6;
  private:
  const ::Nmea2k::ValueU32& _internal_volume() const;
  public:
  const ::Nmea2k::ValueU32& volume() const;
  ::Nmea2k::ValueU32* release_volume();
  ::Nmea2k::ValueU32* mutable_volume();
  void set_allocated_volume(::Nmea2k::ValueU32* volume);

  // uint32 Instance = 1;
  void clear_instance();
  static const int kInstanceFieldNumber = 1;
  ::google::protobuf::uint32 instance() const;
  void set_instance(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Nmea2k.AudioStereo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::Nmea2k::ValueBool* power_;
  ::Nmea2k::ValueBool* mute_;
  ::Nmea2k::ValueAudioStatus* audiostatus_;
  ::Nmea2k::ValueAudioSource* sourcemode_;
  ::Nmea2k::ValueU32* volume_;
  ::google::protobuf::uint32 instance_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_Nmea2k_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ValueGNSSMethod : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Nmea2k.ValueGNSSMethod) */ {
 public:
  ValueGNSSMethod();
  virtual ~ValueGNSSMethod();

  ValueGNSSMethod(const ValueGNSSMethod& from);

  inline ValueGNSSMethod& operator=(const ValueGNSSMethod& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ValueGNSSMethod(ValueGNSSMethod&& from) noexcept
    : ValueGNSSMethod() {
    *this = ::std::move(from);
  }

  inline ValueGNSSMethod& operator=(ValueGNSSMethod&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ValueGNSSMethod& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ValueGNSSMethod* internal_default_instance() {
    return reinterpret_cast<const ValueGNSSMethod*>(
               &_ValueGNSSMethod_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    119;

  void Swap(ValueGNSSMethod* other);
  friend void swap(ValueGNSSMethod& a, ValueGNSSMethod& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ValueGNSSMethod* New() const final {
    return CreateMaybeMessage<ValueGNSSMethod>(NULL);
  }

  ValueGNSSMethod* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ValueGNSSMethod>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ValueGNSSMethod& from);
  void MergeFrom(const ValueGNSSMethod& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ValueGNSSMethod* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef ValueGNSSMethod_eGNSSMethod eGNSSMethod;
  static const eGNSSMethod NoFix =
    ValueGNSSMethod_eGNSSMethod_NoFix;
  static const eGNSSMethod StandardFix =
    ValueGNSSMethod_eGNSSMethod_StandardFix;
  static const eGNSSMethod DifferentialFix =
    ValueGNSSMethod_eGNSSMethod_DifferentialFix;
  static const eGNSSMethod PreciseFix =
    ValueGNSSMethod_eGNSSMethod_PreciseFix;
  static const eGNSSMethod RtkInt =
    ValueGNSSMethod_eGNSSMethod_RtkInt;
  static const eGNSSMethod RtkFloat =
    ValueGNSSMethod_eGNSSMethod_RtkFloat;
  static const eGNSSMethod Estimated =
    ValueGNSSMethod_eGNSSMethod_Estimated;
  static const eGNSSMethod Manual =
    ValueGNSSMethod_eGNSSMethod_Manual;
  static const eGNSSMethod Simulator =
    ValueGNSSMethod_eGNSSMethod_Simulator;
  static const eGNSSMethod Error =
    ValueGNSSMethod_eGNSSMethod_Error;
  static const eGNSSMethod Null =
    ValueGNSSMethod_eGNSSMethod_Null;
  static inline bool eGNSSMethod_IsValid(int value) {
    return ValueGNSSMethod_eGNSSMethod_IsValid(value);
  }
  static const eGNSSMethod eGNSSMethod_MIN =
    ValueGNSSMethod_eGNSSMethod_eGNSSMethod_MIN;
  static const eGNSSMethod eGNSSMethod_MAX =
    ValueGNSSMethod_eGNSSMethod_eGNSSMethod_MAX;
  static const int eGNSSMethod_ARRAYSIZE =
    ValueGNSSMethod_eGNSSMethod_eGNSSMethod_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  eGNSSMethod_descriptor() {
    return ValueGNSSMethod_eGNSSMethod_descriptor();
  }
  static inline const ::std::string& eGNSSMethod_Name(eGNSSMethod value) {
    return ValueGNSSMethod_eGNSSMethod_Name(value);
  }
  static inline bool eGNSSMethod_Parse(const ::std::string& name,
      eGNSSMethod* value) {
    return ValueGNSSMethod_eGNSSMethod_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // bool Valid = 1;
  void clear_valid();
  static const int kValidFieldNumber = 1;
  bool valid() const;
  void set_valid(bool value);

  // .Nmea2k.ValueGNSSMethod.eGNSSMethod Value = 2;
  void clear_value();
  static const int kValueFieldNumber = 2;
  ::Nmea2k::ValueGNSSMethod_eGNSSMethod value() const;
  void set_value(::Nmea2k::ValueGNSSMethod_eGNSSMethod value);

  // @@protoc_insertion_point(class_scope:Nmea2k.ValueGNSSMethod)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool valid_;
  int value_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_Nmea2k_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ValueGNSSFixType : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Nmea2k.ValueGNSSFixType) */ {
 public:
  ValueGNSSFixType();
  virtual ~ValueGNSSFixType();

  ValueGNSSFixType(const ValueGNSSFixType& from);

  inline ValueGNSSFixType& operator=(const ValueGNSSFixType& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ValueGNSSFixType(ValueGNSSFixType&& from) noexcept
    : ValueGNSSFixType() {
    *this = ::std::move(from);
  }

  inline ValueGNSSFixType& operator=(ValueGNSSFixType&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ValueGNSSFixType& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ValueGNSSFixType* internal_default_instance() {
    return reinterpret_cast<const ValueGNSSFixType*>(
               &_ValueGNSSFixType_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    120;

  void Swap(ValueGNSSFixType* other);
  friend void swap(ValueGNSSFixType& a, ValueGNSSFixType& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ValueGNSSFixType* New() const final {
    return CreateMaybeMessage<ValueGNSSFixType>(NULL);
  }

  ValueGNSSFixType* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ValueGNSSFixType>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ValueGNSSFixType& from);
  void MergeFrom(const ValueGNSSFixType& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ValueGNSSFixType* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef ValueGNSSFixType_eGNSSFixType eGNSSFixType;
  static const eGNSSFixType FixNA =
    ValueGNSSFixType_eGNSSFixType_FixNA;
  static const eGNSSFixType Fix2D =
    ValueGNSSFixType_eGNSSFixType_Fix2D;
  static const eGNSSFixType Fix3D =
    ValueGNSSFixType_eGNSSFixType_Fix3D;
  static inline bool eGNSSFixType_IsValid(int value) {
    return ValueGNSSFixType_eGNSSFixType_IsValid(value);
  }
  static const eGNSSFixType eGNSSFixType_MIN =
    ValueGNSSFixType_eGNSSFixType_eGNSSFixType_MIN;
  static const eGNSSFixType eGNSSFixType_MAX =
    ValueGNSSFixType_eGNSSFixType_eGNSSFixType_MAX;
  static const int eGNSSFixType_ARRAYSIZE =
    ValueGNSSFixType_eGNSSFixType_eGNSSFixType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  eGNSSFixType_descriptor() {
    return ValueGNSSFixType_eGNSSFixType_descriptor();
  }
  static inline const ::std::string& eGNSSFixType_Name(eGNSSFixType value) {
    return ValueGNSSFixType_eGNSSFixType_Name(value);
  }
  static inline bool eGNSSFixType_Parse(const ::std::string& name,
      eGNSSFixType* value) {
    return ValueGNSSFixType_eGNSSFixType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // bool Valid = 1;
  void clear_valid();
  static const int kValidFieldNumber = 1;
  bool valid() const;
  void set_valid(bool value);

  // .Nmea2k.ValueGNSSFixType.eGNSSFixType Value = 2;
  void clear_value();
  static const int kValueFieldNumber = 2;
  ::Nmea2k::ValueGNSSFixType_eGNSSFixType value() const;
  void set_value(::Nmea2k::ValueGNSSFixType_eGNSSFixType value);

  // @@protoc_insertion_point(class_scope:Nmea2k.ValueGNSSFixType)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool valid_;
  int value_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_Nmea2k_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GNSS : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Nmea2k.GNSS) */ {
 public:
  GNSS();
  virtual ~GNSS();

  GNSS(const GNSS& from);

  inline GNSS& operator=(const GNSS& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GNSS(GNSS&& from) noexcept
    : GNSS() {
    *this = ::std::move(from);
  }

  inline GNSS& operator=(GNSS&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GNSS& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GNSS* internal_default_instance() {
    return reinterpret_cast<const GNSS*>(
               &_GNSS_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    121;

  void Swap(GNSS* other);
  friend void swap(GNSS& a, GNSS& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GNSS* New() const final {
    return CreateMaybeMessage<GNSS>(NULL);
  }

  GNSS* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GNSS>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const GNSS& from);
  void MergeFrom(const GNSS& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GNSS* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string UTCDateTime = 7;
  void clear_utcdatetime();
  static const int kUTCDateTimeFieldNumber = 7;
  const ::std::string& utcdatetime() const;
  void set_utcdatetime(const ::std::string& value);
  #if LANG_CXX11
  void set_utcdatetime(::std::string&& value);
  #endif
  void set_utcdatetime(const char* value);
  void set_utcdatetime(const char* value, size_t size);
  ::std::string* mutable_utcdatetime();
  ::std::string* release_utcdatetime();
  void set_allocated_utcdatetime(::std::string* utcdatetime);

  // .Nmea2k.ValueF Latitude = 2;
  bool has_latitude() const;
  void clear_latitude();
  static const int kLatitudeFieldNumber = 2;
  private:
  const ::Nmea2k::ValueF& _internal_latitude() const;
  public:
  const ::Nmea2k::ValueF& latitude() const;
  ::Nmea2k::ValueF* release_latitude();
  ::Nmea2k::ValueF* mutable_latitude();
  void set_allocated_latitude(::Nmea2k::ValueF* latitude);

  // .Nmea2k.ValueF Longitude = 3;
  bool has_longitude() const;
  void clear_longitude();
  static const int kLongitudeFieldNumber = 3;
  private:
  const ::Nmea2k::ValueF& _internal_longitude() const;
  public:
  const ::Nmea2k::ValueF& longitude() const;
  ::Nmea2k::ValueF* release_longitude();
  ::Nmea2k::ValueF* mutable_longitude();
  void set_allocated_longitude(::Nmea2k::ValueF* longitude);

  // .Nmea2k.ValueF Cog = 4;
  bool has_cog() const;
  void clear_cog();
  static const int kCogFieldNumber = 4;
  private:
  const ::Nmea2k::ValueF& _internal_cog() const;
  public:
  const ::Nmea2k::ValueF& cog() const;
  ::Nmea2k::ValueF* release_cog();
  ::Nmea2k::ValueF* mutable_cog();
  void set_allocated_cog(::Nmea2k::ValueF* cog);

  // .Nmea2k.ValueF Sog = 5;
  bool has_sog() const;
  void clear_sog();
  static const int kSogFieldNumber = 5;
  private:
  const ::Nmea2k::ValueF& _internal_sog() const;
  public:
  const ::Nmea2k::ValueF& sog() const;
  ::Nmea2k::ValueF* release_sog();
  ::Nmea2k::ValueF* mutable_sog();
  void set_allocated_sog(::Nmea2k::ValueF* sog);

  // .Nmea2k.ValueF MagneticVariation = 6;
  bool has_magneticvariation() const;
  void clear_magneticvariation();
  static const int kMagneticVariationFieldNumber = 6;
  private:
  const ::Nmea2k::ValueF& _internal_magneticvariation() const;
  public:
  const ::Nmea2k::ValueF& magneticvariation() const;
  ::Nmea2k::ValueF* release_magneticvariation();
  ::Nmea2k::ValueF* mutable_magneticvariation();
  void set_allocated_magneticvariation(::Nmea2k::ValueF* magneticvariation);

  // .Nmea2k.ValueU32 TimeOffset = 8;
  bool has_timeoffset() const;
  void clear_timeoffset();
  static const int kTimeOffsetFieldNumber = 8;
  private:
  const ::Nmea2k::ValueU32& _internal_timeoffset() const;
  public:
  const ::Nmea2k::ValueU32& timeoffset() const;
  ::Nmea2k::ValueU32* release_timeoffset();
  ::Nmea2k::ValueU32* mutable_timeoffset();
  void set_allocated_timeoffset(::Nmea2k::ValueU32* timeoffset);

  // .Nmea2k.ValueU32 SatellitesInFix = 9;
  bool has_satellitesinfix() const;
  void clear_satellitesinfix();
  static const int kSatellitesInFixFieldNumber = 9;
  private:
  const ::Nmea2k::ValueU32& _internal_satellitesinfix() const;
  public:
  const ::Nmea2k::ValueU32& satellitesinfix() const;
  ::Nmea2k::ValueU32* release_satellitesinfix();
  ::Nmea2k::ValueU32* mutable_satellitesinfix();
  void set_allocated_satellitesinfix(::Nmea2k::ValueU32* satellitesinfix);

  // .Nmea2k.ValueS32 BestOfFourSatellitesSNR = 10;
  bool has_bestoffoursatellitessnr() const;
  void clear_bestoffoursatellitessnr();
  static const int kBestOfFourSatellitesSNRFieldNumber = 10;
  private:
  const ::Nmea2k::ValueS32& _internal_bestoffoursatellitessnr() const;
  public:
  const ::Nmea2k::ValueS32& bestoffoursatellitessnr() const;
  ::Nmea2k::ValueS32* release_bestoffoursatellitessnr();
  ::Nmea2k::ValueS32* mutable_bestoffoursatellitessnr();
  void set_allocated_bestoffoursatellitessnr(::Nmea2k::ValueS32* bestoffoursatellitessnr);

  // .Nmea2k.ValueGNSSMethod Method = 11;
  bool has_method() const;
  void clear_method();
  static const int kMethodFieldNumber = 11;
  private:
  const ::Nmea2k::ValueGNSSMethod& _internal_method() const;
  public:
  const ::Nmea2k::ValueGNSSMethod& method() const;
  ::Nmea2k::ValueGNSSMethod* release_method();
  ::Nmea2k::ValueGNSSMethod* mutable_method();
  void set_allocated_method(::Nmea2k::ValueGNSSMethod* method);

  // .Nmea2k.ValueGNSSFixType FixType = 12;
  bool has_fixtype() const;
  void clear_fixtype();
  static const int kFixTypeFieldNumber = 12;
  private:
  const ::Nmea2k::ValueGNSSFixType& _internal_fixtype() const;
  public:
  const ::Nmea2k::ValueGNSSFixType& fixtype() const;
  ::Nmea2k::ValueGNSSFixType* release_fixtype();
  ::Nmea2k::ValueGNSSFixType* mutable_fixtype();
  void set_allocated_fixtype(::Nmea2k::ValueGNSSFixType* fixtype);

  // .Nmea2k.ValueF Hdop = 13;
  bool has_hdop() const;
  void clear_hdop();
  static const int kHdopFieldNumber = 13;
  private:
  const ::Nmea2k::ValueF& _internal_hdop() const;
  public:
  const ::Nmea2k::ValueF& hdop() const;
  ::Nmea2k::ValueF* release_hdop();
  ::Nmea2k::ValueF* mutable_hdop();
  void set_allocated_hdop(::Nmea2k::ValueF* hdop);

  // .Nmea2k.ValueF Pdop = 14;
  bool has_pdop() const;
  void clear_pdop();
  static const int kPdopFieldNumber = 14;
  private:
  const ::Nmea2k::ValueF& _internal_pdop() const;
  public:
  const ::Nmea2k::ValueF& pdop() const;
  ::Nmea2k::ValueF* release_pdop();
  ::Nmea2k::ValueF* mutable_pdop();
  void set_allocated_pdop(::Nmea2k::ValueF* pdop);

  // .Nmea2k.ValueF Vdop = 15;
  bool has_vdop() const;
  void clear_vdop();
  static const int kVdopFieldNumber = 15;
  private:
  const ::Nmea2k::ValueF& _internal_vdop() const;
  public:
  const ::Nmea2k::ValueF& vdop() const;
  ::Nmea2k::ValueF* release_vdop();
  ::Nmea2k::ValueF* mutable_vdop();
  void set_allocated_vdop(::Nmea2k::ValueF* vdop);

  // .Nmea2k.ValueDouble LatitudeDeg = 16;
  bool has_latitudedeg() const;
  void clear_latitudedeg();
  static const int kLatitudeDegFieldNumber = 16;
  private:
  const ::Nmea2k::ValueDouble& _internal_latitudedeg() const;
  public:
  const ::Nmea2k::ValueDouble& latitudedeg() const;
  ::Nmea2k::ValueDouble* release_latitudedeg();
  ::Nmea2k::ValueDouble* mutable_latitudedeg();
  void set_allocated_latitudedeg(::Nmea2k::ValueDouble* latitudedeg);

  // .Nmea2k.ValueDouble LongitudeDeg = 17;
  bool has_longitudedeg() const;
  void clear_longitudedeg();
  static const int kLongitudeDegFieldNumber = 17;
  private:
  const ::Nmea2k::ValueDouble& _internal_longitudedeg() const;
  public:
  const ::Nmea2k::ValueDouble& longitudedeg() const;
  ::Nmea2k::ValueDouble* release_longitudedeg();
  ::Nmea2k::ValueDouble* mutable_longitudedeg();
  void set_allocated_longitudedeg(::Nmea2k::ValueDouble* longitudedeg);

  // uint32 Instance = 1;
  void clear_instance();
  static const int kInstanceFieldNumber = 1;
  ::google::protobuf::uint32 instance() const;
  void set_instance(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Nmea2k.GNSS)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr utcdatetime_;
  ::Nmea2k::ValueF* latitude_;
  ::Nmea2k::ValueF* longitude_;
  ::Nmea2k::ValueF* cog_;
  ::Nmea2k::ValueF* sog_;
  ::Nmea2k::ValueF* magneticvariation_;
  ::Nmea2k::ValueU32* timeoffset_;
  ::Nmea2k::ValueU32* satellitesinfix_;
  ::Nmea2k::ValueS32* bestoffoursatellitessnr_;
  ::Nmea2k::ValueGNSSMethod* method_;
  ::Nmea2k::ValueGNSSFixType* fixtype_;
  ::Nmea2k::ValueF* hdop_;
  ::Nmea2k::ValueF* pdop_;
  ::Nmea2k::ValueF* vdop_;
  ::Nmea2k::ValueDouble* latitudedeg_;
  ::Nmea2k::ValueDouble* longitudedeg_;
  ::google::protobuf::uint32 instance_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_Nmea2k_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class MonitoringKeyValue : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Nmea2k.MonitoringKeyValue) */ {
 public:
  MonitoringKeyValue();
  virtual ~MonitoringKeyValue();

  MonitoringKeyValue(const MonitoringKeyValue& from);

  inline MonitoringKeyValue& operator=(const MonitoringKeyValue& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  MonitoringKeyValue(MonitoringKeyValue&& from) noexcept
    : MonitoringKeyValue() {
    *this = ::std::move(from);
  }

  inline MonitoringKeyValue& operator=(MonitoringKeyValue&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const MonitoringKeyValue& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MonitoringKeyValue* internal_default_instance() {
    return reinterpret_cast<const MonitoringKeyValue*>(
               &_MonitoringKeyValue_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    122;

  void Swap(MonitoringKeyValue* other);
  friend void swap(MonitoringKeyValue& a, MonitoringKeyValue& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline MonitoringKeyValue* New() const final {
    return CreateMaybeMessage<MonitoringKeyValue>(NULL);
  }

  MonitoringKeyValue* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<MonitoringKeyValue>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const MonitoringKeyValue& from);
  void MergeFrom(const MonitoringKeyValue& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MonitoringKeyValue* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // float Value = 2;
  void clear_value();
  static const int kValueFieldNumber = 2;
  float value() const;
  void set_value(float value);

  // bool Valid = 1;
  void clear_valid();
  static const int kValidFieldNumber = 1;
  bool valid() const;
  void set_valid(bool value);

  // bool LimitValid = 3;
  void clear_limitvalid();
  static const int kLimitValidFieldNumber = 3;
  bool limitvalid() const;
  void set_limitvalid(bool value);

  // float Min = 4;
  void clear_min();
  static const int kMinFieldNumber = 4;
  float min() const;
  void set_min(float value);

  // float Max = 5;
  void clear_max();
  static const int kMaxFieldNumber = 5;
  float max() const;
  void set_max(float value);

  // float WarnLow = 6;
  void clear_warnlow();
  static const int kWarnLowFieldNumber = 6;
  float warnlow() const;
  void set_warnlow(float value);

  // float WarnHigh = 7;
  void clear_warnhigh();
  static const int kWarnHighFieldNumber = 7;
  float warnhigh() const;
  void set_warnhigh(float value);

  // @@protoc_insertion_point(class_scope:Nmea2k.MonitoringKeyValue)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  float value_;
  bool valid_;
  bool limitvalid_;
  float min_;
  float max_;
  float warnlow_;
  float warnhigh_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_Nmea2k_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CircuitIdMap_ValuesEntry_DoNotUse : public ::google::protobuf::internal::MapEntry<CircuitIdMap_ValuesEntry_DoNotUse, 
    ::google::protobuf::uint32, ::Nmea2k::Circuit,
    ::google::protobuf::internal::WireFormatLite::TYPE_UINT32,
    ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
    0 > {
public:
  typedef ::google::protobuf::internal::MapEntry<CircuitIdMap_ValuesEntry_DoNotUse, 
    ::google::protobuf::uint32, ::Nmea2k::Circuit,
    ::google::protobuf::internal::WireFormatLite::TYPE_UINT32,
    ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
    0 > SuperType;
  CircuitIdMap_ValuesEntry_DoNotUse();
  CircuitIdMap_ValuesEntry_DoNotUse(::google::protobuf::Arena* arena);
  void MergeFrom(const CircuitIdMap_ValuesEntry_DoNotUse& other);
  static const CircuitIdMap_ValuesEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const CircuitIdMap_ValuesEntry_DoNotUse*>(&_CircuitIdMap_ValuesEntry_DoNotUse_default_instance_); }
  void MergeFrom(const ::google::protobuf::Message& other) final;
  ::google::protobuf::Metadata GetMetadata() const;
};

// -------------------------------------------------------------------

class CircuitIdMap : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Nmea2k.CircuitIdMap) */ {
 public:
  CircuitIdMap();
  virtual ~CircuitIdMap();

  CircuitIdMap(const CircuitIdMap& from);

  inline CircuitIdMap& operator=(const CircuitIdMap& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CircuitIdMap(CircuitIdMap&& from) noexcept
    : CircuitIdMap() {
    *this = ::std::move(from);
  }

  inline CircuitIdMap& operator=(CircuitIdMap&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const CircuitIdMap& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CircuitIdMap* internal_default_instance() {
    return reinterpret_cast<const CircuitIdMap*>(
               &_CircuitIdMap_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    124;

  void Swap(CircuitIdMap* other);
  friend void swap(CircuitIdMap& a, CircuitIdMap& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CircuitIdMap* New() const final {
    return CreateMaybeMessage<CircuitIdMap>(NULL);
  }

  CircuitIdMap* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CircuitIdMap>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CircuitIdMap& from);
  void MergeFrom(const CircuitIdMap& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CircuitIdMap* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  // map<uint32, .Nmea2k.Circuit> Values = 1;
  int values_size() const;
  void clear_values();
  static const int kValuesFieldNumber = 1;
  const ::google::protobuf::Map< ::google::protobuf::uint32, ::Nmea2k::Circuit >&
      values() const;
  ::google::protobuf::Map< ::google::protobuf::uint32, ::Nmea2k::Circuit >*
      mutable_values();

  // @@protoc_insertion_point(class_scope:Nmea2k.CircuitIdMap)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::MapField<
      CircuitIdMap_ValuesEntry_DoNotUse,
      ::google::protobuf::uint32, ::Nmea2k::Circuit,
      ::google::protobuf::internal::WireFormatLite::TYPE_UINT32,
      ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
      0 > values_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_Nmea2k_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ModesIdMap_ValuesEntry_DoNotUse : public ::google::protobuf::internal::MapEntry<ModesIdMap_ValuesEntry_DoNotUse, 
    ::google::protobuf::uint32, ::Nmea2k::Circuit,
    ::google::protobuf::internal::WireFormatLite::TYPE_UINT32,
    ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
    0 > {
public:
  typedef ::google::protobuf::internal::MapEntry<ModesIdMap_ValuesEntry_DoNotUse, 
    ::google::protobuf::uint32, ::Nmea2k::Circuit,
    ::google::protobuf::internal::WireFormatLite::TYPE_UINT32,
    ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
    0 > SuperType;
  ModesIdMap_ValuesEntry_DoNotUse();
  ModesIdMap_ValuesEntry_DoNotUse(::google::protobuf::Arena* arena);
  void MergeFrom(const ModesIdMap_ValuesEntry_DoNotUse& other);
  static const ModesIdMap_ValuesEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const ModesIdMap_ValuesEntry_DoNotUse*>(&_ModesIdMap_ValuesEntry_DoNotUse_default_instance_); }
  void MergeFrom(const ::google::protobuf::Message& other) final;
  ::google::protobuf::Metadata GetMetadata() const;
};

// -------------------------------------------------------------------

class ModesIdMap : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Nmea2k.ModesIdMap) */ {
 public:
  ModesIdMap();
  virtual ~ModesIdMap();

  ModesIdMap(const ModesIdMap& from);

  inline ModesIdMap& operator=(const ModesIdMap& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ModesIdMap(ModesIdMap&& from) noexcept
    : ModesIdMap() {
    *this = ::std::move(from);
  }

  inline ModesIdMap& operator=(ModesIdMap&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ModesIdMap& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ModesIdMap* internal_default_instance() {
    return reinterpret_cast<const ModesIdMap*>(
               &_ModesIdMap_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    126;

  void Swap(ModesIdMap* other);
  friend void swap(ModesIdMap& a, ModesIdMap& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ModesIdMap* New() const final {
    return CreateMaybeMessage<ModesIdMap>(NULL);
  }

  ModesIdMap* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ModesIdMap>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ModesIdMap& from);
  void MergeFrom(const ModesIdMap& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ModesIdMap* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  // map<uint32, .Nmea2k.Circuit> Values = 1;
  int values_size() const;
  void clear_values();
  static const int kValuesFieldNumber = 1;
  const ::google::protobuf::Map< ::google::protobuf::uint32, ::Nmea2k::Circuit >&
      values() const;
  ::google::protobuf::Map< ::google::protobuf::uint32, ::Nmea2k::Circuit >*
      mutable_values();

  // @@protoc_insertion_point(class_scope:Nmea2k.ModesIdMap)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::MapField<
      ModesIdMap_ValuesEntry_DoNotUse,
      ::google::protobuf::uint32, ::Nmea2k::Circuit,
      ::google::protobuf::internal::WireFormatLite::TYPE_UINT32,
      ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
      0 > values_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_Nmea2k_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class TanksInstanceMap_ValuesEntry_DoNotUse : public ::google::protobuf::internal::MapEntry<TanksInstanceMap_ValuesEntry_DoNotUse, 
    ::google::protobuf::uint32, ::Nmea2k::Tank,
    ::google::protobuf::internal::WireFormatLite::TYPE_UINT32,
    ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
    0 > {
public:
  typedef ::google::protobuf::internal::MapEntry<TanksInstanceMap_ValuesEntry_DoNotUse, 
    ::google::protobuf::uint32, ::Nmea2k::Tank,
    ::google::protobuf::internal::WireFormatLite::TYPE_UINT32,
    ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
    0 > SuperType;
  TanksInstanceMap_ValuesEntry_DoNotUse();
  TanksInstanceMap_ValuesEntry_DoNotUse(::google::protobuf::Arena* arena);
  void MergeFrom(const TanksInstanceMap_ValuesEntry_DoNotUse& other);
  static const TanksInstanceMap_ValuesEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const TanksInstanceMap_ValuesEntry_DoNotUse*>(&_TanksInstanceMap_ValuesEntry_DoNotUse_default_instance_); }
  void MergeFrom(const ::google::protobuf::Message& other) final;
  ::google::protobuf::Metadata GetMetadata() const;
};

// -------------------------------------------------------------------

class TanksInstanceMap : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Nmea2k.TanksInstanceMap) */ {
 public:
  TanksInstanceMap();
  virtual ~TanksInstanceMap();

  TanksInstanceMap(const TanksInstanceMap& from);

  inline TanksInstanceMap& operator=(const TanksInstanceMap& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TanksInstanceMap(TanksInstanceMap&& from) noexcept
    : TanksInstanceMap() {
    *this = ::std::move(from);
  }

  inline TanksInstanceMap& operator=(TanksInstanceMap&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const TanksInstanceMap& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TanksInstanceMap* internal_default_instance() {
    return reinterpret_cast<const TanksInstanceMap*>(
               &_TanksInstanceMap_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    128;

  void Swap(TanksInstanceMap* other);
  friend void swap(TanksInstanceMap& a, TanksInstanceMap& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TanksInstanceMap* New() const final {
    return CreateMaybeMessage<TanksInstanceMap>(NULL);
  }

  TanksInstanceMap* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<TanksInstanceMap>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const TanksInstanceMap& from);
  void MergeFrom(const TanksInstanceMap& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TanksInstanceMap* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  // map<uint32, .Nmea2k.Tank> Values = 1;
  int values_size() const;
  void clear_values();
  static const int kValuesFieldNumber = 1;
  const ::google::protobuf::Map< ::google::protobuf::uint32, ::Nmea2k::Tank >&
      values() const;
  ::google::protobuf::Map< ::google::protobuf::uint32, ::Nmea2k::Tank >*
      mutable_values();

  // @@protoc_insertion_point(class_scope:Nmea2k.TanksInstanceMap)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::MapField<
      TanksInstanceMap_ValuesEntry_DoNotUse,
      ::google::protobuf::uint32, ::Nmea2k::Tank,
      ::google::protobuf::internal::WireFormatLite::TYPE_UINT32,
      ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
      0 > values_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_Nmea2k_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class EnginesInstanceMap_ValuesEntry_DoNotUse : public ::google::protobuf::internal::MapEntry<EnginesInstanceMap_ValuesEntry_DoNotUse, 
    ::google::protobuf::uint32, ::Nmea2k::Engine,
    ::google::protobuf::internal::WireFormatLite::TYPE_UINT32,
    ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
    0 > {
public:
  typedef ::google::protobuf::internal::MapEntry<EnginesInstanceMap_ValuesEntry_DoNotUse, 
    ::google::protobuf::uint32, ::Nmea2k::Engine,
    ::google::protobuf::internal::WireFormatLite::TYPE_UINT32,
    ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
    0 > SuperType;
  EnginesInstanceMap_ValuesEntry_DoNotUse();
  EnginesInstanceMap_ValuesEntry_DoNotUse(::google::protobuf::Arena* arena);
  void MergeFrom(const EnginesInstanceMap_ValuesEntry_DoNotUse& other);
  static const EnginesInstanceMap_ValuesEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const EnginesInstanceMap_ValuesEntry_DoNotUse*>(&_EnginesInstanceMap_ValuesEntry_DoNotUse_default_instance_); }
  void MergeFrom(const ::google::protobuf::Message& other) final;
  ::google::protobuf::Metadata GetMetadata() const;
};

// -------------------------------------------------------------------

class EnginesInstanceMap : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Nmea2k.EnginesInstanceMap) */ {
 public:
  EnginesInstanceMap();
  virtual ~EnginesInstanceMap();

  EnginesInstanceMap(const EnginesInstanceMap& from);

  inline EnginesInstanceMap& operator=(const EnginesInstanceMap& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  EnginesInstanceMap(EnginesInstanceMap&& from) noexcept
    : EnginesInstanceMap() {
    *this = ::std::move(from);
  }

  inline EnginesInstanceMap& operator=(EnginesInstanceMap&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const EnginesInstanceMap& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const EnginesInstanceMap* internal_default_instance() {
    return reinterpret_cast<const EnginesInstanceMap*>(
               &_EnginesInstanceMap_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    130;

  void Swap(EnginesInstanceMap* other);
  friend void swap(EnginesInstanceMap& a, EnginesInstanceMap& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline EnginesInstanceMap* New() const final {
    return CreateMaybeMessage<EnginesInstanceMap>(NULL);
  }

  EnginesInstanceMap* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<EnginesInstanceMap>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const EnginesInstanceMap& from);
  void MergeFrom(const EnginesInstanceMap& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EnginesInstanceMap* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  // map<uint32, .Nmea2k.Engine> Values = 1;
  int values_size() const;
  void clear_values();
  static const int kValuesFieldNumber = 1;
  const ::google::protobuf::Map< ::google::protobuf::uint32, ::Nmea2k::Engine >&
      values() const;
  ::google::protobuf::Map< ::google::protobuf::uint32, ::Nmea2k::Engine >*
      mutable_values();

  // @@protoc_insertion_point(class_scope:Nmea2k.EnginesInstanceMap)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::MapField<
      EnginesInstanceMap_ValuesEntry_DoNotUse,
      ::google::protobuf::uint32, ::Nmea2k::Engine,
      ::google::protobuf::internal::WireFormatLite::TYPE_UINT32,
      ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
      0 > values_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_Nmea2k_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ACInstanceMap_ValuesEntry_DoNotUse : public ::google::protobuf::internal::MapEntry<ACInstanceMap_ValuesEntry_DoNotUse, 
    ::google::protobuf::uint32, ::Nmea2k::AC,
    ::google::protobuf::internal::WireFormatLite::TYPE_UINT32,
    ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
    0 > {
public:
  typedef ::google::protobuf::internal::MapEntry<ACInstanceMap_ValuesEntry_DoNotUse, 
    ::google::protobuf::uint32, ::Nmea2k::AC,
    ::google::protobuf::internal::WireFormatLite::TYPE_UINT32,
    ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
    0 > SuperType;
  ACInstanceMap_ValuesEntry_DoNotUse();
  ACInstanceMap_ValuesEntry_DoNotUse(::google::protobuf::Arena* arena);
  void MergeFrom(const ACInstanceMap_ValuesEntry_DoNotUse& other);
  static const ACInstanceMap_ValuesEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const ACInstanceMap_ValuesEntry_DoNotUse*>(&_ACInstanceMap_ValuesEntry_DoNotUse_default_instance_); }
  void MergeFrom(const ::google::protobuf::Message& other) final;
  ::google::protobuf::Metadata GetMetadata() const;
};

// -------------------------------------------------------------------

class ACInstanceMap : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Nmea2k.ACInstanceMap) */ {
 public:
  ACInstanceMap();
  virtual ~ACInstanceMap();

  ACInstanceMap(const ACInstanceMap& from);

  inline ACInstanceMap& operator=(const ACInstanceMap& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ACInstanceMap(ACInstanceMap&& from) noexcept
    : ACInstanceMap() {
    *this = ::std::move(from);
  }

  inline ACInstanceMap& operator=(ACInstanceMap&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ACInstanceMap& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ACInstanceMap* internal_default_instance() {
    return reinterpret_cast<const ACInstanceMap*>(
               &_ACInstanceMap_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    132;

  void Swap(ACInstanceMap* other);
  friend void swap(ACInstanceMap& a, ACInstanceMap& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ACInstanceMap* New() const final {
    return CreateMaybeMessage<ACInstanceMap>(NULL);
  }

  ACInstanceMap* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ACInstanceMap>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ACInstanceMap& from);
  void MergeFrom(const ACInstanceMap& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ACInstanceMap* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  // map<uint32, .Nmea2k.AC> Values = 1;
  int values_size() const;
  void clear_values();
  static const int kValuesFieldNumber = 1;
  const ::google::protobuf::Map< ::google::protobuf::uint32, ::Nmea2k::AC >&
      values() const;
  ::google::protobuf::Map< ::google::protobuf::uint32, ::Nmea2k::AC >*
      mutable_values();

  // @@protoc_insertion_point(class_scope:Nmea2k.ACInstanceMap)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::MapField<
      ACInstanceMap_ValuesEntry_DoNotUse,
      ::google::protobuf::uint32, ::Nmea2k::AC,
      ::google::protobuf::internal::WireFormatLite::TYPE_UINT32,
      ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
      0 > values_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_Nmea2k_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DCInstanceMap_ValuesEntry_DoNotUse : public ::google::protobuf::internal::MapEntry<DCInstanceMap_ValuesEntry_DoNotUse, 
    ::google::protobuf::uint32, ::Nmea2k::DC,
    ::google::protobuf::internal::WireFormatLite::TYPE_UINT32,
    ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
    0 > {
public:
  typedef ::google::protobuf::internal::MapEntry<DCInstanceMap_ValuesEntry_DoNotUse, 
    ::google::protobuf::uint32, ::Nmea2k::DC,
    ::google::protobuf::internal::WireFormatLite::TYPE_UINT32,
    ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
    0 > SuperType;
  DCInstanceMap_ValuesEntry_DoNotUse();
  DCInstanceMap_ValuesEntry_DoNotUse(::google::protobuf::Arena* arena);
  void MergeFrom(const DCInstanceMap_ValuesEntry_DoNotUse& other);
  static const DCInstanceMap_ValuesEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const DCInstanceMap_ValuesEntry_DoNotUse*>(&_DCInstanceMap_ValuesEntry_DoNotUse_default_instance_); }
  void MergeFrom(const ::google::protobuf::Message& other) final;
  ::google::protobuf::Metadata GetMetadata() const;
};

// -------------------------------------------------------------------

class DCInstanceMap : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Nmea2k.DCInstanceMap) */ {
 public:
  DCInstanceMap();
  virtual ~DCInstanceMap();

  DCInstanceMap(const DCInstanceMap& from);

  inline DCInstanceMap& operator=(const DCInstanceMap& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DCInstanceMap(DCInstanceMap&& from) noexcept
    : DCInstanceMap() {
    *this = ::std::move(from);
  }

  inline DCInstanceMap& operator=(DCInstanceMap&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const DCInstanceMap& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DCInstanceMap* internal_default_instance() {
    return reinterpret_cast<const DCInstanceMap*>(
               &_DCInstanceMap_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    134;

  void Swap(DCInstanceMap* other);
  friend void swap(DCInstanceMap& a, DCInstanceMap& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DCInstanceMap* New() const final {
    return CreateMaybeMessage<DCInstanceMap>(NULL);
  }

  DCInstanceMap* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<DCInstanceMap>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const DCInstanceMap& from);
  void MergeFrom(const DCInstanceMap& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DCInstanceMap* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  // map<uint32, .Nmea2k.DC> Values = 1;
  int values_size() const;
  void clear_values();
  static const int kValuesFieldNumber = 1;
  const ::google::protobuf::Map< ::google::protobuf::uint32, ::Nmea2k::DC >&
      values() const;
  ::google::protobuf::Map< ::google::protobuf::uint32, ::Nmea2k::DC >*
      mutable_values();

  // @@protoc_insertion_point(class_scope:Nmea2k.DCInstanceMap)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::MapField<
      DCInstanceMap_ValuesEntry_DoNotUse,
      ::google::protobuf::uint32, ::Nmea2k::DC,
      ::google::protobuf::internal::WireFormatLite::TYPE_UINT32,
      ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
      0 > values_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_Nmea2k_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class TemperaturesInstanceMap_ValuesEntry_DoNotUse : public ::google::protobuf::internal::MapEntry<TemperaturesInstanceMap_ValuesEntry_DoNotUse, 
    ::google::protobuf::uint32, ::Nmea2k::Temperature,
    ::google::protobuf::internal::WireFormatLite::TYPE_UINT32,
    ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
    0 > {
public:
  typedef ::google::protobuf::internal::MapEntry<TemperaturesInstanceMap_ValuesEntry_DoNotUse, 
    ::google::protobuf::uint32, ::Nmea2k::Temperature,
    ::google::protobuf::internal::WireFormatLite::TYPE_UINT32,
    ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
    0 > SuperType;
  TemperaturesInstanceMap_ValuesEntry_DoNotUse();
  TemperaturesInstanceMap_ValuesEntry_DoNotUse(::google::protobuf::Arena* arena);
  void MergeFrom(const TemperaturesInstanceMap_ValuesEntry_DoNotUse& other);
  static const TemperaturesInstanceMap_ValuesEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const TemperaturesInstanceMap_ValuesEntry_DoNotUse*>(&_TemperaturesInstanceMap_ValuesEntry_DoNotUse_default_instance_); }
  void MergeFrom(const ::google::protobuf::Message& other) final;
  ::google::protobuf::Metadata GetMetadata() const;
};

// -------------------------------------------------------------------

class TemperaturesInstanceMap : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Nmea2k.TemperaturesInstanceMap) */ {
 public:
  TemperaturesInstanceMap();
  virtual ~TemperaturesInstanceMap();

  TemperaturesInstanceMap(const TemperaturesInstanceMap& from);

  inline TemperaturesInstanceMap& operator=(const TemperaturesInstanceMap& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TemperaturesInstanceMap(TemperaturesInstanceMap&& from) noexcept
    : TemperaturesInstanceMap() {
    *this = ::std::move(from);
  }

  inline TemperaturesInstanceMap& operator=(TemperaturesInstanceMap&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const TemperaturesInstanceMap& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TemperaturesInstanceMap* internal_default_instance() {
    return reinterpret_cast<const TemperaturesInstanceMap*>(
               &_TemperaturesInstanceMap_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    136;

  void Swap(TemperaturesInstanceMap* other);
  friend void swap(TemperaturesInstanceMap& a, TemperaturesInstanceMap& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TemperaturesInstanceMap* New() const final {
    return CreateMaybeMessage<TemperaturesInstanceMap>(NULL);
  }

  TemperaturesInstanceMap* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<TemperaturesInstanceMap>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const TemperaturesInstanceMap& from);
  void MergeFrom(const TemperaturesInstanceMap& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TemperaturesInstanceMap* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  // map<uint32, .Nmea2k.Temperature> Values = 1;
  int values_size() const;
  void clear_values();
  static const int kValuesFieldNumber = 1;
  const ::google::protobuf::Map< ::google::protobuf::uint32, ::Nmea2k::Temperature >&
      values() const;
  ::google::protobuf::Map< ::google::protobuf::uint32, ::Nmea2k::Temperature >*
      mutable_values();

  // @@protoc_insertion_point(class_scope:Nmea2k.TemperaturesInstanceMap)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::MapField<
      TemperaturesInstanceMap_ValuesEntry_DoNotUse,
      ::google::protobuf::uint32, ::Nmea2k::Temperature,
      ::google::protobuf::internal::WireFormatLite::TYPE_UINT32,
      ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
      0 > values_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_Nmea2k_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class PressuresInstanceMap_ValuesEntry_DoNotUse : public ::google::protobuf::internal::MapEntry<PressuresInstanceMap_ValuesEntry_DoNotUse, 
    ::google::protobuf::uint32, ::Nmea2k::Pressure,
    ::google::protobuf::internal::WireFormatLite::TYPE_UINT32,
    ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
    0 > {
public:
  typedef ::google::protobuf::internal::MapEntry<PressuresInstanceMap_ValuesEntry_DoNotUse, 
    ::google::protobuf::uint32, ::Nmea2k::Pressure,
    ::google::protobuf::internal::WireFormatLite::TYPE_UINT32,
    ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
    0 > SuperType;
  PressuresInstanceMap_ValuesEntry_DoNotUse();
  PressuresInstanceMap_ValuesEntry_DoNotUse(::google::protobuf::Arena* arena);
  void MergeFrom(const PressuresInstanceMap_ValuesEntry_DoNotUse& other);
  static const PressuresInstanceMap_ValuesEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const PressuresInstanceMap_ValuesEntry_DoNotUse*>(&_PressuresInstanceMap_ValuesEntry_DoNotUse_default_instance_); }
  void MergeFrom(const ::google::protobuf::Message& other) final;
  ::google::protobuf::Metadata GetMetadata() const;
};

// -------------------------------------------------------------------

class PressuresInstanceMap : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Nmea2k.PressuresInstanceMap) */ {
 public:
  PressuresInstanceMap();
  virtual ~PressuresInstanceMap();

  PressuresInstanceMap(const PressuresInstanceMap& from);

  inline PressuresInstanceMap& operator=(const PressuresInstanceMap& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PressuresInstanceMap(PressuresInstanceMap&& from) noexcept
    : PressuresInstanceMap() {
    *this = ::std::move(from);
  }

  inline PressuresInstanceMap& operator=(PressuresInstanceMap&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const PressuresInstanceMap& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PressuresInstanceMap* internal_default_instance() {
    return reinterpret_cast<const PressuresInstanceMap*>(
               &_PressuresInstanceMap_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    138;

  void Swap(PressuresInstanceMap* other);
  friend void swap(PressuresInstanceMap& a, PressuresInstanceMap& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PressuresInstanceMap* New() const final {
    return CreateMaybeMessage<PressuresInstanceMap>(NULL);
  }

  PressuresInstanceMap* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<PressuresInstanceMap>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const PressuresInstanceMap& from);
  void MergeFrom(const PressuresInstanceMap& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PressuresInstanceMap* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  // map<uint32, .Nmea2k.Pressure> Values = 1;
  int values_size() const;
  void clear_values();
  static const int kValuesFieldNumber = 1;
  const ::google::protobuf::Map< ::google::protobuf::uint32, ::Nmea2k::Pressure >&
      values() const;
  ::google::protobuf::Map< ::google::protobuf::uint32, ::Nmea2k::Pressure >*
      mutable_values();

  // @@protoc_insertion_point(class_scope:Nmea2k.PressuresInstanceMap)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::MapField<
      PressuresInstanceMap_ValuesEntry_DoNotUse,
      ::google::protobuf::uint32, ::Nmea2k::Pressure,
      ::google::protobuf::internal::WireFormatLite::TYPE_UINT32,
      ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
      0 > values_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_Nmea2k_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class HvacsInstanceMap_ValuesEntry_DoNotUse : public ::google::protobuf::internal::MapEntry<HvacsInstanceMap_ValuesEntry_DoNotUse, 
    ::google::protobuf::uint32, ::Nmea2k::HVAC,
    ::google::protobuf::internal::WireFormatLite::TYPE_UINT32,
    ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
    0 > {
public:
  typedef ::google::protobuf::internal::MapEntry<HvacsInstanceMap_ValuesEntry_DoNotUse, 
    ::google::protobuf::uint32, ::Nmea2k::HVAC,
    ::google::protobuf::internal::WireFormatLite::TYPE_UINT32,
    ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
    0 > SuperType;
  HvacsInstanceMap_ValuesEntry_DoNotUse();
  HvacsInstanceMap_ValuesEntry_DoNotUse(::google::protobuf::Arena* arena);
  void MergeFrom(const HvacsInstanceMap_ValuesEntry_DoNotUse& other);
  static const HvacsInstanceMap_ValuesEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const HvacsInstanceMap_ValuesEntry_DoNotUse*>(&_HvacsInstanceMap_ValuesEntry_DoNotUse_default_instance_); }
  void MergeFrom(const ::google::protobuf::Message& other) final;
  ::google::protobuf::Metadata GetMetadata() const;
};

// -------------------------------------------------------------------

class HvacsInstanceMap : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Nmea2k.HvacsInstanceMap) */ {
 public:
  HvacsInstanceMap();
  virtual ~HvacsInstanceMap();

  HvacsInstanceMap(const HvacsInstanceMap& from);

  inline HvacsInstanceMap& operator=(const HvacsInstanceMap& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  HvacsInstanceMap(HvacsInstanceMap&& from) noexcept
    : HvacsInstanceMap() {
    *this = ::std::move(from);
  }

  inline HvacsInstanceMap& operator=(HvacsInstanceMap&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const HvacsInstanceMap& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const HvacsInstanceMap* internal_default_instance() {
    return reinterpret_cast<const HvacsInstanceMap*>(
               &_HvacsInstanceMap_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    140;

  void Swap(HvacsInstanceMap* other);
  friend void swap(HvacsInstanceMap& a, HvacsInstanceMap& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline HvacsInstanceMap* New() const final {
    return CreateMaybeMessage<HvacsInstanceMap>(NULL);
  }

  HvacsInstanceMap* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<HvacsInstanceMap>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const HvacsInstanceMap& from);
  void MergeFrom(const HvacsInstanceMap& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(HvacsInstanceMap* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  // map<uint32, .Nmea2k.HVAC> Values = 1;
  int values_size() const;
  void clear_values();
  static const int kValuesFieldNumber = 1;
  const ::google::protobuf::Map< ::google::protobuf::uint32, ::Nmea2k::HVAC >&
      values() const;
  ::google::protobuf::Map< ::google::protobuf::uint32, ::Nmea2k::HVAC >*
      mutable_values();

  // @@protoc_insertion_point(class_scope:Nmea2k.HvacsInstanceMap)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::MapField<
      HvacsInstanceMap_ValuesEntry_DoNotUse,
      ::google::protobuf::uint32, ::Nmea2k::HVAC,
      ::google::protobuf::internal::WireFormatLite::TYPE_UINT32,
      ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
      0 > values_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_Nmea2k_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class AwningsInstanceMap_ValuesEntry_DoNotUse : public ::google::protobuf::internal::MapEntry<AwningsInstanceMap_ValuesEntry_DoNotUse, 
    ::google::protobuf::uint32, ::Nmea2k::ZipdeeAwning,
    ::google::protobuf::internal::WireFormatLite::TYPE_UINT32,
    ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
    0 > {
public:
  typedef ::google::protobuf::internal::MapEntry<AwningsInstanceMap_ValuesEntry_DoNotUse, 
    ::google::protobuf::uint32, ::Nmea2k::ZipdeeAwning,
    ::google::protobuf::internal::WireFormatLite::TYPE_UINT32,
    ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
    0 > SuperType;
  AwningsInstanceMap_ValuesEntry_DoNotUse();
  AwningsInstanceMap_ValuesEntry_DoNotUse(::google::protobuf::Arena* arena);
  void MergeFrom(const AwningsInstanceMap_ValuesEntry_DoNotUse& other);
  static const AwningsInstanceMap_ValuesEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const AwningsInstanceMap_ValuesEntry_DoNotUse*>(&_AwningsInstanceMap_ValuesEntry_DoNotUse_default_instance_); }
  void MergeFrom(const ::google::protobuf::Message& other) final;
  ::google::protobuf::Metadata GetMetadata() const;
};

// -------------------------------------------------------------------

class AwningsInstanceMap : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Nmea2k.AwningsInstanceMap) */ {
 public:
  AwningsInstanceMap();
  virtual ~AwningsInstanceMap();

  AwningsInstanceMap(const AwningsInstanceMap& from);

  inline AwningsInstanceMap& operator=(const AwningsInstanceMap& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AwningsInstanceMap(AwningsInstanceMap&& from) noexcept
    : AwningsInstanceMap() {
    *this = ::std::move(from);
  }

  inline AwningsInstanceMap& operator=(AwningsInstanceMap&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const AwningsInstanceMap& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AwningsInstanceMap* internal_default_instance() {
    return reinterpret_cast<const AwningsInstanceMap*>(
               &_AwningsInstanceMap_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    142;

  void Swap(AwningsInstanceMap* other);
  friend void swap(AwningsInstanceMap& a, AwningsInstanceMap& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AwningsInstanceMap* New() const final {
    return CreateMaybeMessage<AwningsInstanceMap>(NULL);
  }

  AwningsInstanceMap* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<AwningsInstanceMap>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const AwningsInstanceMap& from);
  void MergeFrom(const AwningsInstanceMap& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AwningsInstanceMap* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  // map<uint32, .Nmea2k.ZipdeeAwning> Values = 1;
  int values_size() const;
  void clear_values();
  static const int kValuesFieldNumber = 1;
  const ::google::protobuf::Map< ::google::protobuf::uint32, ::Nmea2k::ZipdeeAwning >&
      values() const;
  ::google::protobuf::Map< ::google::protobuf::uint32, ::Nmea2k::ZipdeeAwning >*
      mutable_values();

  // @@protoc_insertion_point(class_scope:Nmea2k.AwningsInstanceMap)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::MapField<
      AwningsInstanceMap_ValuesEntry_DoNotUse,
      ::google::protobuf::uint32, ::Nmea2k::ZipdeeAwning,
      ::google::protobuf::internal::WireFormatLite::TYPE_UINT32,
      ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
      0 > values_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_Nmea2k_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ThirdPartyGeneratorsInstanceMap_ValuesEntry_DoNotUse : public ::google::protobuf::internal::MapEntry<ThirdPartyGeneratorsInstanceMap_ValuesEntry_DoNotUse, 
    ::google::protobuf::uint32, ::Nmea2k::ThirdPartyGenerator,
    ::google::protobuf::internal::WireFormatLite::TYPE_UINT32,
    ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
    0 > {
public:
  typedef ::google::protobuf::internal::MapEntry<ThirdPartyGeneratorsInstanceMap_ValuesEntry_DoNotUse, 
    ::google::protobuf::uint32, ::Nmea2k::ThirdPartyGenerator,
    ::google::protobuf::internal::WireFormatLite::TYPE_UINT32,
    ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
    0 > SuperType;
  ThirdPartyGeneratorsInstanceMap_ValuesEntry_DoNotUse();
  ThirdPartyGeneratorsInstanceMap_ValuesEntry_DoNotUse(::google::protobuf::Arena* arena);
  void MergeFrom(const ThirdPartyGeneratorsInstanceMap_ValuesEntry_DoNotUse& other);
  static const ThirdPartyGeneratorsInstanceMap_ValuesEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const ThirdPartyGeneratorsInstanceMap_ValuesEntry_DoNotUse*>(&_ThirdPartyGeneratorsInstanceMap_ValuesEntry_DoNotUse_default_instance_); }
  void MergeFrom(const ::google::protobuf::Message& other) final;
  ::google::protobuf::Metadata GetMetadata() const;
};

// -------------------------------------------------------------------

class ThirdPartyGeneratorsInstanceMap : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Nmea2k.ThirdPartyGeneratorsInstanceMap) */ {
 public:
  ThirdPartyGeneratorsInstanceMap();
  virtual ~ThirdPartyGeneratorsInstanceMap();

  ThirdPartyGeneratorsInstanceMap(const ThirdPartyGeneratorsInstanceMap& from);

  inline ThirdPartyGeneratorsInstanceMap& operator=(const ThirdPartyGeneratorsInstanceMap& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ThirdPartyGeneratorsInstanceMap(ThirdPartyGeneratorsInstanceMap&& from) noexcept
    : ThirdPartyGeneratorsInstanceMap() {
    *this = ::std::move(from);
  }

  inline ThirdPartyGeneratorsInstanceMap& operator=(ThirdPartyGeneratorsInstanceMap&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ThirdPartyGeneratorsInstanceMap& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ThirdPartyGeneratorsInstanceMap* internal_default_instance() {
    return reinterpret_cast<const ThirdPartyGeneratorsInstanceMap*>(
               &_ThirdPartyGeneratorsInstanceMap_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    144;

  void Swap(ThirdPartyGeneratorsInstanceMap* other);
  friend void swap(ThirdPartyGeneratorsInstanceMap& a, ThirdPartyGeneratorsInstanceMap& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ThirdPartyGeneratorsInstanceMap* New() const final {
    return CreateMaybeMessage<ThirdPartyGeneratorsInstanceMap>(NULL);
  }

  ThirdPartyGeneratorsInstanceMap* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ThirdPartyGeneratorsInstanceMap>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ThirdPartyGeneratorsInstanceMap& from);
  void MergeFrom(const ThirdPartyGeneratorsInstanceMap& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ThirdPartyGeneratorsInstanceMap* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  // map<uint32, .Nmea2k.ThirdPartyGenerator> Values = 1;
  int values_size() const;
  void clear_values();
  static const int kValuesFieldNumber = 1;
  const ::google::protobuf::Map< ::google::protobuf::uint32, ::Nmea2k::ThirdPartyGenerator >&
      values() const;
  ::google::protobuf::Map< ::google::protobuf::uint32, ::Nmea2k::ThirdPartyGenerator >*
      mutable_values();

  // @@protoc_insertion_point(class_scope:Nmea2k.ThirdPartyGeneratorsInstanceMap)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::MapField<
      ThirdPartyGeneratorsInstanceMap_ValuesEntry_DoNotUse,
      ::google::protobuf::uint32, ::Nmea2k::ThirdPartyGenerator,
      ::google::protobuf::internal::WireFormatLite::TYPE_UINT32,
      ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
      0 > values_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_Nmea2k_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class InverterChargersInstanceMap_ValuesEntry_DoNotUse : public ::google::protobuf::internal::MapEntry<InverterChargersInstanceMap_ValuesEntry_DoNotUse, 
    ::google::protobuf::uint32, ::Nmea2k::InverterCharger,
    ::google::protobuf::internal::WireFormatLite::TYPE_UINT32,
    ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
    0 > {
public:
  typedef ::google::protobuf::internal::MapEntry<InverterChargersInstanceMap_ValuesEntry_DoNotUse, 
    ::google::protobuf::uint32, ::Nmea2k::InverterCharger,
    ::google::protobuf::internal::WireFormatLite::TYPE_UINT32,
    ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
    0 > SuperType;
  InverterChargersInstanceMap_ValuesEntry_DoNotUse();
  InverterChargersInstanceMap_ValuesEntry_DoNotUse(::google::protobuf::Arena* arena);
  void MergeFrom(const InverterChargersInstanceMap_ValuesEntry_DoNotUse& other);
  static const InverterChargersInstanceMap_ValuesEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const InverterChargersInstanceMap_ValuesEntry_DoNotUse*>(&_InverterChargersInstanceMap_ValuesEntry_DoNotUse_default_instance_); }
  void MergeFrom(const ::google::protobuf::Message& other) final;
  ::google::protobuf::Metadata GetMetadata() const;
};

// -------------------------------------------------------------------

class InverterChargersInstanceMap : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Nmea2k.InverterChargersInstanceMap) */ {
 public:
  InverterChargersInstanceMap();
  virtual ~InverterChargersInstanceMap();

  InverterChargersInstanceMap(const InverterChargersInstanceMap& from);

  inline InverterChargersInstanceMap& operator=(const InverterChargersInstanceMap& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  InverterChargersInstanceMap(InverterChargersInstanceMap&& from) noexcept
    : InverterChargersInstanceMap() {
    *this = ::std::move(from);
  }

  inline InverterChargersInstanceMap& operator=(InverterChargersInstanceMap&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const InverterChargersInstanceMap& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const InverterChargersInstanceMap* internal_default_instance() {
    return reinterpret_cast<const InverterChargersInstanceMap*>(
               &_InverterChargersInstanceMap_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    146;

  void Swap(InverterChargersInstanceMap* other);
  friend void swap(InverterChargersInstanceMap& a, InverterChargersInstanceMap& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline InverterChargersInstanceMap* New() const final {
    return CreateMaybeMessage<InverterChargersInstanceMap>(NULL);
  }

  InverterChargersInstanceMap* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<InverterChargersInstanceMap>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const InverterChargersInstanceMap& from);
  void MergeFrom(const InverterChargersInstanceMap& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InverterChargersInstanceMap* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  // map<uint32, .Nmea2k.InverterCharger> Values = 1;
  int values_size() const;
  void clear_values();
  static const int kValuesFieldNumber = 1;
  const ::google::protobuf::Map< ::google::protobuf::uint32, ::Nmea2k::InverterCharger >&
      values() const;
  ::google::protobuf::Map< ::google::protobuf::uint32, ::Nmea2k::InverterCharger >*
      mutable_values();

  // @@protoc_insertion_point(class_scope:Nmea2k.InverterChargersInstanceMap)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::MapField<
      InverterChargersInstanceMap_ValuesEntry_DoNotUse,
      ::google::protobuf::uint32, ::Nmea2k::InverterCharger,
      ::google::protobuf::internal::WireFormatLite::TYPE_UINT32,
      ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
      0 > values_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_Nmea2k_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class TyrepressuresInstanceMap_ValuesEntry_DoNotUse : public ::google::protobuf::internal::MapEntry<TyrepressuresInstanceMap_ValuesEntry_DoNotUse, 
    ::google::protobuf::uint32, ::Nmea2k::TyrePressure,
    ::google::protobuf::internal::WireFormatLite::TYPE_UINT32,
    ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
    0 > {
public:
  typedef ::google::protobuf::internal::MapEntry<TyrepressuresInstanceMap_ValuesEntry_DoNotUse, 
    ::google::protobuf::uint32, ::Nmea2k::TyrePressure,
    ::google::protobuf::internal::WireFormatLite::TYPE_UINT32,
    ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
    0 > SuperType;
  TyrepressuresInstanceMap_ValuesEntry_DoNotUse();
  TyrepressuresInstanceMap_ValuesEntry_DoNotUse(::google::protobuf::Arena* arena);
  void MergeFrom(const TyrepressuresInstanceMap_ValuesEntry_DoNotUse& other);
  static const TyrepressuresInstanceMap_ValuesEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const TyrepressuresInstanceMap_ValuesEntry_DoNotUse*>(&_TyrepressuresInstanceMap_ValuesEntry_DoNotUse_default_instance_); }
  void MergeFrom(const ::google::protobuf::Message& other) final;
  ::google::protobuf::Metadata GetMetadata() const;
};

// -------------------------------------------------------------------

class TyrepressuresInstanceMap : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Nmea2k.TyrepressuresInstanceMap) */ {
 public:
  TyrepressuresInstanceMap();
  virtual ~TyrepressuresInstanceMap();

  TyrepressuresInstanceMap(const TyrepressuresInstanceMap& from);

  inline TyrepressuresInstanceMap& operator=(const TyrepressuresInstanceMap& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TyrepressuresInstanceMap(TyrepressuresInstanceMap&& from) noexcept
    : TyrepressuresInstanceMap() {
    *this = ::std::move(from);
  }

  inline TyrepressuresInstanceMap& operator=(TyrepressuresInstanceMap&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const TyrepressuresInstanceMap& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TyrepressuresInstanceMap* internal_default_instance() {
    return reinterpret_cast<const TyrepressuresInstanceMap*>(
               &_TyrepressuresInstanceMap_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    148;

  void Swap(TyrepressuresInstanceMap* other);
  friend void swap(TyrepressuresInstanceMap& a, TyrepressuresInstanceMap& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TyrepressuresInstanceMap* New() const final {
    return CreateMaybeMessage<TyrepressuresInstanceMap>(NULL);
  }

  TyrepressuresInstanceMap* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<TyrepressuresInstanceMap>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const TyrepressuresInstanceMap& from);
  void MergeFrom(const TyrepressuresInstanceMap& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TyrepressuresInstanceMap* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  // map<uint32, .Nmea2k.TyrePressure> Values = 1;
  int values_size() const;
  void clear_values();
  static const int kValuesFieldNumber = 1;
  const ::google::protobuf::Map< ::google::protobuf::uint32, ::Nmea2k::TyrePressure >&
      values() const;
  ::google::protobuf::Map< ::google::protobuf::uint32, ::Nmea2k::TyrePressure >*
      mutable_values();

  // @@protoc_insertion_point(class_scope:Nmea2k.TyrepressuresInstanceMap)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::MapField<
      TyrepressuresInstanceMap_ValuesEntry_DoNotUse,
      ::google::protobuf::uint32, ::Nmea2k::TyrePressure,
      ::google::protobuf::internal::WireFormatLite::TYPE_UINT32,
      ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
      0 > values_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_Nmea2k_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class AudioStereosInstanceMap_ValuesEntry_DoNotUse : public ::google::protobuf::internal::MapEntry<AudioStereosInstanceMap_ValuesEntry_DoNotUse, 
    ::google::protobuf::uint32, ::Nmea2k::AudioStereo,
    ::google::protobuf::internal::WireFormatLite::TYPE_UINT32,
    ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
    0 > {
public:
  typedef ::google::protobuf::internal::MapEntry<AudioStereosInstanceMap_ValuesEntry_DoNotUse, 
    ::google::protobuf::uint32, ::Nmea2k::AudioStereo,
    ::google::protobuf::internal::WireFormatLite::TYPE_UINT32,
    ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
    0 > SuperType;
  AudioStereosInstanceMap_ValuesEntry_DoNotUse();
  AudioStereosInstanceMap_ValuesEntry_DoNotUse(::google::protobuf::Arena* arena);
  void MergeFrom(const AudioStereosInstanceMap_ValuesEntry_DoNotUse& other);
  static const AudioStereosInstanceMap_ValuesEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const AudioStereosInstanceMap_ValuesEntry_DoNotUse*>(&_AudioStereosInstanceMap_ValuesEntry_DoNotUse_default_instance_); }
  void MergeFrom(const ::google::protobuf::Message& other) final;
  ::google::protobuf::Metadata GetMetadata() const;
};

// -------------------------------------------------------------------

class AudioStereosInstanceMap : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Nmea2k.AudioStereosInstanceMap) */ {
 public:
  AudioStereosInstanceMap();
  virtual ~AudioStereosInstanceMap();

  AudioStereosInstanceMap(const AudioStereosInstanceMap& from);

  inline AudioStereosInstanceMap& operator=(const AudioStereosInstanceMap& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AudioStereosInstanceMap(AudioStereosInstanceMap&& from) noexcept
    : AudioStereosInstanceMap() {
    *this = ::std::move(from);
  }

  inline AudioStereosInstanceMap& operator=(AudioStereosInstanceMap&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const AudioStereosInstanceMap& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AudioStereosInstanceMap* internal_default_instance() {
    return reinterpret_cast<const AudioStereosInstanceMap*>(
               &_AudioStereosInstanceMap_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    150;

  void Swap(AudioStereosInstanceMap* other);
  friend void swap(AudioStereosInstanceMap& a, AudioStereosInstanceMap& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AudioStereosInstanceMap* New() const final {
    return CreateMaybeMessage<AudioStereosInstanceMap>(NULL);
  }

  AudioStereosInstanceMap* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<AudioStereosInstanceMap>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const AudioStereosInstanceMap& from);
  void MergeFrom(const AudioStereosInstanceMap& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AudioStereosInstanceMap* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  // map<uint32, .Nmea2k.AudioStereo> Values = 1;
  int values_size() const;
  void clear_values();
  static const int kValuesFieldNumber = 1;
  const ::google::protobuf::Map< ::google::protobuf::uint32, ::Nmea2k::AudioStereo >&
      values() const;
  ::google::protobuf::Map< ::google::protobuf::uint32, ::Nmea2k::AudioStereo >*
      mutable_values();

  // @@protoc_insertion_point(class_scope:Nmea2k.AudioStereosInstanceMap)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::MapField<
      AudioStereosInstanceMap_ValuesEntry_DoNotUse,
      ::google::protobuf::uint32, ::Nmea2k::AudioStereo,
      ::google::protobuf::internal::WireFormatLite::TYPE_UINT32,
      ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
      0 > values_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_Nmea2k_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ACMainContactorsInstanceMap_ValuesEntry_DoNotUse : public ::google::protobuf::internal::MapEntry<ACMainContactorsInstanceMap_ValuesEntry_DoNotUse, 
    ::google::protobuf::uint32, ::Nmea2k::ACMainContactor,
    ::google::protobuf::internal::WireFormatLite::TYPE_UINT32,
    ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
    0 > {
public:
  typedef ::google::protobuf::internal::MapEntry<ACMainContactorsInstanceMap_ValuesEntry_DoNotUse, 
    ::google::protobuf::uint32, ::Nmea2k::ACMainContactor,
    ::google::protobuf::internal::WireFormatLite::TYPE_UINT32,
    ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
    0 > SuperType;
  ACMainContactorsInstanceMap_ValuesEntry_DoNotUse();
  ACMainContactorsInstanceMap_ValuesEntry_DoNotUse(::google::protobuf::Arena* arena);
  void MergeFrom(const ACMainContactorsInstanceMap_ValuesEntry_DoNotUse& other);
  static const ACMainContactorsInstanceMap_ValuesEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const ACMainContactorsInstanceMap_ValuesEntry_DoNotUse*>(&_ACMainContactorsInstanceMap_ValuesEntry_DoNotUse_default_instance_); }
  void MergeFrom(const ::google::protobuf::Message& other) final;
  ::google::protobuf::Metadata GetMetadata() const;
};

// -------------------------------------------------------------------

class ACMainContactorsInstanceMap : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Nmea2k.ACMainContactorsInstanceMap) */ {
 public:
  ACMainContactorsInstanceMap();
  virtual ~ACMainContactorsInstanceMap();

  ACMainContactorsInstanceMap(const ACMainContactorsInstanceMap& from);

  inline ACMainContactorsInstanceMap& operator=(const ACMainContactorsInstanceMap& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ACMainContactorsInstanceMap(ACMainContactorsInstanceMap&& from) noexcept
    : ACMainContactorsInstanceMap() {
    *this = ::std::move(from);
  }

  inline ACMainContactorsInstanceMap& operator=(ACMainContactorsInstanceMap&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ACMainContactorsInstanceMap& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ACMainContactorsInstanceMap* internal_default_instance() {
    return reinterpret_cast<const ACMainContactorsInstanceMap*>(
               &_ACMainContactorsInstanceMap_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    152;

  void Swap(ACMainContactorsInstanceMap* other);
  friend void swap(ACMainContactorsInstanceMap& a, ACMainContactorsInstanceMap& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ACMainContactorsInstanceMap* New() const final {
    return CreateMaybeMessage<ACMainContactorsInstanceMap>(NULL);
  }

  ACMainContactorsInstanceMap* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ACMainContactorsInstanceMap>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ACMainContactorsInstanceMap& from);
  void MergeFrom(const ACMainContactorsInstanceMap& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ACMainContactorsInstanceMap* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  // map<uint32, .Nmea2k.ACMainContactor> Values = 1;
  int values_size() const;
  void clear_values();
  static const int kValuesFieldNumber = 1;
  const ::google::protobuf::Map< ::google::protobuf::uint32, ::Nmea2k::ACMainContactor >&
      values() const;
  ::google::protobuf::Map< ::google::protobuf::uint32, ::Nmea2k::ACMainContactor >*
      mutable_values();

  // @@protoc_insertion_point(class_scope:Nmea2k.ACMainContactorsInstanceMap)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::MapField<
      ACMainContactorsInstanceMap_ValuesEntry_DoNotUse,
      ::google::protobuf::uint32, ::Nmea2k::ACMainContactor,
      ::google::protobuf::internal::WireFormatLite::TYPE_UINT32,
      ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
      0 > values_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_Nmea2k_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GNSSInstanceMap_ValuesEntry_DoNotUse : public ::google::protobuf::internal::MapEntry<GNSSInstanceMap_ValuesEntry_DoNotUse, 
    ::google::protobuf::uint32, ::Nmea2k::GNSS,
    ::google::protobuf::internal::WireFormatLite::TYPE_UINT32,
    ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
    0 > {
public:
  typedef ::google::protobuf::internal::MapEntry<GNSSInstanceMap_ValuesEntry_DoNotUse, 
    ::google::protobuf::uint32, ::Nmea2k::GNSS,
    ::google::protobuf::internal::WireFormatLite::TYPE_UINT32,
    ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
    0 > SuperType;
  GNSSInstanceMap_ValuesEntry_DoNotUse();
  GNSSInstanceMap_ValuesEntry_DoNotUse(::google::protobuf::Arena* arena);
  void MergeFrom(const GNSSInstanceMap_ValuesEntry_DoNotUse& other);
  static const GNSSInstanceMap_ValuesEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const GNSSInstanceMap_ValuesEntry_DoNotUse*>(&_GNSSInstanceMap_ValuesEntry_DoNotUse_default_instance_); }
  void MergeFrom(const ::google::protobuf::Message& other) final;
  ::google::protobuf::Metadata GetMetadata() const;
};

// -------------------------------------------------------------------

class GNSSInstanceMap : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Nmea2k.GNSSInstanceMap) */ {
 public:
  GNSSInstanceMap();
  virtual ~GNSSInstanceMap();

  GNSSInstanceMap(const GNSSInstanceMap& from);

  inline GNSSInstanceMap& operator=(const GNSSInstanceMap& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GNSSInstanceMap(GNSSInstanceMap&& from) noexcept
    : GNSSInstanceMap() {
    *this = ::std::move(from);
  }

  inline GNSSInstanceMap& operator=(GNSSInstanceMap&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GNSSInstanceMap& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GNSSInstanceMap* internal_default_instance() {
    return reinterpret_cast<const GNSSInstanceMap*>(
               &_GNSSInstanceMap_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    154;

  void Swap(GNSSInstanceMap* other);
  friend void swap(GNSSInstanceMap& a, GNSSInstanceMap& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GNSSInstanceMap* New() const final {
    return CreateMaybeMessage<GNSSInstanceMap>(NULL);
  }

  GNSSInstanceMap* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GNSSInstanceMap>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const GNSSInstanceMap& from);
  void MergeFrom(const GNSSInstanceMap& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GNSSInstanceMap* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  // map<uint32, .Nmea2k.GNSS> Values = 1;
  int values_size() const;
  void clear_values();
  static const int kValuesFieldNumber = 1;
  const ::google::protobuf::Map< ::google::protobuf::uint32, ::Nmea2k::GNSS >&
      values() const;
  ::google::protobuf::Map< ::google::protobuf::uint32, ::Nmea2k::GNSS >*
      mutable_values();

  // @@protoc_insertion_point(class_scope:Nmea2k.GNSSInstanceMap)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::MapField<
      GNSSInstanceMap_ValuesEntry_DoNotUse,
      ::google::protobuf::uint32, ::Nmea2k::GNSS,
      ::google::protobuf::internal::WireFormatLite::TYPE_UINT32,
      ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
      0 > values_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_Nmea2k_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class MonitoringKeyValueMap_KeyValueMapEntry_DoNotUse : public ::google::protobuf::internal::MapEntry<MonitoringKeyValueMap_KeyValueMapEntry_DoNotUse, 
    ::google::protobuf::uint32, ::Nmea2k::MonitoringKeyValue,
    ::google::protobuf::internal::WireFormatLite::TYPE_UINT32,
    ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
    0 > {
public:
  typedef ::google::protobuf::internal::MapEntry<MonitoringKeyValueMap_KeyValueMapEntry_DoNotUse, 
    ::google::protobuf::uint32, ::Nmea2k::MonitoringKeyValue,
    ::google::protobuf::internal::WireFormatLite::TYPE_UINT32,
    ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
    0 > SuperType;
  MonitoringKeyValueMap_KeyValueMapEntry_DoNotUse();
  MonitoringKeyValueMap_KeyValueMapEntry_DoNotUse(::google::protobuf::Arena* arena);
  void MergeFrom(const MonitoringKeyValueMap_KeyValueMapEntry_DoNotUse& other);
  static const MonitoringKeyValueMap_KeyValueMapEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const MonitoringKeyValueMap_KeyValueMapEntry_DoNotUse*>(&_MonitoringKeyValueMap_KeyValueMapEntry_DoNotUse_default_instance_); }
  void MergeFrom(const ::google::protobuf::Message& other) final;
  ::google::protobuf::Metadata GetMetadata() const;
};

// -------------------------------------------------------------------

class MonitoringKeyValueMap : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Nmea2k.MonitoringKeyValueMap) */ {
 public:
  MonitoringKeyValueMap();
  virtual ~MonitoringKeyValueMap();

  MonitoringKeyValueMap(const MonitoringKeyValueMap& from);

  inline MonitoringKeyValueMap& operator=(const MonitoringKeyValueMap& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  MonitoringKeyValueMap(MonitoringKeyValueMap&& from) noexcept
    : MonitoringKeyValueMap() {
    *this = ::std::move(from);
  }

  inline MonitoringKeyValueMap& operator=(MonitoringKeyValueMap&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const MonitoringKeyValueMap& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MonitoringKeyValueMap* internal_default_instance() {
    return reinterpret_cast<const MonitoringKeyValueMap*>(
               &_MonitoringKeyValueMap_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    156;

  void Swap(MonitoringKeyValueMap* other);
  friend void swap(MonitoringKeyValueMap& a, MonitoringKeyValueMap& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline MonitoringKeyValueMap* New() const final {
    return CreateMaybeMessage<MonitoringKeyValueMap>(NULL);
  }

  MonitoringKeyValueMap* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<MonitoringKeyValueMap>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const MonitoringKeyValueMap& from);
  void MergeFrom(const MonitoringKeyValueMap& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MonitoringKeyValueMap* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  // map<uint32, .Nmea2k.MonitoringKeyValue> KeyValueMap = 1;
  int keyvaluemap_size() const;
  void clear_keyvaluemap();
  static const int kKeyValueMapFieldNumber = 1;
  const ::google::protobuf::Map< ::google::protobuf::uint32, ::Nmea2k::MonitoringKeyValue >&
      keyvaluemap() const;
  ::google::protobuf::Map< ::google::protobuf::uint32, ::Nmea2k::MonitoringKeyValue >*
      mutable_keyvaluemap();

  // @@protoc_insertion_point(class_scope:Nmea2k.MonitoringKeyValueMap)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::MapField<
      MonitoringKeyValueMap_KeyValueMapEntry_DoNotUse,
      ::google::protobuf::uint32, ::Nmea2k::MonitoringKeyValue,
      ::google::protobuf::internal::WireFormatLite::TYPE_UINT32,
      ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
      0 > keyvaluemap_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_Nmea2k_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class BinaryLogicStateInstanceMap_ValuesEntry_DoNotUse : public ::google::protobuf::internal::MapEntry<BinaryLogicStateInstanceMap_ValuesEntry_DoNotUse, 
    ::google::protobuf::uint32, ::Nmea2k::BinaryLogicState,
    ::google::protobuf::internal::WireFormatLite::TYPE_UINT32,
    ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
    0 > {
public:
  typedef ::google::protobuf::internal::MapEntry<BinaryLogicStateInstanceMap_ValuesEntry_DoNotUse, 
    ::google::protobuf::uint32, ::Nmea2k::BinaryLogicState,
    ::google::protobuf::internal::WireFormatLite::TYPE_UINT32,
    ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
    0 > SuperType;
  BinaryLogicStateInstanceMap_ValuesEntry_DoNotUse();
  BinaryLogicStateInstanceMap_ValuesEntry_DoNotUse(::google::protobuf::Arena* arena);
  void MergeFrom(const BinaryLogicStateInstanceMap_ValuesEntry_DoNotUse& other);
  static const BinaryLogicStateInstanceMap_ValuesEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const BinaryLogicStateInstanceMap_ValuesEntry_DoNotUse*>(&_BinaryLogicStateInstanceMap_ValuesEntry_DoNotUse_default_instance_); }
  void MergeFrom(const ::google::protobuf::Message& other) final;
  ::google::protobuf::Metadata GetMetadata() const;
};

// -------------------------------------------------------------------

class BinaryLogicStateInstanceMap : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Nmea2k.BinaryLogicStateInstanceMap) */ {
 public:
  BinaryLogicStateInstanceMap();
  virtual ~BinaryLogicStateInstanceMap();

  BinaryLogicStateInstanceMap(const BinaryLogicStateInstanceMap& from);

  inline BinaryLogicStateInstanceMap& operator=(const BinaryLogicStateInstanceMap& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  BinaryLogicStateInstanceMap(BinaryLogicStateInstanceMap&& from) noexcept
    : BinaryLogicStateInstanceMap() {
    *this = ::std::move(from);
  }

  inline BinaryLogicStateInstanceMap& operator=(BinaryLogicStateInstanceMap&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const BinaryLogicStateInstanceMap& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BinaryLogicStateInstanceMap* internal_default_instance() {
    return reinterpret_cast<const BinaryLogicStateInstanceMap*>(
               &_BinaryLogicStateInstanceMap_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    158;

  void Swap(BinaryLogicStateInstanceMap* other);
  friend void swap(BinaryLogicStateInstanceMap& a, BinaryLogicStateInstanceMap& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline BinaryLogicStateInstanceMap* New() const final {
    return CreateMaybeMessage<BinaryLogicStateInstanceMap>(NULL);
  }

  BinaryLogicStateInstanceMap* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<BinaryLogicStateInstanceMap>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const BinaryLogicStateInstanceMap& from);
  void MergeFrom(const BinaryLogicStateInstanceMap& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BinaryLogicStateInstanceMap* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  // map<uint32, .Nmea2k.BinaryLogicState> Values = 1;
  int values_size() const;
  void clear_values();
  static const int kValuesFieldNumber = 1;
  const ::google::protobuf::Map< ::google::protobuf::uint32, ::Nmea2k::BinaryLogicState >&
      values() const;
  ::google::protobuf::Map< ::google::protobuf::uint32, ::Nmea2k::BinaryLogicState >*
      mutable_values();

  // @@protoc_insertion_point(class_scope:Nmea2k.BinaryLogicStateInstanceMap)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::MapField<
      BinaryLogicStateInstanceMap_ValuesEntry_DoNotUse,
      ::google::protobuf::uint32, ::Nmea2k::BinaryLogicState,
      ::google::protobuf::internal::WireFormatLite::TYPE_UINT32,
      ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
      0 > values_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_Nmea2k_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class NetworkStatus : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Nmea2k.NetworkStatus) */ {
 public:
  NetworkStatus();
  virtual ~NetworkStatus();

  NetworkStatus(const NetworkStatus& from);

  inline NetworkStatus& operator=(const NetworkStatus& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  NetworkStatus(NetworkStatus&& from) noexcept
    : NetworkStatus() {
    *this = ::std::move(from);
  }

  inline NetworkStatus& operator=(NetworkStatus&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const NetworkStatus& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const NetworkStatus* internal_default_instance() {
    return reinterpret_cast<const NetworkStatus*>(
               &_NetworkStatus_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    159;

  void Swap(NetworkStatus* other);
  friend void swap(NetworkStatus& a, NetworkStatus& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline NetworkStatus* New() const final {
    return CreateMaybeMessage<NetworkStatus>(NULL);
  }

  NetworkStatus* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<NetworkStatus>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const NetworkStatus& from);
  void MergeFrom(const NetworkStatus& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NetworkStatus* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string EthernetStatus = 1;
  void clear_ethernetstatus();
  static const int kEthernetStatusFieldNumber = 1;
  const ::std::string& ethernetstatus() const;
  void set_ethernetstatus(const ::std::string& value);
  #if LANG_CXX11
  void set_ethernetstatus(::std::string&& value);
  #endif
  void set_ethernetstatus(const char* value);
  void set_ethernetstatus(const char* value, size_t size);
  ::std::string* mutable_ethernetstatus();
  ::std::string* release_ethernetstatus();
  void set_allocated_ethernetstatus(::std::string* ethernetstatus);

  // string EthernetIp = 3;
  void clear_ethernetip();
  static const int kEthernetIpFieldNumber = 3;
  const ::std::string& ethernetip() const;
  void set_ethernetip(const ::std::string& value);
  #if LANG_CXX11
  void set_ethernetip(::std::string&& value);
  #endif
  void set_ethernetip(const char* value);
  void set_ethernetip(const char* value, size_t size);
  ::std::string* mutable_ethernetip();
  ::std::string* release_ethernetip();
  void set_allocated_ethernetip(::std::string* ethernetip);

  // string EthernetId = 4;
  void clear_ethernetid();
  static const int kEthernetIdFieldNumber = 4;
  const ::std::string& ethernetid() const;
  void set_ethernetid(const ::std::string& value);
  #if LANG_CXX11
  void set_ethernetid(::std::string&& value);
  #endif
  void set_ethernetid(const char* value);
  void set_ethernetid(const char* value, size_t size);
  ::std::string* mutable_ethernetid();
  ::std::string* release_ethernetid();
  void set_allocated_ethernetid(::std::string* ethernetid);

  // string WifiStatus = 5;
  void clear_wifistatus();
  static const int kWifiStatusFieldNumber = 5;
  const ::std::string& wifistatus() const;
  void set_wifistatus(const ::std::string& value);
  #if LANG_CXX11
  void set_wifistatus(::std::string&& value);
  #endif
  void set_wifistatus(const char* value);
  void set_wifistatus(const char* value, size_t size);
  ::std::string* mutable_wifistatus();
  ::std::string* release_wifistatus();
  void set_allocated_wifistatus(::std::string* wifistatus);

  // string WifiIp = 7;
  void clear_wifiip();
  static const int kWifiIpFieldNumber = 7;
  const ::std::string& wifiip() const;
  void set_wifiip(const ::std::string& value);
  #if LANG_CXX11
  void set_wifiip(::std::string&& value);
  #endif
  void set_wifiip(const char* value);
  void set_wifiip(const char* value, size_t size);
  ::std::string* mutable_wifiip();
  ::std::string* release_wifiip();
  void set_allocated_wifiip(::std::string* wifiip);

  // string WifiSsid = 8;
  void clear_wifissid();
  static const int kWifiSsidFieldNumber = 8;
  const ::std::string& wifissid() const;
  void set_wifissid(const ::std::string& value);
  #if LANG_CXX11
  void set_wifissid(::std::string&& value);
  #endif
  void set_wifissid(const char* value);
  void set_wifissid(const char* value, size_t size);
  ::std::string* mutable_wifissid();
  ::std::string* release_wifissid();
  void set_allocated_wifissid(::std::string* wifissid);

  // string WifiSecurity = 9;
  void clear_wifisecurity();
  static const int kWifiSecurityFieldNumber = 9;
  const ::std::string& wifisecurity() const;
  void set_wifisecurity(const ::std::string& value);
  #if LANG_CXX11
  void set_wifisecurity(::std::string&& value);
  #endif
  void set_wifisecurity(const char* value);
  void set_wifisecurity(const char* value, size_t size);
  ::std::string* mutable_wifisecurity();
  ::std::string* release_wifisecurity();
  void set_allocated_wifisecurity(::std::string* wifisecurity);

  // string WifiType = 10;
  void clear_wifitype();
  static const int kWifiTypeFieldNumber = 10;
  const ::std::string& wifitype() const;
  void set_wifitype(const ::std::string& value);
  #if LANG_CXX11
  void set_wifitype(::std::string&& value);
  #endif
  void set_wifitype(const char* value);
  void set_wifitype(const char* value, size_t size);
  ::std::string* mutable_wifitype();
  ::std::string* release_wifitype();
  void set_allocated_wifitype(::std::string* wifitype);

  // string HotspotStatus = 13;
  void clear_hotspotstatus();
  static const int kHotspotStatusFieldNumber = 13;
  const ::std::string& hotspotstatus() const;
  void set_hotspotstatus(const ::std::string& value);
  #if LANG_CXX11
  void set_hotspotstatus(::std::string&& value);
  #endif
  void set_hotspotstatus(const char* value);
  void set_hotspotstatus(const char* value, size_t size);
  ::std::string* mutable_hotspotstatus();
  ::std::string* release_hotspotstatus();
  void set_allocated_hotspotstatus(::std::string* hotspotstatus);

  // string HotspotIp = 14;
  void clear_hotspotip();
  static const int kHotspotIpFieldNumber = 14;
  const ::std::string& hotspotip() const;
  void set_hotspotip(const ::std::string& value);
  #if LANG_CXX11
  void set_hotspotip(::std::string&& value);
  #endif
  void set_hotspotip(const char* value);
  void set_hotspotip(const char* value, size_t size);
  ::std::string* mutable_hotspotip();
  ::std::string* release_hotspotip();
  void set_allocated_hotspotip(::std::string* hotspotip);

  // string HotspotSsid = 15;
  void clear_hotspotssid();
  static const int kHotspotSsidFieldNumber = 15;
  const ::std::string& hotspotssid() const;
  void set_hotspotssid(const ::std::string& value);
  #if LANG_CXX11
  void set_hotspotssid(::std::string&& value);
  #endif
  void set_hotspotssid(const char* value);
  void set_hotspotssid(const char* value, size_t size);
  ::std::string* mutable_hotspotssid();
  ::std::string* release_hotspotssid();
  void set_allocated_hotspotssid(::std::string* hotspotssid);

  // string HotspotPassword = 16;
  void clear_hotspotpassword();
  static const int kHotspotPasswordFieldNumber = 16;
  const ::std::string& hotspotpassword() const;
  void set_hotspotpassword(const ::std::string& value);
  #if LANG_CXX11
  void set_hotspotpassword(::std::string&& value);
  #endif
  void set_hotspotpassword(const char* value);
  void set_hotspotpassword(const char* value, size_t size);
  ::std::string* mutable_hotspotpassword();
  ::std::string* release_hotspotpassword();
  void set_allocated_hotspotpassword(::std::string* hotspotpassword);

  // string HotspotSecurity = 17;
  void clear_hotspotsecurity();
  static const int kHotspotSecurityFieldNumber = 17;
  const ::std::string& hotspotsecurity() const;
  void set_hotspotsecurity(const ::std::string& value);
  #if LANG_CXX11
  void set_hotspotsecurity(::std::string&& value);
  #endif
  void set_hotspotsecurity(const char* value);
  void set_hotspotsecurity(const char* value, size_t size);
  ::std::string* mutable_hotspotsecurity();
  ::std::string* release_hotspotsecurity();
  void set_allocated_hotspotsecurity(::std::string* hotspotsecurity);

  // string HotspotType = 18;
  void clear_hotspottype();
  static const int kHotspotTypeFieldNumber = 18;
  const ::std::string& hotspottype() const;
  void set_hotspottype(const ::std::string& value);
  #if LANG_CXX11
  void set_hotspottype(::std::string&& value);
  #endif
  void set_hotspottype(const char* value);
  void set_hotspottype(const char* value, size_t size);
  ::std::string* mutable_hotspottype();
  ::std::string* release_hotspottype();
  void set_allocated_hotspottype(::std::string* hotspottype);

  // string CellularStatus = 20;
  void clear_cellularstatus();
  static const int kCellularStatusFieldNumber = 20;
  const ::std::string& cellularstatus() const;
  void set_cellularstatus(const ::std::string& value);
  #if LANG_CXX11
  void set_cellularstatus(::std::string&& value);
  #endif
  void set_cellularstatus(const char* value);
  void set_cellularstatus(const char* value, size_t size);
  ::std::string* mutable_cellularstatus();
  ::std::string* release_cellularstatus();
  void set_allocated_cellularstatus(::std::string* cellularstatus);

  // string CellularIp = 22;
  void clear_cellularip();
  static const int kCellularIpFieldNumber = 22;
  const ::std::string& cellularip() const;
  void set_cellularip(const ::std::string& value);
  #if LANG_CXX11
  void set_cellularip(::std::string&& value);
  #endif
  void set_cellularip(const char* value);
  void set_cellularip(const char* value, size_t size);
  ::std::string* mutable_cellularip();
  ::std::string* release_cellularip();
  void set_allocated_cellularip(::std::string* cellularip);

  // string CellularOperator = 23;
  void clear_cellularoperator();
  static const int kCellularOperatorFieldNumber = 23;
  const ::std::string& cellularoperator() const;
  void set_cellularoperator(const ::std::string& value);
  #if LANG_CXX11
  void set_cellularoperator(::std::string&& value);
  #endif
  void set_cellularoperator(const char* value);
  void set_cellularoperator(const char* value, size_t size);
  ::std::string* mutable_cellularoperator();
  ::std::string* release_cellularoperator();
  void set_allocated_cellularoperator(::std::string* cellularoperator);

  // string CellularType = 24;
  void clear_cellulartype();
  static const int kCellularTypeFieldNumber = 24;
  const ::std::string& cellulartype() const;
  void set_cellulartype(const ::std::string& value);
  #if LANG_CXX11
  void set_cellulartype(::std::string&& value);
  #endif
  void set_cellulartype(const char* value);
  void set_cellulartype(const char* value, size_t size);
  ::std::string* mutable_cellulartype();
  ::std::string* release_cellulartype();
  void set_allocated_cellulartype(::std::string* cellulartype);

  // string CellularSimIccid = 26;
  void clear_cellularsimiccid();
  static const int kCellularSimIccidFieldNumber = 26;
  const ::std::string& cellularsimiccid() const;
  void set_cellularsimiccid(const ::std::string& value);
  #if LANG_CXX11
  void set_cellularsimiccid(::std::string&& value);
  #endif
  void set_cellularsimiccid(const char* value);
  void set_cellularsimiccid(const char* value, size_t size);
  ::std::string* mutable_cellularsimiccid();
  ::std::string* release_cellularsimiccid();
  void set_allocated_cellularsimiccid(::std::string* cellularsimiccid);

  // string CellularSimEid = 27;
  void clear_cellularsimeid();
  static const int kCellularSimEidFieldNumber = 27;
  const ::std::string& cellularsimeid() const;
  void set_cellularsimeid(const ::std::string& value);
  #if LANG_CXX11
  void set_cellularsimeid(::std::string&& value);
  #endif
  void set_cellularsimeid(const char* value);
  void set_cellularsimeid(const char* value, size_t size);
  ::std::string* mutable_cellularsimeid();
  ::std::string* release_cellularsimeid();
  void set_allocated_cellularsimeid(::std::string* cellularsimeid);

  // string CellularSimImsi = 28;
  void clear_cellularsimimsi();
  static const int kCellularSimImsiFieldNumber = 28;
  const ::std::string& cellularsimimsi() const;
  void set_cellularsimimsi(const ::std::string& value);
  #if LANG_CXX11
  void set_cellularsimimsi(::std::string&& value);
  #endif
  void set_cellularsimimsi(const char* value);
  void set_cellularsimimsi(const char* value, size_t size);
  ::std::string* mutable_cellularsimimsi();
  ::std::string* release_cellularsimimsi();
  void set_allocated_cellularsimimsi(::std::string* cellularsimimsi);

  // bool EthernetInternetConnectivity = 2;
  void clear_ethernetinternetconnectivity();
  static const int kEthernetInternetConnectivityFieldNumber = 2;
  bool ethernetinternetconnectivity() const;
  void set_ethernetinternetconnectivity(bool value);

  // bool WifiInternetConnectivity = 6;
  void clear_wifiinternetconnectivity();
  static const int kWifiInternetConnectivityFieldNumber = 6;
  bool wifiinternetconnectivity() const;
  void set_wifiinternetconnectivity(bool value);

  // bool CelllularInternetConnectivity = 21;
  void clear_celllularinternetconnectivity();
  static const int kCelllularInternetConnectivityFieldNumber = 21;
  bool celllularinternetconnectivity() const;
  void set_celllularinternetconnectivity(bool value);

  // int32 WifiChannel = 11;
  void clear_wifichannel();
  static const int kWifiChannelFieldNumber = 11;
  ::google::protobuf::int32 wifichannel() const;
  void set_wifichannel(::google::protobuf::int32 value);

  // int32 WifiSignalStrengthDbm = 12;
  void clear_wifisignalstrengthdbm();
  static const int kWifiSignalStrengthDbmFieldNumber = 12;
  ::google::protobuf::int32 wifisignalstrengthdbm() const;
  void set_wifisignalstrengthdbm(::google::protobuf::int32 value);

  // int32 HotspotChannel = 19;
  void clear_hotspotchannel();
  static const int kHotspotChannelFieldNumber = 19;
  ::google::protobuf::int32 hotspotchannel() const;
  void set_hotspotchannel(::google::protobuf::int32 value);

  // int32 CellularSignalStrengthDbm = 25;
  void clear_cellularsignalstrengthdbm();
  static const int kCellularSignalStrengthDbmFieldNumber = 25;
  ::google::protobuf::int32 cellularsignalstrengthdbm() const;
  void set_cellularsignalstrengthdbm(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:Nmea2k.NetworkStatus)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr ethernetstatus_;
  ::google::protobuf::internal::ArenaStringPtr ethernetip_;
  ::google::protobuf::internal::ArenaStringPtr ethernetid_;
  ::google::protobuf::internal::ArenaStringPtr wifistatus_;
  ::google::protobuf::internal::ArenaStringPtr wifiip_;
  ::google::protobuf::internal::ArenaStringPtr wifissid_;
  ::google::protobuf::internal::ArenaStringPtr wifisecurity_;
  ::google::protobuf::internal::ArenaStringPtr wifitype_;
  ::google::protobuf::internal::ArenaStringPtr hotspotstatus_;
  ::google::protobuf::internal::ArenaStringPtr hotspotip_;
  ::google::protobuf::internal::ArenaStringPtr hotspotssid_;
  ::google::protobuf::internal::ArenaStringPtr hotspotpassword_;
  ::google::protobuf::internal::ArenaStringPtr hotspotsecurity_;
  ::google::protobuf::internal::ArenaStringPtr hotspottype_;
  ::google::protobuf::internal::ArenaStringPtr cellularstatus_;
  ::google::protobuf::internal::ArenaStringPtr cellularip_;
  ::google::protobuf::internal::ArenaStringPtr cellularoperator_;
  ::google::protobuf::internal::ArenaStringPtr cellulartype_;
  ::google::protobuf::internal::ArenaStringPtr cellularsimiccid_;
  ::google::protobuf::internal::ArenaStringPtr cellularsimeid_;
  ::google::protobuf::internal::ArenaStringPtr cellularsimimsi_;
  bool ethernetinternetconnectivity_;
  bool wifiinternetconnectivity_;
  bool celllularinternetconnectivity_;
  ::google::protobuf::int32 wifichannel_;
  ::google::protobuf::int32 wifisignalstrengthdbm_;
  ::google::protobuf::int32 hotspotchannel_;
  ::google::protobuf::int32 cellularsignalstrengthdbm_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_Nmea2k_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SnapshotInstanceIdMap_CircuitsEntry_DoNotUse : public ::google::protobuf::internal::MapEntry<SnapshotInstanceIdMap_CircuitsEntry_DoNotUse, 
    ::google::protobuf::uint32, ::Nmea2k::Circuit,
    ::google::protobuf::internal::WireFormatLite::TYPE_UINT32,
    ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
    0 > {
public:
  typedef ::google::protobuf::internal::MapEntry<SnapshotInstanceIdMap_CircuitsEntry_DoNotUse, 
    ::google::protobuf::uint32, ::Nmea2k::Circuit,
    ::google::protobuf::internal::WireFormatLite::TYPE_UINT32,
    ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
    0 > SuperType;
  SnapshotInstanceIdMap_CircuitsEntry_DoNotUse();
  SnapshotInstanceIdMap_CircuitsEntry_DoNotUse(::google::protobuf::Arena* arena);
  void MergeFrom(const SnapshotInstanceIdMap_CircuitsEntry_DoNotUse& other);
  static const SnapshotInstanceIdMap_CircuitsEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const SnapshotInstanceIdMap_CircuitsEntry_DoNotUse*>(&_SnapshotInstanceIdMap_CircuitsEntry_DoNotUse_default_instance_); }
  void MergeFrom(const ::google::protobuf::Message& other) final;
  ::google::protobuf::Metadata GetMetadata() const;
};

// -------------------------------------------------------------------

class SnapshotInstanceIdMap_ModesEntry_DoNotUse : public ::google::protobuf::internal::MapEntry<SnapshotInstanceIdMap_ModesEntry_DoNotUse, 
    ::google::protobuf::uint32, ::Nmea2k::Circuit,
    ::google::protobuf::internal::WireFormatLite::TYPE_UINT32,
    ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
    0 > {
public:
  typedef ::google::protobuf::internal::MapEntry<SnapshotInstanceIdMap_ModesEntry_DoNotUse, 
    ::google::protobuf::uint32, ::Nmea2k::Circuit,
    ::google::protobuf::internal::WireFormatLite::TYPE_UINT32,
    ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
    0 > SuperType;
  SnapshotInstanceIdMap_ModesEntry_DoNotUse();
  SnapshotInstanceIdMap_ModesEntry_DoNotUse(::google::protobuf::Arena* arena);
  void MergeFrom(const SnapshotInstanceIdMap_ModesEntry_DoNotUse& other);
  static const SnapshotInstanceIdMap_ModesEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const SnapshotInstanceIdMap_ModesEntry_DoNotUse*>(&_SnapshotInstanceIdMap_ModesEntry_DoNotUse_default_instance_); }
  void MergeFrom(const ::google::protobuf::Message& other) final;
  ::google::protobuf::Metadata GetMetadata() const;
};

// -------------------------------------------------------------------

class SnapshotInstanceIdMap_TanksEntry_DoNotUse : public ::google::protobuf::internal::MapEntry<SnapshotInstanceIdMap_TanksEntry_DoNotUse, 
    ::google::protobuf::uint32, ::Nmea2k::Tank,
    ::google::protobuf::internal::WireFormatLite::TYPE_UINT32,
    ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
    0 > {
public:
  typedef ::google::protobuf::internal::MapEntry<SnapshotInstanceIdMap_TanksEntry_DoNotUse, 
    ::google::protobuf::uint32, ::Nmea2k::Tank,
    ::google::protobuf::internal::WireFormatLite::TYPE_UINT32,
    ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
    0 > SuperType;
  SnapshotInstanceIdMap_TanksEntry_DoNotUse();
  SnapshotInstanceIdMap_TanksEntry_DoNotUse(::google::protobuf::Arena* arena);
  void MergeFrom(const SnapshotInstanceIdMap_TanksEntry_DoNotUse& other);
  static const SnapshotInstanceIdMap_TanksEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const SnapshotInstanceIdMap_TanksEntry_DoNotUse*>(&_SnapshotInstanceIdMap_TanksEntry_DoNotUse_default_instance_); }
  void MergeFrom(const ::google::protobuf::Message& other) final;
  ::google::protobuf::Metadata GetMetadata() const;
};

// -------------------------------------------------------------------

class SnapshotInstanceIdMap_EnginesEntry_DoNotUse : public ::google::protobuf::internal::MapEntry<SnapshotInstanceIdMap_EnginesEntry_DoNotUse, 
    ::google::protobuf::uint32, ::Nmea2k::Engine,
    ::google::protobuf::internal::WireFormatLite::TYPE_UINT32,
    ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
    0 > {
public:
  typedef ::google::protobuf::internal::MapEntry<SnapshotInstanceIdMap_EnginesEntry_DoNotUse, 
    ::google::protobuf::uint32, ::Nmea2k::Engine,
    ::google::protobuf::internal::WireFormatLite::TYPE_UINT32,
    ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
    0 > SuperType;
  SnapshotInstanceIdMap_EnginesEntry_DoNotUse();
  SnapshotInstanceIdMap_EnginesEntry_DoNotUse(::google::protobuf::Arena* arena);
  void MergeFrom(const SnapshotInstanceIdMap_EnginesEntry_DoNotUse& other);
  static const SnapshotInstanceIdMap_EnginesEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const SnapshotInstanceIdMap_EnginesEntry_DoNotUse*>(&_SnapshotInstanceIdMap_EnginesEntry_DoNotUse_default_instance_); }
  void MergeFrom(const ::google::protobuf::Message& other) final;
  ::google::protobuf::Metadata GetMetadata() const;
};

// -------------------------------------------------------------------

class SnapshotInstanceIdMap_ACEntry_DoNotUse : public ::google::protobuf::internal::MapEntry<SnapshotInstanceIdMap_ACEntry_DoNotUse, 
    ::google::protobuf::uint32, ::Nmea2k::AC,
    ::google::protobuf::internal::WireFormatLite::TYPE_UINT32,
    ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
    0 > {
public:
  typedef ::google::protobuf::internal::MapEntry<SnapshotInstanceIdMap_ACEntry_DoNotUse, 
    ::google::protobuf::uint32, ::Nmea2k::AC,
    ::google::protobuf::internal::WireFormatLite::TYPE_UINT32,
    ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
    0 > SuperType;
  SnapshotInstanceIdMap_ACEntry_DoNotUse();
  SnapshotInstanceIdMap_ACEntry_DoNotUse(::google::protobuf::Arena* arena);
  void MergeFrom(const SnapshotInstanceIdMap_ACEntry_DoNotUse& other);
  static const SnapshotInstanceIdMap_ACEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const SnapshotInstanceIdMap_ACEntry_DoNotUse*>(&_SnapshotInstanceIdMap_ACEntry_DoNotUse_default_instance_); }
  void MergeFrom(const ::google::protobuf::Message& other) final;
  ::google::protobuf::Metadata GetMetadata() const;
};

// -------------------------------------------------------------------

class SnapshotInstanceIdMap_DCEntry_DoNotUse : public ::google::protobuf::internal::MapEntry<SnapshotInstanceIdMap_DCEntry_DoNotUse, 
    ::google::protobuf::uint32, ::Nmea2k::DC,
    ::google::protobuf::internal::WireFormatLite::TYPE_UINT32,
    ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
    0 > {
public:
  typedef ::google::protobuf::internal::MapEntry<SnapshotInstanceIdMap_DCEntry_DoNotUse, 
    ::google::protobuf::uint32, ::Nmea2k::DC,
    ::google::protobuf::internal::WireFormatLite::TYPE_UINT32,
    ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
    0 > SuperType;
  SnapshotInstanceIdMap_DCEntry_DoNotUse();
  SnapshotInstanceIdMap_DCEntry_DoNotUse(::google::protobuf::Arena* arena);
  void MergeFrom(const SnapshotInstanceIdMap_DCEntry_DoNotUse& other);
  static const SnapshotInstanceIdMap_DCEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const SnapshotInstanceIdMap_DCEntry_DoNotUse*>(&_SnapshotInstanceIdMap_DCEntry_DoNotUse_default_instance_); }
  void MergeFrom(const ::google::protobuf::Message& other) final;
  ::google::protobuf::Metadata GetMetadata() const;
};

// -------------------------------------------------------------------

class SnapshotInstanceIdMap_TemperaturesEntry_DoNotUse : public ::google::protobuf::internal::MapEntry<SnapshotInstanceIdMap_TemperaturesEntry_DoNotUse, 
    ::google::protobuf::uint32, ::Nmea2k::Temperature,
    ::google::protobuf::internal::WireFormatLite::TYPE_UINT32,
    ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
    0 > {
public:
  typedef ::google::protobuf::internal::MapEntry<SnapshotInstanceIdMap_TemperaturesEntry_DoNotUse, 
    ::google::protobuf::uint32, ::Nmea2k::Temperature,
    ::google::protobuf::internal::WireFormatLite::TYPE_UINT32,
    ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
    0 > SuperType;
  SnapshotInstanceIdMap_TemperaturesEntry_DoNotUse();
  SnapshotInstanceIdMap_TemperaturesEntry_DoNotUse(::google::protobuf::Arena* arena);
  void MergeFrom(const SnapshotInstanceIdMap_TemperaturesEntry_DoNotUse& other);
  static const SnapshotInstanceIdMap_TemperaturesEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const SnapshotInstanceIdMap_TemperaturesEntry_DoNotUse*>(&_SnapshotInstanceIdMap_TemperaturesEntry_DoNotUse_default_instance_); }
  void MergeFrom(const ::google::protobuf::Message& other) final;
  ::google::protobuf::Metadata GetMetadata() const;
};

// -------------------------------------------------------------------

class SnapshotInstanceIdMap_PressuresEntry_DoNotUse : public ::google::protobuf::internal::MapEntry<SnapshotInstanceIdMap_PressuresEntry_DoNotUse, 
    ::google::protobuf::uint32, ::Nmea2k::Pressure,
    ::google::protobuf::internal::WireFormatLite::TYPE_UINT32,
    ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
    0 > {
public:
  typedef ::google::protobuf::internal::MapEntry<SnapshotInstanceIdMap_PressuresEntry_DoNotUse, 
    ::google::protobuf::uint32, ::Nmea2k::Pressure,
    ::google::protobuf::internal::WireFormatLite::TYPE_UINT32,
    ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
    0 > SuperType;
  SnapshotInstanceIdMap_PressuresEntry_DoNotUse();
  SnapshotInstanceIdMap_PressuresEntry_DoNotUse(::google::protobuf::Arena* arena);
  void MergeFrom(const SnapshotInstanceIdMap_PressuresEntry_DoNotUse& other);
  static const SnapshotInstanceIdMap_PressuresEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const SnapshotInstanceIdMap_PressuresEntry_DoNotUse*>(&_SnapshotInstanceIdMap_PressuresEntry_DoNotUse_default_instance_); }
  void MergeFrom(const ::google::protobuf::Message& other) final;
  ::google::protobuf::Metadata GetMetadata() const;
};

// -------------------------------------------------------------------

class SnapshotInstanceIdMap_HvacsEntry_DoNotUse : public ::google::protobuf::internal::MapEntry<SnapshotInstanceIdMap_HvacsEntry_DoNotUse, 
    ::google::protobuf::uint32, ::Nmea2k::HVAC,
    ::google::protobuf::internal::WireFormatLite::TYPE_UINT32,
    ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
    0 > {
public:
  typedef ::google::protobuf::internal::MapEntry<SnapshotInstanceIdMap_HvacsEntry_DoNotUse, 
    ::google::protobuf::uint32, ::Nmea2k::HVAC,
    ::google::protobuf::internal::WireFormatLite::TYPE_UINT32,
    ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
    0 > SuperType;
  SnapshotInstanceIdMap_HvacsEntry_DoNotUse();
  SnapshotInstanceIdMap_HvacsEntry_DoNotUse(::google::protobuf::Arena* arena);
  void MergeFrom(const SnapshotInstanceIdMap_HvacsEntry_DoNotUse& other);
  static const SnapshotInstanceIdMap_HvacsEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const SnapshotInstanceIdMap_HvacsEntry_DoNotUse*>(&_SnapshotInstanceIdMap_HvacsEntry_DoNotUse_default_instance_); }
  void MergeFrom(const ::google::protobuf::Message& other) final;
  ::google::protobuf::Metadata GetMetadata() const;
};

// -------------------------------------------------------------------

class SnapshotInstanceIdMap_AwningsEntry_DoNotUse : public ::google::protobuf::internal::MapEntry<SnapshotInstanceIdMap_AwningsEntry_DoNotUse, 
    ::google::protobuf::uint32, ::Nmea2k::ZipdeeAwning,
    ::google::protobuf::internal::WireFormatLite::TYPE_UINT32,
    ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
    0 > {
public:
  typedef ::google::protobuf::internal::MapEntry<SnapshotInstanceIdMap_AwningsEntry_DoNotUse, 
    ::google::protobuf::uint32, ::Nmea2k::ZipdeeAwning,
    ::google::protobuf::internal::WireFormatLite::TYPE_UINT32,
    ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
    0 > SuperType;
  SnapshotInstanceIdMap_AwningsEntry_DoNotUse();
  SnapshotInstanceIdMap_AwningsEntry_DoNotUse(::google::protobuf::Arena* arena);
  void MergeFrom(const SnapshotInstanceIdMap_AwningsEntry_DoNotUse& other);
  static const SnapshotInstanceIdMap_AwningsEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const SnapshotInstanceIdMap_AwningsEntry_DoNotUse*>(&_SnapshotInstanceIdMap_AwningsEntry_DoNotUse_default_instance_); }
  void MergeFrom(const ::google::protobuf::Message& other) final;
  ::google::protobuf::Metadata GetMetadata() const;
};

// -------------------------------------------------------------------

class SnapshotInstanceIdMap_ThirdPartyGeneratorsEntry_DoNotUse : public ::google::protobuf::internal::MapEntry<SnapshotInstanceIdMap_ThirdPartyGeneratorsEntry_DoNotUse, 
    ::google::protobuf::uint32, ::Nmea2k::ThirdPartyGenerator,
    ::google::protobuf::internal::WireFormatLite::TYPE_UINT32,
    ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
    0 > {
public:
  typedef ::google::protobuf::internal::MapEntry<SnapshotInstanceIdMap_ThirdPartyGeneratorsEntry_DoNotUse, 
    ::google::protobuf::uint32, ::Nmea2k::ThirdPartyGenerator,
    ::google::protobuf::internal::WireFormatLite::TYPE_UINT32,
    ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
    0 > SuperType;
  SnapshotInstanceIdMap_ThirdPartyGeneratorsEntry_DoNotUse();
  SnapshotInstanceIdMap_ThirdPartyGeneratorsEntry_DoNotUse(::google::protobuf::Arena* arena);
  void MergeFrom(const SnapshotInstanceIdMap_ThirdPartyGeneratorsEntry_DoNotUse& other);
  static const SnapshotInstanceIdMap_ThirdPartyGeneratorsEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const SnapshotInstanceIdMap_ThirdPartyGeneratorsEntry_DoNotUse*>(&_SnapshotInstanceIdMap_ThirdPartyGeneratorsEntry_DoNotUse_default_instance_); }
  void MergeFrom(const ::google::protobuf::Message& other) final;
  ::google::protobuf::Metadata GetMetadata() const;
};

// -------------------------------------------------------------------

class SnapshotInstanceIdMap_InverterChargersEntry_DoNotUse : public ::google::protobuf::internal::MapEntry<SnapshotInstanceIdMap_InverterChargersEntry_DoNotUse, 
    ::google::protobuf::uint32, ::Nmea2k::InverterCharger,
    ::google::protobuf::internal::WireFormatLite::TYPE_UINT32,
    ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
    0 > {
public:
  typedef ::google::protobuf::internal::MapEntry<SnapshotInstanceIdMap_InverterChargersEntry_DoNotUse, 
    ::google::protobuf::uint32, ::Nmea2k::InverterCharger,
    ::google::protobuf::internal::WireFormatLite::TYPE_UINT32,
    ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
    0 > SuperType;
  SnapshotInstanceIdMap_InverterChargersEntry_DoNotUse();
  SnapshotInstanceIdMap_InverterChargersEntry_DoNotUse(::google::protobuf::Arena* arena);
  void MergeFrom(const SnapshotInstanceIdMap_InverterChargersEntry_DoNotUse& other);
  static const SnapshotInstanceIdMap_InverterChargersEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const SnapshotInstanceIdMap_InverterChargersEntry_DoNotUse*>(&_SnapshotInstanceIdMap_InverterChargersEntry_DoNotUse_default_instance_); }
  void MergeFrom(const ::google::protobuf::Message& other) final;
  ::google::protobuf::Metadata GetMetadata() const;
};

// -------------------------------------------------------------------

class SnapshotInstanceIdMap_TyrepressuresEntry_DoNotUse : public ::google::protobuf::internal::MapEntry<SnapshotInstanceIdMap_TyrepressuresEntry_DoNotUse, 
    ::google::protobuf::uint32, ::Nmea2k::TyrePressure,
    ::google::protobuf::internal::WireFormatLite::TYPE_UINT32,
    ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
    0 > {
public:
  typedef ::google::protobuf::internal::MapEntry<SnapshotInstanceIdMap_TyrepressuresEntry_DoNotUse, 
    ::google::protobuf::uint32, ::Nmea2k::TyrePressure,
    ::google::protobuf::internal::WireFormatLite::TYPE_UINT32,
    ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
    0 > SuperType;
  SnapshotInstanceIdMap_TyrepressuresEntry_DoNotUse();
  SnapshotInstanceIdMap_TyrepressuresEntry_DoNotUse(::google::protobuf::Arena* arena);
  void MergeFrom(const SnapshotInstanceIdMap_TyrepressuresEntry_DoNotUse& other);
  static const SnapshotInstanceIdMap_TyrepressuresEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const SnapshotInstanceIdMap_TyrepressuresEntry_DoNotUse*>(&_SnapshotInstanceIdMap_TyrepressuresEntry_DoNotUse_default_instance_); }
  void MergeFrom(const ::google::protobuf::Message& other) final;
  ::google::protobuf::Metadata GetMetadata() const;
};

// -------------------------------------------------------------------

class SnapshotInstanceIdMap_AudioStereosEntry_DoNotUse : public ::google::protobuf::internal::MapEntry<SnapshotInstanceIdMap_AudioStereosEntry_DoNotUse, 
    ::google::protobuf::uint32, ::Nmea2k::AudioStereo,
    ::google::protobuf::internal::WireFormatLite::TYPE_UINT32,
    ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
    0 > {
public:
  typedef ::google::protobuf::internal::MapEntry<SnapshotInstanceIdMap_AudioStereosEntry_DoNotUse, 
    ::google::protobuf::uint32, ::Nmea2k::AudioStereo,
    ::google::protobuf::internal::WireFormatLite::TYPE_UINT32,
    ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
    0 > SuperType;
  SnapshotInstanceIdMap_AudioStereosEntry_DoNotUse();
  SnapshotInstanceIdMap_AudioStereosEntry_DoNotUse(::google::protobuf::Arena* arena);
  void MergeFrom(const SnapshotInstanceIdMap_AudioStereosEntry_DoNotUse& other);
  static const SnapshotInstanceIdMap_AudioStereosEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const SnapshotInstanceIdMap_AudioStereosEntry_DoNotUse*>(&_SnapshotInstanceIdMap_AudioStereosEntry_DoNotUse_default_instance_); }
  void MergeFrom(const ::google::protobuf::Message& other) final;
  ::google::protobuf::Metadata GetMetadata() const;
};

// -------------------------------------------------------------------

class SnapshotInstanceIdMap_ACMainContactorsEntry_DoNotUse : public ::google::protobuf::internal::MapEntry<SnapshotInstanceIdMap_ACMainContactorsEntry_DoNotUse, 
    ::google::protobuf::uint32, ::Nmea2k::ACMainContactor,
    ::google::protobuf::internal::WireFormatLite::TYPE_UINT32,
    ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
    0 > {
public:
  typedef ::google::protobuf::internal::MapEntry<SnapshotInstanceIdMap_ACMainContactorsEntry_DoNotUse, 
    ::google::protobuf::uint32, ::Nmea2k::ACMainContactor,
    ::google::protobuf::internal::WireFormatLite::TYPE_UINT32,
    ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
    0 > SuperType;
  SnapshotInstanceIdMap_ACMainContactorsEntry_DoNotUse();
  SnapshotInstanceIdMap_ACMainContactorsEntry_DoNotUse(::google::protobuf::Arena* arena);
  void MergeFrom(const SnapshotInstanceIdMap_ACMainContactorsEntry_DoNotUse& other);
  static const SnapshotInstanceIdMap_ACMainContactorsEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const SnapshotInstanceIdMap_ACMainContactorsEntry_DoNotUse*>(&_SnapshotInstanceIdMap_ACMainContactorsEntry_DoNotUse_default_instance_); }
  void MergeFrom(const ::google::protobuf::Message& other) final;
  ::google::protobuf::Metadata GetMetadata() const;
};

// -------------------------------------------------------------------

class SnapshotInstanceIdMap_GNSSEntry_DoNotUse : public ::google::protobuf::internal::MapEntry<SnapshotInstanceIdMap_GNSSEntry_DoNotUse, 
    ::google::protobuf::uint32, ::Nmea2k::GNSS,
    ::google::protobuf::internal::WireFormatLite::TYPE_UINT32,
    ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
    0 > {
public:
  typedef ::google::protobuf::internal::MapEntry<SnapshotInstanceIdMap_GNSSEntry_DoNotUse, 
    ::google::protobuf::uint32, ::Nmea2k::GNSS,
    ::google::protobuf::internal::WireFormatLite::TYPE_UINT32,
    ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
    0 > SuperType;
  SnapshotInstanceIdMap_GNSSEntry_DoNotUse();
  SnapshotInstanceIdMap_GNSSEntry_DoNotUse(::google::protobuf::Arena* arena);
  void MergeFrom(const SnapshotInstanceIdMap_GNSSEntry_DoNotUse& other);
  static const SnapshotInstanceIdMap_GNSSEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const SnapshotInstanceIdMap_GNSSEntry_DoNotUse*>(&_SnapshotInstanceIdMap_GNSSEntry_DoNotUse_default_instance_); }
  void MergeFrom(const ::google::protobuf::Message& other) final;
  ::google::protobuf::Metadata GetMetadata() const;
};

// -------------------------------------------------------------------

class SnapshotInstanceIdMap_MonitoringKeyValueEntry_DoNotUse : public ::google::protobuf::internal::MapEntry<SnapshotInstanceIdMap_MonitoringKeyValueEntry_DoNotUse, 
    ::google::protobuf::uint32, ::Nmea2k::MonitoringKeyValue,
    ::google::protobuf::internal::WireFormatLite::TYPE_UINT32,
    ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
    0 > {
public:
  typedef ::google::protobuf::internal::MapEntry<SnapshotInstanceIdMap_MonitoringKeyValueEntry_DoNotUse, 
    ::google::protobuf::uint32, ::Nmea2k::MonitoringKeyValue,
    ::google::protobuf::internal::WireFormatLite::TYPE_UINT32,
    ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
    0 > SuperType;
  SnapshotInstanceIdMap_MonitoringKeyValueEntry_DoNotUse();
  SnapshotInstanceIdMap_MonitoringKeyValueEntry_DoNotUse(::google::protobuf::Arena* arena);
  void MergeFrom(const SnapshotInstanceIdMap_MonitoringKeyValueEntry_DoNotUse& other);
  static const SnapshotInstanceIdMap_MonitoringKeyValueEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const SnapshotInstanceIdMap_MonitoringKeyValueEntry_DoNotUse*>(&_SnapshotInstanceIdMap_MonitoringKeyValueEntry_DoNotUse_default_instance_); }
  void MergeFrom(const ::google::protobuf::Message& other) final;
  ::google::protobuf::Metadata GetMetadata() const;
};

// -------------------------------------------------------------------

class SnapshotInstanceIdMap_BinaryLogicStateEntry_DoNotUse : public ::google::protobuf::internal::MapEntry<SnapshotInstanceIdMap_BinaryLogicStateEntry_DoNotUse, 
    ::google::protobuf::uint32, ::Nmea2k::BinaryLogicState,
    ::google::protobuf::internal::WireFormatLite::TYPE_UINT32,
    ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
    0 > {
public:
  typedef ::google::protobuf::internal::MapEntry<SnapshotInstanceIdMap_BinaryLogicStateEntry_DoNotUse, 
    ::google::protobuf::uint32, ::Nmea2k::BinaryLogicState,
    ::google::protobuf::internal::WireFormatLite::TYPE_UINT32,
    ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
    0 > SuperType;
  SnapshotInstanceIdMap_BinaryLogicStateEntry_DoNotUse();
  SnapshotInstanceIdMap_BinaryLogicStateEntry_DoNotUse(::google::protobuf::Arena* arena);
  void MergeFrom(const SnapshotInstanceIdMap_BinaryLogicStateEntry_DoNotUse& other);
  static const SnapshotInstanceIdMap_BinaryLogicStateEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const SnapshotInstanceIdMap_BinaryLogicStateEntry_DoNotUse*>(&_SnapshotInstanceIdMap_BinaryLogicStateEntry_DoNotUse_default_instance_); }
  void MergeFrom(const ::google::protobuf::Message& other) final;
  ::google::protobuf::Metadata GetMetadata() const;
};

// -------------------------------------------------------------------

class SnapshotInstanceIdMap : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Nmea2k.SnapshotInstanceIdMap) */ {
 public:
  SnapshotInstanceIdMap();
  virtual ~SnapshotInstanceIdMap();

  SnapshotInstanceIdMap(const SnapshotInstanceIdMap& from);

  inline SnapshotInstanceIdMap& operator=(const SnapshotInstanceIdMap& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SnapshotInstanceIdMap(SnapshotInstanceIdMap&& from) noexcept
    : SnapshotInstanceIdMap() {
    *this = ::std::move(from);
  }

  inline SnapshotInstanceIdMap& operator=(SnapshotInstanceIdMap&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SnapshotInstanceIdMap& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SnapshotInstanceIdMap* internal_default_instance() {
    return reinterpret_cast<const SnapshotInstanceIdMap*>(
               &_SnapshotInstanceIdMap_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    178;

  void Swap(SnapshotInstanceIdMap* other);
  friend void swap(SnapshotInstanceIdMap& a, SnapshotInstanceIdMap& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SnapshotInstanceIdMap* New() const final {
    return CreateMaybeMessage<SnapshotInstanceIdMap>(NULL);
  }

  SnapshotInstanceIdMap* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SnapshotInstanceIdMap>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SnapshotInstanceIdMap& from);
  void MergeFrom(const SnapshotInstanceIdMap& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SnapshotInstanceIdMap* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  // map<uint32, .Nmea2k.Circuit> Circuits = 1;
  int circuits_size() const;
  void clear_circuits();
  static const int kCircuitsFieldNumber = 1;
  const ::google::protobuf::Map< ::google::protobuf::uint32, ::Nmea2k::Circuit >&
      circuits() const;
  ::google::protobuf::Map< ::google::protobuf::uint32, ::Nmea2k::Circuit >*
      mutable_circuits();

  // map<uint32, .Nmea2k.Circuit> Modes = 2;
  int modes_size() const;
  void clear_modes();
  static const int kModesFieldNumber = 2;
  const ::google::protobuf::Map< ::google::protobuf::uint32, ::Nmea2k::Circuit >&
      modes() const;
  ::google::protobuf::Map< ::google::protobuf::uint32, ::Nmea2k::Circuit >*
      mutable_modes();

  // map<uint32, .Nmea2k.Tank> Tanks = 3;
  int tanks_size() const;
  void clear_tanks();
  static const int kTanksFieldNumber = 3;
  const ::google::protobuf::Map< ::google::protobuf::uint32, ::Nmea2k::Tank >&
      tanks() const;
  ::google::protobuf::Map< ::google::protobuf::uint32, ::Nmea2k::Tank >*
      mutable_tanks();

  // map<uint32, .Nmea2k.Engine> Engines = 4;
  int engines_size() const;
  void clear_engines();
  static const int kEnginesFieldNumber = 4;
  const ::google::protobuf::Map< ::google::protobuf::uint32, ::Nmea2k::Engine >&
      engines() const;
  ::google::protobuf::Map< ::google::protobuf::uint32, ::Nmea2k::Engine >*
      mutable_engines();

  // map<uint32, .Nmea2k.AC> AC = 5;
  int ac_size() const;
  void clear_ac();
  static const int kACFieldNumber = 5;
  const ::google::protobuf::Map< ::google::protobuf::uint32, ::Nmea2k::AC >&
      ac() const;
  ::google::protobuf::Map< ::google::protobuf::uint32, ::Nmea2k::AC >*
      mutable_ac();

  // map<uint32, .Nmea2k.DC> DC = 6;
  int dc_size() const;
  void clear_dc();
  static const int kDCFieldNumber = 6;
  const ::google::protobuf::Map< ::google::protobuf::uint32, ::Nmea2k::DC >&
      dc() const;
  ::google::protobuf::Map< ::google::protobuf::uint32, ::Nmea2k::DC >*
      mutable_dc();

  // map<uint32, .Nmea2k.Temperature> Temperatures = 7;
  int temperatures_size() const;
  void clear_temperatures();
  static const int kTemperaturesFieldNumber = 7;
  const ::google::protobuf::Map< ::google::protobuf::uint32, ::Nmea2k::Temperature >&
      temperatures() const;
  ::google::protobuf::Map< ::google::protobuf::uint32, ::Nmea2k::Temperature >*
      mutable_temperatures();

  // map<uint32, .Nmea2k.Pressure> Pressures = 8;
  int pressures_size() const;
  void clear_pressures();
  static const int kPressuresFieldNumber = 8;
  const ::google::protobuf::Map< ::google::protobuf::uint32, ::Nmea2k::Pressure >&
      pressures() const;
  ::google::protobuf::Map< ::google::protobuf::uint32, ::Nmea2k::Pressure >*
      mutable_pressures();

  // map<uint32, .Nmea2k.HVAC> Hvacs = 9;
  int hvacs_size() const;
  void clear_hvacs();
  static const int kHvacsFieldNumber = 9;
  const ::google::protobuf::Map< ::google::protobuf::uint32, ::Nmea2k::HVAC >&
      hvacs() const;
  ::google::protobuf::Map< ::google::protobuf::uint32, ::Nmea2k::HVAC >*
      mutable_hvacs();

  // map<uint32, .Nmea2k.ZipdeeAwning> Awnings = 10;
  int awnings_size() const;
  void clear_awnings();
  static const int kAwningsFieldNumber = 10;
  const ::google::protobuf::Map< ::google::protobuf::uint32, ::Nmea2k::ZipdeeAwning >&
      awnings() const;
  ::google::protobuf::Map< ::google::protobuf::uint32, ::Nmea2k::ZipdeeAwning >*
      mutable_awnings();

  // map<uint32, .Nmea2k.ThirdPartyGenerator> ThirdPartyGenerators = 11;
  int thirdpartygenerators_size() const;
  void clear_thirdpartygenerators();
  static const int kThirdPartyGeneratorsFieldNumber = 11;
  const ::google::protobuf::Map< ::google::protobuf::uint32, ::Nmea2k::ThirdPartyGenerator >&
      thirdpartygenerators() const;
  ::google::protobuf::Map< ::google::protobuf::uint32, ::Nmea2k::ThirdPartyGenerator >*
      mutable_thirdpartygenerators();

  // map<uint32, .Nmea2k.InverterCharger> InverterChargers = 12;
  int inverterchargers_size() const;
  void clear_inverterchargers();
  static const int kInverterChargersFieldNumber = 12;
  const ::google::protobuf::Map< ::google::protobuf::uint32, ::Nmea2k::InverterCharger >&
      inverterchargers() const;
  ::google::protobuf::Map< ::google::protobuf::uint32, ::Nmea2k::InverterCharger >*
      mutable_inverterchargers();

  // map<uint32, .Nmea2k.TyrePressure> Tyrepressures = 13;
  int tyrepressures_size() const;
  void clear_tyrepressures();
  static const int kTyrepressuresFieldNumber = 13;
  const ::google::protobuf::Map< ::google::protobuf::uint32, ::Nmea2k::TyrePressure >&
      tyrepressures() const;
  ::google::protobuf::Map< ::google::protobuf::uint32, ::Nmea2k::TyrePressure >*
      mutable_tyrepressures();

  // map<uint32, .Nmea2k.AudioStereo> AudioStereos = 14;
  int audiostereos_size() const;
  void clear_audiostereos();
  static const int kAudioStereosFieldNumber = 14;
  const ::google::protobuf::Map< ::google::protobuf::uint32, ::Nmea2k::AudioStereo >&
      audiostereos() const;
  ::google::protobuf::Map< ::google::protobuf::uint32, ::Nmea2k::AudioStereo >*
      mutable_audiostereos();

  // map<uint32, .Nmea2k.ACMainContactor> ACMainContactors = 15;
  int acmaincontactors_size() const;
  void clear_acmaincontactors();
  static const int kACMainContactorsFieldNumber = 15;
  const ::google::protobuf::Map< ::google::protobuf::uint32, ::Nmea2k::ACMainContactor >&
      acmaincontactors() const;
  ::google::protobuf::Map< ::google::protobuf::uint32, ::Nmea2k::ACMainContactor >*
      mutable_acmaincontactors();

  // map<uint32, .Nmea2k.GNSS> GNSS = 16;
  int gnss_size() const;
  void clear_gnss();
  static const int kGNSSFieldNumber = 16;
  const ::google::protobuf::Map< ::google::protobuf::uint32, ::Nmea2k::GNSS >&
      gnss() const;
  ::google::protobuf::Map< ::google::protobuf::uint32, ::Nmea2k::GNSS >*
      mutable_gnss();

  // map<uint32, .Nmea2k.MonitoringKeyValue> MonitoringKeyValue = 17;
  int monitoringkeyvalue_size() const;
  void clear_monitoringkeyvalue();
  static const int kMonitoringKeyValueFieldNumber = 17;
  const ::google::protobuf::Map< ::google::protobuf::uint32, ::Nmea2k::MonitoringKeyValue >&
      monitoringkeyvalue() const;
  ::google::protobuf::Map< ::google::protobuf::uint32, ::Nmea2k::MonitoringKeyValue >*
      mutable_monitoringkeyvalue();

  // map<uint32, .Nmea2k.BinaryLogicState> BinaryLogicState = 18;
  int binarylogicstate_size() const;
  void clear_binarylogicstate();
  static const int kBinaryLogicStateFieldNumber = 18;
  const ::google::protobuf::Map< ::google::protobuf::uint32, ::Nmea2k::BinaryLogicState >&
      binarylogicstate() const;
  ::google::protobuf::Map< ::google::protobuf::uint32, ::Nmea2k::BinaryLogicState >*
      mutable_binarylogicstate();

  // string TimeStamp = 20;
  void clear_timestamp();
  static const int kTimeStampFieldNumber = 20;
  const ::std::string& timestamp() const;
  void set_timestamp(const ::std::string& value);
  #if LANG_CXX11
  void set_timestamp(::std::string&& value);
  #endif
  void set_timestamp(const char* value);
  void set_timestamp(const char* value, size_t size);
  ::std::string* mutable_timestamp();
  ::std::string* release_timestamp();
  void set_allocated_timestamp(::std::string* timestamp);

  // .Nmea2k.NetworkStatus NetworkStatus = 19;
  bool has_networkstatus() const;
  void clear_networkstatus();
  static const int kNetworkStatusFieldNumber = 19;
  private:
  const ::Nmea2k::NetworkStatus& _internal_networkstatus() const;
  public:
  const ::Nmea2k::NetworkStatus& networkstatus() const;
  ::Nmea2k::NetworkStatus* release_networkstatus();
  ::Nmea2k::NetworkStatus* mutable_networkstatus();
  void set_allocated_networkstatus(::Nmea2k::NetworkStatus* networkstatus);

  // @@protoc_insertion_point(class_scope:Nmea2k.SnapshotInstanceIdMap)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::MapField<
      SnapshotInstanceIdMap_CircuitsEntry_DoNotUse,
      ::google::protobuf::uint32, ::Nmea2k::Circuit,
      ::google::protobuf::internal::WireFormatLite::TYPE_UINT32,
      ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
      0 > circuits_;
  ::google::protobuf::internal::MapField<
      SnapshotInstanceIdMap_ModesEntry_DoNotUse,
      ::google::protobuf::uint32, ::Nmea2k::Circuit,
      ::google::protobuf::internal::WireFormatLite::TYPE_UINT32,
      ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
      0 > modes_;
  ::google::protobuf::internal::MapField<
      SnapshotInstanceIdMap_TanksEntry_DoNotUse,
      ::google::protobuf::uint32, ::Nmea2k::Tank,
      ::google::protobuf::internal::WireFormatLite::TYPE_UINT32,
      ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
      0 > tanks_;
  ::google::protobuf::internal::MapField<
      SnapshotInstanceIdMap_EnginesEntry_DoNotUse,
      ::google::protobuf::uint32, ::Nmea2k::Engine,
      ::google::protobuf::internal::WireFormatLite::TYPE_UINT32,
      ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
      0 > engines_;
  ::google::protobuf::internal::MapField<
      SnapshotInstanceIdMap_ACEntry_DoNotUse,
      ::google::protobuf::uint32, ::Nmea2k::AC,
      ::google::protobuf::internal::WireFormatLite::TYPE_UINT32,
      ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
      0 > ac_;
  ::google::protobuf::internal::MapField<
      SnapshotInstanceIdMap_DCEntry_DoNotUse,
      ::google::protobuf::uint32, ::Nmea2k::DC,
      ::google::protobuf::internal::WireFormatLite::TYPE_UINT32,
      ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
      0 > dc_;
  ::google::protobuf::internal::MapField<
      SnapshotInstanceIdMap_TemperaturesEntry_DoNotUse,
      ::google::protobuf::uint32, ::Nmea2k::Temperature,
      ::google::protobuf::internal::WireFormatLite::TYPE_UINT32,
      ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
      0 > temperatures_;
  ::google::protobuf::internal::MapField<
      SnapshotInstanceIdMap_PressuresEntry_DoNotUse,
      ::google::protobuf::uint32, ::Nmea2k::Pressure,
      ::google::protobuf::internal::WireFormatLite::TYPE_UINT32,
      ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
      0 > pressures_;
  ::google::protobuf::internal::MapField<
      SnapshotInstanceIdMap_HvacsEntry_DoNotUse,
      ::google::protobuf::uint32, ::Nmea2k::HVAC,
      ::google::protobuf::internal::WireFormatLite::TYPE_UINT32,
      ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
      0 > hvacs_;
  ::google::protobuf::internal::MapField<
      SnapshotInstanceIdMap_AwningsEntry_DoNotUse,
      ::google::protobuf::uint32, ::Nmea2k::ZipdeeAwning,
      ::google::protobuf::internal::WireFormatLite::TYPE_UINT32,
      ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
      0 > awnings_;
  ::google::protobuf::internal::MapField<
      SnapshotInstanceIdMap_ThirdPartyGeneratorsEntry_DoNotUse,
      ::google::protobuf::uint32, ::Nmea2k::ThirdPartyGenerator,
      ::google::protobuf::internal::WireFormatLite::TYPE_UINT32,
      ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
      0 > thirdpartygenerators_;
  ::google::protobuf::internal::MapField<
      SnapshotInstanceIdMap_InverterChargersEntry_DoNotUse,
      ::google::protobuf::uint32, ::Nmea2k::InverterCharger,
      ::google::protobuf::internal::WireFormatLite::TYPE_UINT32,
      ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
      0 > inverterchargers_;
  ::google::protobuf::internal::MapField<
      SnapshotInstanceIdMap_TyrepressuresEntry_DoNotUse,
      ::google::protobuf::uint32, ::Nmea2k::TyrePressure,
      ::google::protobuf::internal::WireFormatLite::TYPE_UINT32,
      ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
      0 > tyrepressures_;
  ::google::protobuf::internal::MapField<
      SnapshotInstanceIdMap_AudioStereosEntry_DoNotUse,
      ::google::protobuf::uint32, ::Nmea2k::AudioStereo,
      ::google::protobuf::internal::WireFormatLite::TYPE_UINT32,
      ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
      0 > audiostereos_;
  ::google::protobuf::internal::MapField<
      SnapshotInstanceIdMap_ACMainContactorsEntry_DoNotUse,
      ::google::protobuf::uint32, ::Nmea2k::ACMainContactor,
      ::google::protobuf::internal::WireFormatLite::TYPE_UINT32,
      ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
      0 > acmaincontactors_;
  ::google::protobuf::internal::MapField<
      SnapshotInstanceIdMap_GNSSEntry_DoNotUse,
      ::google::protobuf::uint32, ::Nmea2k::GNSS,
      ::google::protobuf::internal::WireFormatLite::TYPE_UINT32,
      ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
      0 > gnss_;
  ::google::protobuf::internal::MapField<
      SnapshotInstanceIdMap_MonitoringKeyValueEntry_DoNotUse,
      ::google::protobuf::uint32, ::Nmea2k::MonitoringKeyValue,
      ::google::protobuf::internal::WireFormatLite::TYPE_UINT32,
      ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
      0 > monitoringkeyvalue_;
  ::google::protobuf::internal::MapField<
      SnapshotInstanceIdMap_BinaryLogicStateEntry_DoNotUse,
      ::google::protobuf::uint32, ::Nmea2k::BinaryLogicState,
      ::google::protobuf::internal::WireFormatLite::TYPE_UINT32,
      ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
      0 > binarylogicstate_;
  ::google::protobuf::internal::ArenaStringPtr timestamp_;
  ::Nmea2k::NetworkStatus* networkstatus_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_Nmea2k_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class HealthStatus : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Nmea2k.HealthStatus) */ {
 public:
  HealthStatus();
  virtual ~HealthStatus();

  HealthStatus(const HealthStatus& from);

  inline HealthStatus& operator=(const HealthStatus& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  HealthStatus(HealthStatus&& from) noexcept
    : HealthStatus() {
    *this = ::std::move(from);
  }

  inline HealthStatus& operator=(HealthStatus&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const HealthStatus& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const HealthStatus* internal_default_instance() {
    return reinterpret_cast<const HealthStatus*>(
               &_HealthStatus_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    179;

  void Swap(HealthStatus* other);
  friend void swap(HealthStatus& a, HealthStatus& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline HealthStatus* New() const final {
    return CreateMaybeMessage<HealthStatus>(NULL);
  }

  HealthStatus* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<HealthStatus>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const HealthStatus& from);
  void MergeFrom(const HealthStatus& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(HealthStatus* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef HealthStatus_eHealth eHealth;
  static const eHealth HealthOk =
    HealthStatus_eHealth_HealthOk;
  static const eHealth HealthBad =
    HealthStatus_eHealth_HealthBad;
  static const eHealth HealthNone =
    HealthStatus_eHealth_HealthNone;
  static inline bool eHealth_IsValid(int value) {
    return HealthStatus_eHealth_IsValid(value);
  }
  static const eHealth eHealth_MIN =
    HealthStatus_eHealth_eHealth_MIN;
  static const eHealth eHealth_MAX =
    HealthStatus_eHealth_eHealth_MAX;
  static const int eHealth_ARRAYSIZE =
    HealthStatus_eHealth_eHealth_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  eHealth_descriptor() {
    return HealthStatus_eHealth_descriptor();
  }
  static inline const ::std::string& eHealth_Name(eHealth value) {
    return HealthStatus_eHealth_Name(value);
  }
  static inline bool eHealth_Parse(const ::std::string& name,
      eHealth* value) {
    return HealthStatus_eHealth_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // .Nmea2k.HealthStatus.eHealth ServiceThread = 1;
  void clear_servicethread();
  static const int kServiceThreadFieldNumber = 1;
  ::Nmea2k::HealthStatus_eHealth servicethread() const;
  void set_servicethread(::Nmea2k::HealthStatus_eHealth value);

  // .Nmea2k.HealthStatus.eHealth NetworkThread = 2;
  void clear_networkthread();
  static const int kNetworkThreadFieldNumber = 2;
  ::Nmea2k::HealthStatus_eHealth networkthread() const;
  void set_networkthread(::Nmea2k::HealthStatus_eHealth value);

  // .Nmea2k.HealthStatus.eHealth SCThread = 3;
  void clear_scthread();
  static const int kSCThreadFieldNumber = 3;
  ::Nmea2k::HealthStatus_eHealth scthread() const;
  void set_scthread(::Nmea2k::HealthStatus_eHealth value);

  // .Nmea2k.HealthStatus.eHealth GNSSThread = 4;
  void clear_gnssthread();
  static const int kGNSSThreadFieldNumber = 4;
  ::Nmea2k::HealthStatus_eHealth gnssthread() const;
  void set_gnssthread(::Nmea2k::HealthStatus_eHealth value);

  // .Nmea2k.HealthStatus.eHealth GNSSLatLon = 5;
  void clear_gnsslatlon();
  static const int kGNSSLatLonFieldNumber = 5;
  ::Nmea2k::HealthStatus_eHealth gnsslatlon() const;
  void set_gnsslatlon(::Nmea2k::HealthStatus_eHealth value);

  // .Nmea2k.HealthStatus.eHealth GNSSFix = 6;
  void clear_gnssfix();
  static const int kGNSSFixFieldNumber = 6;
  ::Nmea2k::HealthStatus_eHealth gnssfix() const;
  void set_gnssfix(::Nmea2k::HealthStatus_eHealth value);

  // @@protoc_insertion_point(class_scope:Nmea2k.HealthStatus)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  int servicethread_;
  int networkthread_;
  int scthread_;
  int gnssthread_;
  int gnsslatlon_;
  int gnssfix_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_Nmea2k_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Geofence

// bool IsEnabled = 1;
inline void Geofence::clear_isenabled() {
  isenabled_ = false;
}
inline bool Geofence::isenabled() const {
  // @@protoc_insertion_point(field_get:Nmea2k.Geofence.IsEnabled)
  return isenabled_;
}
inline void Geofence::set_isenabled(bool value) {
  
  isenabled_ = value;
  // @@protoc_insertion_point(field_set:Nmea2k.Geofence.IsEnabled)
}

// bool DoWakeHost = 2;
inline void Geofence::clear_dowakehost() {
  dowakehost_ = false;
}
inline bool Geofence::dowakehost() const {
  // @@protoc_insertion_point(field_get:Nmea2k.Geofence.DoWakeHost)
  return dowakehost_;
}
inline void Geofence::set_dowakehost(bool value) {
  
  dowakehost_ = value;
  // @@protoc_insertion_point(field_set:Nmea2k.Geofence.DoWakeHost)
}

// bool DoNotify = 3;
inline void Geofence::clear_donotify() {
  donotify_ = false;
}
inline bool Geofence::donotify() const {
  // @@protoc_insertion_point(field_get:Nmea2k.Geofence.DoNotify)
  return donotify_;
}
inline void Geofence::set_donotify(bool value) {
  
  donotify_ = value;
  // @@protoc_insertion_point(field_set:Nmea2k.Geofence.DoNotify)
}

// float Latitude = 4;
inline void Geofence::clear_latitude() {
  latitude_ = 0;
}
inline float Geofence::latitude() const {
  // @@protoc_insertion_point(field_get:Nmea2k.Geofence.Latitude)
  return latitude_;
}
inline void Geofence::set_latitude(float value) {
  
  latitude_ = value;
  // @@protoc_insertion_point(field_set:Nmea2k.Geofence.Latitude)
}

// float Longitude = 5;
inline void Geofence::clear_longitude() {
  longitude_ = 0;
}
inline float Geofence::longitude() const {
  // @@protoc_insertion_point(field_get:Nmea2k.Geofence.Longitude)
  return longitude_;
}
inline void Geofence::set_longitude(float value) {
  
  longitude_ = value;
  // @@protoc_insertion_point(field_set:Nmea2k.Geofence.Longitude)
}

// uint32 RadiusM = 6;
inline void Geofence::clear_radiusm() {
  radiusm_ = 0u;
}
inline ::google::protobuf::uint32 Geofence::radiusm() const {
  // @@protoc_insertion_point(field_get:Nmea2k.Geofence.RadiusM)
  return radiusm_;
}
inline void Geofence::set_radiusm(::google::protobuf::uint32 value) {
  
  radiusm_ = value;
  // @@protoc_insertion_point(field_set:Nmea2k.Geofence.RadiusM)
}

// bool DoLogImuGnss = 7;
inline void Geofence::clear_dologimugnss() {
  dologimugnss_ = false;
}
inline bool Geofence::dologimugnss() const {
  // @@protoc_insertion_point(field_get:Nmea2k.Geofence.DoLogImuGnss)
  return dologimugnss_;
}
inline void Geofence::set_dologimugnss(bool value) {
  
  dologimugnss_ = value;
  // @@protoc_insertion_point(field_set:Nmea2k.Geofence.DoLogImuGnss)
}

// .Nmea2k.Geofence.eGnssConfidenceLevel confidenceLevel = 8;
inline void Geofence::clear_confidencelevel() {
  confidencelevel_ = 0;
}
inline ::Nmea2k::Geofence_eGnssConfidenceLevel Geofence::confidencelevel() const {
  // @@protoc_insertion_point(field_get:Nmea2k.Geofence.confidenceLevel)
  return static_cast< ::Nmea2k::Geofence_eGnssConfidenceLevel >(confidencelevel_);
}
inline void Geofence::set_confidencelevel(::Nmea2k::Geofence_eGnssConfidenceLevel value) {
  
  confidencelevel_ = value;
  // @@protoc_insertion_point(field_set:Nmea2k.Geofence.confidenceLevel)
}

// -------------------------------------------------------------------

// PsvGnss

// uint32 Index = 1;
inline void PsvGnss::clear_index() {
  index_ = 0u;
}
inline ::google::protobuf::uint32 PsvGnss::index() const {
  // @@protoc_insertion_point(field_get:Nmea2k.PsvGnss.Index)
  return index_;
}
inline void PsvGnss::set_index(::google::protobuf::uint32 value) {
  
  index_ = value;
  // @@protoc_insertion_point(field_set:Nmea2k.PsvGnss.Index)
}

// .Nmea2k.Geofence Geofence = 2;
inline bool PsvGnss::has_geofence() const {
  return this != internal_default_instance() && geofence_ != NULL;
}
inline void PsvGnss::clear_geofence() {
  if (GetArenaNoVirtual() == NULL && geofence_ != NULL) {
    delete geofence_;
  }
  geofence_ = NULL;
}
inline const ::Nmea2k::Geofence& PsvGnss::_internal_geofence() const {
  return *geofence_;
}
inline const ::Nmea2k::Geofence& PsvGnss::geofence() const {
  const ::Nmea2k::Geofence* p = geofence_;
  // @@protoc_insertion_point(field_get:Nmea2k.PsvGnss.Geofence)
  return p != NULL ? *p : *reinterpret_cast<const ::Nmea2k::Geofence*>(
      &::Nmea2k::_Geofence_default_instance_);
}
inline ::Nmea2k::Geofence* PsvGnss::release_geofence() {
  // @@protoc_insertion_point(field_release:Nmea2k.PsvGnss.Geofence)
  
  ::Nmea2k::Geofence* temp = geofence_;
  geofence_ = NULL;
  return temp;
}
inline ::Nmea2k::Geofence* PsvGnss::mutable_geofence() {
  
  if (geofence_ == NULL) {
    auto* p = CreateMaybeMessage<::Nmea2k::Geofence>(GetArenaNoVirtual());
    geofence_ = p;
  }
  // @@protoc_insertion_point(field_mutable:Nmea2k.PsvGnss.Geofence)
  return geofence_;
}
inline void PsvGnss::set_allocated_geofence(::Nmea2k::Geofence* geofence) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete geofence_;
  }
  if (geofence) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      geofence = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, geofence, submessage_arena);
    }
    
  } else {
    
  }
  geofence_ = geofence;
  // @@protoc_insertion_point(field_set_allocated:Nmea2k.PsvGnss.Geofence)
}

// -------------------------------------------------------------------

// PsvConfiguration

// string Token = 1;
inline void PsvConfiguration::clear_token() {
  token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PsvConfiguration::token() const {
  // @@protoc_insertion_point(field_get:Nmea2k.PsvConfiguration.Token)
  return token_.GetNoArena();
}
inline void PsvConfiguration::set_token(const ::std::string& value) {
  
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Nmea2k.PsvConfiguration.Token)
}
#if LANG_CXX11
inline void PsvConfiguration::set_token(::std::string&& value) {
  
  token_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Nmea2k.PsvConfiguration.Token)
}
#endif
inline void PsvConfiguration::set_token(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Nmea2k.PsvConfiguration.Token)
}
inline void PsvConfiguration::set_token(const char* value, size_t size) {
  
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Nmea2k.PsvConfiguration.Token)
}
inline ::std::string* PsvConfiguration::mutable_token() {
  
  // @@protoc_insertion_point(field_mutable:Nmea2k.PsvConfiguration.Token)
  return token_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PsvConfiguration::release_token() {
  // @@protoc_insertion_point(field_release:Nmea2k.PsvConfiguration.Token)
  
  return token_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PsvConfiguration::set_allocated_token(::std::string* token) {
  if (token != NULL) {
    
  } else {
    
  }
  token_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), token);
  // @@protoc_insertion_point(field_set_allocated:Nmea2k.PsvConfiguration.Token)
}

// .Nmea2k.PsvConfiguration.eConfigType ConfigType = 2;
inline void PsvConfiguration::clear_configtype() {
  configtype_ = 0;
}
inline ::Nmea2k::PsvConfiguration_eConfigType PsvConfiguration::configtype() const {
  // @@protoc_insertion_point(field_get:Nmea2k.PsvConfiguration.ConfigType)
  return static_cast< ::Nmea2k::PsvConfiguration_eConfigType >(configtype_);
}
inline void PsvConfiguration::set_configtype(::Nmea2k::PsvConfiguration_eConfigType value) {
  
  configtype_ = value;
  // @@protoc_insertion_point(field_set:Nmea2k.PsvConfiguration.ConfigType)
}

// .Nmea2k.PsvGnss PsvGnss = 3;
inline bool PsvConfiguration::has_psvgnss() const {
  return this != internal_default_instance() && psvgnss_ != NULL;
}
inline void PsvConfiguration::clear_psvgnss() {
  if (GetArenaNoVirtual() == NULL && psvgnss_ != NULL) {
    delete psvgnss_;
  }
  psvgnss_ = NULL;
}
inline const ::Nmea2k::PsvGnss& PsvConfiguration::_internal_psvgnss() const {
  return *psvgnss_;
}
inline const ::Nmea2k::PsvGnss& PsvConfiguration::psvgnss() const {
  const ::Nmea2k::PsvGnss* p = psvgnss_;
  // @@protoc_insertion_point(field_get:Nmea2k.PsvConfiguration.PsvGnss)
  return p != NULL ? *p : *reinterpret_cast<const ::Nmea2k::PsvGnss*>(
      &::Nmea2k::_PsvGnss_default_instance_);
}
inline ::Nmea2k::PsvGnss* PsvConfiguration::release_psvgnss() {
  // @@protoc_insertion_point(field_release:Nmea2k.PsvConfiguration.PsvGnss)
  
  ::Nmea2k::PsvGnss* temp = psvgnss_;
  psvgnss_ = NULL;
  return temp;
}
inline ::Nmea2k::PsvGnss* PsvConfiguration::mutable_psvgnss() {
  
  if (psvgnss_ == NULL) {
    auto* p = CreateMaybeMessage<::Nmea2k::PsvGnss>(GetArenaNoVirtual());
    psvgnss_ = p;
  }
  // @@protoc_insertion_point(field_mutable:Nmea2k.PsvConfiguration.PsvGnss)
  return psvgnss_;
}
inline void PsvConfiguration::set_allocated_psvgnss(::Nmea2k::PsvGnss* psvgnss) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete psvgnss_;
  }
  if (psvgnss) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      psvgnss = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, psvgnss, submessage_arena);
    }
    
  } else {
    
  }
  psvgnss_ = psvgnss;
  // @@protoc_insertion_point(field_set_allocated:Nmea2k.PsvConfiguration.PsvGnss)
}

// -------------------------------------------------------------------

// FavoriteRequest

// .Nmea2k.FavoriteRequest.eActionType ActionType = 1;
inline void FavoriteRequest::clear_actiontype() {
  actiontype_ = 0;
}
inline ::Nmea2k::FavoriteRequest_eActionType FavoriteRequest::actiontype() const {
  // @@protoc_insertion_point(field_get:Nmea2k.FavoriteRequest.ActionType)
  return static_cast< ::Nmea2k::FavoriteRequest_eActionType >(actiontype_);
}
inline void FavoriteRequest::set_actiontype(::Nmea2k::FavoriteRequest_eActionType value) {
  
  actiontype_ = value;
  // @@protoc_insertion_point(field_set:Nmea2k.FavoriteRequest.ActionType)
}

// uint32 Action = 2;
inline void FavoriteRequest::clear_action() {
  action_ = 0u;
}
inline ::google::protobuf::uint32 FavoriteRequest::action() const {
  // @@protoc_insertion_point(field_get:Nmea2k.FavoriteRequest.Action)
  return action_;
}
inline void FavoriteRequest::set_action(::google::protobuf::uint32 value) {
  
  action_ = value;
  // @@protoc_insertion_point(field_set:Nmea2k.FavoriteRequest.Action)
}

// uint32 ParentId = 3;
inline void FavoriteRequest::clear_parentid() {
  parentid_ = 0u;
}
inline ::google::protobuf::uint32 FavoriteRequest::parentid() const {
  // @@protoc_insertion_point(field_get:Nmea2k.FavoriteRequest.ParentId)
  return parentid_;
}
inline void FavoriteRequest::set_parentid(::google::protobuf::uint32 value) {
  
  parentid_ = value;
  // @@protoc_insertion_point(field_set:Nmea2k.FavoriteRequest.ParentId)
}

// uint32 ListIndex = 4;
inline void FavoriteRequest::clear_listindex() {
  listindex_ = 0u;
}
inline ::google::protobuf::uint32 FavoriteRequest::listindex() const {
  // @@protoc_insertion_point(field_get:Nmea2k.FavoriteRequest.ListIndex)
  return listindex_;
}
inline void FavoriteRequest::set_listindex(::google::protobuf::uint32 value) {
  
  listindex_ = value;
  // @@protoc_insertion_point(field_set:Nmea2k.FavoriteRequest.ListIndex)
}

// uint32 NewIndex = 5;
inline void FavoriteRequest::clear_newindex() {
  newindex_ = 0u;
}
inline ::google::protobuf::uint32 FavoriteRequest::newindex() const {
  // @@protoc_insertion_point(field_get:Nmea2k.FavoriteRequest.NewIndex)
  return newindex_;
}
inline void FavoriteRequest::set_newindex(::google::protobuf::uint32 value) {
  
  newindex_ = value;
  // @@protoc_insertion_point(field_set:Nmea2k.FavoriteRequest.NewIndex)
}

// uint32 DisplayType = 6;
inline void FavoriteRequest::clear_displaytype() {
  displaytype_ = 0u;
}
inline ::google::protobuf::uint32 FavoriteRequest::displaytype() const {
  // @@protoc_insertion_point(field_get:Nmea2k.FavoriteRequest.DisplayType)
  return displaytype_;
}
inline void FavoriteRequest::set_displaytype(::google::protobuf::uint32 value) {
  
  displaytype_ = value;
  // @@protoc_insertion_point(field_set:Nmea2k.FavoriteRequest.DisplayType)
}

// uint32 Type = 7;
inline void FavoriteRequest::clear_type() {
  type_ = 0u;
}
inline ::google::protobuf::uint32 FavoriteRequest::type() const {
  // @@protoc_insertion_point(field_get:Nmea2k.FavoriteRequest.Type)
  return type_;
}
inline void FavoriteRequest::set_type(::google::protobuf::uint32 value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:Nmea2k.FavoriteRequest.Type)
}

// string Token = 8;
inline void FavoriteRequest::clear_token() {
  token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& FavoriteRequest::token() const {
  // @@protoc_insertion_point(field_get:Nmea2k.FavoriteRequest.Token)
  return token_.GetNoArena();
}
inline void FavoriteRequest::set_token(const ::std::string& value) {
  
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Nmea2k.FavoriteRequest.Token)
}
#if LANG_CXX11
inline void FavoriteRequest::set_token(::std::string&& value) {
  
  token_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Nmea2k.FavoriteRequest.Token)
}
#endif
inline void FavoriteRequest::set_token(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Nmea2k.FavoriteRequest.Token)
}
inline void FavoriteRequest::set_token(const char* value, size_t size) {
  
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Nmea2k.FavoriteRequest.Token)
}
inline ::std::string* FavoriteRequest::mutable_token() {
  
  // @@protoc_insertion_point(field_mutable:Nmea2k.FavoriteRequest.Token)
  return token_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FavoriteRequest::release_token() {
  // @@protoc_insertion_point(field_release:Nmea2k.FavoriteRequest.Token)
  
  return token_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FavoriteRequest::set_allocated_token(::std::string* token) {
  if (token != NULL) {
    
  } else {
    
  }
  token_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), token);
  // @@protoc_insertion_point(field_set_allocated:Nmea2k.FavoriteRequest.Token)
}

// -------------------------------------------------------------------

// FavoriteResult

// bytes Info = 1;
inline void FavoriteResult::clear_info() {
  info_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& FavoriteResult::info() const {
  // @@protoc_insertion_point(field_get:Nmea2k.FavoriteResult.Info)
  return info_.GetNoArena();
}
inline void FavoriteResult::set_info(const ::std::string& value) {
  
  info_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Nmea2k.FavoriteResult.Info)
}
#if LANG_CXX11
inline void FavoriteResult::set_info(::std::string&& value) {
  
  info_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Nmea2k.FavoriteResult.Info)
}
#endif
inline void FavoriteResult::set_info(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  info_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Nmea2k.FavoriteResult.Info)
}
inline void FavoriteResult::set_info(const void* value, size_t size) {
  
  info_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Nmea2k.FavoriteResult.Info)
}
inline ::std::string* FavoriteResult::mutable_info() {
  
  // @@protoc_insertion_point(field_mutable:Nmea2k.FavoriteResult.Info)
  return info_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FavoriteResult::release_info() {
  // @@protoc_insertion_point(field_release:Nmea2k.FavoriteResult.Info)
  
  return info_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FavoriteResult::set_allocated_info(::std::string* info) {
  if (info != NULL) {
    
  } else {
    
  }
  info_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), info);
  // @@protoc_insertion_point(field_set_allocated:Nmea2k.FavoriteResult.Info)
}

// bytes Data = 2;
inline void FavoriteResult::clear_data() {
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& FavoriteResult::data() const {
  // @@protoc_insertion_point(field_get:Nmea2k.FavoriteResult.Data)
  return data_.GetNoArena();
}
inline void FavoriteResult::set_data(const ::std::string& value) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Nmea2k.FavoriteResult.Data)
}
#if LANG_CXX11
inline void FavoriteResult::set_data(::std::string&& value) {
  
  data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Nmea2k.FavoriteResult.Data)
}
#endif
inline void FavoriteResult::set_data(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Nmea2k.FavoriteResult.Data)
}
inline void FavoriteResult::set_data(const void* value, size_t size) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Nmea2k.FavoriteResult.Data)
}
inline ::std::string* FavoriteResult::mutable_data() {
  
  // @@protoc_insertion_point(field_mutable:Nmea2k.FavoriteResult.Data)
  return data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FavoriteResult::release_data() {
  // @@protoc_insertion_point(field_release:Nmea2k.FavoriteResult.Data)
  
  return data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FavoriteResult::set_allocated_data(::std::string* data) {
  if (data != NULL) {
    
  } else {
    
  }
  data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:Nmea2k.FavoriteResult.Data)
}

// bool Valid = 3;
inline void FavoriteResult::clear_valid() {
  valid_ = false;
}
inline bool FavoriteResult::valid() const {
  // @@protoc_insertion_point(field_get:Nmea2k.FavoriteResult.Valid)
  return valid_;
}
inline void FavoriteResult::set_valid(bool value) {
  
  valid_ = value;
  // @@protoc_insertion_point(field_set:Nmea2k.FavoriteResult.Valid)
}

// uint32 Value = 4;
inline void FavoriteResult::clear_value() {
  value_ = 0u;
}
inline ::google::protobuf::uint32 FavoriteResult::value() const {
  // @@protoc_insertion_point(field_get:Nmea2k.FavoriteResult.Value)
  return value_;
}
inline void FavoriteResult::set_value(::google::protobuf::uint32 value) {
  
  value_ = value;
  // @@protoc_insertion_point(field_set:Nmea2k.FavoriteResult.Value)
}

// -------------------------------------------------------------------

// DataIndex

// string Token = 1;
inline void DataIndex::clear_token() {
  token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DataIndex::token() const {
  // @@protoc_insertion_point(field_get:Nmea2k.DataIndex.Token)
  return token_.GetNoArena();
}
inline void DataIndex::set_token(const ::std::string& value) {
  
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Nmea2k.DataIndex.Token)
}
#if LANG_CXX11
inline void DataIndex::set_token(::std::string&& value) {
  
  token_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Nmea2k.DataIndex.Token)
}
#endif
inline void DataIndex::set_token(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Nmea2k.DataIndex.Token)
}
inline void DataIndex::set_token(const char* value, size_t size) {
  
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Nmea2k.DataIndex.Token)
}
inline ::std::string* DataIndex::mutable_token() {
  
  // @@protoc_insertion_point(field_mutable:Nmea2k.DataIndex.Token)
  return token_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DataIndex::release_token() {
  // @@protoc_insertion_point(field_release:Nmea2k.DataIndex.Token)
  
  return token_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DataIndex::set_allocated_token(::std::string* token) {
  if (token != NULL) {
    
  } else {
    
  }
  token_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), token);
  // @@protoc_insertion_point(field_set_allocated:Nmea2k.DataIndex.Token)
}

// .Nmea2k.DataIndex.eIndexType type = 2;
inline void DataIndex::clear_type() {
  type_ = 0;
}
inline ::Nmea2k::DataIndex_eIndexType DataIndex::type() const {
  // @@protoc_insertion_point(field_get:Nmea2k.DataIndex.type)
  return static_cast< ::Nmea2k::DataIndex_eIndexType >(type_);
}
inline void DataIndex::set_type(::Nmea2k::DataIndex_eIndexType value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:Nmea2k.DataIndex.type)
}

// uint32 DataType = 3;
inline void DataIndex::clear_datatype() {
  datatype_ = 0u;
}
inline ::google::protobuf::uint32 DataIndex::datatype() const {
  // @@protoc_insertion_point(field_get:Nmea2k.DataIndex.DataType)
  return datatype_;
}
inline void DataIndex::set_datatype(::google::protobuf::uint32 value) {
  
  datatype_ = value;
  // @@protoc_insertion_point(field_set:Nmea2k.DataIndex.DataType)
}

// uint32 Instance = 4;
inline void DataIndex::clear_instance() {
  instance_ = 0u;
}
inline ::google::protobuf::uint32 DataIndex::instance() const {
  // @@protoc_insertion_point(field_get:Nmea2k.DataIndex.Instance)
  return instance_;
}
inline void DataIndex::set_instance(::google::protobuf::uint32 value) {
  
  instance_ = value;
  // @@protoc_insertion_point(field_set:Nmea2k.DataIndex.Instance)
}

// string BytesData = 5;
inline void DataIndex::clear_bytesdata() {
  bytesdata_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DataIndex::bytesdata() const {
  // @@protoc_insertion_point(field_get:Nmea2k.DataIndex.BytesData)
  return bytesdata_.GetNoArena();
}
inline void DataIndex::set_bytesdata(const ::std::string& value) {
  
  bytesdata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Nmea2k.DataIndex.BytesData)
}
#if LANG_CXX11
inline void DataIndex::set_bytesdata(::std::string&& value) {
  
  bytesdata_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Nmea2k.DataIndex.BytesData)
}
#endif
inline void DataIndex::set_bytesdata(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  bytesdata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Nmea2k.DataIndex.BytesData)
}
inline void DataIndex::set_bytesdata(const char* value, size_t size) {
  
  bytesdata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Nmea2k.DataIndex.BytesData)
}
inline ::std::string* DataIndex::mutable_bytesdata() {
  
  // @@protoc_insertion_point(field_mutable:Nmea2k.DataIndex.BytesData)
  return bytesdata_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DataIndex::release_bytesdata() {
  // @@protoc_insertion_point(field_release:Nmea2k.DataIndex.BytesData)
  
  return bytesdata_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DataIndex::set_allocated_bytesdata(::std::string* bytesdata) {
  if (bytesdata != NULL) {
    
  } else {
    
  }
  bytesdata_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), bytesdata);
  // @@protoc_insertion_point(field_set_allocated:Nmea2k.DataIndex.BytesData)
}

// -------------------------------------------------------------------

// DataKey

// string Token = 1;
inline void DataKey::clear_token() {
  token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DataKey::token() const {
  // @@protoc_insertion_point(field_get:Nmea2k.DataKey.Token)
  return token_.GetNoArena();
}
inline void DataKey::set_token(const ::std::string& value) {
  
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Nmea2k.DataKey.Token)
}
#if LANG_CXX11
inline void DataKey::set_token(::std::string&& value) {
  
  token_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Nmea2k.DataKey.Token)
}
#endif
inline void DataKey::set_token(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Nmea2k.DataKey.Token)
}
inline void DataKey::set_token(const char* value, size_t size) {
  
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Nmea2k.DataKey.Token)
}
inline ::std::string* DataKey::mutable_token() {
  
  // @@protoc_insertion_point(field_mutable:Nmea2k.DataKey.Token)
  return token_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DataKey::release_token() {
  // @@protoc_insertion_point(field_release:Nmea2k.DataKey.Token)
  
  return token_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DataKey::set_allocated_token(::std::string* token) {
  if (token != NULL) {
    
  } else {
    
  }
  token_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), token);
  // @@protoc_insertion_point(field_set_allocated:Nmea2k.DataKey.Token)
}

// bool Valid = 2;
inline void DataKey::clear_valid() {
  valid_ = false;
}
inline bool DataKey::valid() const {
  // @@protoc_insertion_point(field_get:Nmea2k.DataKey.Valid)
  return valid_;
}
inline void DataKey::set_valid(bool value) {
  
  valid_ = value;
  // @@protoc_insertion_point(field_set:Nmea2k.DataKey.Valid)
}

// uint32 Key = 3;
inline void DataKey::clear_key() {
  key_ = 0u;
}
inline ::google::protobuf::uint32 DataKey::key() const {
  // @@protoc_insertion_point(field_get:Nmea2k.DataKey.Key)
  return key_;
}
inline void DataKey::set_key(::google::protobuf::uint32 value) {
  
  key_ = value;
  // @@protoc_insertion_point(field_set:Nmea2k.DataKey.Key)
}

// -------------------------------------------------------------------

// MonitoringDataLimits

// bool Valid = 1;
inline void MonitoringDataLimits::clear_valid() {
  valid_ = false;
}
inline bool MonitoringDataLimits::valid() const {
  // @@protoc_insertion_point(field_get:Nmea2k.MonitoringDataLimits.Valid)
  return valid_;
}
inline void MonitoringDataLimits::set_valid(bool value) {
  
  valid_ = value;
  // @@protoc_insertion_point(field_set:Nmea2k.MonitoringDataLimits.Valid)
}

// float Min = 2;
inline void MonitoringDataLimits::clear_min() {
  min_ = 0;
}
inline float MonitoringDataLimits::min() const {
  // @@protoc_insertion_point(field_get:Nmea2k.MonitoringDataLimits.Min)
  return min_;
}
inline void MonitoringDataLimits::set_min(float value) {
  
  min_ = value;
  // @@protoc_insertion_point(field_set:Nmea2k.MonitoringDataLimits.Min)
}

// float Max = 3;
inline void MonitoringDataLimits::clear_max() {
  max_ = 0;
}
inline float MonitoringDataLimits::max() const {
  // @@protoc_insertion_point(field_get:Nmea2k.MonitoringDataLimits.Max)
  return max_;
}
inline void MonitoringDataLimits::set_max(float value) {
  
  max_ = value;
  // @@protoc_insertion_point(field_set:Nmea2k.MonitoringDataLimits.Max)
}

// float WarnLow = 4;
inline void MonitoringDataLimits::clear_warnlow() {
  warnlow_ = 0;
}
inline float MonitoringDataLimits::warnlow() const {
  // @@protoc_insertion_point(field_get:Nmea2k.MonitoringDataLimits.WarnLow)
  return warnlow_;
}
inline void MonitoringDataLimits::set_warnlow(float value) {
  
  warnlow_ = value;
  // @@protoc_insertion_point(field_set:Nmea2k.MonitoringDataLimits.WarnLow)
}

// float WarnHigh = 5;
inline void MonitoringDataLimits::clear_warnhigh() {
  warnhigh_ = 0;
}
inline float MonitoringDataLimits::warnhigh() const {
  // @@protoc_insertion_point(field_get:Nmea2k.MonitoringDataLimits.WarnHigh)
  return warnhigh_;
}
inline void MonitoringDataLimits::set_warnhigh(float value) {
  
  warnhigh_ = value;
  // @@protoc_insertion_point(field_set:Nmea2k.MonitoringDataLimits.WarnHigh)
}

// -------------------------------------------------------------------

// MonitoringData

// bool Valid = 1;
inline void MonitoringData::clear_valid() {
  valid_ = false;
}
inline bool MonitoringData::valid() const {
  // @@protoc_insertion_point(field_get:Nmea2k.MonitoringData.Valid)
  return valid_;
}
inline void MonitoringData::set_valid(bool value) {
  
  valid_ = value;
  // @@protoc_insertion_point(field_set:Nmea2k.MonitoringData.Valid)
}

// float Value = 2;
inline void MonitoringData::clear_value() {
  value_ = 0;
}
inline float MonitoringData::value() const {
  // @@protoc_insertion_point(field_get:Nmea2k.MonitoringData.Value)
  return value_;
}
inline void MonitoringData::set_value(float value) {
  
  value_ = value;
  // @@protoc_insertion_point(field_set:Nmea2k.MonitoringData.Value)
}

// -------------------------------------------------------------------

// ConnectRequest

// string ConnectString = 1;
inline void ConnectRequest::clear_connectstring() {
  connectstring_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ConnectRequest::connectstring() const {
  // @@protoc_insertion_point(field_get:Nmea2k.ConnectRequest.ConnectString)
  return connectstring_.GetNoArena();
}
inline void ConnectRequest::set_connectstring(const ::std::string& value) {
  
  connectstring_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Nmea2k.ConnectRequest.ConnectString)
}
#if LANG_CXX11
inline void ConnectRequest::set_connectstring(::std::string&& value) {
  
  connectstring_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Nmea2k.ConnectRequest.ConnectString)
}
#endif
inline void ConnectRequest::set_connectstring(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  connectstring_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Nmea2k.ConnectRequest.ConnectString)
}
inline void ConnectRequest::set_connectstring(const char* value, size_t size) {
  
  connectstring_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Nmea2k.ConnectRequest.ConnectString)
}
inline ::std::string* ConnectRequest::mutable_connectstring() {
  
  // @@protoc_insertion_point(field_mutable:Nmea2k.ConnectRequest.ConnectString)
  return connectstring_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ConnectRequest::release_connectstring() {
  // @@protoc_insertion_point(field_release:Nmea2k.ConnectRequest.ConnectString)
  
  return connectstring_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ConnectRequest::set_allocated_connectstring(::std::string* connectstring) {
  if (connectstring != NULL) {
    
  } else {
    
  }
  connectstring_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), connectstring);
  // @@protoc_insertion_point(field_set_allocated:Nmea2k.ConnectRequest.ConnectString)
}

// -------------------------------------------------------------------

// Token

// string Value = 1;
inline void Token::clear_value() {
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Token::value() const {
  // @@protoc_insertion_point(field_get:Nmea2k.Token.Value)
  return value_.GetNoArena();
}
inline void Token::set_value(const ::std::string& value) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Nmea2k.Token.Value)
}
#if LANG_CXX11
inline void Token::set_value(::std::string&& value) {
  
  value_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Nmea2k.Token.Value)
}
#endif
inline void Token::set_value(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Nmea2k.Token.Value)
}
inline void Token::set_value(const char* value, size_t size) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Nmea2k.Token.Value)
}
inline ::std::string* Token::mutable_value() {
  
  // @@protoc_insertion_point(field_mutable:Nmea2k.Token.Value)
  return value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Token::release_value() {
  // @@protoc_insertion_point(field_release:Nmea2k.Token.Value)
  
  return value_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Token::set_allocated_value(::std::string* value) {
  if (value != NULL) {
    
  } else {
    
  }
  value_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set_allocated:Nmea2k.Token.Value)
}

// bool Result = 2;
inline void Token::clear_result() {
  result_ = false;
}
inline bool Token::result() const {
  // @@protoc_insertion_point(field_get:Nmea2k.Token.Result)
  return result_;
}
inline void Token::set_result(bool value) {
  
  result_ = value;
  // @@protoc_insertion_point(field_set:Nmea2k.Token.Result)
}

// -------------------------------------------------------------------

// Authentication

// string User = 1;
inline void Authentication::clear_user() {
  user_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Authentication::user() const {
  // @@protoc_insertion_point(field_get:Nmea2k.Authentication.User)
  return user_.GetNoArena();
}
inline void Authentication::set_user(const ::std::string& value) {
  
  user_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Nmea2k.Authentication.User)
}
#if LANG_CXX11
inline void Authentication::set_user(::std::string&& value) {
  
  user_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Nmea2k.Authentication.User)
}
#endif
inline void Authentication::set_user(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  user_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Nmea2k.Authentication.User)
}
inline void Authentication::set_user(const char* value, size_t size) {
  
  user_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Nmea2k.Authentication.User)
}
inline ::std::string* Authentication::mutable_user() {
  
  // @@protoc_insertion_point(field_mutable:Nmea2k.Authentication.User)
  return user_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Authentication::release_user() {
  // @@protoc_insertion_point(field_release:Nmea2k.Authentication.User)
  
  return user_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Authentication::set_allocated_user(::std::string* user) {
  if (user != NULL) {
    
  } else {
    
  }
  user_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), user);
  // @@protoc_insertion_point(field_set_allocated:Nmea2k.Authentication.User)
}

// string Password = 2;
inline void Authentication::clear_password() {
  password_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Authentication::password() const {
  // @@protoc_insertion_point(field_get:Nmea2k.Authentication.Password)
  return password_.GetNoArena();
}
inline void Authentication::set_password(const ::std::string& value) {
  
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Nmea2k.Authentication.Password)
}
#if LANG_CXX11
inline void Authentication::set_password(::std::string&& value) {
  
  password_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Nmea2k.Authentication.Password)
}
#endif
inline void Authentication::set_password(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Nmea2k.Authentication.Password)
}
inline void Authentication::set_password(const char* value, size_t size) {
  
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Nmea2k.Authentication.Password)
}
inline ::std::string* Authentication::mutable_password() {
  
  // @@protoc_insertion_point(field_mutable:Nmea2k.Authentication.Password)
  return password_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Authentication::release_password() {
  // @@protoc_insertion_point(field_release:Nmea2k.Authentication.Password)
  
  return password_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Authentication::set_allocated_password(::std::string* password) {
  if (password != NULL) {
    
  } else {
    
  }
  password_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), password);
  // @@protoc_insertion_point(field_set_allocated:Nmea2k.Authentication.Password)
}

// -------------------------------------------------------------------

// AlarmGlobalStatus

// .Nmea2k.Alarm.eSeverityType HighestEnabledSeverity = 1;
inline void AlarmGlobalStatus::clear_highestenabledseverity() {
  highestenabledseverity_ = 0;
}
inline ::Nmea2k::Alarm_eSeverityType AlarmGlobalStatus::highestenabledseverity() const {
  // @@protoc_insertion_point(field_get:Nmea2k.AlarmGlobalStatus.HighestEnabledSeverity)
  return static_cast< ::Nmea2k::Alarm_eSeverityType >(highestenabledseverity_);
}
inline void AlarmGlobalStatus::set_highestenabledseverity(::Nmea2k::Alarm_eSeverityType value) {
  
  highestenabledseverity_ = value;
  // @@protoc_insertion_point(field_set:Nmea2k.AlarmGlobalStatus.HighestEnabledSeverity)
}

// .Nmea2k.Alarm.eSeverityType HighestAcknowledgedSeverity = 2;
inline void AlarmGlobalStatus::clear_highestacknowledgedseverity() {
  highestacknowledgedseverity_ = 0;
}
inline ::Nmea2k::Alarm_eSeverityType AlarmGlobalStatus::highestacknowledgedseverity() const {
  // @@protoc_insertion_point(field_get:Nmea2k.AlarmGlobalStatus.HighestAcknowledgedSeverity)
  return static_cast< ::Nmea2k::Alarm_eSeverityType >(highestacknowledgedseverity_);
}
inline void AlarmGlobalStatus::set_highestacknowledgedseverity(::Nmea2k::Alarm_eSeverityType value) {
  
  highestacknowledgedseverity_ = value;
  // @@protoc_insertion_point(field_set:Nmea2k.AlarmGlobalStatus.HighestAcknowledgedSeverity)
}

// -------------------------------------------------------------------

// AlarmEvent

// .Nmea2k.AlarmEvent.eActionType ActionType = 1;
inline void AlarmEvent::clear_actiontype() {
  actiontype_ = 0;
}
inline ::Nmea2k::AlarmEvent_eActionType AlarmEvent::actiontype() const {
  // @@protoc_insertion_point(field_get:Nmea2k.AlarmEvent.ActionType)
  return static_cast< ::Nmea2k::AlarmEvent_eActionType >(actiontype_);
}
inline void AlarmEvent::set_actiontype(::Nmea2k::AlarmEvent_eActionType value) {
  
  actiontype_ = value;
  // @@protoc_insertion_point(field_set:Nmea2k.AlarmEvent.ActionType)
}

// string Event = 2;
inline void AlarmEvent::clear_event() {
  event_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& AlarmEvent::event() const {
  // @@protoc_insertion_point(field_get:Nmea2k.AlarmEvent.Event)
  return event_.GetNoArena();
}
inline void AlarmEvent::set_event(const ::std::string& value) {
  
  event_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Nmea2k.AlarmEvent.Event)
}
#if LANG_CXX11
inline void AlarmEvent::set_event(::std::string&& value) {
  
  event_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Nmea2k.AlarmEvent.Event)
}
#endif
inline void AlarmEvent::set_event(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  event_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Nmea2k.AlarmEvent.Event)
}
inline void AlarmEvent::set_event(const char* value, size_t size) {
  
  event_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Nmea2k.AlarmEvent.Event)
}
inline ::std::string* AlarmEvent::mutable_event() {
  
  // @@protoc_insertion_point(field_mutable:Nmea2k.AlarmEvent.Event)
  return event_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AlarmEvent::release_event() {
  // @@protoc_insertion_point(field_release:Nmea2k.AlarmEvent.Event)
  
  return event_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AlarmEvent::set_allocated_event(::std::string* event) {
  if (event != NULL) {
    
  } else {
    
  }
  event_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), event);
  // @@protoc_insertion_point(field_set_allocated:Nmea2k.AlarmEvent.Event)
}

// -------------------------------------------------------------------

// AlarmsList

// repeated .Nmea2k.Alarm Alarms = 1;
inline int AlarmsList::alarms_size() const {
  return alarms_.size();
}
inline void AlarmsList::clear_alarms() {
  alarms_.Clear();
}
inline ::Nmea2k::Alarm* AlarmsList::mutable_alarms(int index) {
  // @@protoc_insertion_point(field_mutable:Nmea2k.AlarmsList.Alarms)
  return alarms_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::Nmea2k::Alarm >*
AlarmsList::mutable_alarms() {
  // @@protoc_insertion_point(field_mutable_list:Nmea2k.AlarmsList.Alarms)
  return &alarms_;
}
inline const ::Nmea2k::Alarm& AlarmsList::alarms(int index) const {
  // @@protoc_insertion_point(field_get:Nmea2k.AlarmsList.Alarms)
  return alarms_.Get(index);
}
inline ::Nmea2k::Alarm* AlarmsList::add_alarms() {
  // @@protoc_insertion_point(field_add:Nmea2k.AlarmsList.Alarms)
  return alarms_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Nmea2k::Alarm >&
AlarmsList::alarms() const {
  // @@protoc_insertion_point(field_list:Nmea2k.AlarmsList.Alarms)
  return alarms_;
}

// -------------------------------------------------------------------

// AlarmString

// string Item = 1;
inline void AlarmString::clear_item() {
  item_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& AlarmString::item() const {
  // @@protoc_insertion_point(field_get:Nmea2k.AlarmString.Item)
  return item_.GetNoArena();
}
inline void AlarmString::set_item(const ::std::string& value) {
  
  item_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Nmea2k.AlarmString.Item)
}
#if LANG_CXX11
inline void AlarmString::set_item(::std::string&& value) {
  
  item_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Nmea2k.AlarmString.Item)
}
#endif
inline void AlarmString::set_item(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  item_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Nmea2k.AlarmString.Item)
}
inline void AlarmString::set_item(const char* value, size_t size) {
  
  item_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Nmea2k.AlarmString.Item)
}
inline ::std::string* AlarmString::mutable_item() {
  
  // @@protoc_insertion_point(field_mutable:Nmea2k.AlarmString.Item)
  return item_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AlarmString::release_item() {
  // @@protoc_insertion_point(field_release:Nmea2k.AlarmString.Item)
  
  return item_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AlarmString::set_allocated_item(::std::string* item) {
  if (item != NULL) {
    
  } else {
    
  }
  item_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), item);
  // @@protoc_insertion_point(field_set_allocated:Nmea2k.AlarmString.Item)
}

// -------------------------------------------------------------------

// UnacknowledgedAlarm

// bool Valid = 1;
inline void UnacknowledgedAlarm::clear_valid() {
  valid_ = false;
}
inline bool UnacknowledgedAlarm::valid() const {
  // @@protoc_insertion_point(field_get:Nmea2k.UnacknowledgedAlarm.Valid)
  return valid_;
}
inline void UnacknowledgedAlarm::set_valid(bool value) {
  
  valid_ = value;
  // @@protoc_insertion_point(field_set:Nmea2k.UnacknowledgedAlarm.Valid)
}

// .Nmea2k.Alarm Content = 2;
inline bool UnacknowledgedAlarm::has_content() const {
  return this != internal_default_instance() && content_ != NULL;
}
inline void UnacknowledgedAlarm::clear_content() {
  if (GetArenaNoVirtual() == NULL && content_ != NULL) {
    delete content_;
  }
  content_ = NULL;
}
inline const ::Nmea2k::Alarm& UnacknowledgedAlarm::_internal_content() const {
  return *content_;
}
inline const ::Nmea2k::Alarm& UnacknowledgedAlarm::content() const {
  const ::Nmea2k::Alarm* p = content_;
  // @@protoc_insertion_point(field_get:Nmea2k.UnacknowledgedAlarm.Content)
  return p != NULL ? *p : *reinterpret_cast<const ::Nmea2k::Alarm*>(
      &::Nmea2k::_Alarm_default_instance_);
}
inline ::Nmea2k::Alarm* UnacknowledgedAlarm::release_content() {
  // @@protoc_insertion_point(field_release:Nmea2k.UnacknowledgedAlarm.Content)
  
  ::Nmea2k::Alarm* temp = content_;
  content_ = NULL;
  return temp;
}
inline ::Nmea2k::Alarm* UnacknowledgedAlarm::mutable_content() {
  
  if (content_ == NULL) {
    auto* p = CreateMaybeMessage<::Nmea2k::Alarm>(GetArenaNoVirtual());
    content_ = p;
  }
  // @@protoc_insertion_point(field_mutable:Nmea2k.UnacknowledgedAlarm.Content)
  return content_;
}
inline void UnacknowledgedAlarm::set_allocated_content(::Nmea2k::Alarm* content) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete content_;
  }
  if (content) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      content = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, content, submessage_arena);
    }
    
  } else {
    
  }
  content_ = content;
  // @@protoc_insertion_point(field_set_allocated:Nmea2k.UnacknowledgedAlarm.Content)
}

// -------------------------------------------------------------------

// AlarmRequest

// uint32 Id = 1;
inline void AlarmRequest::clear_id() {
  id_ = 0u;
}
inline ::google::protobuf::uint32 AlarmRequest::id() const {
  // @@protoc_insertion_point(field_get:Nmea2k.AlarmRequest.Id)
  return id_;
}
inline void AlarmRequest::set_id(::google::protobuf::uint32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:Nmea2k.AlarmRequest.Id)
}

// bool Accepted = 2;
inline void AlarmRequest::clear_accepted() {
  accepted_ = false;
}
inline bool AlarmRequest::accepted() const {
  // @@protoc_insertion_point(field_get:Nmea2k.AlarmRequest.Accepted)
  return accepted_;
}
inline void AlarmRequest::set_accepted(bool value) {
  
  accepted_ = value;
  // @@protoc_insertion_point(field_set:Nmea2k.AlarmRequest.Accepted)
}

// .Nmea2k.Alarm.eSeverityType Severity = 3;
inline void AlarmRequest::clear_severity() {
  severity_ = 0;
}
inline ::Nmea2k::Alarm_eSeverityType AlarmRequest::severity() const {
  // @@protoc_insertion_point(field_get:Nmea2k.AlarmRequest.Severity)
  return static_cast< ::Nmea2k::Alarm_eSeverityType >(severity_);
}
inline void AlarmRequest::set_severity(::Nmea2k::Alarm_eSeverityType value) {
  
  severity_ = value;
  // @@protoc_insertion_point(field_set:Nmea2k.AlarmRequest.Severity)
}

// uint32 Length = 4;
inline void AlarmRequest::clear_length() {
  length_ = 0u;
}
inline ::google::protobuf::uint32 AlarmRequest::length() const {
  // @@protoc_insertion_point(field_get:Nmea2k.AlarmRequest.Length)
  return length_;
}
inline void AlarmRequest::set_length(::google::protobuf::uint32 value) {
  
  length_ = value;
  // @@protoc_insertion_point(field_set:Nmea2k.AlarmRequest.Length)
}

// .Nmea2k.AlarmRequest.eAlarmStringType StringType = 5;
inline void AlarmRequest::clear_stringtype() {
  stringtype_ = 0;
}
inline ::Nmea2k::AlarmRequest_eAlarmStringType AlarmRequest::stringtype() const {
  // @@protoc_insertion_point(field_get:Nmea2k.AlarmRequest.StringType)
  return static_cast< ::Nmea2k::AlarmRequest_eAlarmStringType >(stringtype_);
}
inline void AlarmRequest::set_stringtype(::Nmea2k::AlarmRequest_eAlarmStringType value) {
  
  stringtype_ = value;
  // @@protoc_insertion_point(field_set:Nmea2k.AlarmRequest.StringType)
}

// repeated uint32 IdsForUnacknowledged = 6;
inline int AlarmRequest::idsforunacknowledged_size() const {
  return idsforunacknowledged_.size();
}
inline void AlarmRequest::clear_idsforunacknowledged() {
  idsforunacknowledged_.Clear();
}
inline ::google::protobuf::uint32 AlarmRequest::idsforunacknowledged(int index) const {
  // @@protoc_insertion_point(field_get:Nmea2k.AlarmRequest.IdsForUnacknowledged)
  return idsforunacknowledged_.Get(index);
}
inline void AlarmRequest::set_idsforunacknowledged(int index, ::google::protobuf::uint32 value) {
  idsforunacknowledged_.Set(index, value);
  // @@protoc_insertion_point(field_set:Nmea2k.AlarmRequest.IdsForUnacknowledged)
}
inline void AlarmRequest::add_idsforunacknowledged(::google::protobuf::uint32 value) {
  idsforunacknowledged_.Add(value);
  // @@protoc_insertion_point(field_add:Nmea2k.AlarmRequest.IdsForUnacknowledged)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
AlarmRequest::idsforunacknowledged() const {
  // @@protoc_insertion_point(field_list:Nmea2k.AlarmRequest.IdsForUnacknowledged)
  return idsforunacknowledged_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
AlarmRequest::mutable_idsforunacknowledged() {
  // @@protoc_insertion_point(field_mutable_list:Nmea2k.AlarmRequest.IdsForUnacknowledged)
  return &idsforunacknowledged_;
}

// bool IsLog = 7;
inline void AlarmRequest::clear_islog() {
  islog_ = false;
}
inline bool AlarmRequest::islog() const {
  // @@protoc_insertion_point(field_get:Nmea2k.AlarmRequest.IsLog)
  return islog_;
}
inline void AlarmRequest::set_islog(bool value) {
  
  islog_ = value;
  // @@protoc_insertion_point(field_set:Nmea2k.AlarmRequest.IsLog)
}

// string Token = 8;
inline void AlarmRequest::clear_token() {
  token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& AlarmRequest::token() const {
  // @@protoc_insertion_point(field_get:Nmea2k.AlarmRequest.Token)
  return token_.GetNoArena();
}
inline void AlarmRequest::set_token(const ::std::string& value) {
  
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Nmea2k.AlarmRequest.Token)
}
#if LANG_CXX11
inline void AlarmRequest::set_token(::std::string&& value) {
  
  token_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Nmea2k.AlarmRequest.Token)
}
#endif
inline void AlarmRequest::set_token(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Nmea2k.AlarmRequest.Token)
}
inline void AlarmRequest::set_token(const char* value, size_t size) {
  
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Nmea2k.AlarmRequest.Token)
}
inline ::std::string* AlarmRequest::mutable_token() {
  
  // @@protoc_insertion_point(field_mutable:Nmea2k.AlarmRequest.Token)
  return token_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AlarmRequest::release_token() {
  // @@protoc_insertion_point(field_release:Nmea2k.AlarmRequest.Token)
  
  return token_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AlarmRequest::set_allocated_token(::std::string* token) {
  if (token != NULL) {
    
  } else {
    
  }
  token_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), token);
  // @@protoc_insertion_point(field_set_allocated:Nmea2k.AlarmRequest.Token)
}

// bool CZoneRaw = 9;
inline void AlarmRequest::clear_czoneraw() {
  czoneraw_ = false;
}
inline bool AlarmRequest::czoneraw() const {
  // @@protoc_insertion_point(field_get:Nmea2k.AlarmRequest.CZoneRaw)
  return czoneraw_;
}
inline void AlarmRequest::set_czoneraw(bool value) {
  
  czoneraw_ = value;
  // @@protoc_insertion_point(field_set:Nmea2k.AlarmRequest.CZoneRaw)
}

// -------------------------------------------------------------------

// CategoryRequest

// .Nmea2k.CategoryRequest.eCategoryType type = 1;
inline void CategoryRequest::clear_type() {
  type_ = 0;
}
inline ::Nmea2k::CategoryRequest_eCategoryType CategoryRequest::type() const {
  // @@protoc_insertion_point(field_get:Nmea2k.CategoryRequest.type)
  return static_cast< ::Nmea2k::CategoryRequest_eCategoryType >(type_);
}
inline void CategoryRequest::set_type(::Nmea2k::CategoryRequest_eCategoryType value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:Nmea2k.CategoryRequest.type)
}

// string Token = 2;
inline void CategoryRequest::clear_token() {
  token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CategoryRequest::token() const {
  // @@protoc_insertion_point(field_get:Nmea2k.CategoryRequest.Token)
  return token_.GetNoArena();
}
inline void CategoryRequest::set_token(const ::std::string& value) {
  
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Nmea2k.CategoryRequest.Token)
}
#if LANG_CXX11
inline void CategoryRequest::set_token(::std::string&& value) {
  
  token_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Nmea2k.CategoryRequest.Token)
}
#endif
inline void CategoryRequest::set_token(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Nmea2k.CategoryRequest.Token)
}
inline void CategoryRequest::set_token(const char* value, size_t size) {
  
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Nmea2k.CategoryRequest.Token)
}
inline ::std::string* CategoryRequest::mutable_token() {
  
  // @@protoc_insertion_point(field_mutable:Nmea2k.CategoryRequest.Token)
  return token_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CategoryRequest::release_token() {
  // @@protoc_insertion_point(field_release:Nmea2k.CategoryRequest.Token)
  
  return token_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CategoryRequest::set_allocated_token(::std::string* token) {
  if (token != NULL) {
    
  } else {
    
  }
  token_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), token);
  // @@protoc_insertion_point(field_set_allocated:Nmea2k.CategoryRequest.Token)
}

// -------------------------------------------------------------------

// CategoryItem

// string NameUTF8 = 1;
inline void CategoryItem::clear_nameutf8() {
  nameutf8_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CategoryItem::nameutf8() const {
  // @@protoc_insertion_point(field_get:Nmea2k.CategoryItem.NameUTF8)
  return nameutf8_.GetNoArena();
}
inline void CategoryItem::set_nameutf8(const ::std::string& value) {
  
  nameutf8_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Nmea2k.CategoryItem.NameUTF8)
}
#if LANG_CXX11
inline void CategoryItem::set_nameutf8(::std::string&& value) {
  
  nameutf8_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Nmea2k.CategoryItem.NameUTF8)
}
#endif
inline void CategoryItem::set_nameutf8(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  nameutf8_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Nmea2k.CategoryItem.NameUTF8)
}
inline void CategoryItem::set_nameutf8(const char* value, size_t size) {
  
  nameutf8_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Nmea2k.CategoryItem.NameUTF8)
}
inline ::std::string* CategoryItem::mutable_nameutf8() {
  
  // @@protoc_insertion_point(field_mutable:Nmea2k.CategoryItem.NameUTF8)
  return nameutf8_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CategoryItem::release_nameutf8() {
  // @@protoc_insertion_point(field_release:Nmea2k.CategoryItem.NameUTF8)
  
  return nameutf8_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CategoryItem::set_allocated_nameutf8(::std::string* nameutf8) {
  if (nameutf8 != NULL) {
    
  } else {
    
  }
  nameutf8_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), nameutf8);
  // @@protoc_insertion_point(field_set_allocated:Nmea2k.CategoryItem.NameUTF8)
}

// bool Enabled = 2;
inline void CategoryItem::clear_enabled() {
  enabled_ = false;
}
inline bool CategoryItem::enabled() const {
  // @@protoc_insertion_point(field_get:Nmea2k.CategoryItem.Enabled)
  return enabled_;
}
inline void CategoryItem::set_enabled(bool value) {
  
  enabled_ = value;
  // @@protoc_insertion_point(field_set:Nmea2k.CategoryItem.Enabled)
}

// uint32 Index = 3;
inline void CategoryItem::clear_index() {
  index_ = 0u;
}
inline ::google::protobuf::uint32 CategoryItem::index() const {
  // @@protoc_insertion_point(field_get:Nmea2k.CategoryItem.Index)
  return index_;
}
inline void CategoryItem::set_index(::google::protobuf::uint32 value) {
  
  index_ = value;
  // @@protoc_insertion_point(field_set:Nmea2k.CategoryItem.Index)
}

// -------------------------------------------------------------------

// Categories

// repeated .Nmea2k.CategoryItem Items = 1;
inline int Categories::items_size() const {
  return items_.size();
}
inline void Categories::clear_items() {
  items_.Clear();
}
inline ::Nmea2k::CategoryItem* Categories::mutable_items(int index) {
  // @@protoc_insertion_point(field_mutable:Nmea2k.Categories.Items)
  return items_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::Nmea2k::CategoryItem >*
Categories::mutable_items() {
  // @@protoc_insertion_point(field_mutable_list:Nmea2k.Categories.Items)
  return &items_;
}
inline const ::Nmea2k::CategoryItem& Categories::items(int index) const {
  // @@protoc_insertion_point(field_get:Nmea2k.Categories.Items)
  return items_.Get(index);
}
inline ::Nmea2k::CategoryItem* Categories::add_items() {
  // @@protoc_insertion_point(field_add:Nmea2k.Categories.Items)
  return items_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Nmea2k::CategoryItem >&
Categories::items() const {
  // @@protoc_insertion_point(field_list:Nmea2k.Categories.Items)
  return items_;
}

// -------------------------------------------------------------------

// FileRequest

// .Nmea2k.FileRequest.eFileType Type = 1;
inline void FileRequest::clear_type() {
  type_ = 0;
}
inline ::Nmea2k::FileRequest_eFileType FileRequest::type() const {
  // @@protoc_insertion_point(field_get:Nmea2k.FileRequest.Type)
  return static_cast< ::Nmea2k::FileRequest_eFileType >(type_);
}
inline void FileRequest::set_type(::Nmea2k::FileRequest_eFileType value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:Nmea2k.FileRequest.Type)
}

// bytes Content = 2;
inline void FileRequest::clear_content() {
  content_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& FileRequest::content() const {
  // @@protoc_insertion_point(field_get:Nmea2k.FileRequest.Content)
  return content_.GetNoArena();
}
inline void FileRequest::set_content(const ::std::string& value) {
  
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Nmea2k.FileRequest.Content)
}
#if LANG_CXX11
inline void FileRequest::set_content(::std::string&& value) {
  
  content_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Nmea2k.FileRequest.Content)
}
#endif
inline void FileRequest::set_content(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Nmea2k.FileRequest.Content)
}
inline void FileRequest::set_content(const void* value, size_t size) {
  
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Nmea2k.FileRequest.Content)
}
inline ::std::string* FileRequest::mutable_content() {
  
  // @@protoc_insertion_point(field_mutable:Nmea2k.FileRequest.Content)
  return content_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FileRequest::release_content() {
  // @@protoc_insertion_point(field_release:Nmea2k.FileRequest.Content)
  
  return content_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FileRequest::set_allocated_content(::std::string* content) {
  if (content != NULL) {
    
  } else {
    
  }
  content_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), content);
  // @@protoc_insertion_point(field_set_allocated:Nmea2k.FileRequest.Content)
}

// bool Done = 3;
inline void FileRequest::clear_done() {
  done_ = false;
}
inline bool FileRequest::done() const {
  // @@protoc_insertion_point(field_get:Nmea2k.FileRequest.Done)
  return done_;
}
inline void FileRequest::set_done(bool value) {
  
  done_ = value;
  // @@protoc_insertion_point(field_set:Nmea2k.FileRequest.Done)
}

// string Token = 4;
inline void FileRequest::clear_token() {
  token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& FileRequest::token() const {
  // @@protoc_insertion_point(field_get:Nmea2k.FileRequest.Token)
  return token_.GetNoArena();
}
inline void FileRequest::set_token(const ::std::string& value) {
  
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Nmea2k.FileRequest.Token)
}
#if LANG_CXX11
inline void FileRequest::set_token(::std::string&& value) {
  
  token_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Nmea2k.FileRequest.Token)
}
#endif
inline void FileRequest::set_token(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Nmea2k.FileRequest.Token)
}
inline void FileRequest::set_token(const char* value, size_t size) {
  
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Nmea2k.FileRequest.Token)
}
inline ::std::string* FileRequest::mutable_token() {
  
  // @@protoc_insertion_point(field_mutable:Nmea2k.FileRequest.Token)
  return token_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FileRequest::release_token() {
  // @@protoc_insertion_point(field_release:Nmea2k.FileRequest.Token)
  
  return token_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FileRequest::set_allocated_token(::std::string* token) {
  if (token != NULL) {
    
  } else {
    
  }
  token_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), token);
  // @@protoc_insertion_point(field_set_allocated:Nmea2k.FileRequest.Token)
}

// .Nmea2k.FileRequest.eResourceType ResourceType = 5;
inline void FileRequest::clear_resourcetype() {
  resourcetype_ = 0;
}
inline ::Nmea2k::FileRequest_eResourceType FileRequest::resourcetype() const {
  // @@protoc_insertion_point(field_get:Nmea2k.FileRequest.ResourceType)
  return static_cast< ::Nmea2k::FileRequest_eResourceType >(resourcetype_);
}
inline void FileRequest::set_resourcetype(::Nmea2k::FileRequest_eResourceType value) {
  
  resourcetype_ = value;
  // @@protoc_insertion_point(field_set:Nmea2k.FileRequest.ResourceType)
}

// string ResourceFile = 6;
inline void FileRequest::clear_resourcefile() {
  resourcefile_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& FileRequest::resourcefile() const {
  // @@protoc_insertion_point(field_get:Nmea2k.FileRequest.ResourceFile)
  return resourcefile_.GetNoArena();
}
inline void FileRequest::set_resourcefile(const ::std::string& value) {
  
  resourcefile_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Nmea2k.FileRequest.ResourceFile)
}
#if LANG_CXX11
inline void FileRequest::set_resourcefile(::std::string&& value) {
  
  resourcefile_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Nmea2k.FileRequest.ResourceFile)
}
#endif
inline void FileRequest::set_resourcefile(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  resourcefile_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Nmea2k.FileRequest.ResourceFile)
}
inline void FileRequest::set_resourcefile(const char* value, size_t size) {
  
  resourcefile_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Nmea2k.FileRequest.ResourceFile)
}
inline ::std::string* FileRequest::mutable_resourcefile() {
  
  // @@protoc_insertion_point(field_mutable:Nmea2k.FileRequest.ResourceFile)
  return resourcefile_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FileRequest::release_resourcefile() {
  // @@protoc_insertion_point(field_release:Nmea2k.FileRequest.ResourceFile)
  
  return resourcefile_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FileRequest::set_allocated_resourcefile(::std::string* resourcefile) {
  if (resourcefile != NULL) {
    
  } else {
    
  }
  resourcefile_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), resourcefile);
  // @@protoc_insertion_point(field_set_allocated:Nmea2k.FileRequest.ResourceFile)
}

// -------------------------------------------------------------------

// FileResult

// .Nmea2k.FileResult.eFileStatus Status = 1;
inline void FileResult::clear_status() {
  status_ = 0;
}
inline ::Nmea2k::FileResult_eFileStatus FileResult::status() const {
  // @@protoc_insertion_point(field_get:Nmea2k.FileResult.Status)
  return static_cast< ::Nmea2k::FileResult_eFileStatus >(status_);
}
inline void FileResult::set_status(::Nmea2k::FileResult_eFileStatus value) {
  
  status_ = value;
  // @@protoc_insertion_point(field_set:Nmea2k.FileResult.Status)
}

// -------------------------------------------------------------------

// File

// .Nmea2k.FileResult Result = 1;
inline bool File::has_result() const {
  return this != internal_default_instance() && result_ != NULL;
}
inline void File::clear_result() {
  if (GetArenaNoVirtual() == NULL && result_ != NULL) {
    delete result_;
  }
  result_ = NULL;
}
inline const ::Nmea2k::FileResult& File::_internal_result() const {
  return *result_;
}
inline const ::Nmea2k::FileResult& File::result() const {
  const ::Nmea2k::FileResult* p = result_;
  // @@protoc_insertion_point(field_get:Nmea2k.File.Result)
  return p != NULL ? *p : *reinterpret_cast<const ::Nmea2k::FileResult*>(
      &::Nmea2k::_FileResult_default_instance_);
}
inline ::Nmea2k::FileResult* File::release_result() {
  // @@protoc_insertion_point(field_release:Nmea2k.File.Result)
  
  ::Nmea2k::FileResult* temp = result_;
  result_ = NULL;
  return temp;
}
inline ::Nmea2k::FileResult* File::mutable_result() {
  
  if (result_ == NULL) {
    auto* p = CreateMaybeMessage<::Nmea2k::FileResult>(GetArenaNoVirtual());
    result_ = p;
  }
  // @@protoc_insertion_point(field_mutable:Nmea2k.File.Result)
  return result_;
}
inline void File::set_allocated_result(::Nmea2k::FileResult* result) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete result_;
  }
  if (result) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      result = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, result, submessage_arena);
    }
    
  } else {
    
  }
  result_ = result;
  // @@protoc_insertion_point(field_set_allocated:Nmea2k.File.Result)
}

// bytes Content = 2;
inline void File::clear_content() {
  content_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& File::content() const {
  // @@protoc_insertion_point(field_get:Nmea2k.File.Content)
  return content_.GetNoArena();
}
inline void File::set_content(const ::std::string& value) {
  
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Nmea2k.File.Content)
}
#if LANG_CXX11
inline void File::set_content(::std::string&& value) {
  
  content_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Nmea2k.File.Content)
}
#endif
inline void File::set_content(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Nmea2k.File.Content)
}
inline void File::set_content(const void* value, size_t size) {
  
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Nmea2k.File.Content)
}
inline ::std::string* File::mutable_content() {
  
  // @@protoc_insertion_point(field_mutable:Nmea2k.File.Content)
  return content_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* File::release_content() {
  // @@protoc_insertion_point(field_release:Nmea2k.File.Content)
  
  return content_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void File::set_allocated_content(::std::string* content) {
  if (content != NULL) {
    
  } else {
    
  }
  content_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), content);
  // @@protoc_insertion_point(field_set_allocated:Nmea2k.File.Content)
}

// -------------------------------------------------------------------

// CZoneRawEvent

// uint32 Type = 1;
inline void CZoneRawEvent::clear_type() {
  type_ = 0u;
}
inline ::google::protobuf::uint32 CZoneRawEvent::type() const {
  // @@protoc_insertion_point(field_get:Nmea2k.CZoneRawEvent.Type)
  return type_;
}
inline void CZoneRawEvent::set_type(::google::protobuf::uint32 value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:Nmea2k.CZoneRawEvent.Type)
}

// bytes Content = 2;
inline void CZoneRawEvent::clear_content() {
  content_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CZoneRawEvent::content() const {
  // @@protoc_insertion_point(field_get:Nmea2k.CZoneRawEvent.Content)
  return content_.GetNoArena();
}
inline void CZoneRawEvent::set_content(const ::std::string& value) {
  
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Nmea2k.CZoneRawEvent.Content)
}
#if LANG_CXX11
inline void CZoneRawEvent::set_content(::std::string&& value) {
  
  content_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Nmea2k.CZoneRawEvent.Content)
}
#endif
inline void CZoneRawEvent::set_content(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Nmea2k.CZoneRawEvent.Content)
}
inline void CZoneRawEvent::set_content(const void* value, size_t size) {
  
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Nmea2k.CZoneRawEvent.Content)
}
inline ::std::string* CZoneRawEvent::mutable_content() {
  
  // @@protoc_insertion_point(field_mutable:Nmea2k.CZoneRawEvent.Content)
  return content_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CZoneRawEvent::release_content() {
  // @@protoc_insertion_point(field_release:Nmea2k.CZoneRawEvent.Content)
  
  return content_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CZoneRawEvent::set_allocated_content(::std::string* content) {
  if (content != NULL) {
    
  } else {
    
  }
  content_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), content);
  // @@protoc_insertion_point(field_set_allocated:Nmea2k.CZoneRawEvent.Content)
}

// bytes RawAlarm = 3;
inline void CZoneRawEvent::clear_rawalarm() {
  rawalarm_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CZoneRawEvent::rawalarm() const {
  // @@protoc_insertion_point(field_get:Nmea2k.CZoneRawEvent.RawAlarm)
  return rawalarm_.GetNoArena();
}
inline void CZoneRawEvent::set_rawalarm(const ::std::string& value) {
  
  rawalarm_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Nmea2k.CZoneRawEvent.RawAlarm)
}
#if LANG_CXX11
inline void CZoneRawEvent::set_rawalarm(::std::string&& value) {
  
  rawalarm_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Nmea2k.CZoneRawEvent.RawAlarm)
}
#endif
inline void CZoneRawEvent::set_rawalarm(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  rawalarm_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Nmea2k.CZoneRawEvent.RawAlarm)
}
inline void CZoneRawEvent::set_rawalarm(const void* value, size_t size) {
  
  rawalarm_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Nmea2k.CZoneRawEvent.RawAlarm)
}
inline ::std::string* CZoneRawEvent::mutable_rawalarm() {
  
  // @@protoc_insertion_point(field_mutable:Nmea2k.CZoneRawEvent.RawAlarm)
  return rawalarm_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CZoneRawEvent::release_rawalarm() {
  // @@protoc_insertion_point(field_release:Nmea2k.CZoneRawEvent.RawAlarm)
  
  return rawalarm_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CZoneRawEvent::set_allocated_rawalarm(::std::string* rawalarm) {
  if (rawalarm != NULL) {
    
  } else {
    
  }
  rawalarm_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), rawalarm);
  // @@protoc_insertion_point(field_set_allocated:Nmea2k.CZoneRawEvent.RawAlarm)
}

// bytes DeviceItem = 4;
inline void CZoneRawEvent::clear_deviceitem() {
  deviceitem_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CZoneRawEvent::deviceitem() const {
  // @@protoc_insertion_point(field_get:Nmea2k.CZoneRawEvent.DeviceItem)
  return deviceitem_.GetNoArena();
}
inline void CZoneRawEvent::set_deviceitem(const ::std::string& value) {
  
  deviceitem_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Nmea2k.CZoneRawEvent.DeviceItem)
}
#if LANG_CXX11
inline void CZoneRawEvent::set_deviceitem(::std::string&& value) {
  
  deviceitem_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Nmea2k.CZoneRawEvent.DeviceItem)
}
#endif
inline void CZoneRawEvent::set_deviceitem(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  deviceitem_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Nmea2k.CZoneRawEvent.DeviceItem)
}
inline void CZoneRawEvent::set_deviceitem(const void* value, size_t size) {
  
  deviceitem_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Nmea2k.CZoneRawEvent.DeviceItem)
}
inline ::std::string* CZoneRawEvent::mutable_deviceitem() {
  
  // @@protoc_insertion_point(field_mutable:Nmea2k.CZoneRawEvent.DeviceItem)
  return deviceitem_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CZoneRawEvent::release_deviceitem() {
  // @@protoc_insertion_point(field_release:Nmea2k.CZoneRawEvent.DeviceItem)
  
  return deviceitem_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CZoneRawEvent::set_allocated_deviceitem(::std::string* deviceitem) {
  if (deviceitem != NULL) {
    
  } else {
    
  }
  deviceitem_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), deviceitem);
  // @@protoc_insertion_point(field_set_allocated:Nmea2k.CZoneRawEvent.DeviceItem)
}

// -------------------------------------------------------------------

// Event

// .Nmea2k.Event.eEventType Type = 1;
inline void Event::clear_type() {
  type_ = 0;
}
inline ::Nmea2k::Event_eEventType Event::type() const {
  // @@protoc_insertion_point(field_get:Nmea2k.Event.Type)
  return static_cast< ::Nmea2k::Event_eEventType >(type_);
}
inline void Event::set_type(::Nmea2k::Event_eEventType value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:Nmea2k.Event.Type)
}

// string Content = 2;
inline void Event::clear_content() {
  content_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Event::content() const {
  // @@protoc_insertion_point(field_get:Nmea2k.Event.Content)
  return content_.GetNoArena();
}
inline void Event::set_content(const ::std::string& value) {
  
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Nmea2k.Event.Content)
}
#if LANG_CXX11
inline void Event::set_content(::std::string&& value) {
  
  content_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Nmea2k.Event.Content)
}
#endif
inline void Event::set_content(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Nmea2k.Event.Content)
}
inline void Event::set_content(const char* value, size_t size) {
  
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Nmea2k.Event.Content)
}
inline ::std::string* Event::mutable_content() {
  
  // @@protoc_insertion_point(field_mutable:Nmea2k.Event.Content)
  return content_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Event::release_content() {
  // @@protoc_insertion_point(field_release:Nmea2k.Event.Content)
  
  return content_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Event::set_allocated_content(::std::string* content) {
  if (content != NULL) {
    
  } else {
    
  }
  content_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), content);
  // @@protoc_insertion_point(field_set_allocated:Nmea2k.Event.Content)
}

// .Nmea2k.Alarm AlarmItem = 3;
inline bool Event::has_alarmitem() const {
  return this != internal_default_instance() && alarmitem_ != NULL;
}
inline void Event::clear_alarmitem() {
  if (GetArenaNoVirtual() == NULL && alarmitem_ != NULL) {
    delete alarmitem_;
  }
  alarmitem_ = NULL;
}
inline const ::Nmea2k::Alarm& Event::_internal_alarmitem() const {
  return *alarmitem_;
}
inline const ::Nmea2k::Alarm& Event::alarmitem() const {
  const ::Nmea2k::Alarm* p = alarmitem_;
  // @@protoc_insertion_point(field_get:Nmea2k.Event.AlarmItem)
  return p != NULL ? *p : *reinterpret_cast<const ::Nmea2k::Alarm*>(
      &::Nmea2k::_Alarm_default_instance_);
}
inline ::Nmea2k::Alarm* Event::release_alarmitem() {
  // @@protoc_insertion_point(field_release:Nmea2k.Event.AlarmItem)
  
  ::Nmea2k::Alarm* temp = alarmitem_;
  alarmitem_ = NULL;
  return temp;
}
inline ::Nmea2k::Alarm* Event::mutable_alarmitem() {
  
  if (alarmitem_ == NULL) {
    auto* p = CreateMaybeMessage<::Nmea2k::Alarm>(GetArenaNoVirtual());
    alarmitem_ = p;
  }
  // @@protoc_insertion_point(field_mutable:Nmea2k.Event.AlarmItem)
  return alarmitem_;
}
inline void Event::set_allocated_alarmitem(::Nmea2k::Alarm* alarmitem) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete alarmitem_;
  }
  if (alarmitem) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      alarmitem = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, alarmitem, submessage_arena);
    }
    
  } else {
    
  }
  alarmitem_ = alarmitem;
  // @@protoc_insertion_point(field_set_allocated:Nmea2k.Event.AlarmItem)
}

// .Nmea2k.AlarmGlobalStatus GlobalStatus = 4;
inline bool Event::has_globalstatus() const {
  return this != internal_default_instance() && globalstatus_ != NULL;
}
inline void Event::clear_globalstatus() {
  if (GetArenaNoVirtual() == NULL && globalstatus_ != NULL) {
    delete globalstatus_;
  }
  globalstatus_ = NULL;
}
inline const ::Nmea2k::AlarmGlobalStatus& Event::_internal_globalstatus() const {
  return *globalstatus_;
}
inline const ::Nmea2k::AlarmGlobalStatus& Event::globalstatus() const {
  const ::Nmea2k::AlarmGlobalStatus* p = globalstatus_;
  // @@protoc_insertion_point(field_get:Nmea2k.Event.GlobalStatus)
  return p != NULL ? *p : *reinterpret_cast<const ::Nmea2k::AlarmGlobalStatus*>(
      &::Nmea2k::_AlarmGlobalStatus_default_instance_);
}
inline ::Nmea2k::AlarmGlobalStatus* Event::release_globalstatus() {
  // @@protoc_insertion_point(field_release:Nmea2k.Event.GlobalStatus)
  
  ::Nmea2k::AlarmGlobalStatus* temp = globalstatus_;
  globalstatus_ = NULL;
  return temp;
}
inline ::Nmea2k::AlarmGlobalStatus* Event::mutable_globalstatus() {
  
  if (globalstatus_ == NULL) {
    auto* p = CreateMaybeMessage<::Nmea2k::AlarmGlobalStatus>(GetArenaNoVirtual());
    globalstatus_ = p;
  }
  // @@protoc_insertion_point(field_mutable:Nmea2k.Event.GlobalStatus)
  return globalstatus_;
}
inline void Event::set_allocated_globalstatus(::Nmea2k::AlarmGlobalStatus* globalstatus) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete globalstatus_;
  }
  if (globalstatus) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      globalstatus = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, globalstatus, submessage_arena);
    }
    
  } else {
    
  }
  globalstatus_ = globalstatus;
  // @@protoc_insertion_point(field_set_allocated:Nmea2k.Event.GlobalStatus)
}

// .Nmea2k.CZoneRawEvent CZoneEvent = 5;
inline bool Event::has_czoneevent() const {
  return this != internal_default_instance() && czoneevent_ != NULL;
}
inline void Event::clear_czoneevent() {
  if (GetArenaNoVirtual() == NULL && czoneevent_ != NULL) {
    delete czoneevent_;
  }
  czoneevent_ = NULL;
}
inline const ::Nmea2k::CZoneRawEvent& Event::_internal_czoneevent() const {
  return *czoneevent_;
}
inline const ::Nmea2k::CZoneRawEvent& Event::czoneevent() const {
  const ::Nmea2k::CZoneRawEvent* p = czoneevent_;
  // @@protoc_insertion_point(field_get:Nmea2k.Event.CZoneEvent)
  return p != NULL ? *p : *reinterpret_cast<const ::Nmea2k::CZoneRawEvent*>(
      &::Nmea2k::_CZoneRawEvent_default_instance_);
}
inline ::Nmea2k::CZoneRawEvent* Event::release_czoneevent() {
  // @@protoc_insertion_point(field_release:Nmea2k.Event.CZoneEvent)
  
  ::Nmea2k::CZoneRawEvent* temp = czoneevent_;
  czoneevent_ = NULL;
  return temp;
}
inline ::Nmea2k::CZoneRawEvent* Event::mutable_czoneevent() {
  
  if (czoneevent_ == NULL) {
    auto* p = CreateMaybeMessage<::Nmea2k::CZoneRawEvent>(GetArenaNoVirtual());
    czoneevent_ = p;
  }
  // @@protoc_insertion_point(field_mutable:Nmea2k.Event.CZoneEvent)
  return czoneevent_;
}
inline void Event::set_allocated_czoneevent(::Nmea2k::CZoneRawEvent* czoneevent) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete czoneevent_;
  }
  if (czoneevent) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      czoneevent = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, czoneevent, submessage_arena);
    }
    
  } else {
    
  }
  czoneevent_ = czoneevent;
  // @@protoc_insertion_point(field_set_allocated:Nmea2k.Event.CZoneEvent)
}

// string TimeStamp = 6;
inline void Event::clear_timestamp() {
  timestamp_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Event::timestamp() const {
  // @@protoc_insertion_point(field_get:Nmea2k.Event.TimeStamp)
  return timestamp_.GetNoArena();
}
inline void Event::set_timestamp(const ::std::string& value) {
  
  timestamp_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Nmea2k.Event.TimeStamp)
}
#if LANG_CXX11
inline void Event::set_timestamp(::std::string&& value) {
  
  timestamp_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Nmea2k.Event.TimeStamp)
}
#endif
inline void Event::set_timestamp(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  timestamp_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Nmea2k.Event.TimeStamp)
}
inline void Event::set_timestamp(const char* value, size_t size) {
  
  timestamp_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Nmea2k.Event.TimeStamp)
}
inline ::std::string* Event::mutable_timestamp() {
  
  // @@protoc_insertion_point(field_mutable:Nmea2k.Event.TimeStamp)
  return timestamp_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Event::release_timestamp() {
  // @@protoc_insertion_point(field_release:Nmea2k.Event.TimeStamp)
  
  return timestamp_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Event::set_allocated_timestamp(::std::string* timestamp) {
  if (timestamp != NULL) {
    
  } else {
    
  }
  timestamp_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), timestamp);
  // @@protoc_insertion_point(field_set_allocated:Nmea2k.Event.TimeStamp)
}

// -------------------------------------------------------------------

// FactoryData

// string SerialNumber = 1;
inline void FactoryData::clear_serialnumber() {
  serialnumber_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& FactoryData::serialnumber() const {
  // @@protoc_insertion_point(field_get:Nmea2k.FactoryData.SerialNumber)
  return serialnumber_.GetNoArena();
}
inline void FactoryData::set_serialnumber(const ::std::string& value) {
  
  serialnumber_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Nmea2k.FactoryData.SerialNumber)
}
#if LANG_CXX11
inline void FactoryData::set_serialnumber(::std::string&& value) {
  
  serialnumber_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Nmea2k.FactoryData.SerialNumber)
}
#endif
inline void FactoryData::set_serialnumber(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  serialnumber_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Nmea2k.FactoryData.SerialNumber)
}
inline void FactoryData::set_serialnumber(const char* value, size_t size) {
  
  serialnumber_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Nmea2k.FactoryData.SerialNumber)
}
inline ::std::string* FactoryData::mutable_serialnumber() {
  
  // @@protoc_insertion_point(field_mutable:Nmea2k.FactoryData.SerialNumber)
  return serialnumber_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FactoryData::release_serialnumber() {
  // @@protoc_insertion_point(field_release:Nmea2k.FactoryData.SerialNumber)
  
  return serialnumber_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FactoryData::set_allocated_serialnumber(::std::string* serialnumber) {
  if (serialnumber != NULL) {
    
  } else {
    
  }
  serialnumber_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), serialnumber);
  // @@protoc_insertion_point(field_set_allocated:Nmea2k.FactoryData.SerialNumber)
}

// string FactoryICCID = 2;
inline void FactoryData::clear_factoryiccid() {
  factoryiccid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& FactoryData::factoryiccid() const {
  // @@protoc_insertion_point(field_get:Nmea2k.FactoryData.FactoryICCID)
  return factoryiccid_.GetNoArena();
}
inline void FactoryData::set_factoryiccid(const ::std::string& value) {
  
  factoryiccid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Nmea2k.FactoryData.FactoryICCID)
}
#if LANG_CXX11
inline void FactoryData::set_factoryiccid(::std::string&& value) {
  
  factoryiccid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Nmea2k.FactoryData.FactoryICCID)
}
#endif
inline void FactoryData::set_factoryiccid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  factoryiccid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Nmea2k.FactoryData.FactoryICCID)
}
inline void FactoryData::set_factoryiccid(const char* value, size_t size) {
  
  factoryiccid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Nmea2k.FactoryData.FactoryICCID)
}
inline ::std::string* FactoryData::mutable_factoryiccid() {
  
  // @@protoc_insertion_point(field_mutable:Nmea2k.FactoryData.FactoryICCID)
  return factoryiccid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FactoryData::release_factoryiccid() {
  // @@protoc_insertion_point(field_release:Nmea2k.FactoryData.FactoryICCID)
  
  return factoryiccid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FactoryData::set_allocated_factoryiccid(::std::string* factoryiccid) {
  if (factoryiccid != NULL) {
    
  } else {
    
  }
  factoryiccid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), factoryiccid);
  // @@protoc_insertion_point(field_set_allocated:Nmea2k.FactoryData.FactoryICCID)
}

// string FactoryIMEI = 3;
inline void FactoryData::clear_factoryimei() {
  factoryimei_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& FactoryData::factoryimei() const {
  // @@protoc_insertion_point(field_get:Nmea2k.FactoryData.FactoryIMEI)
  return factoryimei_.GetNoArena();
}
inline void FactoryData::set_factoryimei(const ::std::string& value) {
  
  factoryimei_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Nmea2k.FactoryData.FactoryIMEI)
}
#if LANG_CXX11
inline void FactoryData::set_factoryimei(::std::string&& value) {
  
  factoryimei_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Nmea2k.FactoryData.FactoryIMEI)
}
#endif
inline void FactoryData::set_factoryimei(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  factoryimei_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Nmea2k.FactoryData.FactoryIMEI)
}
inline void FactoryData::set_factoryimei(const char* value, size_t size) {
  
  factoryimei_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Nmea2k.FactoryData.FactoryIMEI)
}
inline ::std::string* FactoryData::mutable_factoryimei() {
  
  // @@protoc_insertion_point(field_mutable:Nmea2k.FactoryData.FactoryIMEI)
  return factoryimei_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FactoryData::release_factoryimei() {
  // @@protoc_insertion_point(field_release:Nmea2k.FactoryData.FactoryIMEI)
  
  return factoryimei_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FactoryData::set_allocated_factoryimei(::std::string* factoryimei) {
  if (factoryimei != NULL) {
    
  } else {
    
  }
  factoryimei_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), factoryimei);
  // @@protoc_insertion_point(field_set_allocated:Nmea2k.FactoryData.FactoryIMEI)
}

// string RTFirmwareVersion = 4;
inline void FactoryData::clear_rtfirmwareversion() {
  rtfirmwareversion_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& FactoryData::rtfirmwareversion() const {
  // @@protoc_insertion_point(field_get:Nmea2k.FactoryData.RTFirmwareVersion)
  return rtfirmwareversion_.GetNoArena();
}
inline void FactoryData::set_rtfirmwareversion(const ::std::string& value) {
  
  rtfirmwareversion_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Nmea2k.FactoryData.RTFirmwareVersion)
}
#if LANG_CXX11
inline void FactoryData::set_rtfirmwareversion(::std::string&& value) {
  
  rtfirmwareversion_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Nmea2k.FactoryData.RTFirmwareVersion)
}
#endif
inline void FactoryData::set_rtfirmwareversion(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  rtfirmwareversion_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Nmea2k.FactoryData.RTFirmwareVersion)
}
inline void FactoryData::set_rtfirmwareversion(const char* value, size_t size) {
  
  rtfirmwareversion_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Nmea2k.FactoryData.RTFirmwareVersion)
}
inline ::std::string* FactoryData::mutable_rtfirmwareversion() {
  
  // @@protoc_insertion_point(field_mutable:Nmea2k.FactoryData.RTFirmwareVersion)
  return rtfirmwareversion_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FactoryData::release_rtfirmwareversion() {
  // @@protoc_insertion_point(field_release:Nmea2k.FactoryData.RTFirmwareVersion)
  
  return rtfirmwareversion_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FactoryData::set_allocated_rtfirmwareversion(::std::string* rtfirmwareversion) {
  if (rtfirmwareversion != NULL) {
    
  } else {
    
  }
  rtfirmwareversion_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), rtfirmwareversion);
  // @@protoc_insertion_point(field_set_allocated:Nmea2k.FactoryData.RTFirmwareVersion)
}

// string MenderArtifactInfo = 5;
inline void FactoryData::clear_menderartifactinfo() {
  menderartifactinfo_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& FactoryData::menderartifactinfo() const {
  // @@protoc_insertion_point(field_get:Nmea2k.FactoryData.MenderArtifactInfo)
  return menderartifactinfo_.GetNoArena();
}
inline void FactoryData::set_menderartifactinfo(const ::std::string& value) {
  
  menderartifactinfo_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Nmea2k.FactoryData.MenderArtifactInfo)
}
#if LANG_CXX11
inline void FactoryData::set_menderartifactinfo(::std::string&& value) {
  
  menderartifactinfo_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Nmea2k.FactoryData.MenderArtifactInfo)
}
#endif
inline void FactoryData::set_menderartifactinfo(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  menderartifactinfo_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Nmea2k.FactoryData.MenderArtifactInfo)
}
inline void FactoryData::set_menderartifactinfo(const char* value, size_t size) {
  
  menderartifactinfo_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Nmea2k.FactoryData.MenderArtifactInfo)
}
inline ::std::string* FactoryData::mutable_menderartifactinfo() {
  
  // @@protoc_insertion_point(field_mutable:Nmea2k.FactoryData.MenderArtifactInfo)
  return menderartifactinfo_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FactoryData::release_menderartifactinfo() {
  // @@protoc_insertion_point(field_release:Nmea2k.FactoryData.MenderArtifactInfo)
  
  return menderartifactinfo_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FactoryData::set_allocated_menderartifactinfo(::std::string* menderartifactinfo) {
  if (menderartifactinfo != NULL) {
    
  } else {
    
  }
  menderartifactinfo_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), menderartifactinfo);
  // @@protoc_insertion_point(field_set_allocated:Nmea2k.FactoryData.MenderArtifactInfo)
}

// -------------------------------------------------------------------

// Settings

// uint32 ConfigId = 1;
inline void Settings::clear_configid() {
  configid_ = 0u;
}
inline ::google::protobuf::uint32 Settings::configid() const {
  // @@protoc_insertion_point(field_get:Nmea2k.Settings.ConfigId)
  return configid_;
}
inline void Settings::set_configid(::google::protobuf::uint32 value) {
  
  configid_ = value;
  // @@protoc_insertion_point(field_set:Nmea2k.Settings.ConfigId)
}

// uint32 ConfigVersion = 2;
inline void Settings::clear_configversion() {
  configversion_ = 0u;
}
inline ::google::protobuf::uint32 Settings::configversion() const {
  // @@protoc_insertion_point(field_get:Nmea2k.Settings.ConfigVersion)
  return configversion_;
}
inline void Settings::set_configversion(::google::protobuf::uint32 value) {
  
  configversion_ = value;
  // @@protoc_insertion_point(field_set:Nmea2k.Settings.ConfigVersion)
}

// uint32 ConfigFileVersion = 3;
inline void Settings::clear_configfileversion() {
  configfileversion_ = 0u;
}
inline ::google::protobuf::uint32 Settings::configfileversion() const {
  // @@protoc_insertion_point(field_get:Nmea2k.Settings.ConfigFileVersion)
  return configfileversion_;
}
inline void Settings::set_configfileversion(::google::protobuf::uint32 value) {
  
  configfileversion_ = value;
  // @@protoc_insertion_point(field_set:Nmea2k.Settings.ConfigFileVersion)
}

// uint32 DipswitchValue = 4;
inline void Settings::clear_dipswitchvalue() {
  dipswitchvalue_ = 0u;
}
inline ::google::protobuf::uint32 Settings::dipswitchvalue() const {
  // @@protoc_insertion_point(field_get:Nmea2k.Settings.DipswitchValue)
  return dipswitchvalue_;
}
inline void Settings::set_dipswitchvalue(::google::protobuf::uint32 value) {
  
  dipswitchvalue_ = value;
  // @@protoc_insertion_point(field_set:Nmea2k.Settings.DipswitchValue)
}

// float DepthOffset = 5;
inline void Settings::clear_depthoffset() {
  depthoffset_ = 0;
}
inline float Settings::depthoffset() const {
  // @@protoc_insertion_point(field_get:Nmea2k.Settings.DepthOffset)
  return depthoffset_;
}
inline void Settings::set_depthoffset(float value) {
  
  depthoffset_ = value;
  // @@protoc_insertion_point(field_set:Nmea2k.Settings.DepthOffset)
}

// float MagneticVariation = 6;
inline void Settings::clear_magneticvariation() {
  magneticvariation_ = 0;
}
inline float Settings::magneticvariation() const {
  // @@protoc_insertion_point(field_get:Nmea2k.Settings.MagneticVariation)
  return magneticvariation_;
}
inline void Settings::set_magneticvariation(float value) {
  
  magneticvariation_ = value;
  // @@protoc_insertion_point(field_set:Nmea2k.Settings.MagneticVariation)
}

// int32 TimeOffset = 7;
inline void Settings::clear_timeoffset() {
  timeoffset_ = 0;
}
inline ::google::protobuf::int32 Settings::timeoffset() const {
  // @@protoc_insertion_point(field_get:Nmea2k.Settings.TimeOffset)
  return timeoffset_;
}
inline void Settings::set_timeoffset(::google::protobuf::int32 value) {
  
  timeoffset_ = value;
  // @@protoc_insertion_point(field_set:Nmea2k.Settings.TimeOffset)
}

// bool SleepEnabled = 8;
inline void Settings::clear_sleepenabled() {
  sleepenabled_ = false;
}
inline bool Settings::sleepenabled() const {
  // @@protoc_insertion_point(field_get:Nmea2k.Settings.SleepEnabled)
  return sleepenabled_;
}
inline void Settings::set_sleepenabled(bool value) {
  
  sleepenabled_ = value;
  // @@protoc_insertion_point(field_set:Nmea2k.Settings.SleepEnabled)
}

// uint32 SleepCircuitId = 9;
inline void Settings::clear_sleepcircuitid() {
  sleepcircuitid_ = 0u;
}
inline ::google::protobuf::uint32 Settings::sleepcircuitid() const {
  // @@protoc_insertion_point(field_get:Nmea2k.Settings.SleepCircuitId)
  return sleepcircuitid_;
}
inline void Settings::set_sleepcircuitid(::google::protobuf::uint32 value) {
  
  sleepcircuitid_ = value;
  // @@protoc_insertion_point(field_set:Nmea2k.Settings.SleepCircuitId)
}

// .Nmea2k.AlarmGlobalStatus AlarmGlobalSettings = 10;
inline bool Settings::has_alarmglobalsettings() const {
  return this != internal_default_instance() && alarmglobalsettings_ != NULL;
}
inline void Settings::clear_alarmglobalsettings() {
  if (GetArenaNoVirtual() == NULL && alarmglobalsettings_ != NULL) {
    delete alarmglobalsettings_;
  }
  alarmglobalsettings_ = NULL;
}
inline const ::Nmea2k::AlarmGlobalStatus& Settings::_internal_alarmglobalsettings() const {
  return *alarmglobalsettings_;
}
inline const ::Nmea2k::AlarmGlobalStatus& Settings::alarmglobalsettings() const {
  const ::Nmea2k::AlarmGlobalStatus* p = alarmglobalsettings_;
  // @@protoc_insertion_point(field_get:Nmea2k.Settings.AlarmGlobalSettings)
  return p != NULL ? *p : *reinterpret_cast<const ::Nmea2k::AlarmGlobalStatus*>(
      &::Nmea2k::_AlarmGlobalStatus_default_instance_);
}
inline ::Nmea2k::AlarmGlobalStatus* Settings::release_alarmglobalsettings() {
  // @@protoc_insertion_point(field_release:Nmea2k.Settings.AlarmGlobalSettings)
  
  ::Nmea2k::AlarmGlobalStatus* temp = alarmglobalsettings_;
  alarmglobalsettings_ = NULL;
  return temp;
}
inline ::Nmea2k::AlarmGlobalStatus* Settings::mutable_alarmglobalsettings() {
  
  if (alarmglobalsettings_ == NULL) {
    auto* p = CreateMaybeMessage<::Nmea2k::AlarmGlobalStatus>(GetArenaNoVirtual());
    alarmglobalsettings_ = p;
  }
  // @@protoc_insertion_point(field_mutable:Nmea2k.Settings.AlarmGlobalSettings)
  return alarmglobalsettings_;
}
inline void Settings::set_allocated_alarmglobalsettings(::Nmea2k::AlarmGlobalStatus* alarmglobalsettings) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete alarmglobalsettings_;
  }
  if (alarmglobalsettings) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      alarmglobalsettings = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, alarmglobalsettings, submessage_arena);
    }
    
  } else {
    
  }
  alarmglobalsettings_ = alarmglobalsettings;
  // @@protoc_insertion_point(field_set_allocated:Nmea2k.Settings.AlarmGlobalSettings)
}

// string ConfigName = 11;
inline void Settings::clear_configname() {
  configname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Settings::configname() const {
  // @@protoc_insertion_point(field_get:Nmea2k.Settings.ConfigName)
  return configname_.GetNoArena();
}
inline void Settings::set_configname(const ::std::string& value) {
  
  configname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Nmea2k.Settings.ConfigName)
}
#if LANG_CXX11
inline void Settings::set_configname(::std::string&& value) {
  
  configname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Nmea2k.Settings.ConfigName)
}
#endif
inline void Settings::set_configname(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  configname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Nmea2k.Settings.ConfigName)
}
inline void Settings::set_configname(const char* value, size_t size) {
  
  configname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Nmea2k.Settings.ConfigName)
}
inline ::std::string* Settings::mutable_configname() {
  
  // @@protoc_insertion_point(field_mutable:Nmea2k.Settings.ConfigName)
  return configname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Settings::release_configname() {
  // @@protoc_insertion_point(field_release:Nmea2k.Settings.ConfigName)
  
  return configname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Settings::set_allocated_configname(::std::string* configname) {
  if (configname != NULL) {
    
  } else {
    
  }
  configname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), configname);
  // @@protoc_insertion_point(field_set_allocated:Nmea2k.Settings.ConfigName)
}

// string LibraryVersion = 12;
inline void Settings::clear_libraryversion() {
  libraryversion_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Settings::libraryversion() const {
  // @@protoc_insertion_point(field_get:Nmea2k.Settings.LibraryVersion)
  return libraryversion_.GetNoArena();
}
inline void Settings::set_libraryversion(const ::std::string& value) {
  
  libraryversion_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Nmea2k.Settings.LibraryVersion)
}
#if LANG_CXX11
inline void Settings::set_libraryversion(::std::string&& value) {
  
  libraryversion_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Nmea2k.Settings.LibraryVersion)
}
#endif
inline void Settings::set_libraryversion(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  libraryversion_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Nmea2k.Settings.LibraryVersion)
}
inline void Settings::set_libraryversion(const char* value, size_t size) {
  
  libraryversion_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Nmea2k.Settings.LibraryVersion)
}
inline ::std::string* Settings::mutable_libraryversion() {
  
  // @@protoc_insertion_point(field_mutable:Nmea2k.Settings.LibraryVersion)
  return libraryversion_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Settings::release_libraryversion() {
  // @@protoc_insertion_point(field_release:Nmea2k.Settings.LibraryVersion)
  
  return libraryversion_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Settings::set_allocated_libraryversion(::std::string* libraryversion) {
  if (libraryversion != NULL) {
    
  } else {
    
  }
  libraryversion_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), libraryversion);
  // @@protoc_insertion_point(field_set_allocated:Nmea2k.Settings.LibraryVersion)
}

// .Nmea2k.FactoryData FactoryDataSettings = 13;
inline bool Settings::has_factorydatasettings() const {
  return this != internal_default_instance() && factorydatasettings_ != NULL;
}
inline void Settings::clear_factorydatasettings() {
  if (GetArenaNoVirtual() == NULL && factorydatasettings_ != NULL) {
    delete factorydatasettings_;
  }
  factorydatasettings_ = NULL;
}
inline const ::Nmea2k::FactoryData& Settings::_internal_factorydatasettings() const {
  return *factorydatasettings_;
}
inline const ::Nmea2k::FactoryData& Settings::factorydatasettings() const {
  const ::Nmea2k::FactoryData* p = factorydatasettings_;
  // @@protoc_insertion_point(field_get:Nmea2k.Settings.FactoryDataSettings)
  return p != NULL ? *p : *reinterpret_cast<const ::Nmea2k::FactoryData*>(
      &::Nmea2k::_FactoryData_default_instance_);
}
inline ::Nmea2k::FactoryData* Settings::release_factorydatasettings() {
  // @@protoc_insertion_point(field_release:Nmea2k.Settings.FactoryDataSettings)
  
  ::Nmea2k::FactoryData* temp = factorydatasettings_;
  factorydatasettings_ = NULL;
  return temp;
}
inline ::Nmea2k::FactoryData* Settings::mutable_factorydatasettings() {
  
  if (factorydatasettings_ == NULL) {
    auto* p = CreateMaybeMessage<::Nmea2k::FactoryData>(GetArenaNoVirtual());
    factorydatasettings_ = p;
  }
  // @@protoc_insertion_point(field_mutable:Nmea2k.Settings.FactoryDataSettings)
  return factorydatasettings_;
}
inline void Settings::set_allocated_factorydatasettings(::Nmea2k::FactoryData* factorydatasettings) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete factorydatasettings_;
  }
  if (factorydatasettings) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      factorydatasettings = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, factorydatasettings, submessage_arena);
    }
    
  } else {
    
  }
  factorydatasettings_ = factorydatasettings;
  // @@protoc_insertion_point(field_set_allocated:Nmea2k.Settings.FactoryDataSettings)
}

// -------------------------------------------------------------------

// SettingRequest

// .Nmea2k.SettingRequest.eSettingType Type = 1;
inline void SettingRequest::clear_type() {
  type_ = 0;
}
inline ::Nmea2k::SettingRequest_eSettingType SettingRequest::type() const {
  // @@protoc_insertion_point(field_get:Nmea2k.SettingRequest.Type)
  return static_cast< ::Nmea2k::SettingRequest_eSettingType >(type_);
}
inline void SettingRequest::set_type(::Nmea2k::SettingRequest_eSettingType value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:Nmea2k.SettingRequest.Type)
}

// uint32 DipswitchValue = 2;
inline void SettingRequest::clear_dipswitchvalue() {
  dipswitchvalue_ = 0u;
}
inline ::google::protobuf::uint32 SettingRequest::dipswitchvalue() const {
  // @@protoc_insertion_point(field_get:Nmea2k.SettingRequest.DipswitchValue)
  return dipswitchvalue_;
}
inline void SettingRequest::set_dipswitchvalue(::google::protobuf::uint32 value) {
  
  dipswitchvalue_ = value;
  // @@protoc_insertion_point(field_set:Nmea2k.SettingRequest.DipswitchValue)
}

// string Token = 3;
inline void SettingRequest::clear_token() {
  token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SettingRequest::token() const {
  // @@protoc_insertion_point(field_get:Nmea2k.SettingRequest.Token)
  return token_.GetNoArena();
}
inline void SettingRequest::set_token(const ::std::string& value) {
  
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Nmea2k.SettingRequest.Token)
}
#if LANG_CXX11
inline void SettingRequest::set_token(::std::string&& value) {
  
  token_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Nmea2k.SettingRequest.Token)
}
#endif
inline void SettingRequest::set_token(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Nmea2k.SettingRequest.Token)
}
inline void SettingRequest::set_token(const char* value, size_t size) {
  
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Nmea2k.SettingRequest.Token)
}
inline ::std::string* SettingRequest::mutable_token() {
  
  // @@protoc_insertion_point(field_mutable:Nmea2k.SettingRequest.Token)
  return token_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SettingRequest::release_token() {
  // @@protoc_insertion_point(field_release:Nmea2k.SettingRequest.Token)
  
  return token_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SettingRequest::set_allocated_token(::std::string* token) {
  if (token != NULL) {
    
  } else {
    
  }
  token_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), token);
  // @@protoc_insertion_point(field_set_allocated:Nmea2k.SettingRequest.Token)
}

// float TimeOffsetValue = 4;
inline void SettingRequest::clear_timeoffsetvalue() {
  timeoffsetvalue_ = 0;
}
inline float SettingRequest::timeoffsetvalue() const {
  // @@protoc_insertion_point(field_get:Nmea2k.SettingRequest.TimeOffsetValue)
  return timeoffsetvalue_;
}
inline void SettingRequest::set_timeoffsetvalue(float value) {
  
  timeoffsetvalue_ = value;
  // @@protoc_insertion_point(field_set:Nmea2k.SettingRequest.TimeOffsetValue)
}

// float MagneticVariationValue = 5;
inline void SettingRequest::clear_magneticvariationvalue() {
  magneticvariationvalue_ = 0;
}
inline float SettingRequest::magneticvariationvalue() const {
  // @@protoc_insertion_point(field_get:Nmea2k.SettingRequest.MagneticVariationValue)
  return magneticvariationvalue_;
}
inline void SettingRequest::set_magneticvariationvalue(float value) {
  
  magneticvariationvalue_ = value;
  // @@protoc_insertion_point(field_set:Nmea2k.SettingRequest.MagneticVariationValue)
}

// float DepthOffsetValue = 6;
inline void SettingRequest::clear_depthoffsetvalue() {
  depthoffsetvalue_ = 0;
}
inline float SettingRequest::depthoffsetvalue() const {
  // @@protoc_insertion_point(field_get:Nmea2k.SettingRequest.DepthOffsetValue)
  return depthoffsetvalue_;
}
inline void SettingRequest::set_depthoffsetvalue(float value) {
  
  depthoffsetvalue_ = value;
  // @@protoc_insertion_point(field_set:Nmea2k.SettingRequest.DepthOffsetValue)
}

// float BacklightValue = 7;
inline void SettingRequest::clear_backlightvalue() {
  backlightvalue_ = 0;
}
inline float SettingRequest::backlightvalue() const {
  // @@protoc_insertion_point(field_get:Nmea2k.SettingRequest.BacklightValue)
  return backlightvalue_;
}
inline void SettingRequest::set_backlightvalue(float value) {
  
  backlightvalue_ = value;
  // @@protoc_insertion_point(field_set:Nmea2k.SettingRequest.BacklightValue)
}

// uint32 BatteryFullValue = 8;
inline void SettingRequest::clear_batteryfullvalue() {
  batteryfullvalue_ = 0u;
}
inline ::google::protobuf::uint32 SettingRequest::batteryfullvalue() const {
  // @@protoc_insertion_point(field_get:Nmea2k.SettingRequest.BatteryFullValue)
  return batteryfullvalue_;
}
inline void SettingRequest::set_batteryfullvalue(::google::protobuf::uint32 value) {
  
  batteryfullvalue_ = value;
  // @@protoc_insertion_point(field_set:Nmea2k.SettingRequest.BatteryFullValue)
}

// bytes Payload = 9;
inline void SettingRequest::clear_payload() {
  payload_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SettingRequest::payload() const {
  // @@protoc_insertion_point(field_get:Nmea2k.SettingRequest.Payload)
  return payload_.GetNoArena();
}
inline void SettingRequest::set_payload(const ::std::string& value) {
  
  payload_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Nmea2k.SettingRequest.Payload)
}
#if LANG_CXX11
inline void SettingRequest::set_payload(::std::string&& value) {
  
  payload_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Nmea2k.SettingRequest.Payload)
}
#endif
inline void SettingRequest::set_payload(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  payload_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Nmea2k.SettingRequest.Payload)
}
inline void SettingRequest::set_payload(const void* value, size_t size) {
  
  payload_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Nmea2k.SettingRequest.Payload)
}
inline ::std::string* SettingRequest::mutable_payload() {
  
  // @@protoc_insertion_point(field_mutable:Nmea2k.SettingRequest.Payload)
  return payload_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SettingRequest::release_payload() {
  // @@protoc_insertion_point(field_release:Nmea2k.SettingRequest.Payload)
  
  return payload_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SettingRequest::set_allocated_payload(::std::string* payload) {
  if (payload != NULL) {
    
  } else {
    
  }
  payload_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), payload);
  // @@protoc_insertion_point(field_set_allocated:Nmea2k.SettingRequest.Payload)
}

// -------------------------------------------------------------------

// OperationRequest

// .Nmea2k.OperationRequest.eOperationType type = 1;
inline void OperationRequest::clear_type() {
  type_ = 0;
}
inline ::Nmea2k::OperationRequest_eOperationType OperationRequest::type() const {
  // @@protoc_insertion_point(field_get:Nmea2k.OperationRequest.type)
  return static_cast< ::Nmea2k::OperationRequest_eOperationType >(type_);
}
inline void OperationRequest::set_type(::Nmea2k::OperationRequest_eOperationType value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:Nmea2k.OperationRequest.type)
}

// bool ReadConfigForce = 2;
inline void OperationRequest::clear_readconfigforce() {
  readconfigforce_ = false;
}
inline bool OperationRequest::readconfigforce() const {
  // @@protoc_insertion_point(field_get:Nmea2k.OperationRequest.ReadConfigForce)
  return readconfigforce_;
}
inline void OperationRequest::set_readconfigforce(bool value) {
  
  readconfigforce_ = value;
  // @@protoc_insertion_point(field_set:Nmea2k.OperationRequest.ReadConfigForce)
}

// bool ReadConfigMode = 3;
inline void OperationRequest::clear_readconfigmode() {
  readconfigmode_ = false;
}
inline bool OperationRequest::readconfigmode() const {
  // @@protoc_insertion_point(field_get:Nmea2k.OperationRequest.ReadConfigMode)
  return readconfigmode_;
}
inline void OperationRequest::set_readconfigmode(bool value) {
  
  readconfigmode_ = value;
  // @@protoc_insertion_point(field_set:Nmea2k.OperationRequest.ReadConfigMode)
}

// string Token = 4;
inline void OperationRequest::clear_token() {
  token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& OperationRequest::token() const {
  // @@protoc_insertion_point(field_get:Nmea2k.OperationRequest.Token)
  return token_.GetNoArena();
}
inline void OperationRequest::set_token(const ::std::string& value) {
  
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Nmea2k.OperationRequest.Token)
}
#if LANG_CXX11
inline void OperationRequest::set_token(::std::string&& value) {
  
  token_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Nmea2k.OperationRequest.Token)
}
#endif
inline void OperationRequest::set_token(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Nmea2k.OperationRequest.Token)
}
inline void OperationRequest::set_token(const char* value, size_t size) {
  
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Nmea2k.OperationRequest.Token)
}
inline ::std::string* OperationRequest::mutable_token() {
  
  // @@protoc_insertion_point(field_mutable:Nmea2k.OperationRequest.Token)
  return token_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* OperationRequest::release_token() {
  // @@protoc_insertion_point(field_release:Nmea2k.OperationRequest.Token)
  
  return token_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void OperationRequest::set_allocated_token(::std::string* token) {
  if (token != NULL) {
    
  } else {
    
  }
  token_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), token);
  // @@protoc_insertion_point(field_set_allocated:Nmea2k.OperationRequest.Token)
}

// uint32 CZoneRawOperation = 5;
inline void OperationRequest::clear_czonerawoperation() {
  czonerawoperation_ = 0u;
}
inline ::google::protobuf::uint32 OperationRequest::czonerawoperation() const {
  // @@protoc_insertion_point(field_get:Nmea2k.OperationRequest.CZoneRawOperation)
  return czonerawoperation_;
}
inline void OperationRequest::set_czonerawoperation(::google::protobuf::uint32 value) {
  
  czonerawoperation_ = value;
  // @@protoc_insertion_point(field_set:Nmea2k.OperationRequest.CZoneRawOperation)
}

// -------------------------------------------------------------------

// ConfigRequest

// .Nmea2k.ConfigRequest.eConfigType Type = 1;
inline void ConfigRequest::clear_type() {
  type_ = 0;
}
inline ::Nmea2k::ConfigRequest_eConfigType ConfigRequest::type() const {
  // @@protoc_insertion_point(field_get:Nmea2k.ConfigRequest.Type)
  return static_cast< ::Nmea2k::ConfigRequest_eConfigType >(type_);
}
inline void ConfigRequest::set_type(::Nmea2k::ConfigRequest_eConfigType value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:Nmea2k.ConfigRequest.Type)
}

// string Token = 2;
inline void ConfigRequest::clear_token() {
  token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ConfigRequest::token() const {
  // @@protoc_insertion_point(field_get:Nmea2k.ConfigRequest.Token)
  return token_.GetNoArena();
}
inline void ConfigRequest::set_token(const ::std::string& value) {
  
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Nmea2k.ConfigRequest.Token)
}
#if LANG_CXX11
inline void ConfigRequest::set_token(::std::string&& value) {
  
  token_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Nmea2k.ConfigRequest.Token)
}
#endif
inline void ConfigRequest::set_token(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Nmea2k.ConfigRequest.Token)
}
inline void ConfigRequest::set_token(const char* value, size_t size) {
  
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Nmea2k.ConfigRequest.Token)
}
inline ::std::string* ConfigRequest::mutable_token() {
  
  // @@protoc_insertion_point(field_mutable:Nmea2k.ConfigRequest.Token)
  return token_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ConfigRequest::release_token() {
  // @@protoc_insertion_point(field_release:Nmea2k.ConfigRequest.Token)
  
  return token_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ConfigRequest::set_allocated_token(::std::string* token) {
  if (token != NULL) {
    
  } else {
    
  }
  token_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), token);
  // @@protoc_insertion_point(field_set_allocated:Nmea2k.ConfigRequest.Token)
}

// uint32 ParentId = 3;
inline void ConfigRequest::clear_parentid() {
  parentid_ = 0u;
}
inline ::google::protobuf::uint32 ConfigRequest::parentid() const {
  // @@protoc_insertion_point(field_get:Nmea2k.ConfigRequest.ParentId)
  return parentid_;
}
inline void ConfigRequest::set_parentid(::google::protobuf::uint32 value) {
  
  parentid_ = value;
  // @@protoc_insertion_point(field_set:Nmea2k.ConfigRequest.ParentId)
}

// uint32 Flags = 4;
inline void ConfigRequest::clear_flags() {
  flags_ = 0u;
}
inline ::google::protobuf::uint32 ConfigRequest::flags() const {
  // @@protoc_insertion_point(field_get:Nmea2k.ConfigRequest.Flags)
  return flags_;
}
inline void ConfigRequest::set_flags(::google::protobuf::uint32 value) {
  
  flags_ = value;
  // @@protoc_insertion_point(field_set:Nmea2k.ConfigRequest.Flags)
}

// uint32 SubType = 5;
inline void ConfigRequest::clear_subtype() {
  subtype_ = 0u;
}
inline ::google::protobuf::uint32 ConfigRequest::subtype() const {
  // @@protoc_insertion_point(field_get:Nmea2k.ConfigRequest.SubType)
  return subtype_;
}
inline void ConfigRequest::set_subtype(::google::protobuf::uint32 value) {
  
  subtype_ = value;
  // @@protoc_insertion_point(field_set:Nmea2k.ConfigRequest.SubType)
}

// -------------------------------------------------------------------

// AlarmLimit

// bool Enabled = 1;
inline void AlarmLimit::clear_enabled() {
  enabled_ = false;
}
inline bool AlarmLimit::enabled() const {
  // @@protoc_insertion_point(field_get:Nmea2k.AlarmLimit.Enabled)
  return enabled_;
}
inline void AlarmLimit::set_enabled(bool value) {
  
  enabled_ = value;
  // @@protoc_insertion_point(field_set:Nmea2k.AlarmLimit.Enabled)
}

// float On = 2;
inline void AlarmLimit::clear_on() {
  on_ = 0;
}
inline float AlarmLimit::on() const {
  // @@protoc_insertion_point(field_get:Nmea2k.AlarmLimit.On)
  return on_;
}
inline void AlarmLimit::set_on(float value) {
  
  on_ = value;
  // @@protoc_insertion_point(field_set:Nmea2k.AlarmLimit.On)
}

// float Off = 3;
inline void AlarmLimit::clear_off() {
  off_ = 0;
}
inline float AlarmLimit::off() const {
  // @@protoc_insertion_point(field_get:Nmea2k.AlarmLimit.Off)
  return off_;
}
inline void AlarmLimit::set_off(float value) {
  
  off_ = value;
  // @@protoc_insertion_point(field_set:Nmea2k.AlarmLimit.Off)
}

// uint32 Id = 4;
inline void AlarmLimit::clear_id() {
  id_ = 0u;
}
inline ::google::protobuf::uint32 AlarmLimit::id() const {
  // @@protoc_insertion_point(field_get:Nmea2k.AlarmLimit.Id)
  return id_;
}
inline void AlarmLimit::set_id(::google::protobuf::uint32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:Nmea2k.AlarmLimit.Id)
}

// -------------------------------------------------------------------

// DataId

// bool Enabled = 1;
inline void DataId::clear_enabled() {
  enabled_ = false;
}
inline bool DataId::enabled() const {
  // @@protoc_insertion_point(field_get:Nmea2k.DataId.Enabled)
  return enabled_;
}
inline void DataId::set_enabled(bool value) {
  
  enabled_ = value;
  // @@protoc_insertion_point(field_set:Nmea2k.DataId.Enabled)
}

// uint32 Id = 2;
inline void DataId::clear_id() {
  id_ = 0u;
}
inline ::google::protobuf::uint32 DataId::id() const {
  // @@protoc_insertion_point(field_get:Nmea2k.DataId.Id)
  return id_;
}
inline void DataId::set_id(::google::protobuf::uint32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:Nmea2k.DataId.Id)
}

// -------------------------------------------------------------------

// Instance

// bool Enabled = 1;
inline void Instance::clear_enabled() {
  enabled_ = false;
}
inline bool Instance::enabled() const {
  // @@protoc_insertion_point(field_get:Nmea2k.Instance.Enabled)
  return enabled_;
}
inline void Instance::set_enabled(bool value) {
  
  enabled_ = value;
  // @@protoc_insertion_point(field_set:Nmea2k.Instance.Enabled)
}

// uint32 Instance = 2;
inline void Instance::clear_instance() {
  instance_ = 0u;
}
inline ::google::protobuf::uint32 Instance::instance() const {
  // @@protoc_insertion_point(field_get:Nmea2k.Instance.Instance)
  return instance_;
}
inline void Instance::set_instance(::google::protobuf::uint32 value) {
  
  instance_ = value;
  // @@protoc_insertion_point(field_set:Nmea2k.Instance.Instance)
}

// -------------------------------------------------------------------

// Alarm

// .Nmea2k.ConfigRequest.eConfigType DisplayType = 1;
inline void Alarm::clear_displaytype() {
  displaytype_ = 0;
}
inline ::Nmea2k::ConfigRequest_eConfigType Alarm::displaytype() const {
  // @@protoc_insertion_point(field_get:Nmea2k.Alarm.DisplayType)
  return static_cast< ::Nmea2k::ConfigRequest_eConfigType >(displaytype_);
}
inline void Alarm::set_displaytype(::Nmea2k::ConfigRequest_eConfigType value) {
  
  displaytype_ = value;
  // @@protoc_insertion_point(field_set:Nmea2k.Alarm.DisplayType)
}

// uint32 Id = 2;
inline void Alarm::clear_id() {
  id_ = 0u;
}
inline ::google::protobuf::uint32 Alarm::id() const {
  // @@protoc_insertion_point(field_get:Nmea2k.Alarm.Id)
  return id_;
}
inline void Alarm::set_id(::google::protobuf::uint32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:Nmea2k.Alarm.Id)
}

// .Nmea2k.Alarm.eAlarmType AlarmType = 3;
inline void Alarm::clear_alarmtype() {
  alarmtype_ = 0;
}
inline ::Nmea2k::Alarm_eAlarmType Alarm::alarmtype() const {
  // @@protoc_insertion_point(field_get:Nmea2k.Alarm.AlarmType)
  return static_cast< ::Nmea2k::Alarm_eAlarmType >(alarmtype_);
}
inline void Alarm::set_alarmtype(::Nmea2k::Alarm_eAlarmType value) {
  
  alarmtype_ = value;
  // @@protoc_insertion_point(field_set:Nmea2k.Alarm.AlarmType)
}

// .Nmea2k.Alarm.eSeverityType Severity = 4;
inline void Alarm::clear_severity() {
  severity_ = 0;
}
inline ::Nmea2k::Alarm_eSeverityType Alarm::severity() const {
  // @@protoc_insertion_point(field_get:Nmea2k.Alarm.Severity)
  return static_cast< ::Nmea2k::Alarm_eSeverityType >(severity_);
}
inline void Alarm::set_severity(::Nmea2k::Alarm_eSeverityType value) {
  
  severity_ = value;
  // @@protoc_insertion_point(field_set:Nmea2k.Alarm.Severity)
}

// .Nmea2k.Alarm.eStateType CurrentState = 5;
inline void Alarm::clear_currentstate() {
  currentstate_ = 0;
}
inline ::Nmea2k::Alarm_eStateType Alarm::currentstate() const {
  // @@protoc_insertion_point(field_get:Nmea2k.Alarm.CurrentState)
  return static_cast< ::Nmea2k::Alarm_eStateType >(currentstate_);
}
inline void Alarm::set_currentstate(::Nmea2k::Alarm_eStateType value) {
  
  currentstate_ = value;
  // @@protoc_insertion_point(field_set:Nmea2k.Alarm.CurrentState)
}

// uint32 ChannelId = 6;
inline void Alarm::clear_channelid() {
  channelid_ = 0u;
}
inline ::google::protobuf::uint32 Alarm::channelid() const {
  // @@protoc_insertion_point(field_get:Nmea2k.Alarm.ChannelId)
  return channelid_;
}
inline void Alarm::set_channelid(::google::protobuf::uint32 value) {
  
  channelid_ = value;
  // @@protoc_insertion_point(field_set:Nmea2k.Alarm.ChannelId)
}

// uint32 ExternalAlarmId = 7;
inline void Alarm::clear_externalalarmid() {
  externalalarmid_ = 0u;
}
inline ::google::protobuf::uint32 Alarm::externalalarmid() const {
  // @@protoc_insertion_point(field_get:Nmea2k.Alarm.ExternalAlarmId)
  return externalalarmid_;
}
inline void Alarm::set_externalalarmid(::google::protobuf::uint32 value) {
  
  externalalarmid_ = value;
  // @@protoc_insertion_point(field_set:Nmea2k.Alarm.ExternalAlarmId)
}

// uint32 UniqueId = 8;
inline void Alarm::clear_uniqueid() {
  uniqueid_ = 0u;
}
inline ::google::protobuf::uint32 Alarm::uniqueid() const {
  // @@protoc_insertion_point(field_get:Nmea2k.Alarm.UniqueId)
  return uniqueid_;
}
inline void Alarm::set_uniqueid(::google::protobuf::uint32 value) {
  
  uniqueid_ = value;
  // @@protoc_insertion_point(field_set:Nmea2k.Alarm.UniqueId)
}

// bool Valid = 9;
inline void Alarm::clear_valid() {
  valid_ = false;
}
inline bool Alarm::valid() const {
  // @@protoc_insertion_point(field_get:Nmea2k.Alarm.Valid)
  return valid_;
}
inline void Alarm::set_valid(bool value) {
  
  valid_ = value;
  // @@protoc_insertion_point(field_set:Nmea2k.Alarm.Valid)
}

// uint64 ActivatedTime = 10;
inline void Alarm::clear_activatedtime() {
  activatedtime_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 Alarm::activatedtime() const {
  // @@protoc_insertion_point(field_get:Nmea2k.Alarm.ActivatedTime)
  return activatedtime_;
}
inline void Alarm::set_activatedtime(::google::protobuf::uint64 value) {
  
  activatedtime_ = value;
  // @@protoc_insertion_point(field_set:Nmea2k.Alarm.ActivatedTime)
}

// uint64 AcknowledgedTime = 11;
inline void Alarm::clear_acknowledgedtime() {
  acknowledgedtime_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 Alarm::acknowledgedtime() const {
  // @@protoc_insertion_point(field_get:Nmea2k.Alarm.AcknowledgedTime)
  return acknowledgedtime_;
}
inline void Alarm::set_acknowledgedtime(::google::protobuf::uint64 value) {
  
  acknowledgedtime_ = value;
  // @@protoc_insertion_point(field_set:Nmea2k.Alarm.AcknowledgedTime)
}

// uint64 ClearedTime = 12;
inline void Alarm::clear_clearedtime() {
  clearedtime_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 Alarm::clearedtime() const {
  // @@protoc_insertion_point(field_get:Nmea2k.Alarm.ClearedTime)
  return clearedtime_;
}
inline void Alarm::set_clearedtime(::google::protobuf::uint64 value) {
  
  clearedtime_ = value;
  // @@protoc_insertion_point(field_set:Nmea2k.Alarm.ClearedTime)
}

// string Name = 13;
inline void Alarm::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Alarm::name() const {
  // @@protoc_insertion_point(field_get:Nmea2k.Alarm.Name)
  return name_.GetNoArena();
}
inline void Alarm::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Nmea2k.Alarm.Name)
}
#if LANG_CXX11
inline void Alarm::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Nmea2k.Alarm.Name)
}
#endif
inline void Alarm::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Nmea2k.Alarm.Name)
}
inline void Alarm::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Nmea2k.Alarm.Name)
}
inline ::std::string* Alarm::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:Nmea2k.Alarm.Name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Alarm::release_name() {
  // @@protoc_insertion_point(field_release:Nmea2k.Alarm.Name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Alarm::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:Nmea2k.Alarm.Name)
}

// string Channel = 14;
inline void Alarm::clear_channel() {
  channel_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Alarm::channel() const {
  // @@protoc_insertion_point(field_get:Nmea2k.Alarm.Channel)
  return channel_.GetNoArena();
}
inline void Alarm::set_channel(const ::std::string& value) {
  
  channel_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Nmea2k.Alarm.Channel)
}
#if LANG_CXX11
inline void Alarm::set_channel(::std::string&& value) {
  
  channel_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Nmea2k.Alarm.Channel)
}
#endif
inline void Alarm::set_channel(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  channel_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Nmea2k.Alarm.Channel)
}
inline void Alarm::set_channel(const char* value, size_t size) {
  
  channel_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Nmea2k.Alarm.Channel)
}
inline ::std::string* Alarm::mutable_channel() {
  
  // @@protoc_insertion_point(field_mutable:Nmea2k.Alarm.Channel)
  return channel_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Alarm::release_channel() {
  // @@protoc_insertion_point(field_release:Nmea2k.Alarm.Channel)
  
  return channel_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Alarm::set_allocated_channel(::std::string* channel) {
  if (channel != NULL) {
    
  } else {
    
  }
  channel_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), channel);
  // @@protoc_insertion_point(field_set_allocated:Nmea2k.Alarm.Channel)
}

// string Device = 15;
inline void Alarm::clear_device() {
  device_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Alarm::device() const {
  // @@protoc_insertion_point(field_get:Nmea2k.Alarm.Device)
  return device_.GetNoArena();
}
inline void Alarm::set_device(const ::std::string& value) {
  
  device_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Nmea2k.Alarm.Device)
}
#if LANG_CXX11
inline void Alarm::set_device(::std::string&& value) {
  
  device_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Nmea2k.Alarm.Device)
}
#endif
inline void Alarm::set_device(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  device_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Nmea2k.Alarm.Device)
}
inline void Alarm::set_device(const char* value, size_t size) {
  
  device_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Nmea2k.Alarm.Device)
}
inline ::std::string* Alarm::mutable_device() {
  
  // @@protoc_insertion_point(field_mutable:Nmea2k.Alarm.Device)
  return device_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Alarm::release_device() {
  // @@protoc_insertion_point(field_release:Nmea2k.Alarm.Device)
  
  return device_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Alarm::set_allocated_device(::std::string* device) {
  if (device != NULL) {
    
  } else {
    
  }
  device_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), device);
  // @@protoc_insertion_point(field_set_allocated:Nmea2k.Alarm.Device)
}

// string Title = 16;
inline void Alarm::clear_title() {
  title_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Alarm::title() const {
  // @@protoc_insertion_point(field_get:Nmea2k.Alarm.Title)
  return title_.GetNoArena();
}
inline void Alarm::set_title(const ::std::string& value) {
  
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Nmea2k.Alarm.Title)
}
#if LANG_CXX11
inline void Alarm::set_title(::std::string&& value) {
  
  title_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Nmea2k.Alarm.Title)
}
#endif
inline void Alarm::set_title(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Nmea2k.Alarm.Title)
}
inline void Alarm::set_title(const char* value, size_t size) {
  
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Nmea2k.Alarm.Title)
}
inline ::std::string* Alarm::mutable_title() {
  
  // @@protoc_insertion_point(field_mutable:Nmea2k.Alarm.Title)
  return title_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Alarm::release_title() {
  // @@protoc_insertion_point(field_release:Nmea2k.Alarm.Title)
  
  return title_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Alarm::set_allocated_title(::std::string* title) {
  if (title != NULL) {
    
  } else {
    
  }
  title_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), title);
  // @@protoc_insertion_point(field_set_allocated:Nmea2k.Alarm.Title)
}

// string Description = 17;
inline void Alarm::clear_description() {
  description_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Alarm::description() const {
  // @@protoc_insertion_point(field_get:Nmea2k.Alarm.Description)
  return description_.GetNoArena();
}
inline void Alarm::set_description(const ::std::string& value) {
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Nmea2k.Alarm.Description)
}
#if LANG_CXX11
inline void Alarm::set_description(::std::string&& value) {
  
  description_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Nmea2k.Alarm.Description)
}
#endif
inline void Alarm::set_description(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Nmea2k.Alarm.Description)
}
inline void Alarm::set_description(const char* value, size_t size) {
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Nmea2k.Alarm.Description)
}
inline ::std::string* Alarm::mutable_description() {
  
  // @@protoc_insertion_point(field_mutable:Nmea2k.Alarm.Description)
  return description_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Alarm::release_description() {
  // @@protoc_insertion_point(field_release:Nmea2k.Alarm.Description)
  
  return description_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Alarm::set_allocated_description(::std::string* description) {
  if (description != NULL) {
    
  } else {
    
  }
  description_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), description);
  // @@protoc_insertion_point(field_set_allocated:Nmea2k.Alarm.Description)
}

// bytes CZoneRawAlarm = 18;
inline void Alarm::clear_czonerawalarm() {
  czonerawalarm_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Alarm::czonerawalarm() const {
  // @@protoc_insertion_point(field_get:Nmea2k.Alarm.CZoneRawAlarm)
  return czonerawalarm_.GetNoArena();
}
inline void Alarm::set_czonerawalarm(const ::std::string& value) {
  
  czonerawalarm_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Nmea2k.Alarm.CZoneRawAlarm)
}
#if LANG_CXX11
inline void Alarm::set_czonerawalarm(::std::string&& value) {
  
  czonerawalarm_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Nmea2k.Alarm.CZoneRawAlarm)
}
#endif
inline void Alarm::set_czonerawalarm(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  czonerawalarm_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Nmea2k.Alarm.CZoneRawAlarm)
}
inline void Alarm::set_czonerawalarm(const void* value, size_t size) {
  
  czonerawalarm_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Nmea2k.Alarm.CZoneRawAlarm)
}
inline ::std::string* Alarm::mutable_czonerawalarm() {
  
  // @@protoc_insertion_point(field_mutable:Nmea2k.Alarm.CZoneRawAlarm)
  return czonerawalarm_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Alarm::release_czonerawalarm() {
  // @@protoc_insertion_point(field_release:Nmea2k.Alarm.CZoneRawAlarm)
  
  return czonerawalarm_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Alarm::set_allocated_czonerawalarm(::std::string* czonerawalarm) {
  if (czonerawalarm != NULL) {
    
  } else {
    
  }
  czonerawalarm_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), czonerawalarm);
  // @@protoc_insertion_point(field_set_allocated:Nmea2k.Alarm.CZoneRawAlarm)
}

// string FaultAction = 19;
inline void Alarm::clear_faultaction() {
  faultaction_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Alarm::faultaction() const {
  // @@protoc_insertion_point(field_get:Nmea2k.Alarm.FaultAction)
  return faultaction_.GetNoArena();
}
inline void Alarm::set_faultaction(const ::std::string& value) {
  
  faultaction_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Nmea2k.Alarm.FaultAction)
}
#if LANG_CXX11
inline void Alarm::set_faultaction(::std::string&& value) {
  
  faultaction_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Nmea2k.Alarm.FaultAction)
}
#endif
inline void Alarm::set_faultaction(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  faultaction_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Nmea2k.Alarm.FaultAction)
}
inline void Alarm::set_faultaction(const char* value, size_t size) {
  
  faultaction_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Nmea2k.Alarm.FaultAction)
}
inline ::std::string* Alarm::mutable_faultaction() {
  
  // @@protoc_insertion_point(field_mutable:Nmea2k.Alarm.FaultAction)
  return faultaction_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Alarm::release_faultaction() {
  // @@protoc_insertion_point(field_release:Nmea2k.Alarm.FaultAction)
  
  return faultaction_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Alarm::set_allocated_faultaction(::std::string* faultaction) {
  if (faultaction != NULL) {
    
  } else {
    
  }
  faultaction_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), faultaction);
  // @@protoc_insertion_point(field_set_allocated:Nmea2k.Alarm.FaultAction)
}

// uint32 FaultType = 20;
inline void Alarm::clear_faulttype() {
  faulttype_ = 0u;
}
inline ::google::protobuf::uint32 Alarm::faulttype() const {
  // @@protoc_insertion_point(field_get:Nmea2k.Alarm.FaultType)
  return faulttype_;
}
inline void Alarm::set_faulttype(::google::protobuf::uint32 value) {
  
  faulttype_ = value;
  // @@protoc_insertion_point(field_set:Nmea2k.Alarm.FaultType)
}

// uint32 FaultNumber = 21;
inline void Alarm::clear_faultnumber() {
  faultnumber_ = 0u;
}
inline ::google::protobuf::uint32 Alarm::faultnumber() const {
  // @@protoc_insertion_point(field_get:Nmea2k.Alarm.FaultNumber)
  return faultnumber_;
}
inline void Alarm::set_faultnumber(::google::protobuf::uint32 value) {
  
  faultnumber_ = value;
  // @@protoc_insertion_point(field_set:Nmea2k.Alarm.FaultNumber)
}

// -------------------------------------------------------------------

// Device

// .Nmea2k.ConfigRequest.eConfigType DisplayType = 1;
inline void Device::clear_displaytype() {
  displaytype_ = 0;
}
inline ::Nmea2k::ConfigRequest_eConfigType Device::displaytype() const {
  // @@protoc_insertion_point(field_get:Nmea2k.Device.DisplayType)
  return static_cast< ::Nmea2k::ConfigRequest_eConfigType >(displaytype_);
}
inline void Device::set_displaytype(::Nmea2k::ConfigRequest_eConfigType value) {
  
  displaytype_ = value;
  // @@protoc_insertion_point(field_set:Nmea2k.Device.DisplayType)
}

// string NameUTF8 = 3;
inline void Device::clear_nameutf8() {
  nameutf8_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Device::nameutf8() const {
  // @@protoc_insertion_point(field_get:Nmea2k.Device.NameUTF8)
  return nameutf8_.GetNoArena();
}
inline void Device::set_nameutf8(const ::std::string& value) {
  
  nameutf8_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Nmea2k.Device.NameUTF8)
}
#if LANG_CXX11
inline void Device::set_nameutf8(::std::string&& value) {
  
  nameutf8_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Nmea2k.Device.NameUTF8)
}
#endif
inline void Device::set_nameutf8(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  nameutf8_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Nmea2k.Device.NameUTF8)
}
inline void Device::set_nameutf8(const char* value, size_t size) {
  
  nameutf8_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Nmea2k.Device.NameUTF8)
}
inline ::std::string* Device::mutable_nameutf8() {
  
  // @@protoc_insertion_point(field_mutable:Nmea2k.Device.NameUTF8)
  return nameutf8_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Device::release_nameutf8() {
  // @@protoc_insertion_point(field_release:Nmea2k.Device.NameUTF8)
  
  return nameutf8_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Device::set_allocated_nameutf8(::std::string* nameutf8) {
  if (nameutf8 != NULL) {
    
  } else {
    
  }
  nameutf8_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), nameutf8);
  // @@protoc_insertion_point(field_set_allocated:Nmea2k.Device.NameUTF8)
}

// uint32 Dipswitch = 4;
inline void Device::clear_dipswitch() {
  dipswitch_ = 0u;
}
inline ::google::protobuf::uint32 Device::dipswitch() const {
  // @@protoc_insertion_point(field_get:Nmea2k.Device.Dipswitch)
  return dipswitch_;
}
inline void Device::set_dipswitch(::google::protobuf::uint32 value) {
  
  dipswitch_ = value;
  // @@protoc_insertion_point(field_set:Nmea2k.Device.Dipswitch)
}

// uint32 SourceAddress = 5;
inline void Device::clear_sourceaddress() {
  sourceaddress_ = 0u;
}
inline ::google::protobuf::uint32 Device::sourceaddress() const {
  // @@protoc_insertion_point(field_get:Nmea2k.Device.SourceAddress)
  return sourceaddress_;
}
inline void Device::set_sourceaddress(::google::protobuf::uint32 value) {
  
  sourceaddress_ = value;
  // @@protoc_insertion_point(field_set:Nmea2k.Device.SourceAddress)
}

// bool Conflict = 6;
inline void Device::clear_conflict() {
  conflict_ = false;
}
inline bool Device::conflict() const {
  // @@protoc_insertion_point(field_get:Nmea2k.Device.Conflict)
  return conflict_;
}
inline void Device::set_conflict(bool value) {
  
  conflict_ = value;
  // @@protoc_insertion_point(field_set:Nmea2k.Device.Conflict)
}

// .Nmea2k.Device.eDeviceType DeviceType = 7;
inline void Device::clear_devicetype() {
  devicetype_ = 0;
}
inline ::Nmea2k::Device_eDeviceType Device::devicetype() const {
  // @@protoc_insertion_point(field_get:Nmea2k.Device.DeviceType)
  return static_cast< ::Nmea2k::Device_eDeviceType >(devicetype_);
}
inline void Device::set_devicetype(::Nmea2k::Device_eDeviceType value) {
  
  devicetype_ = value;
  // @@protoc_insertion_point(field_set:Nmea2k.Device.DeviceType)
}

// bool Valid = 8;
inline void Device::clear_valid() {
  valid_ = false;
}
inline bool Device::valid() const {
  // @@protoc_insertion_point(field_get:Nmea2k.Device.Valid)
  return valid_;
}
inline void Device::set_valid(bool value) {
  
  valid_ = value;
  // @@protoc_insertion_point(field_set:Nmea2k.Device.Valid)
}

// bool Transient = 9;
inline void Device::clear_transient() {
  transient_ = false;
}
inline bool Device::transient() const {
  // @@protoc_insertion_point(field_get:Nmea2k.Device.Transient)
  return transient_;
}
inline void Device::set_transient(bool value) {
  
  transient_ = value;
  // @@protoc_insertion_point(field_set:Nmea2k.Device.Transient)
}

// string Version = 10;
inline void Device::clear_version() {
  version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Device::version() const {
  // @@protoc_insertion_point(field_get:Nmea2k.Device.Version)
  return version_.GetNoArena();
}
inline void Device::set_version(const ::std::string& value) {
  
  version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Nmea2k.Device.Version)
}
#if LANG_CXX11
inline void Device::set_version(::std::string&& value) {
  
  version_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Nmea2k.Device.Version)
}
#endif
inline void Device::set_version(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Nmea2k.Device.Version)
}
inline void Device::set_version(const char* value, size_t size) {
  
  version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Nmea2k.Device.Version)
}
inline ::std::string* Device::mutable_version() {
  
  // @@protoc_insertion_point(field_mutable:Nmea2k.Device.Version)
  return version_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Device::release_version() {
  // @@protoc_insertion_point(field_release:Nmea2k.Device.Version)
  
  return version_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Device::set_allocated_version(::std::string* version) {
  if (version != NULL) {
    
  } else {
    
  }
  version_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), version);
  // @@protoc_insertion_point(field_set_allocated:Nmea2k.Device.Version)
}

// -------------------------------------------------------------------

// UiRelationshipMsg

// .Nmea2k.ConfigRequest.eConfigType DisplayType = 1;
inline void UiRelationshipMsg::clear_displaytype() {
  displaytype_ = 0;
}
inline ::Nmea2k::ConfigRequest_eConfigType UiRelationshipMsg::displaytype() const {
  // @@protoc_insertion_point(field_get:Nmea2k.UiRelationshipMsg.DisplayType)
  return static_cast< ::Nmea2k::ConfigRequest_eConfigType >(displaytype_);
}
inline void UiRelationshipMsg::set_displaytype(::Nmea2k::ConfigRequest_eConfigType value) {
  
  displaytype_ = value;
  // @@protoc_insertion_point(field_set:Nmea2k.UiRelationshipMsg.DisplayType)
}

// uint32 Id = 2;
inline void UiRelationshipMsg::clear_id() {
  id_ = 0u;
}
inline ::google::protobuf::uint32 UiRelationshipMsg::id() const {
  // @@protoc_insertion_point(field_get:Nmea2k.UiRelationshipMsg.Id)
  return id_;
}
inline void UiRelationshipMsg::set_id(::google::protobuf::uint32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:Nmea2k.UiRelationshipMsg.Id)
}

// .Nmea2k.UiRelationshipMsg.eItemType PrimaryType = 3;
inline void UiRelationshipMsg::clear_primarytype() {
  primarytype_ = 0;
}
inline ::Nmea2k::UiRelationshipMsg_eItemType UiRelationshipMsg::primarytype() const {
  // @@protoc_insertion_point(field_get:Nmea2k.UiRelationshipMsg.PrimaryType)
  return static_cast< ::Nmea2k::UiRelationshipMsg_eItemType >(primarytype_);
}
inline void UiRelationshipMsg::set_primarytype(::Nmea2k::UiRelationshipMsg_eItemType value) {
  
  primarytype_ = value;
  // @@protoc_insertion_point(field_set:Nmea2k.UiRelationshipMsg.PrimaryType)
}

// .Nmea2k.UiRelationshipMsg.eItemType SecondaryType = 4;
inline void UiRelationshipMsg::clear_secondarytype() {
  secondarytype_ = 0;
}
inline ::Nmea2k::UiRelationshipMsg_eItemType UiRelationshipMsg::secondarytype() const {
  // @@protoc_insertion_point(field_get:Nmea2k.UiRelationshipMsg.SecondaryType)
  return static_cast< ::Nmea2k::UiRelationshipMsg_eItemType >(secondarytype_);
}
inline void UiRelationshipMsg::set_secondarytype(::Nmea2k::UiRelationshipMsg_eItemType value) {
  
  secondarytype_ = value;
  // @@protoc_insertion_point(field_set:Nmea2k.UiRelationshipMsg.SecondaryType)
}

// uint32 PrimaryId = 5;
inline void UiRelationshipMsg::clear_primaryid() {
  primaryid_ = 0u;
}
inline ::google::protobuf::uint32 UiRelationshipMsg::primaryid() const {
  // @@protoc_insertion_point(field_get:Nmea2k.UiRelationshipMsg.PrimaryId)
  return primaryid_;
}
inline void UiRelationshipMsg::set_primaryid(::google::protobuf::uint32 value) {
  
  primaryid_ = value;
  // @@protoc_insertion_point(field_set:Nmea2k.UiRelationshipMsg.PrimaryId)
}

// uint32 SecondaryId = 6;
inline void UiRelationshipMsg::clear_secondaryid() {
  secondaryid_ = 0u;
}
inline ::google::protobuf::uint32 UiRelationshipMsg::secondaryid() const {
  // @@protoc_insertion_point(field_get:Nmea2k.UiRelationshipMsg.SecondaryId)
  return secondaryid_;
}
inline void UiRelationshipMsg::set_secondaryid(::google::protobuf::uint32 value) {
  
  secondaryid_ = value;
  // @@protoc_insertion_point(field_set:Nmea2k.UiRelationshipMsg.SecondaryId)
}

// .Nmea2k.UiRelationshipMsg.eRelationshipType RelationshipType = 7;
inline void UiRelationshipMsg::clear_relationshiptype() {
  relationshiptype_ = 0;
}
inline ::Nmea2k::UiRelationshipMsg_eRelationshipType UiRelationshipMsg::relationshiptype() const {
  // @@protoc_insertion_point(field_get:Nmea2k.UiRelationshipMsg.RelationshipType)
  return static_cast< ::Nmea2k::UiRelationshipMsg_eRelationshipType >(relationshiptype_);
}
inline void UiRelationshipMsg::set_relationshiptype(::Nmea2k::UiRelationshipMsg_eRelationshipType value) {
  
  relationshiptype_ = value;
  // @@protoc_insertion_point(field_set:Nmea2k.UiRelationshipMsg.RelationshipType)
}

// uint32 PrimaryConfigAddress = 8;
inline void UiRelationshipMsg::clear_primaryconfigaddress() {
  primaryconfigaddress_ = 0u;
}
inline ::google::protobuf::uint32 UiRelationshipMsg::primaryconfigaddress() const {
  // @@protoc_insertion_point(field_get:Nmea2k.UiRelationshipMsg.PrimaryConfigAddress)
  return primaryconfigaddress_;
}
inline void UiRelationshipMsg::set_primaryconfigaddress(::google::protobuf::uint32 value) {
  
  primaryconfigaddress_ = value;
  // @@protoc_insertion_point(field_set:Nmea2k.UiRelationshipMsg.PrimaryConfigAddress)
}

// uint32 SecondaryConfigAddress = 9;
inline void UiRelationshipMsg::clear_secondaryconfigaddress() {
  secondaryconfigaddress_ = 0u;
}
inline ::google::protobuf::uint32 UiRelationshipMsg::secondaryconfigaddress() const {
  // @@protoc_insertion_point(field_get:Nmea2k.UiRelationshipMsg.SecondaryConfigAddress)
  return secondaryconfigaddress_;
}
inline void UiRelationshipMsg::set_secondaryconfigaddress(::google::protobuf::uint32 value) {
  
  secondaryconfigaddress_ = value;
  // @@protoc_insertion_point(field_set:Nmea2k.UiRelationshipMsg.SecondaryConfigAddress)
}

// uint32 PrimaryChannelIndex = 10;
inline void UiRelationshipMsg::clear_primarychannelindex() {
  primarychannelindex_ = 0u;
}
inline ::google::protobuf::uint32 UiRelationshipMsg::primarychannelindex() const {
  // @@protoc_insertion_point(field_get:Nmea2k.UiRelationshipMsg.PrimaryChannelIndex)
  return primarychannelindex_;
}
inline void UiRelationshipMsg::set_primarychannelindex(::google::protobuf::uint32 value) {
  
  primarychannelindex_ = value;
  // @@protoc_insertion_point(field_set:Nmea2k.UiRelationshipMsg.PrimaryChannelIndex)
}

// uint32 SecondaryChannelIndex = 11;
inline void UiRelationshipMsg::clear_secondarychannelindex() {
  secondarychannelindex_ = 0u;
}
inline ::google::protobuf::uint32 UiRelationshipMsg::secondarychannelindex() const {
  // @@protoc_insertion_point(field_get:Nmea2k.UiRelationshipMsg.SecondaryChannelIndex)
  return secondarychannelindex_;
}
inline void UiRelationshipMsg::set_secondarychannelindex(::google::protobuf::uint32 value) {
  
  secondarychannelindex_ = value;
  // @@protoc_insertion_point(field_set:Nmea2k.UiRelationshipMsg.SecondaryChannelIndex)
}

// -------------------------------------------------------------------

// BinaryLogicStateMsg

// .Nmea2k.ConfigRequest.eConfigType DisplayType = 1;
inline void BinaryLogicStateMsg::clear_displaytype() {
  displaytype_ = 0;
}
inline ::Nmea2k::ConfigRequest_eConfigType BinaryLogicStateMsg::displaytype() const {
  // @@protoc_insertion_point(field_get:Nmea2k.BinaryLogicStateMsg.DisplayType)
  return static_cast< ::Nmea2k::ConfigRequest_eConfigType >(displaytype_);
}
inline void BinaryLogicStateMsg::set_displaytype(::Nmea2k::ConfigRequest_eConfigType value) {
  
  displaytype_ = value;
  // @@protoc_insertion_point(field_set:Nmea2k.BinaryLogicStateMsg.DisplayType)
}

// uint32 Id = 2;
inline void BinaryLogicStateMsg::clear_id() {
  id_ = 0u;
}
inline ::google::protobuf::uint32 BinaryLogicStateMsg::id() const {
  // @@protoc_insertion_point(field_get:Nmea2k.BinaryLogicStateMsg.Id)
  return id_;
}
inline void BinaryLogicStateMsg::set_id(::google::protobuf::uint32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:Nmea2k.BinaryLogicStateMsg.Id)
}

// uint32 Address = 3;
inline void BinaryLogicStateMsg::clear_address() {
  address_ = 0u;
}
inline ::google::protobuf::uint32 BinaryLogicStateMsg::address() const {
  // @@protoc_insertion_point(field_get:Nmea2k.BinaryLogicStateMsg.Address)
  return address_;
}
inline void BinaryLogicStateMsg::set_address(::google::protobuf::uint32 value) {
  
  address_ = value;
  // @@protoc_insertion_point(field_set:Nmea2k.BinaryLogicStateMsg.Address)
}

// string NameUTF8 = 4;
inline void BinaryLogicStateMsg::clear_nameutf8() {
  nameutf8_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& BinaryLogicStateMsg::nameutf8() const {
  // @@protoc_insertion_point(field_get:Nmea2k.BinaryLogicStateMsg.NameUTF8)
  return nameutf8_.GetNoArena();
}
inline void BinaryLogicStateMsg::set_nameutf8(const ::std::string& value) {
  
  nameutf8_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Nmea2k.BinaryLogicStateMsg.NameUTF8)
}
#if LANG_CXX11
inline void BinaryLogicStateMsg::set_nameutf8(::std::string&& value) {
  
  nameutf8_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Nmea2k.BinaryLogicStateMsg.NameUTF8)
}
#endif
inline void BinaryLogicStateMsg::set_nameutf8(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  nameutf8_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Nmea2k.BinaryLogicStateMsg.NameUTF8)
}
inline void BinaryLogicStateMsg::set_nameutf8(const char* value, size_t size) {
  
  nameutf8_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Nmea2k.BinaryLogicStateMsg.NameUTF8)
}
inline ::std::string* BinaryLogicStateMsg::mutable_nameutf8() {
  
  // @@protoc_insertion_point(field_mutable:Nmea2k.BinaryLogicStateMsg.NameUTF8)
  return nameutf8_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* BinaryLogicStateMsg::release_nameutf8() {
  // @@protoc_insertion_point(field_release:Nmea2k.BinaryLogicStateMsg.NameUTF8)
  
  return nameutf8_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BinaryLogicStateMsg::set_allocated_nameutf8(::std::string* nameutf8) {
  if (nameutf8 != NULL) {
    
  } else {
    
  }
  nameutf8_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), nameutf8);
  // @@protoc_insertion_point(field_set_allocated:Nmea2k.BinaryLogicStateMsg.NameUTF8)
}

// -------------------------------------------------------------------

// MeteringDevice

// .Nmea2k.ConfigRequest.eConfigType DisplayType = 1;
inline void MeteringDevice::clear_displaytype() {
  displaytype_ = 0;
}
inline ::Nmea2k::ConfigRequest_eConfigType MeteringDevice::displaytype() const {
  // @@protoc_insertion_point(field_get:Nmea2k.MeteringDevice.DisplayType)
  return static_cast< ::Nmea2k::ConfigRequest_eConfigType >(displaytype_);
}
inline void MeteringDevice::set_displaytype(::Nmea2k::ConfigRequest_eConfigType value) {
  
  displaytype_ = value;
  // @@protoc_insertion_point(field_set:Nmea2k.MeteringDevice.DisplayType)
}

// uint32 Id = 2;
inline void MeteringDevice::clear_id() {
  id_ = 0u;
}
inline ::google::protobuf::uint32 MeteringDevice::id() const {
  // @@protoc_insertion_point(field_get:Nmea2k.MeteringDevice.Id)
  return id_;
}
inline void MeteringDevice::set_id(::google::protobuf::uint32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:Nmea2k.MeteringDevice.Id)
}

// string NameUTF8 = 3;
inline void MeteringDevice::clear_nameutf8() {
  nameutf8_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& MeteringDevice::nameutf8() const {
  // @@protoc_insertion_point(field_get:Nmea2k.MeteringDevice.NameUTF8)
  return nameutf8_.GetNoArena();
}
inline void MeteringDevice::set_nameutf8(const ::std::string& value) {
  
  nameutf8_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Nmea2k.MeteringDevice.NameUTF8)
}
#if LANG_CXX11
inline void MeteringDevice::set_nameutf8(::std::string&& value) {
  
  nameutf8_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Nmea2k.MeteringDevice.NameUTF8)
}
#endif
inline void MeteringDevice::set_nameutf8(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  nameutf8_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Nmea2k.MeteringDevice.NameUTF8)
}
inline void MeteringDevice::set_nameutf8(const char* value, size_t size) {
  
  nameutf8_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Nmea2k.MeteringDevice.NameUTF8)
}
inline ::std::string* MeteringDevice::mutable_nameutf8() {
  
  // @@protoc_insertion_point(field_mutable:Nmea2k.MeteringDevice.NameUTF8)
  return nameutf8_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MeteringDevice::release_nameutf8() {
  // @@protoc_insertion_point(field_release:Nmea2k.MeteringDevice.NameUTF8)
  
  return nameutf8_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MeteringDevice::set_allocated_nameutf8(::std::string* nameutf8) {
  if (nameutf8 != NULL) {
    
  } else {
    
  }
  nameutf8_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), nameutf8);
  // @@protoc_insertion_point(field_set_allocated:Nmea2k.MeteringDevice.NameUTF8)
}

// .Nmea2k.Instance Instance = 4;
inline bool MeteringDevice::has_instance() const {
  return this != internal_default_instance() && instance_ != NULL;
}
inline void MeteringDevice::clear_instance() {
  if (GetArenaNoVirtual() == NULL && instance_ != NULL) {
    delete instance_;
  }
  instance_ = NULL;
}
inline const ::Nmea2k::Instance& MeteringDevice::_internal_instance() const {
  return *instance_;
}
inline const ::Nmea2k::Instance& MeteringDevice::instance() const {
  const ::Nmea2k::Instance* p = instance_;
  // @@protoc_insertion_point(field_get:Nmea2k.MeteringDevice.Instance)
  return p != NULL ? *p : *reinterpret_cast<const ::Nmea2k::Instance*>(
      &::Nmea2k::_Instance_default_instance_);
}
inline ::Nmea2k::Instance* MeteringDevice::release_instance() {
  // @@protoc_insertion_point(field_release:Nmea2k.MeteringDevice.Instance)
  
  ::Nmea2k::Instance* temp = instance_;
  instance_ = NULL;
  return temp;
}
inline ::Nmea2k::Instance* MeteringDevice::mutable_instance() {
  
  if (instance_ == NULL) {
    auto* p = CreateMaybeMessage<::Nmea2k::Instance>(GetArenaNoVirtual());
    instance_ = p;
  }
  // @@protoc_insertion_point(field_mutable:Nmea2k.MeteringDevice.Instance)
  return instance_;
}
inline void MeteringDevice::set_allocated_instance(::Nmea2k::Instance* instance) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete instance_;
  }
  if (instance) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      instance = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, instance, submessage_arena);
    }
    
  } else {
    
  }
  instance_ = instance;
  // @@protoc_insertion_point(field_set_allocated:Nmea2k.MeteringDevice.Instance)
}

// .Nmea2k.MeteringDevice.eACLine Line = 5;
inline void MeteringDevice::clear_line() {
  line_ = 0;
}
inline ::Nmea2k::MeteringDevice_eACLine MeteringDevice::line() const {
  // @@protoc_insertion_point(field_get:Nmea2k.MeteringDevice.Line)
  return static_cast< ::Nmea2k::MeteringDevice_eACLine >(line_);
}
inline void MeteringDevice::set_line(::Nmea2k::MeteringDevice_eACLine value) {
  
  line_ = value;
  // @@protoc_insertion_point(field_set:Nmea2k.MeteringDevice.Line)
}

// bool Output = 6;
inline void MeteringDevice::clear_output() {
  output_ = false;
}
inline bool MeteringDevice::output() const {
  // @@protoc_insertion_point(field_get:Nmea2k.MeteringDevice.Output)
  return output_;
}
inline void MeteringDevice::set_output(bool value) {
  
  output_ = value;
  // @@protoc_insertion_point(field_set:Nmea2k.MeteringDevice.Output)
}

// uint32 NominalVoltage = 7;
inline void MeteringDevice::clear_nominalvoltage() {
  nominalvoltage_ = 0u;
}
inline ::google::protobuf::uint32 MeteringDevice::nominalvoltage() const {
  // @@protoc_insertion_point(field_get:Nmea2k.MeteringDevice.NominalVoltage)
  return nominalvoltage_;
}
inline void MeteringDevice::set_nominalvoltage(::google::protobuf::uint32 value) {
  
  nominalvoltage_ = value;
  // @@protoc_insertion_point(field_set:Nmea2k.MeteringDevice.NominalVoltage)
}

// uint32 NominalFrequency = 8;
inline void MeteringDevice::clear_nominalfrequency() {
  nominalfrequency_ = 0u;
}
inline ::google::protobuf::uint32 MeteringDevice::nominalfrequency() const {
  // @@protoc_insertion_point(field_get:Nmea2k.MeteringDevice.NominalFrequency)
  return nominalfrequency_;
}
inline void MeteringDevice::set_nominalfrequency(::google::protobuf::uint32 value) {
  
  nominalfrequency_ = value;
  // @@protoc_insertion_point(field_set:Nmea2k.MeteringDevice.NominalFrequency)
}

// uint32 Address = 9;
inline void MeteringDevice::clear_address() {
  address_ = 0u;
}
inline ::google::protobuf::uint32 MeteringDevice::address() const {
  // @@protoc_insertion_point(field_get:Nmea2k.MeteringDevice.Address)
  return address_;
}
inline void MeteringDevice::set_address(::google::protobuf::uint32 value) {
  
  address_ = value;
  // @@protoc_insertion_point(field_set:Nmea2k.MeteringDevice.Address)
}

// uint32 Capacity = 10;
inline void MeteringDevice::clear_capacity() {
  capacity_ = 0u;
}
inline ::google::protobuf::uint32 MeteringDevice::capacity() const {
  // @@protoc_insertion_point(field_get:Nmea2k.MeteringDevice.Capacity)
  return capacity_;
}
inline void MeteringDevice::set_capacity(::google::protobuf::uint32 value) {
  
  capacity_ = value;
  // @@protoc_insertion_point(field_set:Nmea2k.MeteringDevice.Capacity)
}

// float WarningLow = 11;
inline void MeteringDevice::clear_warninglow() {
  warninglow_ = 0;
}
inline float MeteringDevice::warninglow() const {
  // @@protoc_insertion_point(field_get:Nmea2k.MeteringDevice.WarningLow)
  return warninglow_;
}
inline void MeteringDevice::set_warninglow(float value) {
  
  warninglow_ = value;
  // @@protoc_insertion_point(field_set:Nmea2k.MeteringDevice.WarningLow)
}

// float WarningHigh = 12;
inline void MeteringDevice::clear_warninghigh() {
  warninghigh_ = 0;
}
inline float MeteringDevice::warninghigh() const {
  // @@protoc_insertion_point(field_get:Nmea2k.MeteringDevice.WarningHigh)
  return warninghigh_;
}
inline void MeteringDevice::set_warninghigh(float value) {
  
  warninghigh_ = value;
  // @@protoc_insertion_point(field_set:Nmea2k.MeteringDevice.WarningHigh)
}

// .Nmea2k.AlarmLimit LowLimit = 13;
inline bool MeteringDevice::has_lowlimit() const {
  return this != internal_default_instance() && lowlimit_ != NULL;
}
inline void MeteringDevice::clear_lowlimit() {
  if (GetArenaNoVirtual() == NULL && lowlimit_ != NULL) {
    delete lowlimit_;
  }
  lowlimit_ = NULL;
}
inline const ::Nmea2k::AlarmLimit& MeteringDevice::_internal_lowlimit() const {
  return *lowlimit_;
}
inline const ::Nmea2k::AlarmLimit& MeteringDevice::lowlimit() const {
  const ::Nmea2k::AlarmLimit* p = lowlimit_;
  // @@protoc_insertion_point(field_get:Nmea2k.MeteringDevice.LowLimit)
  return p != NULL ? *p : *reinterpret_cast<const ::Nmea2k::AlarmLimit*>(
      &::Nmea2k::_AlarmLimit_default_instance_);
}
inline ::Nmea2k::AlarmLimit* MeteringDevice::release_lowlimit() {
  // @@protoc_insertion_point(field_release:Nmea2k.MeteringDevice.LowLimit)
  
  ::Nmea2k::AlarmLimit* temp = lowlimit_;
  lowlimit_ = NULL;
  return temp;
}
inline ::Nmea2k::AlarmLimit* MeteringDevice::mutable_lowlimit() {
  
  if (lowlimit_ == NULL) {
    auto* p = CreateMaybeMessage<::Nmea2k::AlarmLimit>(GetArenaNoVirtual());
    lowlimit_ = p;
  }
  // @@protoc_insertion_point(field_mutable:Nmea2k.MeteringDevice.LowLimit)
  return lowlimit_;
}
inline void MeteringDevice::set_allocated_lowlimit(::Nmea2k::AlarmLimit* lowlimit) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete lowlimit_;
  }
  if (lowlimit) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      lowlimit = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, lowlimit, submessage_arena);
    }
    
  } else {
    
  }
  lowlimit_ = lowlimit;
  // @@protoc_insertion_point(field_set_allocated:Nmea2k.MeteringDevice.LowLimit)
}

// .Nmea2k.AlarmLimit VeryLowLimit = 14;
inline bool MeteringDevice::has_verylowlimit() const {
  return this != internal_default_instance() && verylowlimit_ != NULL;
}
inline void MeteringDevice::clear_verylowlimit() {
  if (GetArenaNoVirtual() == NULL && verylowlimit_ != NULL) {
    delete verylowlimit_;
  }
  verylowlimit_ = NULL;
}
inline const ::Nmea2k::AlarmLimit& MeteringDevice::_internal_verylowlimit() const {
  return *verylowlimit_;
}
inline const ::Nmea2k::AlarmLimit& MeteringDevice::verylowlimit() const {
  const ::Nmea2k::AlarmLimit* p = verylowlimit_;
  // @@protoc_insertion_point(field_get:Nmea2k.MeteringDevice.VeryLowLimit)
  return p != NULL ? *p : *reinterpret_cast<const ::Nmea2k::AlarmLimit*>(
      &::Nmea2k::_AlarmLimit_default_instance_);
}
inline ::Nmea2k::AlarmLimit* MeteringDevice::release_verylowlimit() {
  // @@protoc_insertion_point(field_release:Nmea2k.MeteringDevice.VeryLowLimit)
  
  ::Nmea2k::AlarmLimit* temp = verylowlimit_;
  verylowlimit_ = NULL;
  return temp;
}
inline ::Nmea2k::AlarmLimit* MeteringDevice::mutable_verylowlimit() {
  
  if (verylowlimit_ == NULL) {
    auto* p = CreateMaybeMessage<::Nmea2k::AlarmLimit>(GetArenaNoVirtual());
    verylowlimit_ = p;
  }
  // @@protoc_insertion_point(field_mutable:Nmea2k.MeteringDevice.VeryLowLimit)
  return verylowlimit_;
}
inline void MeteringDevice::set_allocated_verylowlimit(::Nmea2k::AlarmLimit* verylowlimit) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete verylowlimit_;
  }
  if (verylowlimit) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      verylowlimit = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, verylowlimit, submessage_arena);
    }
    
  } else {
    
  }
  verylowlimit_ = verylowlimit;
  // @@protoc_insertion_point(field_set_allocated:Nmea2k.MeteringDevice.VeryLowLimit)
}

// .Nmea2k.AlarmLimit HighLimit = 15;
inline bool MeteringDevice::has_highlimit() const {
  return this != internal_default_instance() && highlimit_ != NULL;
}
inline void MeteringDevice::clear_highlimit() {
  if (GetArenaNoVirtual() == NULL && highlimit_ != NULL) {
    delete highlimit_;
  }
  highlimit_ = NULL;
}
inline const ::Nmea2k::AlarmLimit& MeteringDevice::_internal_highlimit() const {
  return *highlimit_;
}
inline const ::Nmea2k::AlarmLimit& MeteringDevice::highlimit() const {
  const ::Nmea2k::AlarmLimit* p = highlimit_;
  // @@protoc_insertion_point(field_get:Nmea2k.MeteringDevice.HighLimit)
  return p != NULL ? *p : *reinterpret_cast<const ::Nmea2k::AlarmLimit*>(
      &::Nmea2k::_AlarmLimit_default_instance_);
}
inline ::Nmea2k::AlarmLimit* MeteringDevice::release_highlimit() {
  // @@protoc_insertion_point(field_release:Nmea2k.MeteringDevice.HighLimit)
  
  ::Nmea2k::AlarmLimit* temp = highlimit_;
  highlimit_ = NULL;
  return temp;
}
inline ::Nmea2k::AlarmLimit* MeteringDevice::mutable_highlimit() {
  
  if (highlimit_ == NULL) {
    auto* p = CreateMaybeMessage<::Nmea2k::AlarmLimit>(GetArenaNoVirtual());
    highlimit_ = p;
  }
  // @@protoc_insertion_point(field_mutable:Nmea2k.MeteringDevice.HighLimit)
  return highlimit_;
}
inline void MeteringDevice::set_allocated_highlimit(::Nmea2k::AlarmLimit* highlimit) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete highlimit_;
  }
  if (highlimit) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      highlimit = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, highlimit, submessage_arena);
    }
    
  } else {
    
  }
  highlimit_ = highlimit;
  // @@protoc_insertion_point(field_set_allocated:Nmea2k.MeteringDevice.HighLimit)
}

// .Nmea2k.AlarmLimit VeryHighLimit = 16;
inline bool MeteringDevice::has_veryhighlimit() const {
  return this != internal_default_instance() && veryhighlimit_ != NULL;
}
inline void MeteringDevice::clear_veryhighlimit() {
  if (GetArenaNoVirtual() == NULL && veryhighlimit_ != NULL) {
    delete veryhighlimit_;
  }
  veryhighlimit_ = NULL;
}
inline const ::Nmea2k::AlarmLimit& MeteringDevice::_internal_veryhighlimit() const {
  return *veryhighlimit_;
}
inline const ::Nmea2k::AlarmLimit& MeteringDevice::veryhighlimit() const {
  const ::Nmea2k::AlarmLimit* p = veryhighlimit_;
  // @@protoc_insertion_point(field_get:Nmea2k.MeteringDevice.VeryHighLimit)
  return p != NULL ? *p : *reinterpret_cast<const ::Nmea2k::AlarmLimit*>(
      &::Nmea2k::_AlarmLimit_default_instance_);
}
inline ::Nmea2k::AlarmLimit* MeteringDevice::release_veryhighlimit() {
  // @@protoc_insertion_point(field_release:Nmea2k.MeteringDevice.VeryHighLimit)
  
  ::Nmea2k::AlarmLimit* temp = veryhighlimit_;
  veryhighlimit_ = NULL;
  return temp;
}
inline ::Nmea2k::AlarmLimit* MeteringDevice::mutable_veryhighlimit() {
  
  if (veryhighlimit_ == NULL) {
    auto* p = CreateMaybeMessage<::Nmea2k::AlarmLimit>(GetArenaNoVirtual());
    veryhighlimit_ = p;
  }
  // @@protoc_insertion_point(field_mutable:Nmea2k.MeteringDevice.VeryHighLimit)
  return veryhighlimit_;
}
inline void MeteringDevice::set_allocated_veryhighlimit(::Nmea2k::AlarmLimit* veryhighlimit) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete veryhighlimit_;
  }
  if (veryhighlimit) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      veryhighlimit = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, veryhighlimit, submessage_arena);
    }
    
  } else {
    
  }
  veryhighlimit_ = veryhighlimit;
  // @@protoc_insertion_point(field_set_allocated:Nmea2k.MeteringDevice.VeryHighLimit)
}

// .Nmea2k.AlarmLimit Frequency = 17;
inline bool MeteringDevice::has_frequency() const {
  return this != internal_default_instance() && frequency_ != NULL;
}
inline void MeteringDevice::clear_frequency() {
  if (GetArenaNoVirtual() == NULL && frequency_ != NULL) {
    delete frequency_;
  }
  frequency_ = NULL;
}
inline const ::Nmea2k::AlarmLimit& MeteringDevice::_internal_frequency() const {
  return *frequency_;
}
inline const ::Nmea2k::AlarmLimit& MeteringDevice::frequency() const {
  const ::Nmea2k::AlarmLimit* p = frequency_;
  // @@protoc_insertion_point(field_get:Nmea2k.MeteringDevice.Frequency)
  return p != NULL ? *p : *reinterpret_cast<const ::Nmea2k::AlarmLimit*>(
      &::Nmea2k::_AlarmLimit_default_instance_);
}
inline ::Nmea2k::AlarmLimit* MeteringDevice::release_frequency() {
  // @@protoc_insertion_point(field_release:Nmea2k.MeteringDevice.Frequency)
  
  ::Nmea2k::AlarmLimit* temp = frequency_;
  frequency_ = NULL;
  return temp;
}
inline ::Nmea2k::AlarmLimit* MeteringDevice::mutable_frequency() {
  
  if (frequency_ == NULL) {
    auto* p = CreateMaybeMessage<::Nmea2k::AlarmLimit>(GetArenaNoVirtual());
    frequency_ = p;
  }
  // @@protoc_insertion_point(field_mutable:Nmea2k.MeteringDevice.Frequency)
  return frequency_;
}
inline void MeteringDevice::set_allocated_frequency(::Nmea2k::AlarmLimit* frequency) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete frequency_;
  }
  if (frequency) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      frequency = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, frequency, submessage_arena);
    }
    
  } else {
    
  }
  frequency_ = frequency;
  // @@protoc_insertion_point(field_set_allocated:Nmea2k.MeteringDevice.Frequency)
}

// .Nmea2k.AlarmLimit LowVoltage = 18;
inline bool MeteringDevice::has_lowvoltage() const {
  return this != internal_default_instance() && lowvoltage_ != NULL;
}
inline void MeteringDevice::clear_lowvoltage() {
  if (GetArenaNoVirtual() == NULL && lowvoltage_ != NULL) {
    delete lowvoltage_;
  }
  lowvoltage_ = NULL;
}
inline const ::Nmea2k::AlarmLimit& MeteringDevice::_internal_lowvoltage() const {
  return *lowvoltage_;
}
inline const ::Nmea2k::AlarmLimit& MeteringDevice::lowvoltage() const {
  const ::Nmea2k::AlarmLimit* p = lowvoltage_;
  // @@protoc_insertion_point(field_get:Nmea2k.MeteringDevice.LowVoltage)
  return p != NULL ? *p : *reinterpret_cast<const ::Nmea2k::AlarmLimit*>(
      &::Nmea2k::_AlarmLimit_default_instance_);
}
inline ::Nmea2k::AlarmLimit* MeteringDevice::release_lowvoltage() {
  // @@protoc_insertion_point(field_release:Nmea2k.MeteringDevice.LowVoltage)
  
  ::Nmea2k::AlarmLimit* temp = lowvoltage_;
  lowvoltage_ = NULL;
  return temp;
}
inline ::Nmea2k::AlarmLimit* MeteringDevice::mutable_lowvoltage() {
  
  if (lowvoltage_ == NULL) {
    auto* p = CreateMaybeMessage<::Nmea2k::AlarmLimit>(GetArenaNoVirtual());
    lowvoltage_ = p;
  }
  // @@protoc_insertion_point(field_mutable:Nmea2k.MeteringDevice.LowVoltage)
  return lowvoltage_;
}
inline void MeteringDevice::set_allocated_lowvoltage(::Nmea2k::AlarmLimit* lowvoltage) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete lowvoltage_;
  }
  if (lowvoltage) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      lowvoltage = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, lowvoltage, submessage_arena);
    }
    
  } else {
    
  }
  lowvoltage_ = lowvoltage;
  // @@protoc_insertion_point(field_set_allocated:Nmea2k.MeteringDevice.LowVoltage)
}

// .Nmea2k.AlarmLimit VeryLowVoltage = 19;
inline bool MeteringDevice::has_verylowvoltage() const {
  return this != internal_default_instance() && verylowvoltage_ != NULL;
}
inline void MeteringDevice::clear_verylowvoltage() {
  if (GetArenaNoVirtual() == NULL && verylowvoltage_ != NULL) {
    delete verylowvoltage_;
  }
  verylowvoltage_ = NULL;
}
inline const ::Nmea2k::AlarmLimit& MeteringDevice::_internal_verylowvoltage() const {
  return *verylowvoltage_;
}
inline const ::Nmea2k::AlarmLimit& MeteringDevice::verylowvoltage() const {
  const ::Nmea2k::AlarmLimit* p = verylowvoltage_;
  // @@protoc_insertion_point(field_get:Nmea2k.MeteringDevice.VeryLowVoltage)
  return p != NULL ? *p : *reinterpret_cast<const ::Nmea2k::AlarmLimit*>(
      &::Nmea2k::_AlarmLimit_default_instance_);
}
inline ::Nmea2k::AlarmLimit* MeteringDevice::release_verylowvoltage() {
  // @@protoc_insertion_point(field_release:Nmea2k.MeteringDevice.VeryLowVoltage)
  
  ::Nmea2k::AlarmLimit* temp = verylowvoltage_;
  verylowvoltage_ = NULL;
  return temp;
}
inline ::Nmea2k::AlarmLimit* MeteringDevice::mutable_verylowvoltage() {
  
  if (verylowvoltage_ == NULL) {
    auto* p = CreateMaybeMessage<::Nmea2k::AlarmLimit>(GetArenaNoVirtual());
    verylowvoltage_ = p;
  }
  // @@protoc_insertion_point(field_mutable:Nmea2k.MeteringDevice.VeryLowVoltage)
  return verylowvoltage_;
}
inline void MeteringDevice::set_allocated_verylowvoltage(::Nmea2k::AlarmLimit* verylowvoltage) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete verylowvoltage_;
  }
  if (verylowvoltage) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      verylowvoltage = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, verylowvoltage, submessage_arena);
    }
    
  } else {
    
  }
  verylowvoltage_ = verylowvoltage;
  // @@protoc_insertion_point(field_set_allocated:Nmea2k.MeteringDevice.VeryLowVoltage)
}

// .Nmea2k.AlarmLimit HighVoltage = 20;
inline bool MeteringDevice::has_highvoltage() const {
  return this != internal_default_instance() && highvoltage_ != NULL;
}
inline void MeteringDevice::clear_highvoltage() {
  if (GetArenaNoVirtual() == NULL && highvoltage_ != NULL) {
    delete highvoltage_;
  }
  highvoltage_ = NULL;
}
inline const ::Nmea2k::AlarmLimit& MeteringDevice::_internal_highvoltage() const {
  return *highvoltage_;
}
inline const ::Nmea2k::AlarmLimit& MeteringDevice::highvoltage() const {
  const ::Nmea2k::AlarmLimit* p = highvoltage_;
  // @@protoc_insertion_point(field_get:Nmea2k.MeteringDevice.HighVoltage)
  return p != NULL ? *p : *reinterpret_cast<const ::Nmea2k::AlarmLimit*>(
      &::Nmea2k::_AlarmLimit_default_instance_);
}
inline ::Nmea2k::AlarmLimit* MeteringDevice::release_highvoltage() {
  // @@protoc_insertion_point(field_release:Nmea2k.MeteringDevice.HighVoltage)
  
  ::Nmea2k::AlarmLimit* temp = highvoltage_;
  highvoltage_ = NULL;
  return temp;
}
inline ::Nmea2k::AlarmLimit* MeteringDevice::mutable_highvoltage() {
  
  if (highvoltage_ == NULL) {
    auto* p = CreateMaybeMessage<::Nmea2k::AlarmLimit>(GetArenaNoVirtual());
    highvoltage_ = p;
  }
  // @@protoc_insertion_point(field_mutable:Nmea2k.MeteringDevice.HighVoltage)
  return highvoltage_;
}
inline void MeteringDevice::set_allocated_highvoltage(::Nmea2k::AlarmLimit* highvoltage) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete highvoltage_;
  }
  if (highvoltage) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      highvoltage = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, highvoltage, submessage_arena);
    }
    
  } else {
    
  }
  highvoltage_ = highvoltage;
  // @@protoc_insertion_point(field_set_allocated:Nmea2k.MeteringDevice.HighVoltage)
}

// bool CanResetCapacity = 21;
inline void MeteringDevice::clear_canresetcapacity() {
  canresetcapacity_ = false;
}
inline bool MeteringDevice::canresetcapacity() const {
  // @@protoc_insertion_point(field_get:Nmea2k.MeteringDevice.CanResetCapacity)
  return canresetcapacity_;
}
inline void MeteringDevice::set_canresetcapacity(bool value) {
  
  canresetcapacity_ = value;
  // @@protoc_insertion_point(field_set:Nmea2k.MeteringDevice.CanResetCapacity)
}

// .Nmea2k.MeteringDevice.eDCType DCType = 22;
inline void MeteringDevice::clear_dctype() {
  dctype_ = 0;
}
inline ::Nmea2k::MeteringDevice_eDCType MeteringDevice::dctype() const {
  // @@protoc_insertion_point(field_get:Nmea2k.MeteringDevice.DCType)
  return static_cast< ::Nmea2k::MeteringDevice_eDCType >(dctype_);
}
inline void MeteringDevice::set_dctype(::Nmea2k::MeteringDevice_eDCType value) {
  
  dctype_ = value;
  // @@protoc_insertion_point(field_set:Nmea2k.MeteringDevice.DCType)
}

// bool ShowVoltage = 23;
inline void MeteringDevice::clear_showvoltage() {
  showvoltage_ = false;
}
inline bool MeteringDevice::showvoltage() const {
  // @@protoc_insertion_point(field_get:Nmea2k.MeteringDevice.ShowVoltage)
  return showvoltage_;
}
inline void MeteringDevice::set_showvoltage(bool value) {
  
  showvoltage_ = value;
  // @@protoc_insertion_point(field_set:Nmea2k.MeteringDevice.ShowVoltage)
}

// bool ShowCurrent = 24;
inline void MeteringDevice::clear_showcurrent() {
  showcurrent_ = false;
}
inline bool MeteringDevice::showcurrent() const {
  // @@protoc_insertion_point(field_get:Nmea2k.MeteringDevice.ShowCurrent)
  return showcurrent_;
}
inline void MeteringDevice::set_showcurrent(bool value) {
  
  showcurrent_ = value;
  // @@protoc_insertion_point(field_set:Nmea2k.MeteringDevice.ShowCurrent)
}

// bool ShowStateOfCharge = 25;
inline void MeteringDevice::clear_showstateofcharge() {
  showstateofcharge_ = false;
}
inline bool MeteringDevice::showstateofcharge() const {
  // @@protoc_insertion_point(field_get:Nmea2k.MeteringDevice.ShowStateOfCharge)
  return showstateofcharge_;
}
inline void MeteringDevice::set_showstateofcharge(bool value) {
  
  showstateofcharge_ = value;
  // @@protoc_insertion_point(field_set:Nmea2k.MeteringDevice.ShowStateOfCharge)
}

// bool ShowTemperature = 26;
inline void MeteringDevice::clear_showtemperature() {
  showtemperature_ = false;
}
inline bool MeteringDevice::showtemperature() const {
  // @@protoc_insertion_point(field_get:Nmea2k.MeteringDevice.ShowTemperature)
  return showtemperature_;
}
inline void MeteringDevice::set_showtemperature(bool value) {
  
  showtemperature_ = value;
  // @@protoc_insertion_point(field_set:Nmea2k.MeteringDevice.ShowTemperature)
}

// bool ShowTimeOfRemaining = 27;
inline void MeteringDevice::clear_showtimeofremaining() {
  showtimeofremaining_ = false;
}
inline bool MeteringDevice::showtimeofremaining() const {
  // @@protoc_insertion_point(field_get:Nmea2k.MeteringDevice.ShowTimeOfRemaining)
  return showtimeofremaining_;
}
inline void MeteringDevice::set_showtimeofremaining(bool value) {
  
  showtimeofremaining_ = value;
  // @@protoc_insertion_point(field_set:Nmea2k.MeteringDevice.ShowTimeOfRemaining)
}

// .Nmea2k.MeteringDevice.eACType ACType = 31;
inline void MeteringDevice::clear_actype() {
  actype_ = 0;
}
inline ::Nmea2k::MeteringDevice_eACType MeteringDevice::actype() const {
  // @@protoc_insertion_point(field_get:Nmea2k.MeteringDevice.ACType)
  return static_cast< ::Nmea2k::MeteringDevice_eACType >(actype_);
}
inline void MeteringDevice::set_actype(::Nmea2k::MeteringDevice_eACType value) {
  
  actype_ = value;
  // @@protoc_insertion_point(field_set:Nmea2k.MeteringDevice.ACType)
}

// -------------------------------------------------------------------

// MonitoringType

// -------------------------------------------------------------------

// MonitoringDevice

// .Nmea2k.ConfigRequest.eConfigType DisplayType = 1;
inline void MonitoringDevice::clear_displaytype() {
  displaytype_ = 0;
}
inline ::Nmea2k::ConfigRequest_eConfigType MonitoringDevice::displaytype() const {
  // @@protoc_insertion_point(field_get:Nmea2k.MonitoringDevice.DisplayType)
  return static_cast< ::Nmea2k::ConfigRequest_eConfigType >(displaytype_);
}
inline void MonitoringDevice::set_displaytype(::Nmea2k::ConfigRequest_eConfigType value) {
  
  displaytype_ = value;
  // @@protoc_insertion_point(field_set:Nmea2k.MonitoringDevice.DisplayType)
}

// uint32 Id = 2;
inline void MonitoringDevice::clear_id() {
  id_ = 0u;
}
inline ::google::protobuf::uint32 MonitoringDevice::id() const {
  // @@protoc_insertion_point(field_get:Nmea2k.MonitoringDevice.Id)
  return id_;
}
inline void MonitoringDevice::set_id(::google::protobuf::uint32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:Nmea2k.MonitoringDevice.Id)
}

// string NameUTF8 = 3;
inline void MonitoringDevice::clear_nameutf8() {
  nameutf8_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& MonitoringDevice::nameutf8() const {
  // @@protoc_insertion_point(field_get:Nmea2k.MonitoringDevice.NameUTF8)
  return nameutf8_.GetNoArena();
}
inline void MonitoringDevice::set_nameutf8(const ::std::string& value) {
  
  nameutf8_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Nmea2k.MonitoringDevice.NameUTF8)
}
#if LANG_CXX11
inline void MonitoringDevice::set_nameutf8(::std::string&& value) {
  
  nameutf8_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Nmea2k.MonitoringDevice.NameUTF8)
}
#endif
inline void MonitoringDevice::set_nameutf8(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  nameutf8_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Nmea2k.MonitoringDevice.NameUTF8)
}
inline void MonitoringDevice::set_nameutf8(const char* value, size_t size) {
  
  nameutf8_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Nmea2k.MonitoringDevice.NameUTF8)
}
inline ::std::string* MonitoringDevice::mutable_nameutf8() {
  
  // @@protoc_insertion_point(field_mutable:Nmea2k.MonitoringDevice.NameUTF8)
  return nameutf8_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MonitoringDevice::release_nameutf8() {
  // @@protoc_insertion_point(field_release:Nmea2k.MonitoringDevice.NameUTF8)
  
  return nameutf8_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MonitoringDevice::set_allocated_nameutf8(::std::string* nameutf8) {
  if (nameutf8 != NULL) {
    
  } else {
    
  }
  nameutf8_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), nameutf8);
  // @@protoc_insertion_point(field_set_allocated:Nmea2k.MonitoringDevice.NameUTF8)
}

// .Nmea2k.Instance Instance = 4;
inline bool MonitoringDevice::has_instance() const {
  return this != internal_default_instance() && instance_ != NULL;
}
inline void MonitoringDevice::clear_instance() {
  if (GetArenaNoVirtual() == NULL && instance_ != NULL) {
    delete instance_;
  }
  instance_ = NULL;
}
inline const ::Nmea2k::Instance& MonitoringDevice::_internal_instance() const {
  return *instance_;
}
inline const ::Nmea2k::Instance& MonitoringDevice::instance() const {
  const ::Nmea2k::Instance* p = instance_;
  // @@protoc_insertion_point(field_get:Nmea2k.MonitoringDevice.Instance)
  return p != NULL ? *p : *reinterpret_cast<const ::Nmea2k::Instance*>(
      &::Nmea2k::_Instance_default_instance_);
}
inline ::Nmea2k::Instance* MonitoringDevice::release_instance() {
  // @@protoc_insertion_point(field_release:Nmea2k.MonitoringDevice.Instance)
  
  ::Nmea2k::Instance* temp = instance_;
  instance_ = NULL;
  return temp;
}
inline ::Nmea2k::Instance* MonitoringDevice::mutable_instance() {
  
  if (instance_ == NULL) {
    auto* p = CreateMaybeMessage<::Nmea2k::Instance>(GetArenaNoVirtual());
    instance_ = p;
  }
  // @@protoc_insertion_point(field_mutable:Nmea2k.MonitoringDevice.Instance)
  return instance_;
}
inline void MonitoringDevice::set_allocated_instance(::Nmea2k::Instance* instance) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete instance_;
  }
  if (instance) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      instance = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, instance, submessage_arena);
    }
    
  } else {
    
  }
  instance_ = instance;
  // @@protoc_insertion_point(field_set_allocated:Nmea2k.MonitoringDevice.Instance)
}

// .Nmea2k.MonitoringType.eTankType TankType = 5;
inline void MonitoringDevice::clear_tanktype() {
  tanktype_ = 0;
}
inline ::Nmea2k::MonitoringType_eTankType MonitoringDevice::tanktype() const {
  // @@protoc_insertion_point(field_get:Nmea2k.MonitoringDevice.TankType)
  return static_cast< ::Nmea2k::MonitoringType_eTankType >(tanktype_);
}
inline void MonitoringDevice::set_tanktype(::Nmea2k::MonitoringType_eTankType value) {
  
  tanktype_ = value;
  // @@protoc_insertion_point(field_set:Nmea2k.MonitoringDevice.TankType)
}

// .Nmea2k.MonitoringType.ePressureType PressureType = 6;
inline void MonitoringDevice::clear_pressuretype() {
  pressuretype_ = 0;
}
inline ::Nmea2k::MonitoringType_ePressureType MonitoringDevice::pressuretype() const {
  // @@protoc_insertion_point(field_get:Nmea2k.MonitoringDevice.PressureType)
  return static_cast< ::Nmea2k::MonitoringType_ePressureType >(pressuretype_);
}
inline void MonitoringDevice::set_pressuretype(::Nmea2k::MonitoringType_ePressureType value) {
  
  pressuretype_ = value;
  // @@protoc_insertion_point(field_set:Nmea2k.MonitoringDevice.PressureType)
}

// .Nmea2k.MonitoringType.eTemperatureType TemperatureType = 7;
inline void MonitoringDevice::clear_temperaturetype() {
  temperaturetype_ = 0;
}
inline ::Nmea2k::MonitoringType_eTemperatureType MonitoringDevice::temperaturetype() const {
  // @@protoc_insertion_point(field_get:Nmea2k.MonitoringDevice.TemperatureType)
  return static_cast< ::Nmea2k::MonitoringType_eTemperatureType >(temperaturetype_);
}
inline void MonitoringDevice::set_temperaturetype(::Nmea2k::MonitoringType_eTemperatureType value) {
  
  temperaturetype_ = value;
  // @@protoc_insertion_point(field_set:Nmea2k.MonitoringDevice.TemperatureType)
}

// .Nmea2k.DataId CircuitId = 8;
inline bool MonitoringDevice::has_circuitid() const {
  return this != internal_default_instance() && circuitid_ != NULL;
}
inline void MonitoringDevice::clear_circuitid() {
  if (GetArenaNoVirtual() == NULL && circuitid_ != NULL) {
    delete circuitid_;
  }
  circuitid_ = NULL;
}
inline const ::Nmea2k::DataId& MonitoringDevice::_internal_circuitid() const {
  return *circuitid_;
}
inline const ::Nmea2k::DataId& MonitoringDevice::circuitid() const {
  const ::Nmea2k::DataId* p = circuitid_;
  // @@protoc_insertion_point(field_get:Nmea2k.MonitoringDevice.CircuitId)
  return p != NULL ? *p : *reinterpret_cast<const ::Nmea2k::DataId*>(
      &::Nmea2k::_DataId_default_instance_);
}
inline ::Nmea2k::DataId* MonitoringDevice::release_circuitid() {
  // @@protoc_insertion_point(field_release:Nmea2k.MonitoringDevice.CircuitId)
  
  ::Nmea2k::DataId* temp = circuitid_;
  circuitid_ = NULL;
  return temp;
}
inline ::Nmea2k::DataId* MonitoringDevice::mutable_circuitid() {
  
  if (circuitid_ == NULL) {
    auto* p = CreateMaybeMessage<::Nmea2k::DataId>(GetArenaNoVirtual());
    circuitid_ = p;
  }
  // @@protoc_insertion_point(field_mutable:Nmea2k.MonitoringDevice.CircuitId)
  return circuitid_;
}
inline void MonitoringDevice::set_allocated_circuitid(::Nmea2k::DataId* circuitid) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete circuitid_;
  }
  if (circuitid) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      circuitid = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, circuitid, submessage_arena);
    }
    
  } else {
    
  }
  circuitid_ = circuitid;
  // @@protoc_insertion_point(field_set_allocated:Nmea2k.MonitoringDevice.CircuitId)
}

// .Nmea2k.CircuitDevice.eSwitchType SwitchType = 9;
inline void MonitoringDevice::clear_switchtype() {
  switchtype_ = 0;
}
inline ::Nmea2k::CircuitDevice_eSwitchType MonitoringDevice::switchtype() const {
  // @@protoc_insertion_point(field_get:Nmea2k.MonitoringDevice.SwitchType)
  return static_cast< ::Nmea2k::CircuitDevice_eSwitchType >(switchtype_);
}
inline void MonitoringDevice::set_switchtype(::Nmea2k::CircuitDevice_eSwitchType value) {
  
  switchtype_ = value;
  // @@protoc_insertion_point(field_set:Nmea2k.MonitoringDevice.SwitchType)
}

// .Nmea2k.CircuitDevice.eConfirmType ConfirmDialog = 10;
inline void MonitoringDevice::clear_confirmdialog() {
  confirmdialog_ = 0;
}
inline ::Nmea2k::CircuitDevice_eConfirmType MonitoringDevice::confirmdialog() const {
  // @@protoc_insertion_point(field_get:Nmea2k.MonitoringDevice.ConfirmDialog)
  return static_cast< ::Nmea2k::CircuitDevice_eConfirmType >(confirmdialog_);
}
inline void MonitoringDevice::set_confirmdialog(::Nmea2k::CircuitDevice_eConfirmType value) {
  
  confirmdialog_ = value;
  // @@protoc_insertion_point(field_set:Nmea2k.MonitoringDevice.ConfirmDialog)
}

// string CircuitNameUTF8 = 11;
inline void MonitoringDevice::clear_circuitnameutf8() {
  circuitnameutf8_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& MonitoringDevice::circuitnameutf8() const {
  // @@protoc_insertion_point(field_get:Nmea2k.MonitoringDevice.CircuitNameUTF8)
  return circuitnameutf8_.GetNoArena();
}
inline void MonitoringDevice::set_circuitnameutf8(const ::std::string& value) {
  
  circuitnameutf8_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Nmea2k.MonitoringDevice.CircuitNameUTF8)
}
#if LANG_CXX11
inline void MonitoringDevice::set_circuitnameutf8(::std::string&& value) {
  
  circuitnameutf8_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Nmea2k.MonitoringDevice.CircuitNameUTF8)
}
#endif
inline void MonitoringDevice::set_circuitnameutf8(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  circuitnameutf8_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Nmea2k.MonitoringDevice.CircuitNameUTF8)
}
inline void MonitoringDevice::set_circuitnameutf8(const char* value, size_t size) {
  
  circuitnameutf8_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Nmea2k.MonitoringDevice.CircuitNameUTF8)
}
inline ::std::string* MonitoringDevice::mutable_circuitnameutf8() {
  
  // @@protoc_insertion_point(field_mutable:Nmea2k.MonitoringDevice.CircuitNameUTF8)
  return circuitnameutf8_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MonitoringDevice::release_circuitnameutf8() {
  // @@protoc_insertion_point(field_release:Nmea2k.MonitoringDevice.CircuitNameUTF8)
  
  return circuitnameutf8_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MonitoringDevice::set_allocated_circuitnameutf8(::std::string* circuitnameutf8) {
  if (circuitnameutf8 != NULL) {
    
  } else {
    
  }
  circuitnameutf8_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), circuitnameutf8);
  // @@protoc_insertion_point(field_set_allocated:Nmea2k.MonitoringDevice.CircuitNameUTF8)
}

// bool HighTemperature = 12;
inline void MonitoringDevice::clear_hightemperature() {
  hightemperature_ = false;
}
inline bool MonitoringDevice::hightemperature() const {
  // @@protoc_insertion_point(field_get:Nmea2k.MonitoringDevice.HighTemperature)
  return hightemperature_;
}
inline void MonitoringDevice::set_hightemperature(bool value) {
  
  hightemperature_ = value;
  // @@protoc_insertion_point(field_set:Nmea2k.MonitoringDevice.HighTemperature)
}

// bool AtmosphericPressure = 13;
inline void MonitoringDevice::clear_atmosphericpressure() {
  atmosphericpressure_ = false;
}
inline bool MonitoringDevice::atmosphericpressure() const {
  // @@protoc_insertion_point(field_get:Nmea2k.MonitoringDevice.AtmosphericPressure)
  return atmosphericpressure_;
}
inline void MonitoringDevice::set_atmosphericpressure(bool value) {
  
  atmosphericpressure_ = value;
  // @@protoc_insertion_point(field_set:Nmea2k.MonitoringDevice.AtmosphericPressure)
}

// .Nmea2k.AlarmLimit VeryLowLimit = 14;
inline bool MonitoringDevice::has_verylowlimit() const {
  return this != internal_default_instance() && verylowlimit_ != NULL;
}
inline void MonitoringDevice::clear_verylowlimit() {
  if (GetArenaNoVirtual() == NULL && verylowlimit_ != NULL) {
    delete verylowlimit_;
  }
  verylowlimit_ = NULL;
}
inline const ::Nmea2k::AlarmLimit& MonitoringDevice::_internal_verylowlimit() const {
  return *verylowlimit_;
}
inline const ::Nmea2k::AlarmLimit& MonitoringDevice::verylowlimit() const {
  const ::Nmea2k::AlarmLimit* p = verylowlimit_;
  // @@protoc_insertion_point(field_get:Nmea2k.MonitoringDevice.VeryLowLimit)
  return p != NULL ? *p : *reinterpret_cast<const ::Nmea2k::AlarmLimit*>(
      &::Nmea2k::_AlarmLimit_default_instance_);
}
inline ::Nmea2k::AlarmLimit* MonitoringDevice::release_verylowlimit() {
  // @@protoc_insertion_point(field_release:Nmea2k.MonitoringDevice.VeryLowLimit)
  
  ::Nmea2k::AlarmLimit* temp = verylowlimit_;
  verylowlimit_ = NULL;
  return temp;
}
inline ::Nmea2k::AlarmLimit* MonitoringDevice::mutable_verylowlimit() {
  
  if (verylowlimit_ == NULL) {
    auto* p = CreateMaybeMessage<::Nmea2k::AlarmLimit>(GetArenaNoVirtual());
    verylowlimit_ = p;
  }
  // @@protoc_insertion_point(field_mutable:Nmea2k.MonitoringDevice.VeryLowLimit)
  return verylowlimit_;
}
inline void MonitoringDevice::set_allocated_verylowlimit(::Nmea2k::AlarmLimit* verylowlimit) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete verylowlimit_;
  }
  if (verylowlimit) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      verylowlimit = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, verylowlimit, submessage_arena);
    }
    
  } else {
    
  }
  verylowlimit_ = verylowlimit;
  // @@protoc_insertion_point(field_set_allocated:Nmea2k.MonitoringDevice.VeryLowLimit)
}

// .Nmea2k.AlarmLimit LowLimit = 15;
inline bool MonitoringDevice::has_lowlimit() const {
  return this != internal_default_instance() && lowlimit_ != NULL;
}
inline void MonitoringDevice::clear_lowlimit() {
  if (GetArenaNoVirtual() == NULL && lowlimit_ != NULL) {
    delete lowlimit_;
  }
  lowlimit_ = NULL;
}
inline const ::Nmea2k::AlarmLimit& MonitoringDevice::_internal_lowlimit() const {
  return *lowlimit_;
}
inline const ::Nmea2k::AlarmLimit& MonitoringDevice::lowlimit() const {
  const ::Nmea2k::AlarmLimit* p = lowlimit_;
  // @@protoc_insertion_point(field_get:Nmea2k.MonitoringDevice.LowLimit)
  return p != NULL ? *p : *reinterpret_cast<const ::Nmea2k::AlarmLimit*>(
      &::Nmea2k::_AlarmLimit_default_instance_);
}
inline ::Nmea2k::AlarmLimit* MonitoringDevice::release_lowlimit() {
  // @@protoc_insertion_point(field_release:Nmea2k.MonitoringDevice.LowLimit)
  
  ::Nmea2k::AlarmLimit* temp = lowlimit_;
  lowlimit_ = NULL;
  return temp;
}
inline ::Nmea2k::AlarmLimit* MonitoringDevice::mutable_lowlimit() {
  
  if (lowlimit_ == NULL) {
    auto* p = CreateMaybeMessage<::Nmea2k::AlarmLimit>(GetArenaNoVirtual());
    lowlimit_ = p;
  }
  // @@protoc_insertion_point(field_mutable:Nmea2k.MonitoringDevice.LowLimit)
  return lowlimit_;
}
inline void MonitoringDevice::set_allocated_lowlimit(::Nmea2k::AlarmLimit* lowlimit) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete lowlimit_;
  }
  if (lowlimit) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      lowlimit = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, lowlimit, submessage_arena);
    }
    
  } else {
    
  }
  lowlimit_ = lowlimit;
  // @@protoc_insertion_point(field_set_allocated:Nmea2k.MonitoringDevice.LowLimit)
}

// .Nmea2k.AlarmLimit HighLimit = 16;
inline bool MonitoringDevice::has_highlimit() const {
  return this != internal_default_instance() && highlimit_ != NULL;
}
inline void MonitoringDevice::clear_highlimit() {
  if (GetArenaNoVirtual() == NULL && highlimit_ != NULL) {
    delete highlimit_;
  }
  highlimit_ = NULL;
}
inline const ::Nmea2k::AlarmLimit& MonitoringDevice::_internal_highlimit() const {
  return *highlimit_;
}
inline const ::Nmea2k::AlarmLimit& MonitoringDevice::highlimit() const {
  const ::Nmea2k::AlarmLimit* p = highlimit_;
  // @@protoc_insertion_point(field_get:Nmea2k.MonitoringDevice.HighLimit)
  return p != NULL ? *p : *reinterpret_cast<const ::Nmea2k::AlarmLimit*>(
      &::Nmea2k::_AlarmLimit_default_instance_);
}
inline ::Nmea2k::AlarmLimit* MonitoringDevice::release_highlimit() {
  // @@protoc_insertion_point(field_release:Nmea2k.MonitoringDevice.HighLimit)
  
  ::Nmea2k::AlarmLimit* temp = highlimit_;
  highlimit_ = NULL;
  return temp;
}
inline ::Nmea2k::AlarmLimit* MonitoringDevice::mutable_highlimit() {
  
  if (highlimit_ == NULL) {
    auto* p = CreateMaybeMessage<::Nmea2k::AlarmLimit>(GetArenaNoVirtual());
    highlimit_ = p;
  }
  // @@protoc_insertion_point(field_mutable:Nmea2k.MonitoringDevice.HighLimit)
  return highlimit_;
}
inline void MonitoringDevice::set_allocated_highlimit(::Nmea2k::AlarmLimit* highlimit) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete highlimit_;
  }
  if (highlimit) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      highlimit = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, highlimit, submessage_arena);
    }
    
  } else {
    
  }
  highlimit_ = highlimit;
  // @@protoc_insertion_point(field_set_allocated:Nmea2k.MonitoringDevice.HighLimit)
}

// .Nmea2k.AlarmLimit VeryHighLimit = 17;
inline bool MonitoringDevice::has_veryhighlimit() const {
  return this != internal_default_instance() && veryhighlimit_ != NULL;
}
inline void MonitoringDevice::clear_veryhighlimit() {
  if (GetArenaNoVirtual() == NULL && veryhighlimit_ != NULL) {
    delete veryhighlimit_;
  }
  veryhighlimit_ = NULL;
}
inline const ::Nmea2k::AlarmLimit& MonitoringDevice::_internal_veryhighlimit() const {
  return *veryhighlimit_;
}
inline const ::Nmea2k::AlarmLimit& MonitoringDevice::veryhighlimit() const {
  const ::Nmea2k::AlarmLimit* p = veryhighlimit_;
  // @@protoc_insertion_point(field_get:Nmea2k.MonitoringDevice.VeryHighLimit)
  return p != NULL ? *p : *reinterpret_cast<const ::Nmea2k::AlarmLimit*>(
      &::Nmea2k::_AlarmLimit_default_instance_);
}
inline ::Nmea2k::AlarmLimit* MonitoringDevice::release_veryhighlimit() {
  // @@protoc_insertion_point(field_release:Nmea2k.MonitoringDevice.VeryHighLimit)
  
  ::Nmea2k::AlarmLimit* temp = veryhighlimit_;
  veryhighlimit_ = NULL;
  return temp;
}
inline ::Nmea2k::AlarmLimit* MonitoringDevice::mutable_veryhighlimit() {
  
  if (veryhighlimit_ == NULL) {
    auto* p = CreateMaybeMessage<::Nmea2k::AlarmLimit>(GetArenaNoVirtual());
    veryhighlimit_ = p;
  }
  // @@protoc_insertion_point(field_mutable:Nmea2k.MonitoringDevice.VeryHighLimit)
  return veryhighlimit_;
}
inline void MonitoringDevice::set_allocated_veryhighlimit(::Nmea2k::AlarmLimit* veryhighlimit) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete veryhighlimit_;
  }
  if (veryhighlimit) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      veryhighlimit = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, veryhighlimit, submessage_arena);
    }
    
  } else {
    
  }
  veryhighlimit_ = veryhighlimit;
  // @@protoc_insertion_point(field_set_allocated:Nmea2k.MonitoringDevice.VeryHighLimit)
}

// float TankCapacity = 20;
inline void MonitoringDevice::clear_tankcapacity() {
  tankcapacity_ = 0;
}
inline float MonitoringDevice::tankcapacity() const {
  // @@protoc_insertion_point(field_get:Nmea2k.MonitoringDevice.TankCapacity)
  return tankcapacity_;
}
inline void MonitoringDevice::set_tankcapacity(float value) {
  
  tankcapacity_ = value;
  // @@protoc_insertion_point(field_set:Nmea2k.MonitoringDevice.TankCapacity)
}

// uint32 Address = 22;
inline void MonitoringDevice::clear_address() {
  address_ = 0u;
}
inline ::google::protobuf::uint32 MonitoringDevice::address() const {
  // @@protoc_insertion_point(field_get:Nmea2k.MonitoringDevice.Address)
  return address_;
}
inline void MonitoringDevice::set_address(::google::protobuf::uint32 value) {
  
  address_ = value;
  // @@protoc_insertion_point(field_set:Nmea2k.MonitoringDevice.Address)
}

// -------------------------------------------------------------------

// ACMainContactorDevice

// uint32 SystemStateId = 1;
inline void ACMainContactorDevice::clear_systemstateid() {
  systemstateid_ = 0u;
}
inline ::google::protobuf::uint32 ACMainContactorDevice::systemstateid() const {
  // @@protoc_insertion_point(field_get:Nmea2k.ACMainContactorDevice.SystemStateId)
  return systemstateid_;
}
inline void ACMainContactorDevice::set_systemstateid(::google::protobuf::uint32 value) {
  
  systemstateid_ = value;
  // @@protoc_insertion_point(field_set:Nmea2k.ACMainContactorDevice.SystemStateId)
}

// string NameUTF8 = 2;
inline void ACMainContactorDevice::clear_nameutf8() {
  nameutf8_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ACMainContactorDevice::nameutf8() const {
  // @@protoc_insertion_point(field_get:Nmea2k.ACMainContactorDevice.NameUTF8)
  return nameutf8_.GetNoArena();
}
inline void ACMainContactorDevice::set_nameutf8(const ::std::string& value) {
  
  nameutf8_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Nmea2k.ACMainContactorDevice.NameUTF8)
}
#if LANG_CXX11
inline void ACMainContactorDevice::set_nameutf8(::std::string&& value) {
  
  nameutf8_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Nmea2k.ACMainContactorDevice.NameUTF8)
}
#endif
inline void ACMainContactorDevice::set_nameutf8(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  nameutf8_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Nmea2k.ACMainContactorDevice.NameUTF8)
}
inline void ACMainContactorDevice::set_nameutf8(const char* value, size_t size) {
  
  nameutf8_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Nmea2k.ACMainContactorDevice.NameUTF8)
}
inline ::std::string* ACMainContactorDevice::mutable_nameutf8() {
  
  // @@protoc_insertion_point(field_mutable:Nmea2k.ACMainContactorDevice.NameUTF8)
  return nameutf8_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ACMainContactorDevice::release_nameutf8() {
  // @@protoc_insertion_point(field_release:Nmea2k.ACMainContactorDevice.NameUTF8)
  
  return nameutf8_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ACMainContactorDevice::set_allocated_nameutf8(::std::string* nameutf8) {
  if (nameutf8 != NULL) {
    
  } else {
    
  }
  nameutf8_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), nameutf8);
  // @@protoc_insertion_point(field_set_allocated:Nmea2k.ACMainContactorDevice.NameUTF8)
}

// .Nmea2k.DataId ContactorId = 3;
inline bool ACMainContactorDevice::has_contactorid() const {
  return this != internal_default_instance() && contactorid_ != NULL;
}
inline void ACMainContactorDevice::clear_contactorid() {
  if (GetArenaNoVirtual() == NULL && contactorid_ != NULL) {
    delete contactorid_;
  }
  contactorid_ = NULL;
}
inline const ::Nmea2k::DataId& ACMainContactorDevice::_internal_contactorid() const {
  return *contactorid_;
}
inline const ::Nmea2k::DataId& ACMainContactorDevice::contactorid() const {
  const ::Nmea2k::DataId* p = contactorid_;
  // @@protoc_insertion_point(field_get:Nmea2k.ACMainContactorDevice.ContactorId)
  return p != NULL ? *p : *reinterpret_cast<const ::Nmea2k::DataId*>(
      &::Nmea2k::_DataId_default_instance_);
}
inline ::Nmea2k::DataId* ACMainContactorDevice::release_contactorid() {
  // @@protoc_insertion_point(field_release:Nmea2k.ACMainContactorDevice.ContactorId)
  
  ::Nmea2k::DataId* temp = contactorid_;
  contactorid_ = NULL;
  return temp;
}
inline ::Nmea2k::DataId* ACMainContactorDevice::mutable_contactorid() {
  
  if (contactorid_ == NULL) {
    auto* p = CreateMaybeMessage<::Nmea2k::DataId>(GetArenaNoVirtual());
    contactorid_ = p;
  }
  // @@protoc_insertion_point(field_mutable:Nmea2k.ACMainContactorDevice.ContactorId)
  return contactorid_;
}
inline void ACMainContactorDevice::set_allocated_contactorid(::Nmea2k::DataId* contactorid) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete contactorid_;
  }
  if (contactorid) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      contactorid = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, contactorid, submessage_arena);
    }
    
  } else {
    
  }
  contactorid_ = contactorid;
  // @@protoc_insertion_point(field_set_allocated:Nmea2k.ACMainContactorDevice.ContactorId)
}

// .Nmea2k.DataId ContactorToggleId = 4;
inline bool ACMainContactorDevice::has_contactortoggleid() const {
  return this != internal_default_instance() && contactortoggleid_ != NULL;
}
inline void ACMainContactorDevice::clear_contactortoggleid() {
  if (GetArenaNoVirtual() == NULL && contactortoggleid_ != NULL) {
    delete contactortoggleid_;
  }
  contactortoggleid_ = NULL;
}
inline const ::Nmea2k::DataId& ACMainContactorDevice::_internal_contactortoggleid() const {
  return *contactortoggleid_;
}
inline const ::Nmea2k::DataId& ACMainContactorDevice::contactortoggleid() const {
  const ::Nmea2k::DataId* p = contactortoggleid_;
  // @@protoc_insertion_point(field_get:Nmea2k.ACMainContactorDevice.ContactorToggleId)
  return p != NULL ? *p : *reinterpret_cast<const ::Nmea2k::DataId*>(
      &::Nmea2k::_DataId_default_instance_);
}
inline ::Nmea2k::DataId* ACMainContactorDevice::release_contactortoggleid() {
  // @@protoc_insertion_point(field_release:Nmea2k.ACMainContactorDevice.ContactorToggleId)
  
  ::Nmea2k::DataId* temp = contactortoggleid_;
  contactortoggleid_ = NULL;
  return temp;
}
inline ::Nmea2k::DataId* ACMainContactorDevice::mutable_contactortoggleid() {
  
  if (contactortoggleid_ == NULL) {
    auto* p = CreateMaybeMessage<::Nmea2k::DataId>(GetArenaNoVirtual());
    contactortoggleid_ = p;
  }
  // @@protoc_insertion_point(field_mutable:Nmea2k.ACMainContactorDevice.ContactorToggleId)
  return contactortoggleid_;
}
inline void ACMainContactorDevice::set_allocated_contactortoggleid(::Nmea2k::DataId* contactortoggleid) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete contactortoggleid_;
  }
  if (contactortoggleid) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      contactortoggleid = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, contactortoggleid, submessage_arena);
    }
    
  } else {
    
  }
  contactortoggleid_ = contactortoggleid;
  // @@protoc_insertion_point(field_set_allocated:Nmea2k.ACMainContactorDevice.ContactorToggleId)
}

// .Nmea2k.DataId AC1Id = 5;
inline bool ACMainContactorDevice::has_ac1id() const {
  return this != internal_default_instance() && ac1id_ != NULL;
}
inline void ACMainContactorDevice::clear_ac1id() {
  if (GetArenaNoVirtual() == NULL && ac1id_ != NULL) {
    delete ac1id_;
  }
  ac1id_ = NULL;
}
inline const ::Nmea2k::DataId& ACMainContactorDevice::_internal_ac1id() const {
  return *ac1id_;
}
inline const ::Nmea2k::DataId& ACMainContactorDevice::ac1id() const {
  const ::Nmea2k::DataId* p = ac1id_;
  // @@protoc_insertion_point(field_get:Nmea2k.ACMainContactorDevice.AC1Id)
  return p != NULL ? *p : *reinterpret_cast<const ::Nmea2k::DataId*>(
      &::Nmea2k::_DataId_default_instance_);
}
inline ::Nmea2k::DataId* ACMainContactorDevice::release_ac1id() {
  // @@protoc_insertion_point(field_release:Nmea2k.ACMainContactorDevice.AC1Id)
  
  ::Nmea2k::DataId* temp = ac1id_;
  ac1id_ = NULL;
  return temp;
}
inline ::Nmea2k::DataId* ACMainContactorDevice::mutable_ac1id() {
  
  if (ac1id_ == NULL) {
    auto* p = CreateMaybeMessage<::Nmea2k::DataId>(GetArenaNoVirtual());
    ac1id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:Nmea2k.ACMainContactorDevice.AC1Id)
  return ac1id_;
}
inline void ACMainContactorDevice::set_allocated_ac1id(::Nmea2k::DataId* ac1id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete ac1id_;
  }
  if (ac1id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      ac1id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, ac1id, submessage_arena);
    }
    
  } else {
    
  }
  ac1id_ = ac1id;
  // @@protoc_insertion_point(field_set_allocated:Nmea2k.ACMainContactorDevice.AC1Id)
}

// .Nmea2k.DataId AC2Id = 6;
inline bool ACMainContactorDevice::has_ac2id() const {
  return this != internal_default_instance() && ac2id_ != NULL;
}
inline void ACMainContactorDevice::clear_ac2id() {
  if (GetArenaNoVirtual() == NULL && ac2id_ != NULL) {
    delete ac2id_;
  }
  ac2id_ = NULL;
}
inline const ::Nmea2k::DataId& ACMainContactorDevice::_internal_ac2id() const {
  return *ac2id_;
}
inline const ::Nmea2k::DataId& ACMainContactorDevice::ac2id() const {
  const ::Nmea2k::DataId* p = ac2id_;
  // @@protoc_insertion_point(field_get:Nmea2k.ACMainContactorDevice.AC2Id)
  return p != NULL ? *p : *reinterpret_cast<const ::Nmea2k::DataId*>(
      &::Nmea2k::_DataId_default_instance_);
}
inline ::Nmea2k::DataId* ACMainContactorDevice::release_ac2id() {
  // @@protoc_insertion_point(field_release:Nmea2k.ACMainContactorDevice.AC2Id)
  
  ::Nmea2k::DataId* temp = ac2id_;
  ac2id_ = NULL;
  return temp;
}
inline ::Nmea2k::DataId* ACMainContactorDevice::mutable_ac2id() {
  
  if (ac2id_ == NULL) {
    auto* p = CreateMaybeMessage<::Nmea2k::DataId>(GetArenaNoVirtual());
    ac2id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:Nmea2k.ACMainContactorDevice.AC2Id)
  return ac2id_;
}
inline void ACMainContactorDevice::set_allocated_ac2id(::Nmea2k::DataId* ac2id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete ac2id_;
  }
  if (ac2id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      ac2id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, ac2id, submessage_arena);
    }
    
  } else {
    
  }
  ac2id_ = ac2id;
  // @@protoc_insertion_point(field_set_allocated:Nmea2k.ACMainContactorDevice.AC2Id)
}

// .Nmea2k.DataId AC3Id = 7;
inline bool ACMainContactorDevice::has_ac3id() const {
  return this != internal_default_instance() && ac3id_ != NULL;
}
inline void ACMainContactorDevice::clear_ac3id() {
  if (GetArenaNoVirtual() == NULL && ac3id_ != NULL) {
    delete ac3id_;
  }
  ac3id_ = NULL;
}
inline const ::Nmea2k::DataId& ACMainContactorDevice::_internal_ac3id() const {
  return *ac3id_;
}
inline const ::Nmea2k::DataId& ACMainContactorDevice::ac3id() const {
  const ::Nmea2k::DataId* p = ac3id_;
  // @@protoc_insertion_point(field_get:Nmea2k.ACMainContactorDevice.AC3Id)
  return p != NULL ? *p : *reinterpret_cast<const ::Nmea2k::DataId*>(
      &::Nmea2k::_DataId_default_instance_);
}
inline ::Nmea2k::DataId* ACMainContactorDevice::release_ac3id() {
  // @@protoc_insertion_point(field_release:Nmea2k.ACMainContactorDevice.AC3Id)
  
  ::Nmea2k::DataId* temp = ac3id_;
  ac3id_ = NULL;
  return temp;
}
inline ::Nmea2k::DataId* ACMainContactorDevice::mutable_ac3id() {
  
  if (ac3id_ == NULL) {
    auto* p = CreateMaybeMessage<::Nmea2k::DataId>(GetArenaNoVirtual());
    ac3id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:Nmea2k.ACMainContactorDevice.AC3Id)
  return ac3id_;
}
inline void ACMainContactorDevice::set_allocated_ac3id(::Nmea2k::DataId* ac3id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete ac3id_;
  }
  if (ac3id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      ac3id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, ac3id, submessage_arena);
    }
    
  } else {
    
  }
  ac3id_ = ac3id;
  // @@protoc_insertion_point(field_set_allocated:Nmea2k.ACMainContactorDevice.AC3Id)
}

// uint32 DisplayIndex = 8;
inline void ACMainContactorDevice::clear_displayindex() {
  displayindex_ = 0u;
}
inline ::google::protobuf::uint32 ACMainContactorDevice::displayindex() const {
  // @@protoc_insertion_point(field_get:Nmea2k.ACMainContactorDevice.DisplayIndex)
  return displayindex_;
}
inline void ACMainContactorDevice::set_displayindex(::google::protobuf::uint32 value) {
  
  displayindex_ = value;
  // @@protoc_insertion_point(field_set:Nmea2k.ACMainContactorDevice.DisplayIndex)
}

// uint32 LoadGroupIndex = 9;
inline void ACMainContactorDevice::clear_loadgroupindex() {
  loadgroupindex_ = 0u;
}
inline ::google::protobuf::uint32 ACMainContactorDevice::loadgroupindex() const {
  // @@protoc_insertion_point(field_get:Nmea2k.ACMainContactorDevice.LoadGroupIndex)
  return loadgroupindex_;
}
inline void ACMainContactorDevice::set_loadgroupindex(::google::protobuf::uint32 value) {
  
  loadgroupindex_ = value;
  // @@protoc_insertion_point(field_set:Nmea2k.ACMainContactorDevice.LoadGroupIndex)
}

// uint32 LoadGroupParallelIndex = 10;
inline void ACMainContactorDevice::clear_loadgroupparallelindex() {
  loadgroupparallelindex_ = 0u;
}
inline ::google::protobuf::uint32 ACMainContactorDevice::loadgroupparallelindex() const {
  // @@protoc_insertion_point(field_get:Nmea2k.ACMainContactorDevice.LoadGroupParallelIndex)
  return loadgroupparallelindex_;
}
inline void ACMainContactorDevice::set_loadgroupparallelindex(::google::protobuf::uint32 value) {
  
  loadgroupparallelindex_ = value;
  // @@protoc_insertion_point(field_set:Nmea2k.ACMainContactorDevice.LoadGroupParallelIndex)
}

// bool IsParallel = 11;
inline void ACMainContactorDevice::clear_isparallel() {
  isparallel_ = false;
}
inline bool ACMainContactorDevice::isparallel() const {
  // @@protoc_insertion_point(field_get:Nmea2k.ACMainContactorDevice.IsParallel)
  return isparallel_;
}
inline void ACMainContactorDevice::set_isparallel(bool value) {
  
  isparallel_ = value;
  // @@protoc_insertion_point(field_set:Nmea2k.ACMainContactorDevice.IsParallel)
}

// .Nmea2k.ACMainContactorDevice.eACInputType ACInputType = 12;
inline void ACMainContactorDevice::clear_acinputtype() {
  acinputtype_ = 0;
}
inline ::Nmea2k::ACMainContactorDevice_eACInputType ACMainContactorDevice::acinputtype() const {
  // @@protoc_insertion_point(field_get:Nmea2k.ACMainContactorDevice.ACInputType)
  return static_cast< ::Nmea2k::ACMainContactorDevice_eACInputType >(acinputtype_);
}
inline void ACMainContactorDevice::set_acinputtype(::Nmea2k::ACMainContactorDevice_eACInputType value) {
  
  acinputtype_ = value;
  // @@protoc_insertion_point(field_set:Nmea2k.ACMainContactorDevice.ACInputType)
}

// -------------------------------------------------------------------

// ACMainLoadGroupDevice

// string NameUTF8 = 1;
inline void ACMainLoadGroupDevice::clear_nameutf8() {
  nameutf8_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ACMainLoadGroupDevice::nameutf8() const {
  // @@protoc_insertion_point(field_get:Nmea2k.ACMainLoadGroupDevice.NameUTF8)
  return nameutf8_.GetNoArena();
}
inline void ACMainLoadGroupDevice::set_nameutf8(const ::std::string& value) {
  
  nameutf8_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Nmea2k.ACMainLoadGroupDevice.NameUTF8)
}
#if LANG_CXX11
inline void ACMainLoadGroupDevice::set_nameutf8(::std::string&& value) {
  
  nameutf8_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Nmea2k.ACMainLoadGroupDevice.NameUTF8)
}
#endif
inline void ACMainLoadGroupDevice::set_nameutf8(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  nameutf8_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Nmea2k.ACMainLoadGroupDevice.NameUTF8)
}
inline void ACMainLoadGroupDevice::set_nameutf8(const char* value, size_t size) {
  
  nameutf8_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Nmea2k.ACMainLoadGroupDevice.NameUTF8)
}
inline ::std::string* ACMainLoadGroupDevice::mutable_nameutf8() {
  
  // @@protoc_insertion_point(field_mutable:Nmea2k.ACMainLoadGroupDevice.NameUTF8)
  return nameutf8_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ACMainLoadGroupDevice::release_nameutf8() {
  // @@protoc_insertion_point(field_release:Nmea2k.ACMainLoadGroupDevice.NameUTF8)
  
  return nameutf8_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ACMainLoadGroupDevice::set_allocated_nameutf8(::std::string* nameutf8) {
  if (nameutf8 != NULL) {
    
  } else {
    
  }
  nameutf8_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), nameutf8);
  // @@protoc_insertion_point(field_set_allocated:Nmea2k.ACMainLoadGroupDevice.NameUTF8)
}

// uint32 LoadGroupIndex = 2;
inline void ACMainLoadGroupDevice::clear_loadgroupindex() {
  loadgroupindex_ = 0u;
}
inline ::google::protobuf::uint32 ACMainLoadGroupDevice::loadgroupindex() const {
  // @@protoc_insertion_point(field_get:Nmea2k.ACMainLoadGroupDevice.LoadGroupIndex)
  return loadgroupindex_;
}
inline void ACMainLoadGroupDevice::set_loadgroupindex(::google::protobuf::uint32 value) {
  
  loadgroupindex_ = value;
  // @@protoc_insertion_point(field_set:Nmea2k.ACMainLoadGroupDevice.LoadGroupIndex)
}

// -------------------------------------------------------------------

// ACMainDevice

// .Nmea2k.ConfigRequest.eConfigType DisplayType = 1;
inline void ACMainDevice::clear_displaytype() {
  displaytype_ = 0;
}
inline ::Nmea2k::ConfigRequest_eConfigType ACMainDevice::displaytype() const {
  // @@protoc_insertion_point(field_get:Nmea2k.ACMainDevice.DisplayType)
  return static_cast< ::Nmea2k::ConfigRequest_eConfigType >(displaytype_);
}
inline void ACMainDevice::set_displaytype(::Nmea2k::ConfigRequest_eConfigType value) {
  
  displaytype_ = value;
  // @@protoc_insertion_point(field_set:Nmea2k.ACMainDevice.DisplayType)
}

// uint32 Id = 2;
inline void ACMainDevice::clear_id() {
  id_ = 0u;
}
inline ::google::protobuf::uint32 ACMainDevice::id() const {
  // @@protoc_insertion_point(field_get:Nmea2k.ACMainDevice.Id)
  return id_;
}
inline void ACMainDevice::set_id(::google::protobuf::uint32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:Nmea2k.ACMainDevice.Id)
}

// string NameUTF8 = 3;
inline void ACMainDevice::clear_nameutf8() {
  nameutf8_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ACMainDevice::nameutf8() const {
  // @@protoc_insertion_point(field_get:Nmea2k.ACMainDevice.NameUTF8)
  return nameutf8_.GetNoArena();
}
inline void ACMainDevice::set_nameutf8(const ::std::string& value) {
  
  nameutf8_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Nmea2k.ACMainDevice.NameUTF8)
}
#if LANG_CXX11
inline void ACMainDevice::set_nameutf8(::std::string&& value) {
  
  nameutf8_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Nmea2k.ACMainDevice.NameUTF8)
}
#endif
inline void ACMainDevice::set_nameutf8(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  nameutf8_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Nmea2k.ACMainDevice.NameUTF8)
}
inline void ACMainDevice::set_nameutf8(const char* value, size_t size) {
  
  nameutf8_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Nmea2k.ACMainDevice.NameUTF8)
}
inline ::std::string* ACMainDevice::mutable_nameutf8() {
  
  // @@protoc_insertion_point(field_mutable:Nmea2k.ACMainDevice.NameUTF8)
  return nameutf8_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ACMainDevice::release_nameutf8() {
  // @@protoc_insertion_point(field_release:Nmea2k.ACMainDevice.NameUTF8)
  
  return nameutf8_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ACMainDevice::set_allocated_nameutf8(::std::string* nameutf8) {
  if (nameutf8 != NULL) {
    
  } else {
    
  }
  nameutf8_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), nameutf8);
  // @@protoc_insertion_point(field_set_allocated:Nmea2k.ACMainDevice.NameUTF8)
}

// uint32 Dipswitch = 4;
inline void ACMainDevice::clear_dipswitch() {
  dipswitch_ = 0u;
}
inline ::google::protobuf::uint32 ACMainDevice::dipswitch() const {
  // @@protoc_insertion_point(field_get:Nmea2k.ACMainDevice.Dipswitch)
  return dipswitch_;
}
inline void ACMainDevice::set_dipswitch(::google::protobuf::uint32 value) {
  
  dipswitch_ = value;
  // @@protoc_insertion_point(field_set:Nmea2k.ACMainDevice.Dipswitch)
}

// repeated .Nmea2k.ACMainContactorDevice Contactors = 5;
inline int ACMainDevice::contactors_size() const {
  return contactors_.size();
}
inline void ACMainDevice::clear_contactors() {
  contactors_.Clear();
}
inline ::Nmea2k::ACMainContactorDevice* ACMainDevice::mutable_contactors(int index) {
  // @@protoc_insertion_point(field_mutable:Nmea2k.ACMainDevice.Contactors)
  return contactors_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::Nmea2k::ACMainContactorDevice >*
ACMainDevice::mutable_contactors() {
  // @@protoc_insertion_point(field_mutable_list:Nmea2k.ACMainDevice.Contactors)
  return &contactors_;
}
inline const ::Nmea2k::ACMainContactorDevice& ACMainDevice::contactors(int index) const {
  // @@protoc_insertion_point(field_get:Nmea2k.ACMainDevice.Contactors)
  return contactors_.Get(index);
}
inline ::Nmea2k::ACMainContactorDevice* ACMainDevice::add_contactors() {
  // @@protoc_insertion_point(field_add:Nmea2k.ACMainDevice.Contactors)
  return contactors_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Nmea2k::ACMainContactorDevice >&
ACMainDevice::contactors() const {
  // @@protoc_insertion_point(field_list:Nmea2k.ACMainDevice.Contactors)
  return contactors_;
}

// repeated .Nmea2k.ACMainLoadGroupDevice LoadGroups = 6;
inline int ACMainDevice::loadgroups_size() const {
  return loadgroups_.size();
}
inline void ACMainDevice::clear_loadgroups() {
  loadgroups_.Clear();
}
inline ::Nmea2k::ACMainLoadGroupDevice* ACMainDevice::mutable_loadgroups(int index) {
  // @@protoc_insertion_point(field_mutable:Nmea2k.ACMainDevice.LoadGroups)
  return loadgroups_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::Nmea2k::ACMainLoadGroupDevice >*
ACMainDevice::mutable_loadgroups() {
  // @@protoc_insertion_point(field_mutable_list:Nmea2k.ACMainDevice.LoadGroups)
  return &loadgroups_;
}
inline const ::Nmea2k::ACMainLoadGroupDevice& ACMainDevice::loadgroups(int index) const {
  // @@protoc_insertion_point(field_get:Nmea2k.ACMainDevice.LoadGroups)
  return loadgroups_.Get(index);
}
inline ::Nmea2k::ACMainLoadGroupDevice* ACMainDevice::add_loadgroups() {
  // @@protoc_insertion_point(field_add:Nmea2k.ACMainDevice.LoadGroups)
  return loadgroups_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Nmea2k::ACMainLoadGroupDevice >&
ACMainDevice::loadgroups() const {
  // @@protoc_insertion_point(field_list:Nmea2k.ACMainDevice.LoadGroups)
  return loadgroups_;
}

// -------------------------------------------------------------------

// InverterChargerDevice

// .Nmea2k.ConfigRequest.eConfigType DisplayType = 1;
inline void InverterChargerDevice::clear_displaytype() {
  displaytype_ = 0;
}
inline ::Nmea2k::ConfigRequest_eConfigType InverterChargerDevice::displaytype() const {
  // @@protoc_insertion_point(field_get:Nmea2k.InverterChargerDevice.DisplayType)
  return static_cast< ::Nmea2k::ConfigRequest_eConfigType >(displaytype_);
}
inline void InverterChargerDevice::set_displaytype(::Nmea2k::ConfigRequest_eConfigType value) {
  
  displaytype_ = value;
  // @@protoc_insertion_point(field_set:Nmea2k.InverterChargerDevice.DisplayType)
}

// uint32 Id = 2;
inline void InverterChargerDevice::clear_id() {
  id_ = 0u;
}
inline ::google::protobuf::uint32 InverterChargerDevice::id() const {
  // @@protoc_insertion_point(field_get:Nmea2k.InverterChargerDevice.Id)
  return id_;
}
inline void InverterChargerDevice::set_id(::google::protobuf::uint32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:Nmea2k.InverterChargerDevice.Id)
}

// string NameUTF8 = 3;
inline void InverterChargerDevice::clear_nameutf8() {
  nameutf8_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& InverterChargerDevice::nameutf8() const {
  // @@protoc_insertion_point(field_get:Nmea2k.InverterChargerDevice.NameUTF8)
  return nameutf8_.GetNoArena();
}
inline void InverterChargerDevice::set_nameutf8(const ::std::string& value) {
  
  nameutf8_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Nmea2k.InverterChargerDevice.NameUTF8)
}
#if LANG_CXX11
inline void InverterChargerDevice::set_nameutf8(::std::string&& value) {
  
  nameutf8_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Nmea2k.InverterChargerDevice.NameUTF8)
}
#endif
inline void InverterChargerDevice::set_nameutf8(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  nameutf8_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Nmea2k.InverterChargerDevice.NameUTF8)
}
inline void InverterChargerDevice::set_nameutf8(const char* value, size_t size) {
  
  nameutf8_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Nmea2k.InverterChargerDevice.NameUTF8)
}
inline ::std::string* InverterChargerDevice::mutable_nameutf8() {
  
  // @@protoc_insertion_point(field_mutable:Nmea2k.InverterChargerDevice.NameUTF8)
  return nameutf8_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* InverterChargerDevice::release_nameutf8() {
  // @@protoc_insertion_point(field_release:Nmea2k.InverterChargerDevice.NameUTF8)
  
  return nameutf8_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void InverterChargerDevice::set_allocated_nameutf8(::std::string* nameutf8) {
  if (nameutf8 != NULL) {
    
  } else {
    
  }
  nameutf8_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), nameutf8);
  // @@protoc_insertion_point(field_set_allocated:Nmea2k.InverterChargerDevice.NameUTF8)
}

// uint32 Model = 4;
inline void InverterChargerDevice::clear_model() {
  model_ = 0u;
}
inline ::google::protobuf::uint32 InverterChargerDevice::model() const {
  // @@protoc_insertion_point(field_get:Nmea2k.InverterChargerDevice.Model)
  return model_;
}
inline void InverterChargerDevice::set_model(::google::protobuf::uint32 value) {
  
  model_ = value;
  // @@protoc_insertion_point(field_set:Nmea2k.InverterChargerDevice.Model)
}

// uint32 Type = 5;
inline void InverterChargerDevice::clear_type() {
  type_ = 0u;
}
inline ::google::protobuf::uint32 InverterChargerDevice::type() const {
  // @@protoc_insertion_point(field_get:Nmea2k.InverterChargerDevice.Type)
  return type_;
}
inline void InverterChargerDevice::set_type(::google::protobuf::uint32 value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:Nmea2k.InverterChargerDevice.Type)
}

// uint32 SubType = 6;
inline void InverterChargerDevice::clear_subtype() {
  subtype_ = 0u;
}
inline ::google::protobuf::uint32 InverterChargerDevice::subtype() const {
  // @@protoc_insertion_point(field_get:Nmea2k.InverterChargerDevice.SubType)
  return subtype_;
}
inline void InverterChargerDevice::set_subtype(::google::protobuf::uint32 value) {
  
  subtype_ = value;
  // @@protoc_insertion_point(field_set:Nmea2k.InverterChargerDevice.SubType)
}

// .Nmea2k.Instance InverterInstance = 7;
inline bool InverterChargerDevice::has_inverterinstance() const {
  return this != internal_default_instance() && inverterinstance_ != NULL;
}
inline void InverterChargerDevice::clear_inverterinstance() {
  if (GetArenaNoVirtual() == NULL && inverterinstance_ != NULL) {
    delete inverterinstance_;
  }
  inverterinstance_ = NULL;
}
inline const ::Nmea2k::Instance& InverterChargerDevice::_internal_inverterinstance() const {
  return *inverterinstance_;
}
inline const ::Nmea2k::Instance& InverterChargerDevice::inverterinstance() const {
  const ::Nmea2k::Instance* p = inverterinstance_;
  // @@protoc_insertion_point(field_get:Nmea2k.InverterChargerDevice.InverterInstance)
  return p != NULL ? *p : *reinterpret_cast<const ::Nmea2k::Instance*>(
      &::Nmea2k::_Instance_default_instance_);
}
inline ::Nmea2k::Instance* InverterChargerDevice::release_inverterinstance() {
  // @@protoc_insertion_point(field_release:Nmea2k.InverterChargerDevice.InverterInstance)
  
  ::Nmea2k::Instance* temp = inverterinstance_;
  inverterinstance_ = NULL;
  return temp;
}
inline ::Nmea2k::Instance* InverterChargerDevice::mutable_inverterinstance() {
  
  if (inverterinstance_ == NULL) {
    auto* p = CreateMaybeMessage<::Nmea2k::Instance>(GetArenaNoVirtual());
    inverterinstance_ = p;
  }
  // @@protoc_insertion_point(field_mutable:Nmea2k.InverterChargerDevice.InverterInstance)
  return inverterinstance_;
}
inline void InverterChargerDevice::set_allocated_inverterinstance(::Nmea2k::Instance* inverterinstance) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete inverterinstance_;
  }
  if (inverterinstance) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      inverterinstance = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, inverterinstance, submessage_arena);
    }
    
  } else {
    
  }
  inverterinstance_ = inverterinstance;
  // @@protoc_insertion_point(field_set_allocated:Nmea2k.InverterChargerDevice.InverterInstance)
}

// .Nmea2k.DataId InverterACId = 8;
inline bool InverterChargerDevice::has_inverteracid() const {
  return this != internal_default_instance() && inverteracid_ != NULL;
}
inline void InverterChargerDevice::clear_inverteracid() {
  if (GetArenaNoVirtual() == NULL && inverteracid_ != NULL) {
    delete inverteracid_;
  }
  inverteracid_ = NULL;
}
inline const ::Nmea2k::DataId& InverterChargerDevice::_internal_inverteracid() const {
  return *inverteracid_;
}
inline const ::Nmea2k::DataId& InverterChargerDevice::inverteracid() const {
  const ::Nmea2k::DataId* p = inverteracid_;
  // @@protoc_insertion_point(field_get:Nmea2k.InverterChargerDevice.InverterACId)
  return p != NULL ? *p : *reinterpret_cast<const ::Nmea2k::DataId*>(
      &::Nmea2k::_DataId_default_instance_);
}
inline ::Nmea2k::DataId* InverterChargerDevice::release_inverteracid() {
  // @@protoc_insertion_point(field_release:Nmea2k.InverterChargerDevice.InverterACId)
  
  ::Nmea2k::DataId* temp = inverteracid_;
  inverteracid_ = NULL;
  return temp;
}
inline ::Nmea2k::DataId* InverterChargerDevice::mutable_inverteracid() {
  
  if (inverteracid_ == NULL) {
    auto* p = CreateMaybeMessage<::Nmea2k::DataId>(GetArenaNoVirtual());
    inverteracid_ = p;
  }
  // @@protoc_insertion_point(field_mutable:Nmea2k.InverterChargerDevice.InverterACId)
  return inverteracid_;
}
inline void InverterChargerDevice::set_allocated_inverteracid(::Nmea2k::DataId* inverteracid) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete inverteracid_;
  }
  if (inverteracid) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      inverteracid = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, inverteracid, submessage_arena);
    }
    
  } else {
    
  }
  inverteracid_ = inverteracid;
  // @@protoc_insertion_point(field_set_allocated:Nmea2k.InverterChargerDevice.InverterACId)
}

// .Nmea2k.DataId InverterCircuitId = 9;
inline bool InverterChargerDevice::has_invertercircuitid() const {
  return this != internal_default_instance() && invertercircuitid_ != NULL;
}
inline void InverterChargerDevice::clear_invertercircuitid() {
  if (GetArenaNoVirtual() == NULL && invertercircuitid_ != NULL) {
    delete invertercircuitid_;
  }
  invertercircuitid_ = NULL;
}
inline const ::Nmea2k::DataId& InverterChargerDevice::_internal_invertercircuitid() const {
  return *invertercircuitid_;
}
inline const ::Nmea2k::DataId& InverterChargerDevice::invertercircuitid() const {
  const ::Nmea2k::DataId* p = invertercircuitid_;
  // @@protoc_insertion_point(field_get:Nmea2k.InverterChargerDevice.InverterCircuitId)
  return p != NULL ? *p : *reinterpret_cast<const ::Nmea2k::DataId*>(
      &::Nmea2k::_DataId_default_instance_);
}
inline ::Nmea2k::DataId* InverterChargerDevice::release_invertercircuitid() {
  // @@protoc_insertion_point(field_release:Nmea2k.InverterChargerDevice.InverterCircuitId)
  
  ::Nmea2k::DataId* temp = invertercircuitid_;
  invertercircuitid_ = NULL;
  return temp;
}
inline ::Nmea2k::DataId* InverterChargerDevice::mutable_invertercircuitid() {
  
  if (invertercircuitid_ == NULL) {
    auto* p = CreateMaybeMessage<::Nmea2k::DataId>(GetArenaNoVirtual());
    invertercircuitid_ = p;
  }
  // @@protoc_insertion_point(field_mutable:Nmea2k.InverterChargerDevice.InverterCircuitId)
  return invertercircuitid_;
}
inline void InverterChargerDevice::set_allocated_invertercircuitid(::Nmea2k::DataId* invertercircuitid) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete invertercircuitid_;
  }
  if (invertercircuitid) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      invertercircuitid = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, invertercircuitid, submessage_arena);
    }
    
  } else {
    
  }
  invertercircuitid_ = invertercircuitid;
  // @@protoc_insertion_point(field_set_allocated:Nmea2k.InverterChargerDevice.InverterCircuitId)
}

// .Nmea2k.DataId InverterToggleCircuitId = 10;
inline bool InverterChargerDevice::has_invertertogglecircuitid() const {
  return this != internal_default_instance() && invertertogglecircuitid_ != NULL;
}
inline void InverterChargerDevice::clear_invertertogglecircuitid() {
  if (GetArenaNoVirtual() == NULL && invertertogglecircuitid_ != NULL) {
    delete invertertogglecircuitid_;
  }
  invertertogglecircuitid_ = NULL;
}
inline const ::Nmea2k::DataId& InverterChargerDevice::_internal_invertertogglecircuitid() const {
  return *invertertogglecircuitid_;
}
inline const ::Nmea2k::DataId& InverterChargerDevice::invertertogglecircuitid() const {
  const ::Nmea2k::DataId* p = invertertogglecircuitid_;
  // @@protoc_insertion_point(field_get:Nmea2k.InverterChargerDevice.InverterToggleCircuitId)
  return p != NULL ? *p : *reinterpret_cast<const ::Nmea2k::DataId*>(
      &::Nmea2k::_DataId_default_instance_);
}
inline ::Nmea2k::DataId* InverterChargerDevice::release_invertertogglecircuitid() {
  // @@protoc_insertion_point(field_release:Nmea2k.InverterChargerDevice.InverterToggleCircuitId)
  
  ::Nmea2k::DataId* temp = invertertogglecircuitid_;
  invertertogglecircuitid_ = NULL;
  return temp;
}
inline ::Nmea2k::DataId* InverterChargerDevice::mutable_invertertogglecircuitid() {
  
  if (invertertogglecircuitid_ == NULL) {
    auto* p = CreateMaybeMessage<::Nmea2k::DataId>(GetArenaNoVirtual());
    invertertogglecircuitid_ = p;
  }
  // @@protoc_insertion_point(field_mutable:Nmea2k.InverterChargerDevice.InverterToggleCircuitId)
  return invertertogglecircuitid_;
}
inline void InverterChargerDevice::set_allocated_invertertogglecircuitid(::Nmea2k::DataId* invertertogglecircuitid) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete invertertogglecircuitid_;
  }
  if (invertertogglecircuitid) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      invertertogglecircuitid = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, invertertogglecircuitid, submessage_arena);
    }
    
  } else {
    
  }
  invertertogglecircuitid_ = invertertogglecircuitid;
  // @@protoc_insertion_point(field_set_allocated:Nmea2k.InverterChargerDevice.InverterToggleCircuitId)
}

// .Nmea2k.Instance ChargerInstance = 11;
inline bool InverterChargerDevice::has_chargerinstance() const {
  return this != internal_default_instance() && chargerinstance_ != NULL;
}
inline void InverterChargerDevice::clear_chargerinstance() {
  if (GetArenaNoVirtual() == NULL && chargerinstance_ != NULL) {
    delete chargerinstance_;
  }
  chargerinstance_ = NULL;
}
inline const ::Nmea2k::Instance& InverterChargerDevice::_internal_chargerinstance() const {
  return *chargerinstance_;
}
inline const ::Nmea2k::Instance& InverterChargerDevice::chargerinstance() const {
  const ::Nmea2k::Instance* p = chargerinstance_;
  // @@protoc_insertion_point(field_get:Nmea2k.InverterChargerDevice.ChargerInstance)
  return p != NULL ? *p : *reinterpret_cast<const ::Nmea2k::Instance*>(
      &::Nmea2k::_Instance_default_instance_);
}
inline ::Nmea2k::Instance* InverterChargerDevice::release_chargerinstance() {
  // @@protoc_insertion_point(field_release:Nmea2k.InverterChargerDevice.ChargerInstance)
  
  ::Nmea2k::Instance* temp = chargerinstance_;
  chargerinstance_ = NULL;
  return temp;
}
inline ::Nmea2k::Instance* InverterChargerDevice::mutable_chargerinstance() {
  
  if (chargerinstance_ == NULL) {
    auto* p = CreateMaybeMessage<::Nmea2k::Instance>(GetArenaNoVirtual());
    chargerinstance_ = p;
  }
  // @@protoc_insertion_point(field_mutable:Nmea2k.InverterChargerDevice.ChargerInstance)
  return chargerinstance_;
}
inline void InverterChargerDevice::set_allocated_chargerinstance(::Nmea2k::Instance* chargerinstance) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete chargerinstance_;
  }
  if (chargerinstance) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      chargerinstance = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, chargerinstance, submessage_arena);
    }
    
  } else {
    
  }
  chargerinstance_ = chargerinstance;
  // @@protoc_insertion_point(field_set_allocated:Nmea2k.InverterChargerDevice.ChargerInstance)
}

// .Nmea2k.DataId ChargerACId = 12;
inline bool InverterChargerDevice::has_chargeracid() const {
  return this != internal_default_instance() && chargeracid_ != NULL;
}
inline void InverterChargerDevice::clear_chargeracid() {
  if (GetArenaNoVirtual() == NULL && chargeracid_ != NULL) {
    delete chargeracid_;
  }
  chargeracid_ = NULL;
}
inline const ::Nmea2k::DataId& InverterChargerDevice::_internal_chargeracid() const {
  return *chargeracid_;
}
inline const ::Nmea2k::DataId& InverterChargerDevice::chargeracid() const {
  const ::Nmea2k::DataId* p = chargeracid_;
  // @@protoc_insertion_point(field_get:Nmea2k.InverterChargerDevice.ChargerACId)
  return p != NULL ? *p : *reinterpret_cast<const ::Nmea2k::DataId*>(
      &::Nmea2k::_DataId_default_instance_);
}
inline ::Nmea2k::DataId* InverterChargerDevice::release_chargeracid() {
  // @@protoc_insertion_point(field_release:Nmea2k.InverterChargerDevice.ChargerACId)
  
  ::Nmea2k::DataId* temp = chargeracid_;
  chargeracid_ = NULL;
  return temp;
}
inline ::Nmea2k::DataId* InverterChargerDevice::mutable_chargeracid() {
  
  if (chargeracid_ == NULL) {
    auto* p = CreateMaybeMessage<::Nmea2k::DataId>(GetArenaNoVirtual());
    chargeracid_ = p;
  }
  // @@protoc_insertion_point(field_mutable:Nmea2k.InverterChargerDevice.ChargerACId)
  return chargeracid_;
}
inline void InverterChargerDevice::set_allocated_chargeracid(::Nmea2k::DataId* chargeracid) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete chargeracid_;
  }
  if (chargeracid) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      chargeracid = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, chargeracid, submessage_arena);
    }
    
  } else {
    
  }
  chargeracid_ = chargeracid;
  // @@protoc_insertion_point(field_set_allocated:Nmea2k.InverterChargerDevice.ChargerACId)
}

// .Nmea2k.DataId ChargerCircuitId = 13;
inline bool InverterChargerDevice::has_chargercircuitid() const {
  return this != internal_default_instance() && chargercircuitid_ != NULL;
}
inline void InverterChargerDevice::clear_chargercircuitid() {
  if (GetArenaNoVirtual() == NULL && chargercircuitid_ != NULL) {
    delete chargercircuitid_;
  }
  chargercircuitid_ = NULL;
}
inline const ::Nmea2k::DataId& InverterChargerDevice::_internal_chargercircuitid() const {
  return *chargercircuitid_;
}
inline const ::Nmea2k::DataId& InverterChargerDevice::chargercircuitid() const {
  const ::Nmea2k::DataId* p = chargercircuitid_;
  // @@protoc_insertion_point(field_get:Nmea2k.InverterChargerDevice.ChargerCircuitId)
  return p != NULL ? *p : *reinterpret_cast<const ::Nmea2k::DataId*>(
      &::Nmea2k::_DataId_default_instance_);
}
inline ::Nmea2k::DataId* InverterChargerDevice::release_chargercircuitid() {
  // @@protoc_insertion_point(field_release:Nmea2k.InverterChargerDevice.ChargerCircuitId)
  
  ::Nmea2k::DataId* temp = chargercircuitid_;
  chargercircuitid_ = NULL;
  return temp;
}
inline ::Nmea2k::DataId* InverterChargerDevice::mutable_chargercircuitid() {
  
  if (chargercircuitid_ == NULL) {
    auto* p = CreateMaybeMessage<::Nmea2k::DataId>(GetArenaNoVirtual());
    chargercircuitid_ = p;
  }
  // @@protoc_insertion_point(field_mutable:Nmea2k.InverterChargerDevice.ChargerCircuitId)
  return chargercircuitid_;
}
inline void InverterChargerDevice::set_allocated_chargercircuitid(::Nmea2k::DataId* chargercircuitid) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete chargercircuitid_;
  }
  if (chargercircuitid) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      chargercircuitid = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, chargercircuitid, submessage_arena);
    }
    
  } else {
    
  }
  chargercircuitid_ = chargercircuitid;
  // @@protoc_insertion_point(field_set_allocated:Nmea2k.InverterChargerDevice.ChargerCircuitId)
}

// .Nmea2k.DataId ChargerToggleCircuitId = 14;
inline bool InverterChargerDevice::has_chargertogglecircuitid() const {
  return this != internal_default_instance() && chargertogglecircuitid_ != NULL;
}
inline void InverterChargerDevice::clear_chargertogglecircuitid() {
  if (GetArenaNoVirtual() == NULL && chargertogglecircuitid_ != NULL) {
    delete chargertogglecircuitid_;
  }
  chargertogglecircuitid_ = NULL;
}
inline const ::Nmea2k::DataId& InverterChargerDevice::_internal_chargertogglecircuitid() const {
  return *chargertogglecircuitid_;
}
inline const ::Nmea2k::DataId& InverterChargerDevice::chargertogglecircuitid() const {
  const ::Nmea2k::DataId* p = chargertogglecircuitid_;
  // @@protoc_insertion_point(field_get:Nmea2k.InverterChargerDevice.ChargerToggleCircuitId)
  return p != NULL ? *p : *reinterpret_cast<const ::Nmea2k::DataId*>(
      &::Nmea2k::_DataId_default_instance_);
}
inline ::Nmea2k::DataId* InverterChargerDevice::release_chargertogglecircuitid() {
  // @@protoc_insertion_point(field_release:Nmea2k.InverterChargerDevice.ChargerToggleCircuitId)
  
  ::Nmea2k::DataId* temp = chargertogglecircuitid_;
  chargertogglecircuitid_ = NULL;
  return temp;
}
inline ::Nmea2k::DataId* InverterChargerDevice::mutable_chargertogglecircuitid() {
  
  if (chargertogglecircuitid_ == NULL) {
    auto* p = CreateMaybeMessage<::Nmea2k::DataId>(GetArenaNoVirtual());
    chargertogglecircuitid_ = p;
  }
  // @@protoc_insertion_point(field_mutable:Nmea2k.InverterChargerDevice.ChargerToggleCircuitId)
  return chargertogglecircuitid_;
}
inline void InverterChargerDevice::set_allocated_chargertogglecircuitid(::Nmea2k::DataId* chargertogglecircuitid) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete chargertogglecircuitid_;
  }
  if (chargertogglecircuitid) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      chargertogglecircuitid = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, chargertogglecircuitid, submessage_arena);
    }
    
  } else {
    
  }
  chargertogglecircuitid_ = chargertogglecircuitid;
  // @@protoc_insertion_point(field_set_allocated:Nmea2k.InverterChargerDevice.ChargerToggleCircuitId)
}

// .Nmea2k.DataId BatteryBank1Id = 15;
inline bool InverterChargerDevice::has_batterybank1id() const {
  return this != internal_default_instance() && batterybank1id_ != NULL;
}
inline void InverterChargerDevice::clear_batterybank1id() {
  if (GetArenaNoVirtual() == NULL && batterybank1id_ != NULL) {
    delete batterybank1id_;
  }
  batterybank1id_ = NULL;
}
inline const ::Nmea2k::DataId& InverterChargerDevice::_internal_batterybank1id() const {
  return *batterybank1id_;
}
inline const ::Nmea2k::DataId& InverterChargerDevice::batterybank1id() const {
  const ::Nmea2k::DataId* p = batterybank1id_;
  // @@protoc_insertion_point(field_get:Nmea2k.InverterChargerDevice.BatteryBank1Id)
  return p != NULL ? *p : *reinterpret_cast<const ::Nmea2k::DataId*>(
      &::Nmea2k::_DataId_default_instance_);
}
inline ::Nmea2k::DataId* InverterChargerDevice::release_batterybank1id() {
  // @@protoc_insertion_point(field_release:Nmea2k.InverterChargerDevice.BatteryBank1Id)
  
  ::Nmea2k::DataId* temp = batterybank1id_;
  batterybank1id_ = NULL;
  return temp;
}
inline ::Nmea2k::DataId* InverterChargerDevice::mutable_batterybank1id() {
  
  if (batterybank1id_ == NULL) {
    auto* p = CreateMaybeMessage<::Nmea2k::DataId>(GetArenaNoVirtual());
    batterybank1id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:Nmea2k.InverterChargerDevice.BatteryBank1Id)
  return batterybank1id_;
}
inline void InverterChargerDevice::set_allocated_batterybank1id(::Nmea2k::DataId* batterybank1id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete batterybank1id_;
  }
  if (batterybank1id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      batterybank1id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, batterybank1id, submessage_arena);
    }
    
  } else {
    
  }
  batterybank1id_ = batterybank1id;
  // @@protoc_insertion_point(field_set_allocated:Nmea2k.InverterChargerDevice.BatteryBank1Id)
}

// .Nmea2k.DataId BatteryBank2Id = 16;
inline bool InverterChargerDevice::has_batterybank2id() const {
  return this != internal_default_instance() && batterybank2id_ != NULL;
}
inline void InverterChargerDevice::clear_batterybank2id() {
  if (GetArenaNoVirtual() == NULL && batterybank2id_ != NULL) {
    delete batterybank2id_;
  }
  batterybank2id_ = NULL;
}
inline const ::Nmea2k::DataId& InverterChargerDevice::_internal_batterybank2id() const {
  return *batterybank2id_;
}
inline const ::Nmea2k::DataId& InverterChargerDevice::batterybank2id() const {
  const ::Nmea2k::DataId* p = batterybank2id_;
  // @@protoc_insertion_point(field_get:Nmea2k.InverterChargerDevice.BatteryBank2Id)
  return p != NULL ? *p : *reinterpret_cast<const ::Nmea2k::DataId*>(
      &::Nmea2k::_DataId_default_instance_);
}
inline ::Nmea2k::DataId* InverterChargerDevice::release_batterybank2id() {
  // @@protoc_insertion_point(field_release:Nmea2k.InverterChargerDevice.BatteryBank2Id)
  
  ::Nmea2k::DataId* temp = batterybank2id_;
  batterybank2id_ = NULL;
  return temp;
}
inline ::Nmea2k::DataId* InverterChargerDevice::mutable_batterybank2id() {
  
  if (batterybank2id_ == NULL) {
    auto* p = CreateMaybeMessage<::Nmea2k::DataId>(GetArenaNoVirtual());
    batterybank2id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:Nmea2k.InverterChargerDevice.BatteryBank2Id)
  return batterybank2id_;
}
inline void InverterChargerDevice::set_allocated_batterybank2id(::Nmea2k::DataId* batterybank2id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete batterybank2id_;
  }
  if (batterybank2id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      batterybank2id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, batterybank2id, submessage_arena);
    }
    
  } else {
    
  }
  batterybank2id_ = batterybank2id;
  // @@protoc_insertion_point(field_set_allocated:Nmea2k.InverterChargerDevice.BatteryBank2Id)
}

// .Nmea2k.DataId BatteryBank3Id = 17;
inline bool InverterChargerDevice::has_batterybank3id() const {
  return this != internal_default_instance() && batterybank3id_ != NULL;
}
inline void InverterChargerDevice::clear_batterybank3id() {
  if (GetArenaNoVirtual() == NULL && batterybank3id_ != NULL) {
    delete batterybank3id_;
  }
  batterybank3id_ = NULL;
}
inline const ::Nmea2k::DataId& InverterChargerDevice::_internal_batterybank3id() const {
  return *batterybank3id_;
}
inline const ::Nmea2k::DataId& InverterChargerDevice::batterybank3id() const {
  const ::Nmea2k::DataId* p = batterybank3id_;
  // @@protoc_insertion_point(field_get:Nmea2k.InverterChargerDevice.BatteryBank3Id)
  return p != NULL ? *p : *reinterpret_cast<const ::Nmea2k::DataId*>(
      &::Nmea2k::_DataId_default_instance_);
}
inline ::Nmea2k::DataId* InverterChargerDevice::release_batterybank3id() {
  // @@protoc_insertion_point(field_release:Nmea2k.InverterChargerDevice.BatteryBank3Id)
  
  ::Nmea2k::DataId* temp = batterybank3id_;
  batterybank3id_ = NULL;
  return temp;
}
inline ::Nmea2k::DataId* InverterChargerDevice::mutable_batterybank3id() {
  
  if (batterybank3id_ == NULL) {
    auto* p = CreateMaybeMessage<::Nmea2k::DataId>(GetArenaNoVirtual());
    batterybank3id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:Nmea2k.InverterChargerDevice.BatteryBank3Id)
  return batterybank3id_;
}
inline void InverterChargerDevice::set_allocated_batterybank3id(::Nmea2k::DataId* batterybank3id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete batterybank3id_;
  }
  if (batterybank3id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      batterybank3id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, batterybank3id, submessage_arena);
    }
    
  } else {
    
  }
  batterybank3id_ = batterybank3id;
  // @@protoc_insertion_point(field_set_allocated:Nmea2k.InverterChargerDevice.BatteryBank3Id)
}

// uint32 PositionColumn = 18;
inline void InverterChargerDevice::clear_positioncolumn() {
  positioncolumn_ = 0u;
}
inline ::google::protobuf::uint32 InverterChargerDevice::positioncolumn() const {
  // @@protoc_insertion_point(field_get:Nmea2k.InverterChargerDevice.PositionColumn)
  return positioncolumn_;
}
inline void InverterChargerDevice::set_positioncolumn(::google::protobuf::uint32 value) {
  
  positioncolumn_ = value;
  // @@protoc_insertion_point(field_set:Nmea2k.InverterChargerDevice.PositionColumn)
}

// uint32 PositionRow = 19;
inline void InverterChargerDevice::clear_positionrow() {
  positionrow_ = 0u;
}
inline ::google::protobuf::uint32 InverterChargerDevice::positionrow() const {
  // @@protoc_insertion_point(field_get:Nmea2k.InverterChargerDevice.PositionRow)
  return positionrow_;
}
inline void InverterChargerDevice::set_positionrow(::google::protobuf::uint32 value) {
  
  positionrow_ = value;
  // @@protoc_insertion_point(field_set:Nmea2k.InverterChargerDevice.PositionRow)
}

// bool Clustered = 20;
inline void InverterChargerDevice::clear_clustered() {
  clustered_ = false;
}
inline bool InverterChargerDevice::clustered() const {
  // @@protoc_insertion_point(field_get:Nmea2k.InverterChargerDevice.Clustered)
  return clustered_;
}
inline void InverterChargerDevice::set_clustered(bool value) {
  
  clustered_ = value;
  // @@protoc_insertion_point(field_set:Nmea2k.InverterChargerDevice.Clustered)
}

// bool Primary = 21;
inline void InverterChargerDevice::clear_primary() {
  primary_ = false;
}
inline bool InverterChargerDevice::primary() const {
  // @@protoc_insertion_point(field_get:Nmea2k.InverterChargerDevice.Primary)
  return primary_;
}
inline void InverterChargerDevice::set_primary(bool value) {
  
  primary_ = value;
  // @@protoc_insertion_point(field_set:Nmea2k.InverterChargerDevice.Primary)
}

// uint32 PrimaryPhase = 22;
inline void InverterChargerDevice::clear_primaryphase() {
  primaryphase_ = 0u;
}
inline ::google::protobuf::uint32 InverterChargerDevice::primaryphase() const {
  // @@protoc_insertion_point(field_get:Nmea2k.InverterChargerDevice.PrimaryPhase)
  return primaryphase_;
}
inline void InverterChargerDevice::set_primaryphase(::google::protobuf::uint32 value) {
  
  primaryphase_ = value;
  // @@protoc_insertion_point(field_set:Nmea2k.InverterChargerDevice.PrimaryPhase)
}

// uint32 DeviceInstance = 23;
inline void InverterChargerDevice::clear_deviceinstance() {
  deviceinstance_ = 0u;
}
inline ::google::protobuf::uint32 InverterChargerDevice::deviceinstance() const {
  // @@protoc_insertion_point(field_get:Nmea2k.InverterChargerDevice.DeviceInstance)
  return deviceinstance_;
}
inline void InverterChargerDevice::set_deviceinstance(::google::protobuf::uint32 value) {
  
  deviceinstance_ = value;
  // @@protoc_insertion_point(field_set:Nmea2k.InverterChargerDevice.DeviceInstance)
}

// uint32 Dipswitch = 24;
inline void InverterChargerDevice::clear_dipswitch() {
  dipswitch_ = 0u;
}
inline ::google::protobuf::uint32 InverterChargerDevice::dipswitch() const {
  // @@protoc_insertion_point(field_get:Nmea2k.InverterChargerDevice.Dipswitch)
  return dipswitch_;
}
inline void InverterChargerDevice::set_dipswitch(::google::protobuf::uint32 value) {
  
  dipswitch_ = value;
  // @@protoc_insertion_point(field_set:Nmea2k.InverterChargerDevice.Dipswitch)
}

// uint32 ChannelIndex = 25;
inline void InverterChargerDevice::clear_channelindex() {
  channelindex_ = 0u;
}
inline ::google::protobuf::uint32 InverterChargerDevice::channelindex() const {
  // @@protoc_insertion_point(field_get:Nmea2k.InverterChargerDevice.ChannelIndex)
  return channelindex_;
}
inline void InverterChargerDevice::set_channelindex(::google::protobuf::uint32 value) {
  
  channelindex_ = value;
  // @@protoc_insertion_point(field_set:Nmea2k.InverterChargerDevice.ChannelIndex)
}

// -------------------------------------------------------------------

// HVACDevice

// .Nmea2k.ConfigRequest.eConfigType DisplayType = 1;
inline void HVACDevice::clear_displaytype() {
  displaytype_ = 0;
}
inline ::Nmea2k::ConfigRequest_eConfigType HVACDevice::displaytype() const {
  // @@protoc_insertion_point(field_get:Nmea2k.HVACDevice.DisplayType)
  return static_cast< ::Nmea2k::ConfigRequest_eConfigType >(displaytype_);
}
inline void HVACDevice::set_displaytype(::Nmea2k::ConfigRequest_eConfigType value) {
  
  displaytype_ = value;
  // @@protoc_insertion_point(field_set:Nmea2k.HVACDevice.DisplayType)
}

// uint32 Id = 2;
inline void HVACDevice::clear_id() {
  id_ = 0u;
}
inline ::google::protobuf::uint32 HVACDevice::id() const {
  // @@protoc_insertion_point(field_get:Nmea2k.HVACDevice.Id)
  return id_;
}
inline void HVACDevice::set_id(::google::protobuf::uint32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:Nmea2k.HVACDevice.Id)
}

// string NameUTF8 = 3;
inline void HVACDevice::clear_nameutf8() {
  nameutf8_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& HVACDevice::nameutf8() const {
  // @@protoc_insertion_point(field_get:Nmea2k.HVACDevice.NameUTF8)
  return nameutf8_.GetNoArena();
}
inline void HVACDevice::set_nameutf8(const ::std::string& value) {
  
  nameutf8_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Nmea2k.HVACDevice.NameUTF8)
}
#if LANG_CXX11
inline void HVACDevice::set_nameutf8(::std::string&& value) {
  
  nameutf8_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Nmea2k.HVACDevice.NameUTF8)
}
#endif
inline void HVACDevice::set_nameutf8(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  nameutf8_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Nmea2k.HVACDevice.NameUTF8)
}
inline void HVACDevice::set_nameutf8(const char* value, size_t size) {
  
  nameutf8_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Nmea2k.HVACDevice.NameUTF8)
}
inline ::std::string* HVACDevice::mutable_nameutf8() {
  
  // @@protoc_insertion_point(field_mutable:Nmea2k.HVACDevice.NameUTF8)
  return nameutf8_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* HVACDevice::release_nameutf8() {
  // @@protoc_insertion_point(field_release:Nmea2k.HVACDevice.NameUTF8)
  
  return nameutf8_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void HVACDevice::set_allocated_nameutf8(::std::string* nameutf8) {
  if (nameutf8 != NULL) {
    
  } else {
    
  }
  nameutf8_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), nameutf8);
  // @@protoc_insertion_point(field_set_allocated:Nmea2k.HVACDevice.NameUTF8)
}

// .Nmea2k.Instance Instance = 4;
inline bool HVACDevice::has_instance() const {
  return this != internal_default_instance() && instance_ != NULL;
}
inline void HVACDevice::clear_instance() {
  if (GetArenaNoVirtual() == NULL && instance_ != NULL) {
    delete instance_;
  }
  instance_ = NULL;
}
inline const ::Nmea2k::Instance& HVACDevice::_internal_instance() const {
  return *instance_;
}
inline const ::Nmea2k::Instance& HVACDevice::instance() const {
  const ::Nmea2k::Instance* p = instance_;
  // @@protoc_insertion_point(field_get:Nmea2k.HVACDevice.Instance)
  return p != NULL ? *p : *reinterpret_cast<const ::Nmea2k::Instance*>(
      &::Nmea2k::_Instance_default_instance_);
}
inline ::Nmea2k::Instance* HVACDevice::release_instance() {
  // @@protoc_insertion_point(field_release:Nmea2k.HVACDevice.Instance)
  
  ::Nmea2k::Instance* temp = instance_;
  instance_ = NULL;
  return temp;
}
inline ::Nmea2k::Instance* HVACDevice::mutable_instance() {
  
  if (instance_ == NULL) {
    auto* p = CreateMaybeMessage<::Nmea2k::Instance>(GetArenaNoVirtual());
    instance_ = p;
  }
  // @@protoc_insertion_point(field_mutable:Nmea2k.HVACDevice.Instance)
  return instance_;
}
inline void HVACDevice::set_allocated_instance(::Nmea2k::Instance* instance) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete instance_;
  }
  if (instance) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      instance = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, instance, submessage_arena);
    }
    
  } else {
    
  }
  instance_ = instance;
  // @@protoc_insertion_point(field_set_allocated:Nmea2k.HVACDevice.Instance)
}

// .Nmea2k.DataId OperatingModeId = 5;
inline bool HVACDevice::has_operatingmodeid() const {
  return this != internal_default_instance() && operatingmodeid_ != NULL;
}
inline void HVACDevice::clear_operatingmodeid() {
  if (GetArenaNoVirtual() == NULL && operatingmodeid_ != NULL) {
    delete operatingmodeid_;
  }
  operatingmodeid_ = NULL;
}
inline const ::Nmea2k::DataId& HVACDevice::_internal_operatingmodeid() const {
  return *operatingmodeid_;
}
inline const ::Nmea2k::DataId& HVACDevice::operatingmodeid() const {
  const ::Nmea2k::DataId* p = operatingmodeid_;
  // @@protoc_insertion_point(field_get:Nmea2k.HVACDevice.OperatingModeId)
  return p != NULL ? *p : *reinterpret_cast<const ::Nmea2k::DataId*>(
      &::Nmea2k::_DataId_default_instance_);
}
inline ::Nmea2k::DataId* HVACDevice::release_operatingmodeid() {
  // @@protoc_insertion_point(field_release:Nmea2k.HVACDevice.OperatingModeId)
  
  ::Nmea2k::DataId* temp = operatingmodeid_;
  operatingmodeid_ = NULL;
  return temp;
}
inline ::Nmea2k::DataId* HVACDevice::mutable_operatingmodeid() {
  
  if (operatingmodeid_ == NULL) {
    auto* p = CreateMaybeMessage<::Nmea2k::DataId>(GetArenaNoVirtual());
    operatingmodeid_ = p;
  }
  // @@protoc_insertion_point(field_mutable:Nmea2k.HVACDevice.OperatingModeId)
  return operatingmodeid_;
}
inline void HVACDevice::set_allocated_operatingmodeid(::Nmea2k::DataId* operatingmodeid) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete operatingmodeid_;
  }
  if (operatingmodeid) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      operatingmodeid = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, operatingmodeid, submessage_arena);
    }
    
  } else {
    
  }
  operatingmodeid_ = operatingmodeid;
  // @@protoc_insertion_point(field_set_allocated:Nmea2k.HVACDevice.OperatingModeId)
}

// .Nmea2k.DataId FanModeId = 6;
inline bool HVACDevice::has_fanmodeid() const {
  return this != internal_default_instance() && fanmodeid_ != NULL;
}
inline void HVACDevice::clear_fanmodeid() {
  if (GetArenaNoVirtual() == NULL && fanmodeid_ != NULL) {
    delete fanmodeid_;
  }
  fanmodeid_ = NULL;
}
inline const ::Nmea2k::DataId& HVACDevice::_internal_fanmodeid() const {
  return *fanmodeid_;
}
inline const ::Nmea2k::DataId& HVACDevice::fanmodeid() const {
  const ::Nmea2k::DataId* p = fanmodeid_;
  // @@protoc_insertion_point(field_get:Nmea2k.HVACDevice.FanModeId)
  return p != NULL ? *p : *reinterpret_cast<const ::Nmea2k::DataId*>(
      &::Nmea2k::_DataId_default_instance_);
}
inline ::Nmea2k::DataId* HVACDevice::release_fanmodeid() {
  // @@protoc_insertion_point(field_release:Nmea2k.HVACDevice.FanModeId)
  
  ::Nmea2k::DataId* temp = fanmodeid_;
  fanmodeid_ = NULL;
  return temp;
}
inline ::Nmea2k::DataId* HVACDevice::mutable_fanmodeid() {
  
  if (fanmodeid_ == NULL) {
    auto* p = CreateMaybeMessage<::Nmea2k::DataId>(GetArenaNoVirtual());
    fanmodeid_ = p;
  }
  // @@protoc_insertion_point(field_mutable:Nmea2k.HVACDevice.FanModeId)
  return fanmodeid_;
}
inline void HVACDevice::set_allocated_fanmodeid(::Nmea2k::DataId* fanmodeid) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete fanmodeid_;
  }
  if (fanmodeid) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      fanmodeid = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, fanmodeid, submessage_arena);
    }
    
  } else {
    
  }
  fanmodeid_ = fanmodeid;
  // @@protoc_insertion_point(field_set_allocated:Nmea2k.HVACDevice.FanModeId)
}

// .Nmea2k.DataId FanSpeedId = 7;
inline bool HVACDevice::has_fanspeedid() const {
  return this != internal_default_instance() && fanspeedid_ != NULL;
}
inline void HVACDevice::clear_fanspeedid() {
  if (GetArenaNoVirtual() == NULL && fanspeedid_ != NULL) {
    delete fanspeedid_;
  }
  fanspeedid_ = NULL;
}
inline const ::Nmea2k::DataId& HVACDevice::_internal_fanspeedid() const {
  return *fanspeedid_;
}
inline const ::Nmea2k::DataId& HVACDevice::fanspeedid() const {
  const ::Nmea2k::DataId* p = fanspeedid_;
  // @@protoc_insertion_point(field_get:Nmea2k.HVACDevice.FanSpeedId)
  return p != NULL ? *p : *reinterpret_cast<const ::Nmea2k::DataId*>(
      &::Nmea2k::_DataId_default_instance_);
}
inline ::Nmea2k::DataId* HVACDevice::release_fanspeedid() {
  // @@protoc_insertion_point(field_release:Nmea2k.HVACDevice.FanSpeedId)
  
  ::Nmea2k::DataId* temp = fanspeedid_;
  fanspeedid_ = NULL;
  return temp;
}
inline ::Nmea2k::DataId* HVACDevice::mutable_fanspeedid() {
  
  if (fanspeedid_ == NULL) {
    auto* p = CreateMaybeMessage<::Nmea2k::DataId>(GetArenaNoVirtual());
    fanspeedid_ = p;
  }
  // @@protoc_insertion_point(field_mutable:Nmea2k.HVACDevice.FanSpeedId)
  return fanspeedid_;
}
inline void HVACDevice::set_allocated_fanspeedid(::Nmea2k::DataId* fanspeedid) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete fanspeedid_;
  }
  if (fanspeedid) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      fanspeedid = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, fanspeedid, submessage_arena);
    }
    
  } else {
    
  }
  fanspeedid_ = fanspeedid;
  // @@protoc_insertion_point(field_set_allocated:Nmea2k.HVACDevice.FanSpeedId)
}

// .Nmea2k.DataId SetpointTemperatureId = 8;
inline bool HVACDevice::has_setpointtemperatureid() const {
  return this != internal_default_instance() && setpointtemperatureid_ != NULL;
}
inline void HVACDevice::clear_setpointtemperatureid() {
  if (GetArenaNoVirtual() == NULL && setpointtemperatureid_ != NULL) {
    delete setpointtemperatureid_;
  }
  setpointtemperatureid_ = NULL;
}
inline const ::Nmea2k::DataId& HVACDevice::_internal_setpointtemperatureid() const {
  return *setpointtemperatureid_;
}
inline const ::Nmea2k::DataId& HVACDevice::setpointtemperatureid() const {
  const ::Nmea2k::DataId* p = setpointtemperatureid_;
  // @@protoc_insertion_point(field_get:Nmea2k.HVACDevice.SetpointTemperatureId)
  return p != NULL ? *p : *reinterpret_cast<const ::Nmea2k::DataId*>(
      &::Nmea2k::_DataId_default_instance_);
}
inline ::Nmea2k::DataId* HVACDevice::release_setpointtemperatureid() {
  // @@protoc_insertion_point(field_release:Nmea2k.HVACDevice.SetpointTemperatureId)
  
  ::Nmea2k::DataId* temp = setpointtemperatureid_;
  setpointtemperatureid_ = NULL;
  return temp;
}
inline ::Nmea2k::DataId* HVACDevice::mutable_setpointtemperatureid() {
  
  if (setpointtemperatureid_ == NULL) {
    auto* p = CreateMaybeMessage<::Nmea2k::DataId>(GetArenaNoVirtual());
    setpointtemperatureid_ = p;
  }
  // @@protoc_insertion_point(field_mutable:Nmea2k.HVACDevice.SetpointTemperatureId)
  return setpointtemperatureid_;
}
inline void HVACDevice::set_allocated_setpointtemperatureid(::Nmea2k::DataId* setpointtemperatureid) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete setpointtemperatureid_;
  }
  if (setpointtemperatureid) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      setpointtemperatureid = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, setpointtemperatureid, submessage_arena);
    }
    
  } else {
    
  }
  setpointtemperatureid_ = setpointtemperatureid;
  // @@protoc_insertion_point(field_set_allocated:Nmea2k.HVACDevice.SetpointTemperatureId)
}

// .Nmea2k.DataId OperatingModeToggleId = 9;
inline bool HVACDevice::has_operatingmodetoggleid() const {
  return this != internal_default_instance() && operatingmodetoggleid_ != NULL;
}
inline void HVACDevice::clear_operatingmodetoggleid() {
  if (GetArenaNoVirtual() == NULL && operatingmodetoggleid_ != NULL) {
    delete operatingmodetoggleid_;
  }
  operatingmodetoggleid_ = NULL;
}
inline const ::Nmea2k::DataId& HVACDevice::_internal_operatingmodetoggleid() const {
  return *operatingmodetoggleid_;
}
inline const ::Nmea2k::DataId& HVACDevice::operatingmodetoggleid() const {
  const ::Nmea2k::DataId* p = operatingmodetoggleid_;
  // @@protoc_insertion_point(field_get:Nmea2k.HVACDevice.OperatingModeToggleId)
  return p != NULL ? *p : *reinterpret_cast<const ::Nmea2k::DataId*>(
      &::Nmea2k::_DataId_default_instance_);
}
inline ::Nmea2k::DataId* HVACDevice::release_operatingmodetoggleid() {
  // @@protoc_insertion_point(field_release:Nmea2k.HVACDevice.OperatingModeToggleId)
  
  ::Nmea2k::DataId* temp = operatingmodetoggleid_;
  operatingmodetoggleid_ = NULL;
  return temp;
}
inline ::Nmea2k::DataId* HVACDevice::mutable_operatingmodetoggleid() {
  
  if (operatingmodetoggleid_ == NULL) {
    auto* p = CreateMaybeMessage<::Nmea2k::DataId>(GetArenaNoVirtual());
    operatingmodetoggleid_ = p;
  }
  // @@protoc_insertion_point(field_mutable:Nmea2k.HVACDevice.OperatingModeToggleId)
  return operatingmodetoggleid_;
}
inline void HVACDevice::set_allocated_operatingmodetoggleid(::Nmea2k::DataId* operatingmodetoggleid) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete operatingmodetoggleid_;
  }
  if (operatingmodetoggleid) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      operatingmodetoggleid = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, operatingmodetoggleid, submessage_arena);
    }
    
  } else {
    
  }
  operatingmodetoggleid_ = operatingmodetoggleid;
  // @@protoc_insertion_point(field_set_allocated:Nmea2k.HVACDevice.OperatingModeToggleId)
}

// .Nmea2k.DataId FanModeToggleId = 10;
inline bool HVACDevice::has_fanmodetoggleid() const {
  return this != internal_default_instance() && fanmodetoggleid_ != NULL;
}
inline void HVACDevice::clear_fanmodetoggleid() {
  if (GetArenaNoVirtual() == NULL && fanmodetoggleid_ != NULL) {
    delete fanmodetoggleid_;
  }
  fanmodetoggleid_ = NULL;
}
inline const ::Nmea2k::DataId& HVACDevice::_internal_fanmodetoggleid() const {
  return *fanmodetoggleid_;
}
inline const ::Nmea2k::DataId& HVACDevice::fanmodetoggleid() const {
  const ::Nmea2k::DataId* p = fanmodetoggleid_;
  // @@protoc_insertion_point(field_get:Nmea2k.HVACDevice.FanModeToggleId)
  return p != NULL ? *p : *reinterpret_cast<const ::Nmea2k::DataId*>(
      &::Nmea2k::_DataId_default_instance_);
}
inline ::Nmea2k::DataId* HVACDevice::release_fanmodetoggleid() {
  // @@protoc_insertion_point(field_release:Nmea2k.HVACDevice.FanModeToggleId)
  
  ::Nmea2k::DataId* temp = fanmodetoggleid_;
  fanmodetoggleid_ = NULL;
  return temp;
}
inline ::Nmea2k::DataId* HVACDevice::mutable_fanmodetoggleid() {
  
  if (fanmodetoggleid_ == NULL) {
    auto* p = CreateMaybeMessage<::Nmea2k::DataId>(GetArenaNoVirtual());
    fanmodetoggleid_ = p;
  }
  // @@protoc_insertion_point(field_mutable:Nmea2k.HVACDevice.FanModeToggleId)
  return fanmodetoggleid_;
}
inline void HVACDevice::set_allocated_fanmodetoggleid(::Nmea2k::DataId* fanmodetoggleid) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete fanmodetoggleid_;
  }
  if (fanmodetoggleid) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      fanmodetoggleid = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, fanmodetoggleid, submessage_arena);
    }
    
  } else {
    
  }
  fanmodetoggleid_ = fanmodetoggleid;
  // @@protoc_insertion_point(field_set_allocated:Nmea2k.HVACDevice.FanModeToggleId)
}

// .Nmea2k.DataId FanSpeedToggleId = 11;
inline bool HVACDevice::has_fanspeedtoggleid() const {
  return this != internal_default_instance() && fanspeedtoggleid_ != NULL;
}
inline void HVACDevice::clear_fanspeedtoggleid() {
  if (GetArenaNoVirtual() == NULL && fanspeedtoggleid_ != NULL) {
    delete fanspeedtoggleid_;
  }
  fanspeedtoggleid_ = NULL;
}
inline const ::Nmea2k::DataId& HVACDevice::_internal_fanspeedtoggleid() const {
  return *fanspeedtoggleid_;
}
inline const ::Nmea2k::DataId& HVACDevice::fanspeedtoggleid() const {
  const ::Nmea2k::DataId* p = fanspeedtoggleid_;
  // @@protoc_insertion_point(field_get:Nmea2k.HVACDevice.FanSpeedToggleId)
  return p != NULL ? *p : *reinterpret_cast<const ::Nmea2k::DataId*>(
      &::Nmea2k::_DataId_default_instance_);
}
inline ::Nmea2k::DataId* HVACDevice::release_fanspeedtoggleid() {
  // @@protoc_insertion_point(field_release:Nmea2k.HVACDevice.FanSpeedToggleId)
  
  ::Nmea2k::DataId* temp = fanspeedtoggleid_;
  fanspeedtoggleid_ = NULL;
  return temp;
}
inline ::Nmea2k::DataId* HVACDevice::mutable_fanspeedtoggleid() {
  
  if (fanspeedtoggleid_ == NULL) {
    auto* p = CreateMaybeMessage<::Nmea2k::DataId>(GetArenaNoVirtual());
    fanspeedtoggleid_ = p;
  }
  // @@protoc_insertion_point(field_mutable:Nmea2k.HVACDevice.FanSpeedToggleId)
  return fanspeedtoggleid_;
}
inline void HVACDevice::set_allocated_fanspeedtoggleid(::Nmea2k::DataId* fanspeedtoggleid) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete fanspeedtoggleid_;
  }
  if (fanspeedtoggleid) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      fanspeedtoggleid = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, fanspeedtoggleid, submessage_arena);
    }
    
  } else {
    
  }
  fanspeedtoggleid_ = fanspeedtoggleid;
  // @@protoc_insertion_point(field_set_allocated:Nmea2k.HVACDevice.FanSpeedToggleId)
}

// .Nmea2k.DataId SetpointTemperatureToggleId = 12;
inline bool HVACDevice::has_setpointtemperaturetoggleid() const {
  return this != internal_default_instance() && setpointtemperaturetoggleid_ != NULL;
}
inline void HVACDevice::clear_setpointtemperaturetoggleid() {
  if (GetArenaNoVirtual() == NULL && setpointtemperaturetoggleid_ != NULL) {
    delete setpointtemperaturetoggleid_;
  }
  setpointtemperaturetoggleid_ = NULL;
}
inline const ::Nmea2k::DataId& HVACDevice::_internal_setpointtemperaturetoggleid() const {
  return *setpointtemperaturetoggleid_;
}
inline const ::Nmea2k::DataId& HVACDevice::setpointtemperaturetoggleid() const {
  const ::Nmea2k::DataId* p = setpointtemperaturetoggleid_;
  // @@protoc_insertion_point(field_get:Nmea2k.HVACDevice.SetpointTemperatureToggleId)
  return p != NULL ? *p : *reinterpret_cast<const ::Nmea2k::DataId*>(
      &::Nmea2k::_DataId_default_instance_);
}
inline ::Nmea2k::DataId* HVACDevice::release_setpointtemperaturetoggleid() {
  // @@protoc_insertion_point(field_release:Nmea2k.HVACDevice.SetpointTemperatureToggleId)
  
  ::Nmea2k::DataId* temp = setpointtemperaturetoggleid_;
  setpointtemperaturetoggleid_ = NULL;
  return temp;
}
inline ::Nmea2k::DataId* HVACDevice::mutable_setpointtemperaturetoggleid() {
  
  if (setpointtemperaturetoggleid_ == NULL) {
    auto* p = CreateMaybeMessage<::Nmea2k::DataId>(GetArenaNoVirtual());
    setpointtemperaturetoggleid_ = p;
  }
  // @@protoc_insertion_point(field_mutable:Nmea2k.HVACDevice.SetpointTemperatureToggleId)
  return setpointtemperaturetoggleid_;
}
inline void HVACDevice::set_allocated_setpointtemperaturetoggleid(::Nmea2k::DataId* setpointtemperaturetoggleid) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete setpointtemperaturetoggleid_;
  }
  if (setpointtemperaturetoggleid) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      setpointtemperaturetoggleid = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, setpointtemperaturetoggleid, submessage_arena);
    }
    
  } else {
    
  }
  setpointtemperaturetoggleid_ = setpointtemperaturetoggleid;
  // @@protoc_insertion_point(field_set_allocated:Nmea2k.HVACDevice.SetpointTemperatureToggleId)
}

// .Nmea2k.DataId TemperatureMonitoringId = 13;
inline bool HVACDevice::has_temperaturemonitoringid() const {
  return this != internal_default_instance() && temperaturemonitoringid_ != NULL;
}
inline void HVACDevice::clear_temperaturemonitoringid() {
  if (GetArenaNoVirtual() == NULL && temperaturemonitoringid_ != NULL) {
    delete temperaturemonitoringid_;
  }
  temperaturemonitoringid_ = NULL;
}
inline const ::Nmea2k::DataId& HVACDevice::_internal_temperaturemonitoringid() const {
  return *temperaturemonitoringid_;
}
inline const ::Nmea2k::DataId& HVACDevice::temperaturemonitoringid() const {
  const ::Nmea2k::DataId* p = temperaturemonitoringid_;
  // @@protoc_insertion_point(field_get:Nmea2k.HVACDevice.TemperatureMonitoringId)
  return p != NULL ? *p : *reinterpret_cast<const ::Nmea2k::DataId*>(
      &::Nmea2k::_DataId_default_instance_);
}
inline ::Nmea2k::DataId* HVACDevice::release_temperaturemonitoringid() {
  // @@protoc_insertion_point(field_release:Nmea2k.HVACDevice.TemperatureMonitoringId)
  
  ::Nmea2k::DataId* temp = temperaturemonitoringid_;
  temperaturemonitoringid_ = NULL;
  return temp;
}
inline ::Nmea2k::DataId* HVACDevice::mutable_temperaturemonitoringid() {
  
  if (temperaturemonitoringid_ == NULL) {
    auto* p = CreateMaybeMessage<::Nmea2k::DataId>(GetArenaNoVirtual());
    temperaturemonitoringid_ = p;
  }
  // @@protoc_insertion_point(field_mutable:Nmea2k.HVACDevice.TemperatureMonitoringId)
  return temperaturemonitoringid_;
}
inline void HVACDevice::set_allocated_temperaturemonitoringid(::Nmea2k::DataId* temperaturemonitoringid) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete temperaturemonitoringid_;
  }
  if (temperaturemonitoringid) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      temperaturemonitoringid = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, temperaturemonitoringid, submessage_arena);
    }
    
  } else {
    
  }
  temperaturemonitoringid_ = temperaturemonitoringid;
  // @@protoc_insertion_point(field_set_allocated:Nmea2k.HVACDevice.TemperatureMonitoringId)
}

// uint32 FanSpeedCount = 14;
inline void HVACDevice::clear_fanspeedcount() {
  fanspeedcount_ = 0u;
}
inline ::google::protobuf::uint32 HVACDevice::fanspeedcount() const {
  // @@protoc_insertion_point(field_get:Nmea2k.HVACDevice.FanSpeedCount)
  return fanspeedcount_;
}
inline void HVACDevice::set_fanspeedcount(::google::protobuf::uint32 value) {
  
  fanspeedcount_ = value;
  // @@protoc_insertion_point(field_set:Nmea2k.HVACDevice.FanSpeedCount)
}

// uint32 OperatingModesMask = 15;
inline void HVACDevice::clear_operatingmodesmask() {
  operatingmodesmask_ = 0u;
}
inline ::google::protobuf::uint32 HVACDevice::operatingmodesmask() const {
  // @@protoc_insertion_point(field_get:Nmea2k.HVACDevice.OperatingModesMask)
  return operatingmodesmask_;
}
inline void HVACDevice::set_operatingmodesmask(::google::protobuf::uint32 value) {
  
  operatingmodesmask_ = value;
  // @@protoc_insertion_point(field_set:Nmea2k.HVACDevice.OperatingModesMask)
}

// uint32 Model = 16;
inline void HVACDevice::clear_model() {
  model_ = 0u;
}
inline ::google::protobuf::uint32 HVACDevice::model() const {
  // @@protoc_insertion_point(field_get:Nmea2k.HVACDevice.Model)
  return model_;
}
inline void HVACDevice::set_model(::google::protobuf::uint32 value) {
  
  model_ = value;
  // @@protoc_insertion_point(field_set:Nmea2k.HVACDevice.Model)
}

// .Nmea2k.Instance TemperatureInstance = 17;
inline bool HVACDevice::has_temperatureinstance() const {
  return this != internal_default_instance() && temperatureinstance_ != NULL;
}
inline void HVACDevice::clear_temperatureinstance() {
  if (GetArenaNoVirtual() == NULL && temperatureinstance_ != NULL) {
    delete temperatureinstance_;
  }
  temperatureinstance_ = NULL;
}
inline const ::Nmea2k::Instance& HVACDevice::_internal_temperatureinstance() const {
  return *temperatureinstance_;
}
inline const ::Nmea2k::Instance& HVACDevice::temperatureinstance() const {
  const ::Nmea2k::Instance* p = temperatureinstance_;
  // @@protoc_insertion_point(field_get:Nmea2k.HVACDevice.TemperatureInstance)
  return p != NULL ? *p : *reinterpret_cast<const ::Nmea2k::Instance*>(
      &::Nmea2k::_Instance_default_instance_);
}
inline ::Nmea2k::Instance* HVACDevice::release_temperatureinstance() {
  // @@protoc_insertion_point(field_release:Nmea2k.HVACDevice.TemperatureInstance)
  
  ::Nmea2k::Instance* temp = temperatureinstance_;
  temperatureinstance_ = NULL;
  return temp;
}
inline ::Nmea2k::Instance* HVACDevice::mutable_temperatureinstance() {
  
  if (temperatureinstance_ == NULL) {
    auto* p = CreateMaybeMessage<::Nmea2k::Instance>(GetArenaNoVirtual());
    temperatureinstance_ = p;
  }
  // @@protoc_insertion_point(field_mutable:Nmea2k.HVACDevice.TemperatureInstance)
  return temperatureinstance_;
}
inline void HVACDevice::set_allocated_temperatureinstance(::Nmea2k::Instance* temperatureinstance) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete temperatureinstance_;
  }
  if (temperatureinstance) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      temperatureinstance = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, temperatureinstance, submessage_arena);
    }
    
  } else {
    
  }
  temperatureinstance_ = temperatureinstance;
  // @@protoc_insertion_point(field_set_allocated:Nmea2k.HVACDevice.TemperatureInstance)
}

// float SetpointTemperatureMin = 18;
inline void HVACDevice::clear_setpointtemperaturemin() {
  setpointtemperaturemin_ = 0;
}
inline float HVACDevice::setpointtemperaturemin() const {
  // @@protoc_insertion_point(field_get:Nmea2k.HVACDevice.SetpointTemperatureMin)
  return setpointtemperaturemin_;
}
inline void HVACDevice::set_setpointtemperaturemin(float value) {
  
  setpointtemperaturemin_ = value;
  // @@protoc_insertion_point(field_set:Nmea2k.HVACDevice.SetpointTemperatureMin)
}

// float SetpointTemperatureMax = 19;
inline void HVACDevice::clear_setpointtemperaturemax() {
  setpointtemperaturemax_ = 0;
}
inline float HVACDevice::setpointtemperaturemax() const {
  // @@protoc_insertion_point(field_get:Nmea2k.HVACDevice.SetpointTemperatureMax)
  return setpointtemperaturemax_;
}
inline void HVACDevice::set_setpointtemperaturemax(float value) {
  
  setpointtemperaturemax_ = value;
  // @@protoc_insertion_point(field_set:Nmea2k.HVACDevice.SetpointTemperatureMax)
}

// uint32 FanSpeedOffModesMask = 20;
inline void HVACDevice::clear_fanspeedoffmodesmask() {
  fanspeedoffmodesmask_ = 0u;
}
inline ::google::protobuf::uint32 HVACDevice::fanspeedoffmodesmask() const {
  // @@protoc_insertion_point(field_get:Nmea2k.HVACDevice.FanSpeedOffModesMask)
  return fanspeedoffmodesmask_;
}
inline void HVACDevice::set_fanspeedoffmodesmask(::google::protobuf::uint32 value) {
  
  fanspeedoffmodesmask_ = value;
  // @@protoc_insertion_point(field_set:Nmea2k.HVACDevice.FanSpeedOffModesMask)
}

// uint32 FanSpeedAutoModesMask = 21;
inline void HVACDevice::clear_fanspeedautomodesmask() {
  fanspeedautomodesmask_ = 0u;
}
inline ::google::protobuf::uint32 HVACDevice::fanspeedautomodesmask() const {
  // @@protoc_insertion_point(field_get:Nmea2k.HVACDevice.FanSpeedAutoModesMask)
  return fanspeedautomodesmask_;
}
inline void HVACDevice::set_fanspeedautomodesmask(::google::protobuf::uint32 value) {
  
  fanspeedautomodesmask_ = value;
  // @@protoc_insertion_point(field_set:Nmea2k.HVACDevice.FanSpeedAutoModesMask)
}

// uint32 FanSpeedManualModesMask = 22;
inline void HVACDevice::clear_fanspeedmanualmodesmask() {
  fanspeedmanualmodesmask_ = 0u;
}
inline ::google::protobuf::uint32 HVACDevice::fanspeedmanualmodesmask() const {
  // @@protoc_insertion_point(field_get:Nmea2k.HVACDevice.FanSpeedManualModesMask)
  return fanspeedmanualmodesmask_;
}
inline void HVACDevice::set_fanspeedmanualmodesmask(::google::protobuf::uint32 value) {
  
  fanspeedmanualmodesmask_ = value;
  // @@protoc_insertion_point(field_set:Nmea2k.HVACDevice.FanSpeedManualModesMask)
}

// -------------------------------------------------------------------

// BinarySignalBitAddress

// uint32 DataType = 1;
inline void BinarySignalBitAddress::clear_datatype() {
  datatype_ = 0u;
}
inline ::google::protobuf::uint32 BinarySignalBitAddress::datatype() const {
  // @@protoc_insertion_point(field_get:Nmea2k.BinarySignalBitAddress.DataType)
  return datatype_;
}
inline void BinarySignalBitAddress::set_datatype(::google::protobuf::uint32 value) {
  
  datatype_ = value;
  // @@protoc_insertion_point(field_set:Nmea2k.BinarySignalBitAddress.DataType)
}

// uint32 Dipswitch = 2;
inline void BinarySignalBitAddress::clear_dipswitch() {
  dipswitch_ = 0u;
}
inline ::google::protobuf::uint32 BinarySignalBitAddress::dipswitch() const {
  // @@protoc_insertion_point(field_get:Nmea2k.BinarySignalBitAddress.Dipswitch)
  return dipswitch_;
}
inline void BinarySignalBitAddress::set_dipswitch(::google::protobuf::uint32 value) {
  
  dipswitch_ = value;
  // @@protoc_insertion_point(field_set:Nmea2k.BinarySignalBitAddress.Dipswitch)
}

// uint32 Bit = 3;
inline void BinarySignalBitAddress::clear_bit() {
  bit_ = 0u;
}
inline ::google::protobuf::uint32 BinarySignalBitAddress::bit() const {
  // @@protoc_insertion_point(field_get:Nmea2k.BinarySignalBitAddress.Bit)
  return bit_;
}
inline void BinarySignalBitAddress::set_bit(::google::protobuf::uint32 value) {
  
  bit_ = value;
  // @@protoc_insertion_point(field_set:Nmea2k.BinarySignalBitAddress.Bit)
}

// -------------------------------------------------------------------

// ZipdeeAwningDevice

// .Nmea2k.ConfigRequest.eConfigType DisplayType = 1;
inline void ZipdeeAwningDevice::clear_displaytype() {
  displaytype_ = 0;
}
inline ::Nmea2k::ConfigRequest_eConfigType ZipdeeAwningDevice::displaytype() const {
  // @@protoc_insertion_point(field_get:Nmea2k.ZipdeeAwningDevice.DisplayType)
  return static_cast< ::Nmea2k::ConfigRequest_eConfigType >(displaytype_);
}
inline void ZipdeeAwningDevice::set_displaytype(::Nmea2k::ConfigRequest_eConfigType value) {
  
  displaytype_ = value;
  // @@protoc_insertion_point(field_set:Nmea2k.ZipdeeAwningDevice.DisplayType)
}

// uint32 Id = 2;
inline void ZipdeeAwningDevice::clear_id() {
  id_ = 0u;
}
inline ::google::protobuf::uint32 ZipdeeAwningDevice::id() const {
  // @@protoc_insertion_point(field_get:Nmea2k.ZipdeeAwningDevice.Id)
  return id_;
}
inline void ZipdeeAwningDevice::set_id(::google::protobuf::uint32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:Nmea2k.ZipdeeAwningDevice.Id)
}

// string NameUTF8 = 3;
inline void ZipdeeAwningDevice::clear_nameutf8() {
  nameutf8_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ZipdeeAwningDevice::nameutf8() const {
  // @@protoc_insertion_point(field_get:Nmea2k.ZipdeeAwningDevice.NameUTF8)
  return nameutf8_.GetNoArena();
}
inline void ZipdeeAwningDevice::set_nameutf8(const ::std::string& value) {
  
  nameutf8_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Nmea2k.ZipdeeAwningDevice.NameUTF8)
}
#if LANG_CXX11
inline void ZipdeeAwningDevice::set_nameutf8(::std::string&& value) {
  
  nameutf8_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Nmea2k.ZipdeeAwningDevice.NameUTF8)
}
#endif
inline void ZipdeeAwningDevice::set_nameutf8(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  nameutf8_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Nmea2k.ZipdeeAwningDevice.NameUTF8)
}
inline void ZipdeeAwningDevice::set_nameutf8(const char* value, size_t size) {
  
  nameutf8_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Nmea2k.ZipdeeAwningDevice.NameUTF8)
}
inline ::std::string* ZipdeeAwningDevice::mutable_nameutf8() {
  
  // @@protoc_insertion_point(field_mutable:Nmea2k.ZipdeeAwningDevice.NameUTF8)
  return nameutf8_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ZipdeeAwningDevice::release_nameutf8() {
  // @@protoc_insertion_point(field_release:Nmea2k.ZipdeeAwningDevice.NameUTF8)
  
  return nameutf8_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ZipdeeAwningDevice::set_allocated_nameutf8(::std::string* nameutf8) {
  if (nameutf8 != NULL) {
    
  } else {
    
  }
  nameutf8_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), nameutf8);
  // @@protoc_insertion_point(field_set_allocated:Nmea2k.ZipdeeAwningDevice.NameUTF8)
}

// .Nmea2k.Instance Instance = 4;
inline bool ZipdeeAwningDevice::has_instance() const {
  return this != internal_default_instance() && instance_ != NULL;
}
inline void ZipdeeAwningDevice::clear_instance() {
  if (GetArenaNoVirtual() == NULL && instance_ != NULL) {
    delete instance_;
  }
  instance_ = NULL;
}
inline const ::Nmea2k::Instance& ZipdeeAwningDevice::_internal_instance() const {
  return *instance_;
}
inline const ::Nmea2k::Instance& ZipdeeAwningDevice::instance() const {
  const ::Nmea2k::Instance* p = instance_;
  // @@protoc_insertion_point(field_get:Nmea2k.ZipdeeAwningDevice.Instance)
  return p != NULL ? *p : *reinterpret_cast<const ::Nmea2k::Instance*>(
      &::Nmea2k::_Instance_default_instance_);
}
inline ::Nmea2k::Instance* ZipdeeAwningDevice::release_instance() {
  // @@protoc_insertion_point(field_release:Nmea2k.ZipdeeAwningDevice.Instance)
  
  ::Nmea2k::Instance* temp = instance_;
  instance_ = NULL;
  return temp;
}
inline ::Nmea2k::Instance* ZipdeeAwningDevice::mutable_instance() {
  
  if (instance_ == NULL) {
    auto* p = CreateMaybeMessage<::Nmea2k::Instance>(GetArenaNoVirtual());
    instance_ = p;
  }
  // @@protoc_insertion_point(field_mutable:Nmea2k.ZipdeeAwningDevice.Instance)
  return instance_;
}
inline void ZipdeeAwningDevice::set_allocated_instance(::Nmea2k::Instance* instance) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete instance_;
  }
  if (instance) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      instance = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, instance, submessage_arena);
    }
    
  } else {
    
  }
  instance_ = instance;
  // @@protoc_insertion_point(field_set_allocated:Nmea2k.ZipdeeAwningDevice.Instance)
}

// .Nmea2k.DataId OpenId = 5;
inline bool ZipdeeAwningDevice::has_openid() const {
  return this != internal_default_instance() && openid_ != NULL;
}
inline void ZipdeeAwningDevice::clear_openid() {
  if (GetArenaNoVirtual() == NULL && openid_ != NULL) {
    delete openid_;
  }
  openid_ = NULL;
}
inline const ::Nmea2k::DataId& ZipdeeAwningDevice::_internal_openid() const {
  return *openid_;
}
inline const ::Nmea2k::DataId& ZipdeeAwningDevice::openid() const {
  const ::Nmea2k::DataId* p = openid_;
  // @@protoc_insertion_point(field_get:Nmea2k.ZipdeeAwningDevice.OpenId)
  return p != NULL ? *p : *reinterpret_cast<const ::Nmea2k::DataId*>(
      &::Nmea2k::_DataId_default_instance_);
}
inline ::Nmea2k::DataId* ZipdeeAwningDevice::release_openid() {
  // @@protoc_insertion_point(field_release:Nmea2k.ZipdeeAwningDevice.OpenId)
  
  ::Nmea2k::DataId* temp = openid_;
  openid_ = NULL;
  return temp;
}
inline ::Nmea2k::DataId* ZipdeeAwningDevice::mutable_openid() {
  
  if (openid_ == NULL) {
    auto* p = CreateMaybeMessage<::Nmea2k::DataId>(GetArenaNoVirtual());
    openid_ = p;
  }
  // @@protoc_insertion_point(field_mutable:Nmea2k.ZipdeeAwningDevice.OpenId)
  return openid_;
}
inline void ZipdeeAwningDevice::set_allocated_openid(::Nmea2k::DataId* openid) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete openid_;
  }
  if (openid) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      openid = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, openid, submessage_arena);
    }
    
  } else {
    
  }
  openid_ = openid;
  // @@protoc_insertion_point(field_set_allocated:Nmea2k.ZipdeeAwningDevice.OpenId)
}

// .Nmea2k.DataId CloseId = 6;
inline bool ZipdeeAwningDevice::has_closeid() const {
  return this != internal_default_instance() && closeid_ != NULL;
}
inline void ZipdeeAwningDevice::clear_closeid() {
  if (GetArenaNoVirtual() == NULL && closeid_ != NULL) {
    delete closeid_;
  }
  closeid_ = NULL;
}
inline const ::Nmea2k::DataId& ZipdeeAwningDevice::_internal_closeid() const {
  return *closeid_;
}
inline const ::Nmea2k::DataId& ZipdeeAwningDevice::closeid() const {
  const ::Nmea2k::DataId* p = closeid_;
  // @@protoc_insertion_point(field_get:Nmea2k.ZipdeeAwningDevice.CloseId)
  return p != NULL ? *p : *reinterpret_cast<const ::Nmea2k::DataId*>(
      &::Nmea2k::_DataId_default_instance_);
}
inline ::Nmea2k::DataId* ZipdeeAwningDevice::release_closeid() {
  // @@protoc_insertion_point(field_release:Nmea2k.ZipdeeAwningDevice.CloseId)
  
  ::Nmea2k::DataId* temp = closeid_;
  closeid_ = NULL;
  return temp;
}
inline ::Nmea2k::DataId* ZipdeeAwningDevice::mutable_closeid() {
  
  if (closeid_ == NULL) {
    auto* p = CreateMaybeMessage<::Nmea2k::DataId>(GetArenaNoVirtual());
    closeid_ = p;
  }
  // @@protoc_insertion_point(field_mutable:Nmea2k.ZipdeeAwningDevice.CloseId)
  return closeid_;
}
inline void ZipdeeAwningDevice::set_allocated_closeid(::Nmea2k::DataId* closeid) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete closeid_;
  }
  if (closeid) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      closeid = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, closeid, submessage_arena);
    }
    
  } else {
    
  }
  closeid_ = closeid;
  // @@protoc_insertion_point(field_set_allocated:Nmea2k.ZipdeeAwningDevice.CloseId)
}

// .Nmea2k.DataId TiltLeftId = 7;
inline bool ZipdeeAwningDevice::has_tiltleftid() const {
  return this != internal_default_instance() && tiltleftid_ != NULL;
}
inline void ZipdeeAwningDevice::clear_tiltleftid() {
  if (GetArenaNoVirtual() == NULL && tiltleftid_ != NULL) {
    delete tiltleftid_;
  }
  tiltleftid_ = NULL;
}
inline const ::Nmea2k::DataId& ZipdeeAwningDevice::_internal_tiltleftid() const {
  return *tiltleftid_;
}
inline const ::Nmea2k::DataId& ZipdeeAwningDevice::tiltleftid() const {
  const ::Nmea2k::DataId* p = tiltleftid_;
  // @@protoc_insertion_point(field_get:Nmea2k.ZipdeeAwningDevice.TiltLeftId)
  return p != NULL ? *p : *reinterpret_cast<const ::Nmea2k::DataId*>(
      &::Nmea2k::_DataId_default_instance_);
}
inline ::Nmea2k::DataId* ZipdeeAwningDevice::release_tiltleftid() {
  // @@protoc_insertion_point(field_release:Nmea2k.ZipdeeAwningDevice.TiltLeftId)
  
  ::Nmea2k::DataId* temp = tiltleftid_;
  tiltleftid_ = NULL;
  return temp;
}
inline ::Nmea2k::DataId* ZipdeeAwningDevice::mutable_tiltleftid() {
  
  if (tiltleftid_ == NULL) {
    auto* p = CreateMaybeMessage<::Nmea2k::DataId>(GetArenaNoVirtual());
    tiltleftid_ = p;
  }
  // @@protoc_insertion_point(field_mutable:Nmea2k.ZipdeeAwningDevice.TiltLeftId)
  return tiltleftid_;
}
inline void ZipdeeAwningDevice::set_allocated_tiltleftid(::Nmea2k::DataId* tiltleftid) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete tiltleftid_;
  }
  if (tiltleftid) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      tiltleftid = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, tiltleftid, submessage_arena);
    }
    
  } else {
    
  }
  tiltleftid_ = tiltleftid;
  // @@protoc_insertion_point(field_set_allocated:Nmea2k.ZipdeeAwningDevice.TiltLeftId)
}

// .Nmea2k.DataId TiltRightId = 8;
inline bool ZipdeeAwningDevice::has_tiltrightid() const {
  return this != internal_default_instance() && tiltrightid_ != NULL;
}
inline void ZipdeeAwningDevice::clear_tiltrightid() {
  if (GetArenaNoVirtual() == NULL && tiltrightid_ != NULL) {
    delete tiltrightid_;
  }
  tiltrightid_ = NULL;
}
inline const ::Nmea2k::DataId& ZipdeeAwningDevice::_internal_tiltrightid() const {
  return *tiltrightid_;
}
inline const ::Nmea2k::DataId& ZipdeeAwningDevice::tiltrightid() const {
  const ::Nmea2k::DataId* p = tiltrightid_;
  // @@protoc_insertion_point(field_get:Nmea2k.ZipdeeAwningDevice.TiltRightId)
  return p != NULL ? *p : *reinterpret_cast<const ::Nmea2k::DataId*>(
      &::Nmea2k::_DataId_default_instance_);
}
inline ::Nmea2k::DataId* ZipdeeAwningDevice::release_tiltrightid() {
  // @@protoc_insertion_point(field_release:Nmea2k.ZipdeeAwningDevice.TiltRightId)
  
  ::Nmea2k::DataId* temp = tiltrightid_;
  tiltrightid_ = NULL;
  return temp;
}
inline ::Nmea2k::DataId* ZipdeeAwningDevice::mutable_tiltrightid() {
  
  if (tiltrightid_ == NULL) {
    auto* p = CreateMaybeMessage<::Nmea2k::DataId>(GetArenaNoVirtual());
    tiltrightid_ = p;
  }
  // @@protoc_insertion_point(field_mutable:Nmea2k.ZipdeeAwningDevice.TiltRightId)
  return tiltrightid_;
}
inline void ZipdeeAwningDevice::set_allocated_tiltrightid(::Nmea2k::DataId* tiltrightid) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete tiltrightid_;
  }
  if (tiltrightid) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      tiltrightid = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, tiltrightid, submessage_arena);
    }
    
  } else {
    
  }
  tiltrightid_ = tiltrightid;
  // @@protoc_insertion_point(field_set_allocated:Nmea2k.ZipdeeAwningDevice.TiltRightId)
}

// repeated .Nmea2k.BinarySignalBitAddress BinarySignals = 9;
inline int ZipdeeAwningDevice::binarysignals_size() const {
  return binarysignals_.size();
}
inline void ZipdeeAwningDevice::clear_binarysignals() {
  binarysignals_.Clear();
}
inline ::Nmea2k::BinarySignalBitAddress* ZipdeeAwningDevice::mutable_binarysignals(int index) {
  // @@protoc_insertion_point(field_mutable:Nmea2k.ZipdeeAwningDevice.BinarySignals)
  return binarysignals_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::Nmea2k::BinarySignalBitAddress >*
ZipdeeAwningDevice::mutable_binarysignals() {
  // @@protoc_insertion_point(field_mutable_list:Nmea2k.ZipdeeAwningDevice.BinarySignals)
  return &binarysignals_;
}
inline const ::Nmea2k::BinarySignalBitAddress& ZipdeeAwningDevice::binarysignals(int index) const {
  // @@protoc_insertion_point(field_get:Nmea2k.ZipdeeAwningDevice.BinarySignals)
  return binarysignals_.Get(index);
}
inline ::Nmea2k::BinarySignalBitAddress* ZipdeeAwningDevice::add_binarysignals() {
  // @@protoc_insertion_point(field_add:Nmea2k.ZipdeeAwningDevice.BinarySignals)
  return binarysignals_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Nmea2k::BinarySignalBitAddress >&
ZipdeeAwningDevice::binarysignals() const {
  // @@protoc_insertion_point(field_list:Nmea2k.ZipdeeAwningDevice.BinarySignals)
  return binarysignals_;
}

// -------------------------------------------------------------------

// ThirdPartyGeneratorDevice

// .Nmea2k.ConfigRequest.eConfigType DisplayType = 1;
inline void ThirdPartyGeneratorDevice::clear_displaytype() {
  displaytype_ = 0;
}
inline ::Nmea2k::ConfigRequest_eConfigType ThirdPartyGeneratorDevice::displaytype() const {
  // @@protoc_insertion_point(field_get:Nmea2k.ThirdPartyGeneratorDevice.DisplayType)
  return static_cast< ::Nmea2k::ConfigRequest_eConfigType >(displaytype_);
}
inline void ThirdPartyGeneratorDevice::set_displaytype(::Nmea2k::ConfigRequest_eConfigType value) {
  
  displaytype_ = value;
  // @@protoc_insertion_point(field_set:Nmea2k.ThirdPartyGeneratorDevice.DisplayType)
}

// uint32 Id = 2;
inline void ThirdPartyGeneratorDevice::clear_id() {
  id_ = 0u;
}
inline ::google::protobuf::uint32 ThirdPartyGeneratorDevice::id() const {
  // @@protoc_insertion_point(field_get:Nmea2k.ThirdPartyGeneratorDevice.Id)
  return id_;
}
inline void ThirdPartyGeneratorDevice::set_id(::google::protobuf::uint32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:Nmea2k.ThirdPartyGeneratorDevice.Id)
}

// string NameUTF8 = 3;
inline void ThirdPartyGeneratorDevice::clear_nameutf8() {
  nameutf8_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ThirdPartyGeneratorDevice::nameutf8() const {
  // @@protoc_insertion_point(field_get:Nmea2k.ThirdPartyGeneratorDevice.NameUTF8)
  return nameutf8_.GetNoArena();
}
inline void ThirdPartyGeneratorDevice::set_nameutf8(const ::std::string& value) {
  
  nameutf8_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Nmea2k.ThirdPartyGeneratorDevice.NameUTF8)
}
#if LANG_CXX11
inline void ThirdPartyGeneratorDevice::set_nameutf8(::std::string&& value) {
  
  nameutf8_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Nmea2k.ThirdPartyGeneratorDevice.NameUTF8)
}
#endif
inline void ThirdPartyGeneratorDevice::set_nameutf8(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  nameutf8_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Nmea2k.ThirdPartyGeneratorDevice.NameUTF8)
}
inline void ThirdPartyGeneratorDevice::set_nameutf8(const char* value, size_t size) {
  
  nameutf8_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Nmea2k.ThirdPartyGeneratorDevice.NameUTF8)
}
inline ::std::string* ThirdPartyGeneratorDevice::mutable_nameutf8() {
  
  // @@protoc_insertion_point(field_mutable:Nmea2k.ThirdPartyGeneratorDevice.NameUTF8)
  return nameutf8_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ThirdPartyGeneratorDevice::release_nameutf8() {
  // @@protoc_insertion_point(field_release:Nmea2k.ThirdPartyGeneratorDevice.NameUTF8)
  
  return nameutf8_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ThirdPartyGeneratorDevice::set_allocated_nameutf8(::std::string* nameutf8) {
  if (nameutf8 != NULL) {
    
  } else {
    
  }
  nameutf8_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), nameutf8);
  // @@protoc_insertion_point(field_set_allocated:Nmea2k.ThirdPartyGeneratorDevice.NameUTF8)
}

// .Nmea2k.Instance Instance = 4;
inline bool ThirdPartyGeneratorDevice::has_instance() const {
  return this != internal_default_instance() && instance_ != NULL;
}
inline void ThirdPartyGeneratorDevice::clear_instance() {
  if (GetArenaNoVirtual() == NULL && instance_ != NULL) {
    delete instance_;
  }
  instance_ = NULL;
}
inline const ::Nmea2k::Instance& ThirdPartyGeneratorDevice::_internal_instance() const {
  return *instance_;
}
inline const ::Nmea2k::Instance& ThirdPartyGeneratorDevice::instance() const {
  const ::Nmea2k::Instance* p = instance_;
  // @@protoc_insertion_point(field_get:Nmea2k.ThirdPartyGeneratorDevice.Instance)
  return p != NULL ? *p : *reinterpret_cast<const ::Nmea2k::Instance*>(
      &::Nmea2k::_Instance_default_instance_);
}
inline ::Nmea2k::Instance* ThirdPartyGeneratorDevice::release_instance() {
  // @@protoc_insertion_point(field_release:Nmea2k.ThirdPartyGeneratorDevice.Instance)
  
  ::Nmea2k::Instance* temp = instance_;
  instance_ = NULL;
  return temp;
}
inline ::Nmea2k::Instance* ThirdPartyGeneratorDevice::mutable_instance() {
  
  if (instance_ == NULL) {
    auto* p = CreateMaybeMessage<::Nmea2k::Instance>(GetArenaNoVirtual());
    instance_ = p;
  }
  // @@protoc_insertion_point(field_mutable:Nmea2k.ThirdPartyGeneratorDevice.Instance)
  return instance_;
}
inline void ThirdPartyGeneratorDevice::set_allocated_instance(::Nmea2k::Instance* instance) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete instance_;
  }
  if (instance) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      instance = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, instance, submessage_arena);
    }
    
  } else {
    
  }
  instance_ = instance;
  // @@protoc_insertion_point(field_set_allocated:Nmea2k.ThirdPartyGeneratorDevice.Instance)
}

// .Nmea2k.DataId StartControlId = 5;
inline bool ThirdPartyGeneratorDevice::has_startcontrolid() const {
  return this != internal_default_instance() && startcontrolid_ != NULL;
}
inline void ThirdPartyGeneratorDevice::clear_startcontrolid() {
  if (GetArenaNoVirtual() == NULL && startcontrolid_ != NULL) {
    delete startcontrolid_;
  }
  startcontrolid_ = NULL;
}
inline const ::Nmea2k::DataId& ThirdPartyGeneratorDevice::_internal_startcontrolid() const {
  return *startcontrolid_;
}
inline const ::Nmea2k::DataId& ThirdPartyGeneratorDevice::startcontrolid() const {
  const ::Nmea2k::DataId* p = startcontrolid_;
  // @@protoc_insertion_point(field_get:Nmea2k.ThirdPartyGeneratorDevice.StartControlId)
  return p != NULL ? *p : *reinterpret_cast<const ::Nmea2k::DataId*>(
      &::Nmea2k::_DataId_default_instance_);
}
inline ::Nmea2k::DataId* ThirdPartyGeneratorDevice::release_startcontrolid() {
  // @@protoc_insertion_point(field_release:Nmea2k.ThirdPartyGeneratorDevice.StartControlId)
  
  ::Nmea2k::DataId* temp = startcontrolid_;
  startcontrolid_ = NULL;
  return temp;
}
inline ::Nmea2k::DataId* ThirdPartyGeneratorDevice::mutable_startcontrolid() {
  
  if (startcontrolid_ == NULL) {
    auto* p = CreateMaybeMessage<::Nmea2k::DataId>(GetArenaNoVirtual());
    startcontrolid_ = p;
  }
  // @@protoc_insertion_point(field_mutable:Nmea2k.ThirdPartyGeneratorDevice.StartControlId)
  return startcontrolid_;
}
inline void ThirdPartyGeneratorDevice::set_allocated_startcontrolid(::Nmea2k::DataId* startcontrolid) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete startcontrolid_;
  }
  if (startcontrolid) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      startcontrolid = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, startcontrolid, submessage_arena);
    }
    
  } else {
    
  }
  startcontrolid_ = startcontrolid;
  // @@protoc_insertion_point(field_set_allocated:Nmea2k.ThirdPartyGeneratorDevice.StartControlId)
}

// .Nmea2k.DataId StopControlId = 6;
inline bool ThirdPartyGeneratorDevice::has_stopcontrolid() const {
  return this != internal_default_instance() && stopcontrolid_ != NULL;
}
inline void ThirdPartyGeneratorDevice::clear_stopcontrolid() {
  if (GetArenaNoVirtual() == NULL && stopcontrolid_ != NULL) {
    delete stopcontrolid_;
  }
  stopcontrolid_ = NULL;
}
inline const ::Nmea2k::DataId& ThirdPartyGeneratorDevice::_internal_stopcontrolid() const {
  return *stopcontrolid_;
}
inline const ::Nmea2k::DataId& ThirdPartyGeneratorDevice::stopcontrolid() const {
  const ::Nmea2k::DataId* p = stopcontrolid_;
  // @@protoc_insertion_point(field_get:Nmea2k.ThirdPartyGeneratorDevice.StopControlId)
  return p != NULL ? *p : *reinterpret_cast<const ::Nmea2k::DataId*>(
      &::Nmea2k::_DataId_default_instance_);
}
inline ::Nmea2k::DataId* ThirdPartyGeneratorDevice::release_stopcontrolid() {
  // @@protoc_insertion_point(field_release:Nmea2k.ThirdPartyGeneratorDevice.StopControlId)
  
  ::Nmea2k::DataId* temp = stopcontrolid_;
  stopcontrolid_ = NULL;
  return temp;
}
inline ::Nmea2k::DataId* ThirdPartyGeneratorDevice::mutable_stopcontrolid() {
  
  if (stopcontrolid_ == NULL) {
    auto* p = CreateMaybeMessage<::Nmea2k::DataId>(GetArenaNoVirtual());
    stopcontrolid_ = p;
  }
  // @@protoc_insertion_point(field_mutable:Nmea2k.ThirdPartyGeneratorDevice.StopControlId)
  return stopcontrolid_;
}
inline void ThirdPartyGeneratorDevice::set_allocated_stopcontrolid(::Nmea2k::DataId* stopcontrolid) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete stopcontrolid_;
  }
  if (stopcontrolid) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      stopcontrolid = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, stopcontrolid, submessage_arena);
    }
    
  } else {
    
  }
  stopcontrolid_ = stopcontrolid;
  // @@protoc_insertion_point(field_set_allocated:Nmea2k.ThirdPartyGeneratorDevice.StopControlId)
}

// .Nmea2k.Instance AssociatedAcMetersInstance = 7;
inline bool ThirdPartyGeneratorDevice::has_associatedacmetersinstance() const {
  return this != internal_default_instance() && associatedacmetersinstance_ != NULL;
}
inline void ThirdPartyGeneratorDevice::clear_associatedacmetersinstance() {
  if (GetArenaNoVirtual() == NULL && associatedacmetersinstance_ != NULL) {
    delete associatedacmetersinstance_;
  }
  associatedacmetersinstance_ = NULL;
}
inline const ::Nmea2k::Instance& ThirdPartyGeneratorDevice::_internal_associatedacmetersinstance() const {
  return *associatedacmetersinstance_;
}
inline const ::Nmea2k::Instance& ThirdPartyGeneratorDevice::associatedacmetersinstance() const {
  const ::Nmea2k::Instance* p = associatedacmetersinstance_;
  // @@protoc_insertion_point(field_get:Nmea2k.ThirdPartyGeneratorDevice.AssociatedAcMetersInstance)
  return p != NULL ? *p : *reinterpret_cast<const ::Nmea2k::Instance*>(
      &::Nmea2k::_Instance_default_instance_);
}
inline ::Nmea2k::Instance* ThirdPartyGeneratorDevice::release_associatedacmetersinstance() {
  // @@protoc_insertion_point(field_release:Nmea2k.ThirdPartyGeneratorDevice.AssociatedAcMetersInstance)
  
  ::Nmea2k::Instance* temp = associatedacmetersinstance_;
  associatedacmetersinstance_ = NULL;
  return temp;
}
inline ::Nmea2k::Instance* ThirdPartyGeneratorDevice::mutable_associatedacmetersinstance() {
  
  if (associatedacmetersinstance_ == NULL) {
    auto* p = CreateMaybeMessage<::Nmea2k::Instance>(GetArenaNoVirtual());
    associatedacmetersinstance_ = p;
  }
  // @@protoc_insertion_point(field_mutable:Nmea2k.ThirdPartyGeneratorDevice.AssociatedAcMetersInstance)
  return associatedacmetersinstance_;
}
inline void ThirdPartyGeneratorDevice::set_allocated_associatedacmetersinstance(::Nmea2k::Instance* associatedacmetersinstance) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete associatedacmetersinstance_;
  }
  if (associatedacmetersinstance) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      associatedacmetersinstance = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, associatedacmetersinstance, submessage_arena);
    }
    
  } else {
    
  }
  associatedacmetersinstance_ = associatedacmetersinstance;
  // @@protoc_insertion_point(field_set_allocated:Nmea2k.ThirdPartyGeneratorDevice.AssociatedAcMetersInstance)
}

// .Nmea2k.DataId AcMeterLine1Id = 8;
inline bool ThirdPartyGeneratorDevice::has_acmeterline1id() const {
  return this != internal_default_instance() && acmeterline1id_ != NULL;
}
inline void ThirdPartyGeneratorDevice::clear_acmeterline1id() {
  if (GetArenaNoVirtual() == NULL && acmeterline1id_ != NULL) {
    delete acmeterline1id_;
  }
  acmeterline1id_ = NULL;
}
inline const ::Nmea2k::DataId& ThirdPartyGeneratorDevice::_internal_acmeterline1id() const {
  return *acmeterline1id_;
}
inline const ::Nmea2k::DataId& ThirdPartyGeneratorDevice::acmeterline1id() const {
  const ::Nmea2k::DataId* p = acmeterline1id_;
  // @@protoc_insertion_point(field_get:Nmea2k.ThirdPartyGeneratorDevice.AcMeterLine1Id)
  return p != NULL ? *p : *reinterpret_cast<const ::Nmea2k::DataId*>(
      &::Nmea2k::_DataId_default_instance_);
}
inline ::Nmea2k::DataId* ThirdPartyGeneratorDevice::release_acmeterline1id() {
  // @@protoc_insertion_point(field_release:Nmea2k.ThirdPartyGeneratorDevice.AcMeterLine1Id)
  
  ::Nmea2k::DataId* temp = acmeterline1id_;
  acmeterline1id_ = NULL;
  return temp;
}
inline ::Nmea2k::DataId* ThirdPartyGeneratorDevice::mutable_acmeterline1id() {
  
  if (acmeterline1id_ == NULL) {
    auto* p = CreateMaybeMessage<::Nmea2k::DataId>(GetArenaNoVirtual());
    acmeterline1id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:Nmea2k.ThirdPartyGeneratorDevice.AcMeterLine1Id)
  return acmeterline1id_;
}
inline void ThirdPartyGeneratorDevice::set_allocated_acmeterline1id(::Nmea2k::DataId* acmeterline1id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete acmeterline1id_;
  }
  if (acmeterline1id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      acmeterline1id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, acmeterline1id, submessage_arena);
    }
    
  } else {
    
  }
  acmeterline1id_ = acmeterline1id;
  // @@protoc_insertion_point(field_set_allocated:Nmea2k.ThirdPartyGeneratorDevice.AcMeterLine1Id)
}

// .Nmea2k.DataId AcMeterLine2Id = 9;
inline bool ThirdPartyGeneratorDevice::has_acmeterline2id() const {
  return this != internal_default_instance() && acmeterline2id_ != NULL;
}
inline void ThirdPartyGeneratorDevice::clear_acmeterline2id() {
  if (GetArenaNoVirtual() == NULL && acmeterline2id_ != NULL) {
    delete acmeterline2id_;
  }
  acmeterline2id_ = NULL;
}
inline const ::Nmea2k::DataId& ThirdPartyGeneratorDevice::_internal_acmeterline2id() const {
  return *acmeterline2id_;
}
inline const ::Nmea2k::DataId& ThirdPartyGeneratorDevice::acmeterline2id() const {
  const ::Nmea2k::DataId* p = acmeterline2id_;
  // @@protoc_insertion_point(field_get:Nmea2k.ThirdPartyGeneratorDevice.AcMeterLine2Id)
  return p != NULL ? *p : *reinterpret_cast<const ::Nmea2k::DataId*>(
      &::Nmea2k::_DataId_default_instance_);
}
inline ::Nmea2k::DataId* ThirdPartyGeneratorDevice::release_acmeterline2id() {
  // @@protoc_insertion_point(field_release:Nmea2k.ThirdPartyGeneratorDevice.AcMeterLine2Id)
  
  ::Nmea2k::DataId* temp = acmeterline2id_;
  acmeterline2id_ = NULL;
  return temp;
}
inline ::Nmea2k::DataId* ThirdPartyGeneratorDevice::mutable_acmeterline2id() {
  
  if (acmeterline2id_ == NULL) {
    auto* p = CreateMaybeMessage<::Nmea2k::DataId>(GetArenaNoVirtual());
    acmeterline2id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:Nmea2k.ThirdPartyGeneratorDevice.AcMeterLine2Id)
  return acmeterline2id_;
}
inline void ThirdPartyGeneratorDevice::set_allocated_acmeterline2id(::Nmea2k::DataId* acmeterline2id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete acmeterline2id_;
  }
  if (acmeterline2id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      acmeterline2id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, acmeterline2id, submessage_arena);
    }
    
  } else {
    
  }
  acmeterline2id_ = acmeterline2id;
  // @@protoc_insertion_point(field_set_allocated:Nmea2k.ThirdPartyGeneratorDevice.AcMeterLine2Id)
}

// .Nmea2k.DataId AcMeterLine3Id = 10;
inline bool ThirdPartyGeneratorDevice::has_acmeterline3id() const {
  return this != internal_default_instance() && acmeterline3id_ != NULL;
}
inline void ThirdPartyGeneratorDevice::clear_acmeterline3id() {
  if (GetArenaNoVirtual() == NULL && acmeterline3id_ != NULL) {
    delete acmeterline3id_;
  }
  acmeterline3id_ = NULL;
}
inline const ::Nmea2k::DataId& ThirdPartyGeneratorDevice::_internal_acmeterline3id() const {
  return *acmeterline3id_;
}
inline const ::Nmea2k::DataId& ThirdPartyGeneratorDevice::acmeterline3id() const {
  const ::Nmea2k::DataId* p = acmeterline3id_;
  // @@protoc_insertion_point(field_get:Nmea2k.ThirdPartyGeneratorDevice.AcMeterLine3Id)
  return p != NULL ? *p : *reinterpret_cast<const ::Nmea2k::DataId*>(
      &::Nmea2k::_DataId_default_instance_);
}
inline ::Nmea2k::DataId* ThirdPartyGeneratorDevice::release_acmeterline3id() {
  // @@protoc_insertion_point(field_release:Nmea2k.ThirdPartyGeneratorDevice.AcMeterLine3Id)
  
  ::Nmea2k::DataId* temp = acmeterline3id_;
  acmeterline3id_ = NULL;
  return temp;
}
inline ::Nmea2k::DataId* ThirdPartyGeneratorDevice::mutable_acmeterline3id() {
  
  if (acmeterline3id_ == NULL) {
    auto* p = CreateMaybeMessage<::Nmea2k::DataId>(GetArenaNoVirtual());
    acmeterline3id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:Nmea2k.ThirdPartyGeneratorDevice.AcMeterLine3Id)
  return acmeterline3id_;
}
inline void ThirdPartyGeneratorDevice::set_allocated_acmeterline3id(::Nmea2k::DataId* acmeterline3id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete acmeterline3id_;
  }
  if (acmeterline3id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      acmeterline3id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, acmeterline3id, submessage_arena);
    }
    
  } else {
    
  }
  acmeterline3id_ = acmeterline3id;
  // @@protoc_insertion_point(field_set_allocated:Nmea2k.ThirdPartyGeneratorDevice.AcMeterLine3Id)
}

// -------------------------------------------------------------------

// TyrePressureDevice

// .Nmea2k.ConfigRequest.eConfigType DisplayType = 1;
inline void TyrePressureDevice::clear_displaytype() {
  displaytype_ = 0;
}
inline ::Nmea2k::ConfigRequest_eConfigType TyrePressureDevice::displaytype() const {
  // @@protoc_insertion_point(field_get:Nmea2k.TyrePressureDevice.DisplayType)
  return static_cast< ::Nmea2k::ConfigRequest_eConfigType >(displaytype_);
}
inline void TyrePressureDevice::set_displaytype(::Nmea2k::ConfigRequest_eConfigType value) {
  
  displaytype_ = value;
  // @@protoc_insertion_point(field_set:Nmea2k.TyrePressureDevice.DisplayType)
}

// uint32 Id = 2;
inline void TyrePressureDevice::clear_id() {
  id_ = 0u;
}
inline ::google::protobuf::uint32 TyrePressureDevice::id() const {
  // @@protoc_insertion_point(field_get:Nmea2k.TyrePressureDevice.Id)
  return id_;
}
inline void TyrePressureDevice::set_id(::google::protobuf::uint32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:Nmea2k.TyrePressureDevice.Id)
}

// string NameUTF8 = 3;
inline void TyrePressureDevice::clear_nameutf8() {
  nameutf8_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TyrePressureDevice::nameutf8() const {
  // @@protoc_insertion_point(field_get:Nmea2k.TyrePressureDevice.NameUTF8)
  return nameutf8_.GetNoArena();
}
inline void TyrePressureDevice::set_nameutf8(const ::std::string& value) {
  
  nameutf8_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Nmea2k.TyrePressureDevice.NameUTF8)
}
#if LANG_CXX11
inline void TyrePressureDevice::set_nameutf8(::std::string&& value) {
  
  nameutf8_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Nmea2k.TyrePressureDevice.NameUTF8)
}
#endif
inline void TyrePressureDevice::set_nameutf8(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  nameutf8_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Nmea2k.TyrePressureDevice.NameUTF8)
}
inline void TyrePressureDevice::set_nameutf8(const char* value, size_t size) {
  
  nameutf8_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Nmea2k.TyrePressureDevice.NameUTF8)
}
inline ::std::string* TyrePressureDevice::mutable_nameutf8() {
  
  // @@protoc_insertion_point(field_mutable:Nmea2k.TyrePressureDevice.NameUTF8)
  return nameutf8_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TyrePressureDevice::release_nameutf8() {
  // @@protoc_insertion_point(field_release:Nmea2k.TyrePressureDevice.NameUTF8)
  
  return nameutf8_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TyrePressureDevice::set_allocated_nameutf8(::std::string* nameutf8) {
  if (nameutf8 != NULL) {
    
  } else {
    
  }
  nameutf8_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), nameutf8);
  // @@protoc_insertion_point(field_set_allocated:Nmea2k.TyrePressureDevice.NameUTF8)
}

// .Nmea2k.Instance Instance = 4;
inline bool TyrePressureDevice::has_instance() const {
  return this != internal_default_instance() && instance_ != NULL;
}
inline void TyrePressureDevice::clear_instance() {
  if (GetArenaNoVirtual() == NULL && instance_ != NULL) {
    delete instance_;
  }
  instance_ = NULL;
}
inline const ::Nmea2k::Instance& TyrePressureDevice::_internal_instance() const {
  return *instance_;
}
inline const ::Nmea2k::Instance& TyrePressureDevice::instance() const {
  const ::Nmea2k::Instance* p = instance_;
  // @@protoc_insertion_point(field_get:Nmea2k.TyrePressureDevice.Instance)
  return p != NULL ? *p : *reinterpret_cast<const ::Nmea2k::Instance*>(
      &::Nmea2k::_Instance_default_instance_);
}
inline ::Nmea2k::Instance* TyrePressureDevice::release_instance() {
  // @@protoc_insertion_point(field_release:Nmea2k.TyrePressureDevice.Instance)
  
  ::Nmea2k::Instance* temp = instance_;
  instance_ = NULL;
  return temp;
}
inline ::Nmea2k::Instance* TyrePressureDevice::mutable_instance() {
  
  if (instance_ == NULL) {
    auto* p = CreateMaybeMessage<::Nmea2k::Instance>(GetArenaNoVirtual());
    instance_ = p;
  }
  // @@protoc_insertion_point(field_mutable:Nmea2k.TyrePressureDevice.Instance)
  return instance_;
}
inline void TyrePressureDevice::set_allocated_instance(::Nmea2k::Instance* instance) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete instance_;
  }
  if (instance) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      instance = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, instance, submessage_arena);
    }
    
  } else {
    
  }
  instance_ = instance;
  // @@protoc_insertion_point(field_set_allocated:Nmea2k.TyrePressureDevice.Instance)
}

// uint32 NumberOfAxles = 5;
inline void TyrePressureDevice::clear_numberofaxles() {
  numberofaxles_ = 0u;
}
inline ::google::protobuf::uint32 TyrePressureDevice::numberofaxles() const {
  // @@protoc_insertion_point(field_get:Nmea2k.TyrePressureDevice.NumberOfAxles)
  return numberofaxles_;
}
inline void TyrePressureDevice::set_numberofaxles(::google::protobuf::uint32 value) {
  
  numberofaxles_ = value;
  // @@protoc_insertion_point(field_set:Nmea2k.TyrePressureDevice.NumberOfAxles)
}

// uint32 TyresAxle1 = 6;
inline void TyrePressureDevice::clear_tyresaxle1() {
  tyresaxle1_ = 0u;
}
inline ::google::protobuf::uint32 TyrePressureDevice::tyresaxle1() const {
  // @@protoc_insertion_point(field_get:Nmea2k.TyrePressureDevice.TyresAxle1)
  return tyresaxle1_;
}
inline void TyrePressureDevice::set_tyresaxle1(::google::protobuf::uint32 value) {
  
  tyresaxle1_ = value;
  // @@protoc_insertion_point(field_set:Nmea2k.TyrePressureDevice.TyresAxle1)
}

// uint32 TyresAxle2 = 7;
inline void TyrePressureDevice::clear_tyresaxle2() {
  tyresaxle2_ = 0u;
}
inline ::google::protobuf::uint32 TyrePressureDevice::tyresaxle2() const {
  // @@protoc_insertion_point(field_get:Nmea2k.TyrePressureDevice.TyresAxle2)
  return tyresaxle2_;
}
inline void TyrePressureDevice::set_tyresaxle2(::google::protobuf::uint32 value) {
  
  tyresaxle2_ = value;
  // @@protoc_insertion_point(field_set:Nmea2k.TyrePressureDevice.TyresAxle2)
}

// uint32 TyresAxle3 = 8;
inline void TyrePressureDevice::clear_tyresaxle3() {
  tyresaxle3_ = 0u;
}
inline ::google::protobuf::uint32 TyrePressureDevice::tyresaxle3() const {
  // @@protoc_insertion_point(field_get:Nmea2k.TyrePressureDevice.TyresAxle3)
  return tyresaxle3_;
}
inline void TyrePressureDevice::set_tyresaxle3(::google::protobuf::uint32 value) {
  
  tyresaxle3_ = value;
  // @@protoc_insertion_point(field_set:Nmea2k.TyrePressureDevice.TyresAxle3)
}

// uint32 TyresAxle4 = 9;
inline void TyrePressureDevice::clear_tyresaxle4() {
  tyresaxle4_ = 0u;
}
inline ::google::protobuf::uint32 TyrePressureDevice::tyresaxle4() const {
  // @@protoc_insertion_point(field_get:Nmea2k.TyrePressureDevice.TyresAxle4)
  return tyresaxle4_;
}
inline void TyrePressureDevice::set_tyresaxle4(::google::protobuf::uint32 value) {
  
  tyresaxle4_ = value;
  // @@protoc_insertion_point(field_set:Nmea2k.TyrePressureDevice.TyresAxle4)
}

// uint32 SpareAxle = 10;
inline void TyrePressureDevice::clear_spareaxle() {
  spareaxle_ = 0u;
}
inline ::google::protobuf::uint32 TyrePressureDevice::spareaxle() const {
  // @@protoc_insertion_point(field_get:Nmea2k.TyrePressureDevice.SpareAxle)
  return spareaxle_;
}
inline void TyrePressureDevice::set_spareaxle(::google::protobuf::uint32 value) {
  
  spareaxle_ = value;
  // @@protoc_insertion_point(field_set:Nmea2k.TyrePressureDevice.SpareAxle)
}

// repeated .Nmea2k.Instance TyreInstances = 11;
inline int TyrePressureDevice::tyreinstances_size() const {
  return tyreinstances_.size();
}
inline void TyrePressureDevice::clear_tyreinstances() {
  tyreinstances_.Clear();
}
inline ::Nmea2k::Instance* TyrePressureDevice::mutable_tyreinstances(int index) {
  // @@protoc_insertion_point(field_mutable:Nmea2k.TyrePressureDevice.TyreInstances)
  return tyreinstances_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::Nmea2k::Instance >*
TyrePressureDevice::mutable_tyreinstances() {
  // @@protoc_insertion_point(field_mutable_list:Nmea2k.TyrePressureDevice.TyreInstances)
  return &tyreinstances_;
}
inline const ::Nmea2k::Instance& TyrePressureDevice::tyreinstances(int index) const {
  // @@protoc_insertion_point(field_get:Nmea2k.TyrePressureDevice.TyreInstances)
  return tyreinstances_.Get(index);
}
inline ::Nmea2k::Instance* TyrePressureDevice::add_tyreinstances() {
  // @@protoc_insertion_point(field_add:Nmea2k.TyrePressureDevice.TyreInstances)
  return tyreinstances_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Nmea2k::Instance >&
TyrePressureDevice::tyreinstances() const {
  // @@protoc_insertion_point(field_list:Nmea2k.TyrePressureDevice.TyreInstances)
  return tyreinstances_;
}

// repeated .Nmea2k.Instance TyreSpareInstances = 12;
inline int TyrePressureDevice::tyrespareinstances_size() const {
  return tyrespareinstances_.size();
}
inline void TyrePressureDevice::clear_tyrespareinstances() {
  tyrespareinstances_.Clear();
}
inline ::Nmea2k::Instance* TyrePressureDevice::mutable_tyrespareinstances(int index) {
  // @@protoc_insertion_point(field_mutable:Nmea2k.TyrePressureDevice.TyreSpareInstances)
  return tyrespareinstances_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::Nmea2k::Instance >*
TyrePressureDevice::mutable_tyrespareinstances() {
  // @@protoc_insertion_point(field_mutable_list:Nmea2k.TyrePressureDevice.TyreSpareInstances)
  return &tyrespareinstances_;
}
inline const ::Nmea2k::Instance& TyrePressureDevice::tyrespareinstances(int index) const {
  // @@protoc_insertion_point(field_get:Nmea2k.TyrePressureDevice.TyreSpareInstances)
  return tyrespareinstances_.Get(index);
}
inline ::Nmea2k::Instance* TyrePressureDevice::add_tyrespareinstances() {
  // @@protoc_insertion_point(field_add:Nmea2k.TyrePressureDevice.TyreSpareInstances)
  return tyrespareinstances_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Nmea2k::Instance >&
TyrePressureDevice::tyrespareinstances() const {
  // @@protoc_insertion_point(field_list:Nmea2k.TyrePressureDevice.TyreSpareInstances)
  return tyrespareinstances_;
}

// -------------------------------------------------------------------

// AudioStereoDevice

// .Nmea2k.ConfigRequest.eConfigType DisplayType = 1;
inline void AudioStereoDevice::clear_displaytype() {
  displaytype_ = 0;
}
inline ::Nmea2k::ConfigRequest_eConfigType AudioStereoDevice::displaytype() const {
  // @@protoc_insertion_point(field_get:Nmea2k.AudioStereoDevice.DisplayType)
  return static_cast< ::Nmea2k::ConfigRequest_eConfigType >(displaytype_);
}
inline void AudioStereoDevice::set_displaytype(::Nmea2k::ConfigRequest_eConfigType value) {
  
  displaytype_ = value;
  // @@protoc_insertion_point(field_set:Nmea2k.AudioStereoDevice.DisplayType)
}

// uint32 Id = 2;
inline void AudioStereoDevice::clear_id() {
  id_ = 0u;
}
inline ::google::protobuf::uint32 AudioStereoDevice::id() const {
  // @@protoc_insertion_point(field_get:Nmea2k.AudioStereoDevice.Id)
  return id_;
}
inline void AudioStereoDevice::set_id(::google::protobuf::uint32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:Nmea2k.AudioStereoDevice.Id)
}

// string NameUTF8 = 3;
inline void AudioStereoDevice::clear_nameutf8() {
  nameutf8_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& AudioStereoDevice::nameutf8() const {
  // @@protoc_insertion_point(field_get:Nmea2k.AudioStereoDevice.NameUTF8)
  return nameutf8_.GetNoArena();
}
inline void AudioStereoDevice::set_nameutf8(const ::std::string& value) {
  
  nameutf8_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Nmea2k.AudioStereoDevice.NameUTF8)
}
#if LANG_CXX11
inline void AudioStereoDevice::set_nameutf8(::std::string&& value) {
  
  nameutf8_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Nmea2k.AudioStereoDevice.NameUTF8)
}
#endif
inline void AudioStereoDevice::set_nameutf8(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  nameutf8_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Nmea2k.AudioStereoDevice.NameUTF8)
}
inline void AudioStereoDevice::set_nameutf8(const char* value, size_t size) {
  
  nameutf8_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Nmea2k.AudioStereoDevice.NameUTF8)
}
inline ::std::string* AudioStereoDevice::mutable_nameutf8() {
  
  // @@protoc_insertion_point(field_mutable:Nmea2k.AudioStereoDevice.NameUTF8)
  return nameutf8_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AudioStereoDevice::release_nameutf8() {
  // @@protoc_insertion_point(field_release:Nmea2k.AudioStereoDevice.NameUTF8)
  
  return nameutf8_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AudioStereoDevice::set_allocated_nameutf8(::std::string* nameutf8) {
  if (nameutf8 != NULL) {
    
  } else {
    
  }
  nameutf8_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), nameutf8);
  // @@protoc_insertion_point(field_set_allocated:Nmea2k.AudioStereoDevice.NameUTF8)
}

// .Nmea2k.Instance Instance = 4;
inline bool AudioStereoDevice::has_instance() const {
  return this != internal_default_instance() && instance_ != NULL;
}
inline void AudioStereoDevice::clear_instance() {
  if (GetArenaNoVirtual() == NULL && instance_ != NULL) {
    delete instance_;
  }
  instance_ = NULL;
}
inline const ::Nmea2k::Instance& AudioStereoDevice::_internal_instance() const {
  return *instance_;
}
inline const ::Nmea2k::Instance& AudioStereoDevice::instance() const {
  const ::Nmea2k::Instance* p = instance_;
  // @@protoc_insertion_point(field_get:Nmea2k.AudioStereoDevice.Instance)
  return p != NULL ? *p : *reinterpret_cast<const ::Nmea2k::Instance*>(
      &::Nmea2k::_Instance_default_instance_);
}
inline ::Nmea2k::Instance* AudioStereoDevice::release_instance() {
  // @@protoc_insertion_point(field_release:Nmea2k.AudioStereoDevice.Instance)
  
  ::Nmea2k::Instance* temp = instance_;
  instance_ = NULL;
  return temp;
}
inline ::Nmea2k::Instance* AudioStereoDevice::mutable_instance() {
  
  if (instance_ == NULL) {
    auto* p = CreateMaybeMessage<::Nmea2k::Instance>(GetArenaNoVirtual());
    instance_ = p;
  }
  // @@protoc_insertion_point(field_mutable:Nmea2k.AudioStereoDevice.Instance)
  return instance_;
}
inline void AudioStereoDevice::set_allocated_instance(::Nmea2k::Instance* instance) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete instance_;
  }
  if (instance) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      instance = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, instance, submessage_arena);
    }
    
  } else {
    
  }
  instance_ = instance;
  // @@protoc_insertion_point(field_set_allocated:Nmea2k.AudioStereoDevice.Instance)
}

// bool MuteEnabled = 5;
inline void AudioStereoDevice::clear_muteenabled() {
  muteenabled_ = false;
}
inline bool AudioStereoDevice::muteenabled() const {
  // @@protoc_insertion_point(field_get:Nmea2k.AudioStereoDevice.MuteEnabled)
  return muteenabled_;
}
inline void AudioStereoDevice::set_muteenabled(bool value) {
  
  muteenabled_ = value;
  // @@protoc_insertion_point(field_set:Nmea2k.AudioStereoDevice.MuteEnabled)
}

// repeated .Nmea2k.DataId CircuitIds = 6;
inline int AudioStereoDevice::circuitids_size() const {
  return circuitids_.size();
}
inline void AudioStereoDevice::clear_circuitids() {
  circuitids_.Clear();
}
inline ::Nmea2k::DataId* AudioStereoDevice::mutable_circuitids(int index) {
  // @@protoc_insertion_point(field_mutable:Nmea2k.AudioStereoDevice.CircuitIds)
  return circuitids_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::Nmea2k::DataId >*
AudioStereoDevice::mutable_circuitids() {
  // @@protoc_insertion_point(field_mutable_list:Nmea2k.AudioStereoDevice.CircuitIds)
  return &circuitids_;
}
inline const ::Nmea2k::DataId& AudioStereoDevice::circuitids(int index) const {
  // @@protoc_insertion_point(field_get:Nmea2k.AudioStereoDevice.CircuitIds)
  return circuitids_.Get(index);
}
inline ::Nmea2k::DataId* AudioStereoDevice::add_circuitids() {
  // @@protoc_insertion_point(field_add:Nmea2k.AudioStereoDevice.CircuitIds)
  return circuitids_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Nmea2k::DataId >&
AudioStereoDevice::circuitids() const {
  // @@protoc_insertion_point(field_list:Nmea2k.AudioStereoDevice.CircuitIds)
  return circuitids_;
}

// -------------------------------------------------------------------

// ShoreFuseDevice

// .Nmea2k.ConfigRequest.eConfigType DisplayType = 1;
inline void ShoreFuseDevice::clear_displaytype() {
  displaytype_ = 0;
}
inline ::Nmea2k::ConfigRequest_eConfigType ShoreFuseDevice::displaytype() const {
  // @@protoc_insertion_point(field_get:Nmea2k.ShoreFuseDevice.DisplayType)
  return static_cast< ::Nmea2k::ConfigRequest_eConfigType >(displaytype_);
}
inline void ShoreFuseDevice::set_displaytype(::Nmea2k::ConfigRequest_eConfigType value) {
  
  displaytype_ = value;
  // @@protoc_insertion_point(field_set:Nmea2k.ShoreFuseDevice.DisplayType)
}

// uint32 Id = 2;
inline void ShoreFuseDevice::clear_id() {
  id_ = 0u;
}
inline ::google::protobuf::uint32 ShoreFuseDevice::id() const {
  // @@protoc_insertion_point(field_get:Nmea2k.ShoreFuseDevice.Id)
  return id_;
}
inline void ShoreFuseDevice::set_id(::google::protobuf::uint32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:Nmea2k.ShoreFuseDevice.Id)
}

// string NameUTF8 = 3;
inline void ShoreFuseDevice::clear_nameutf8() {
  nameutf8_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ShoreFuseDevice::nameutf8() const {
  // @@protoc_insertion_point(field_get:Nmea2k.ShoreFuseDevice.NameUTF8)
  return nameutf8_.GetNoArena();
}
inline void ShoreFuseDevice::set_nameutf8(const ::std::string& value) {
  
  nameutf8_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Nmea2k.ShoreFuseDevice.NameUTF8)
}
#if LANG_CXX11
inline void ShoreFuseDevice::set_nameutf8(::std::string&& value) {
  
  nameutf8_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Nmea2k.ShoreFuseDevice.NameUTF8)
}
#endif
inline void ShoreFuseDevice::set_nameutf8(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  nameutf8_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Nmea2k.ShoreFuseDevice.NameUTF8)
}
inline void ShoreFuseDevice::set_nameutf8(const char* value, size_t size) {
  
  nameutf8_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Nmea2k.ShoreFuseDevice.NameUTF8)
}
inline ::std::string* ShoreFuseDevice::mutable_nameutf8() {
  
  // @@protoc_insertion_point(field_mutable:Nmea2k.ShoreFuseDevice.NameUTF8)
  return nameutf8_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ShoreFuseDevice::release_nameutf8() {
  // @@protoc_insertion_point(field_release:Nmea2k.ShoreFuseDevice.NameUTF8)
  
  return nameutf8_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ShoreFuseDevice::set_allocated_nameutf8(::std::string* nameutf8) {
  if (nameutf8 != NULL) {
    
  } else {
    
  }
  nameutf8_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), nameutf8);
  // @@protoc_insertion_point(field_set_allocated:Nmea2k.ShoreFuseDevice.NameUTF8)
}

// .Nmea2k.Instance Instance = 4;
inline bool ShoreFuseDevice::has_instance() const {
  return this != internal_default_instance() && instance_ != NULL;
}
inline void ShoreFuseDevice::clear_instance() {
  if (GetArenaNoVirtual() == NULL && instance_ != NULL) {
    delete instance_;
  }
  instance_ = NULL;
}
inline const ::Nmea2k::Instance& ShoreFuseDevice::_internal_instance() const {
  return *instance_;
}
inline const ::Nmea2k::Instance& ShoreFuseDevice::instance() const {
  const ::Nmea2k::Instance* p = instance_;
  // @@protoc_insertion_point(field_get:Nmea2k.ShoreFuseDevice.Instance)
  return p != NULL ? *p : *reinterpret_cast<const ::Nmea2k::Instance*>(
      &::Nmea2k::_Instance_default_instance_);
}
inline ::Nmea2k::Instance* ShoreFuseDevice::release_instance() {
  // @@protoc_insertion_point(field_release:Nmea2k.ShoreFuseDevice.Instance)
  
  ::Nmea2k::Instance* temp = instance_;
  instance_ = NULL;
  return temp;
}
inline ::Nmea2k::Instance* ShoreFuseDevice::mutable_instance() {
  
  if (instance_ == NULL) {
    auto* p = CreateMaybeMessage<::Nmea2k::Instance>(GetArenaNoVirtual());
    instance_ = p;
  }
  // @@protoc_insertion_point(field_mutable:Nmea2k.ShoreFuseDevice.Instance)
  return instance_;
}
inline void ShoreFuseDevice::set_allocated_instance(::Nmea2k::Instance* instance) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete instance_;
  }
  if (instance) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      instance = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, instance, submessage_arena);
    }
    
  } else {
    
  }
  instance_ = instance;
  // @@protoc_insertion_point(field_set_allocated:Nmea2k.ShoreFuseDevice.Instance)
}

// .Nmea2k.DataId ShoreFuseControlId = 5;
inline bool ShoreFuseDevice::has_shorefusecontrolid() const {
  return this != internal_default_instance() && shorefusecontrolid_ != NULL;
}
inline void ShoreFuseDevice::clear_shorefusecontrolid() {
  if (GetArenaNoVirtual() == NULL && shorefusecontrolid_ != NULL) {
    delete shorefusecontrolid_;
  }
  shorefusecontrolid_ = NULL;
}
inline const ::Nmea2k::DataId& ShoreFuseDevice::_internal_shorefusecontrolid() const {
  return *shorefusecontrolid_;
}
inline const ::Nmea2k::DataId& ShoreFuseDevice::shorefusecontrolid() const {
  const ::Nmea2k::DataId* p = shorefusecontrolid_;
  // @@protoc_insertion_point(field_get:Nmea2k.ShoreFuseDevice.ShoreFuseControlId)
  return p != NULL ? *p : *reinterpret_cast<const ::Nmea2k::DataId*>(
      &::Nmea2k::_DataId_default_instance_);
}
inline ::Nmea2k::DataId* ShoreFuseDevice::release_shorefusecontrolid() {
  // @@protoc_insertion_point(field_release:Nmea2k.ShoreFuseDevice.ShoreFuseControlId)
  
  ::Nmea2k::DataId* temp = shorefusecontrolid_;
  shorefusecontrolid_ = NULL;
  return temp;
}
inline ::Nmea2k::DataId* ShoreFuseDevice::mutable_shorefusecontrolid() {
  
  if (shorefusecontrolid_ == NULL) {
    auto* p = CreateMaybeMessage<::Nmea2k::DataId>(GetArenaNoVirtual());
    shorefusecontrolid_ = p;
  }
  // @@protoc_insertion_point(field_mutable:Nmea2k.ShoreFuseDevice.ShoreFuseControlId)
  return shorefusecontrolid_;
}
inline void ShoreFuseDevice::set_allocated_shorefusecontrolid(::Nmea2k::DataId* shorefusecontrolid) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete shorefusecontrolid_;
  }
  if (shorefusecontrolid) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      shorefusecontrolid = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, shorefusecontrolid, submessage_arena);
    }
    
  } else {
    
  }
  shorefusecontrolid_ = shorefusecontrolid;
  // @@protoc_insertion_point(field_set_allocated:Nmea2k.ShoreFuseDevice.ShoreFuseControlId)
}

// -------------------------------------------------------------------

// FantasticFanDevice

// .Nmea2k.ConfigRequest.eConfigType DisplayType = 1;
inline void FantasticFanDevice::clear_displaytype() {
  displaytype_ = 0;
}
inline ::Nmea2k::ConfigRequest_eConfigType FantasticFanDevice::displaytype() const {
  // @@protoc_insertion_point(field_get:Nmea2k.FantasticFanDevice.DisplayType)
  return static_cast< ::Nmea2k::ConfigRequest_eConfigType >(displaytype_);
}
inline void FantasticFanDevice::set_displaytype(::Nmea2k::ConfigRequest_eConfigType value) {
  
  displaytype_ = value;
  // @@protoc_insertion_point(field_set:Nmea2k.FantasticFanDevice.DisplayType)
}

// uint32 Id = 2;
inline void FantasticFanDevice::clear_id() {
  id_ = 0u;
}
inline ::google::protobuf::uint32 FantasticFanDevice::id() const {
  // @@protoc_insertion_point(field_get:Nmea2k.FantasticFanDevice.Id)
  return id_;
}
inline void FantasticFanDevice::set_id(::google::protobuf::uint32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:Nmea2k.FantasticFanDevice.Id)
}

// string NameUTF8 = 3;
inline void FantasticFanDevice::clear_nameutf8() {
  nameutf8_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& FantasticFanDevice::nameutf8() const {
  // @@protoc_insertion_point(field_get:Nmea2k.FantasticFanDevice.NameUTF8)
  return nameutf8_.GetNoArena();
}
inline void FantasticFanDevice::set_nameutf8(const ::std::string& value) {
  
  nameutf8_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Nmea2k.FantasticFanDevice.NameUTF8)
}
#if LANG_CXX11
inline void FantasticFanDevice::set_nameutf8(::std::string&& value) {
  
  nameutf8_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Nmea2k.FantasticFanDevice.NameUTF8)
}
#endif
inline void FantasticFanDevice::set_nameutf8(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  nameutf8_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Nmea2k.FantasticFanDevice.NameUTF8)
}
inline void FantasticFanDevice::set_nameutf8(const char* value, size_t size) {
  
  nameutf8_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Nmea2k.FantasticFanDevice.NameUTF8)
}
inline ::std::string* FantasticFanDevice::mutable_nameutf8() {
  
  // @@protoc_insertion_point(field_mutable:Nmea2k.FantasticFanDevice.NameUTF8)
  return nameutf8_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FantasticFanDevice::release_nameutf8() {
  // @@protoc_insertion_point(field_release:Nmea2k.FantasticFanDevice.NameUTF8)
  
  return nameutf8_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FantasticFanDevice::set_allocated_nameutf8(::std::string* nameutf8) {
  if (nameutf8 != NULL) {
    
  } else {
    
  }
  nameutf8_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), nameutf8);
  // @@protoc_insertion_point(field_set_allocated:Nmea2k.FantasticFanDevice.NameUTF8)
}

// .Nmea2k.Instance Instance = 4;
inline bool FantasticFanDevice::has_instance() const {
  return this != internal_default_instance() && instance_ != NULL;
}
inline void FantasticFanDevice::clear_instance() {
  if (GetArenaNoVirtual() == NULL && instance_ != NULL) {
    delete instance_;
  }
  instance_ = NULL;
}
inline const ::Nmea2k::Instance& FantasticFanDevice::_internal_instance() const {
  return *instance_;
}
inline const ::Nmea2k::Instance& FantasticFanDevice::instance() const {
  const ::Nmea2k::Instance* p = instance_;
  // @@protoc_insertion_point(field_get:Nmea2k.FantasticFanDevice.Instance)
  return p != NULL ? *p : *reinterpret_cast<const ::Nmea2k::Instance*>(
      &::Nmea2k::_Instance_default_instance_);
}
inline ::Nmea2k::Instance* FantasticFanDevice::release_instance() {
  // @@protoc_insertion_point(field_release:Nmea2k.FantasticFanDevice.Instance)
  
  ::Nmea2k::Instance* temp = instance_;
  instance_ = NULL;
  return temp;
}
inline ::Nmea2k::Instance* FantasticFanDevice::mutable_instance() {
  
  if (instance_ == NULL) {
    auto* p = CreateMaybeMessage<::Nmea2k::Instance>(GetArenaNoVirtual());
    instance_ = p;
  }
  // @@protoc_insertion_point(field_mutable:Nmea2k.FantasticFanDevice.Instance)
  return instance_;
}
inline void FantasticFanDevice::set_allocated_instance(::Nmea2k::Instance* instance) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete instance_;
  }
  if (instance) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      instance = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, instance, submessage_arena);
    }
    
  } else {
    
  }
  instance_ = instance;
  // @@protoc_insertion_point(field_set_allocated:Nmea2k.FantasticFanDevice.Instance)
}

// .Nmea2k.DataId DirectionForwardCircuitId = 5;
inline bool FantasticFanDevice::has_directionforwardcircuitid() const {
  return this != internal_default_instance() && directionforwardcircuitid_ != NULL;
}
inline void FantasticFanDevice::clear_directionforwardcircuitid() {
  if (GetArenaNoVirtual() == NULL && directionforwardcircuitid_ != NULL) {
    delete directionforwardcircuitid_;
  }
  directionforwardcircuitid_ = NULL;
}
inline const ::Nmea2k::DataId& FantasticFanDevice::_internal_directionforwardcircuitid() const {
  return *directionforwardcircuitid_;
}
inline const ::Nmea2k::DataId& FantasticFanDevice::directionforwardcircuitid() const {
  const ::Nmea2k::DataId* p = directionforwardcircuitid_;
  // @@protoc_insertion_point(field_get:Nmea2k.FantasticFanDevice.DirectionForwardCircuitId)
  return p != NULL ? *p : *reinterpret_cast<const ::Nmea2k::DataId*>(
      &::Nmea2k::_DataId_default_instance_);
}
inline ::Nmea2k::DataId* FantasticFanDevice::release_directionforwardcircuitid() {
  // @@protoc_insertion_point(field_release:Nmea2k.FantasticFanDevice.DirectionForwardCircuitId)
  
  ::Nmea2k::DataId* temp = directionforwardcircuitid_;
  directionforwardcircuitid_ = NULL;
  return temp;
}
inline ::Nmea2k::DataId* FantasticFanDevice::mutable_directionforwardcircuitid() {
  
  if (directionforwardcircuitid_ == NULL) {
    auto* p = CreateMaybeMessage<::Nmea2k::DataId>(GetArenaNoVirtual());
    directionforwardcircuitid_ = p;
  }
  // @@protoc_insertion_point(field_mutable:Nmea2k.FantasticFanDevice.DirectionForwardCircuitId)
  return directionforwardcircuitid_;
}
inline void FantasticFanDevice::set_allocated_directionforwardcircuitid(::Nmea2k::DataId* directionforwardcircuitid) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete directionforwardcircuitid_;
  }
  if (directionforwardcircuitid) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      directionforwardcircuitid = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, directionforwardcircuitid, submessage_arena);
    }
    
  } else {
    
  }
  directionforwardcircuitid_ = directionforwardcircuitid;
  // @@protoc_insertion_point(field_set_allocated:Nmea2k.FantasticFanDevice.DirectionForwardCircuitId)
}

// .Nmea2k.DataId DirectionReverseCircuitId = 6;
inline bool FantasticFanDevice::has_directionreversecircuitid() const {
  return this != internal_default_instance() && directionreversecircuitid_ != NULL;
}
inline void FantasticFanDevice::clear_directionreversecircuitid() {
  if (GetArenaNoVirtual() == NULL && directionreversecircuitid_ != NULL) {
    delete directionreversecircuitid_;
  }
  directionreversecircuitid_ = NULL;
}
inline const ::Nmea2k::DataId& FantasticFanDevice::_internal_directionreversecircuitid() const {
  return *directionreversecircuitid_;
}
inline const ::Nmea2k::DataId& FantasticFanDevice::directionreversecircuitid() const {
  const ::Nmea2k::DataId* p = directionreversecircuitid_;
  // @@protoc_insertion_point(field_get:Nmea2k.FantasticFanDevice.DirectionReverseCircuitId)
  return p != NULL ? *p : *reinterpret_cast<const ::Nmea2k::DataId*>(
      &::Nmea2k::_DataId_default_instance_);
}
inline ::Nmea2k::DataId* FantasticFanDevice::release_directionreversecircuitid() {
  // @@protoc_insertion_point(field_release:Nmea2k.FantasticFanDevice.DirectionReverseCircuitId)
  
  ::Nmea2k::DataId* temp = directionreversecircuitid_;
  directionreversecircuitid_ = NULL;
  return temp;
}
inline ::Nmea2k::DataId* FantasticFanDevice::mutable_directionreversecircuitid() {
  
  if (directionreversecircuitid_ == NULL) {
    auto* p = CreateMaybeMessage<::Nmea2k::DataId>(GetArenaNoVirtual());
    directionreversecircuitid_ = p;
  }
  // @@protoc_insertion_point(field_mutable:Nmea2k.FantasticFanDevice.DirectionReverseCircuitId)
  return directionreversecircuitid_;
}
inline void FantasticFanDevice::set_allocated_directionreversecircuitid(::Nmea2k::DataId* directionreversecircuitid) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete directionreversecircuitid_;
  }
  if (directionreversecircuitid) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      directionreversecircuitid = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, directionreversecircuitid, submessage_arena);
    }
    
  } else {
    
  }
  directionreversecircuitid_ = directionreversecircuitid;
  // @@protoc_insertion_point(field_set_allocated:Nmea2k.FantasticFanDevice.DirectionReverseCircuitId)
}

// .Nmea2k.DataId LidOpenCircuitId = 7;
inline bool FantasticFanDevice::has_lidopencircuitid() const {
  return this != internal_default_instance() && lidopencircuitid_ != NULL;
}
inline void FantasticFanDevice::clear_lidopencircuitid() {
  if (GetArenaNoVirtual() == NULL && lidopencircuitid_ != NULL) {
    delete lidopencircuitid_;
  }
  lidopencircuitid_ = NULL;
}
inline const ::Nmea2k::DataId& FantasticFanDevice::_internal_lidopencircuitid() const {
  return *lidopencircuitid_;
}
inline const ::Nmea2k::DataId& FantasticFanDevice::lidopencircuitid() const {
  const ::Nmea2k::DataId* p = lidopencircuitid_;
  // @@protoc_insertion_point(field_get:Nmea2k.FantasticFanDevice.LidOpenCircuitId)
  return p != NULL ? *p : *reinterpret_cast<const ::Nmea2k::DataId*>(
      &::Nmea2k::_DataId_default_instance_);
}
inline ::Nmea2k::DataId* FantasticFanDevice::release_lidopencircuitid() {
  // @@protoc_insertion_point(field_release:Nmea2k.FantasticFanDevice.LidOpenCircuitId)
  
  ::Nmea2k::DataId* temp = lidopencircuitid_;
  lidopencircuitid_ = NULL;
  return temp;
}
inline ::Nmea2k::DataId* FantasticFanDevice::mutable_lidopencircuitid() {
  
  if (lidopencircuitid_ == NULL) {
    auto* p = CreateMaybeMessage<::Nmea2k::DataId>(GetArenaNoVirtual());
    lidopencircuitid_ = p;
  }
  // @@protoc_insertion_point(field_mutable:Nmea2k.FantasticFanDevice.LidOpenCircuitId)
  return lidopencircuitid_;
}
inline void FantasticFanDevice::set_allocated_lidopencircuitid(::Nmea2k::DataId* lidopencircuitid) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete lidopencircuitid_;
  }
  if (lidopencircuitid) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      lidopencircuitid = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, lidopencircuitid, submessage_arena);
    }
    
  } else {
    
  }
  lidopencircuitid_ = lidopencircuitid;
  // @@protoc_insertion_point(field_set_allocated:Nmea2k.FantasticFanDevice.LidOpenCircuitId)
}

// .Nmea2k.DataId LidCloseCircuitId = 8;
inline bool FantasticFanDevice::has_lidclosecircuitid() const {
  return this != internal_default_instance() && lidclosecircuitid_ != NULL;
}
inline void FantasticFanDevice::clear_lidclosecircuitid() {
  if (GetArenaNoVirtual() == NULL && lidclosecircuitid_ != NULL) {
    delete lidclosecircuitid_;
  }
  lidclosecircuitid_ = NULL;
}
inline const ::Nmea2k::DataId& FantasticFanDevice::_internal_lidclosecircuitid() const {
  return *lidclosecircuitid_;
}
inline const ::Nmea2k::DataId& FantasticFanDevice::lidclosecircuitid() const {
  const ::Nmea2k::DataId* p = lidclosecircuitid_;
  // @@protoc_insertion_point(field_get:Nmea2k.FantasticFanDevice.LidCloseCircuitId)
  return p != NULL ? *p : *reinterpret_cast<const ::Nmea2k::DataId*>(
      &::Nmea2k::_DataId_default_instance_);
}
inline ::Nmea2k::DataId* FantasticFanDevice::release_lidclosecircuitid() {
  // @@protoc_insertion_point(field_release:Nmea2k.FantasticFanDevice.LidCloseCircuitId)
  
  ::Nmea2k::DataId* temp = lidclosecircuitid_;
  lidclosecircuitid_ = NULL;
  return temp;
}
inline ::Nmea2k::DataId* FantasticFanDevice::mutable_lidclosecircuitid() {
  
  if (lidclosecircuitid_ == NULL) {
    auto* p = CreateMaybeMessage<::Nmea2k::DataId>(GetArenaNoVirtual());
    lidclosecircuitid_ = p;
  }
  // @@protoc_insertion_point(field_mutable:Nmea2k.FantasticFanDevice.LidCloseCircuitId)
  return lidclosecircuitid_;
}
inline void FantasticFanDevice::set_allocated_lidclosecircuitid(::Nmea2k::DataId* lidclosecircuitid) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete lidclosecircuitid_;
  }
  if (lidclosecircuitid) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      lidclosecircuitid = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, lidclosecircuitid, submessage_arena);
    }
    
  } else {
    
  }
  lidclosecircuitid_ = lidclosecircuitid;
  // @@protoc_insertion_point(field_set_allocated:Nmea2k.FantasticFanDevice.LidCloseCircuitId)
}

// .Nmea2k.DataId FanCircuitId = 9;
inline bool FantasticFanDevice::has_fancircuitid() const {
  return this != internal_default_instance() && fancircuitid_ != NULL;
}
inline void FantasticFanDevice::clear_fancircuitid() {
  if (GetArenaNoVirtual() == NULL && fancircuitid_ != NULL) {
    delete fancircuitid_;
  }
  fancircuitid_ = NULL;
}
inline const ::Nmea2k::DataId& FantasticFanDevice::_internal_fancircuitid() const {
  return *fancircuitid_;
}
inline const ::Nmea2k::DataId& FantasticFanDevice::fancircuitid() const {
  const ::Nmea2k::DataId* p = fancircuitid_;
  // @@protoc_insertion_point(field_get:Nmea2k.FantasticFanDevice.FanCircuitId)
  return p != NULL ? *p : *reinterpret_cast<const ::Nmea2k::DataId*>(
      &::Nmea2k::_DataId_default_instance_);
}
inline ::Nmea2k::DataId* FantasticFanDevice::release_fancircuitid() {
  // @@protoc_insertion_point(field_release:Nmea2k.FantasticFanDevice.FanCircuitId)
  
  ::Nmea2k::DataId* temp = fancircuitid_;
  fancircuitid_ = NULL;
  return temp;
}
inline ::Nmea2k::DataId* FantasticFanDevice::mutable_fancircuitid() {
  
  if (fancircuitid_ == NULL) {
    auto* p = CreateMaybeMessage<::Nmea2k::DataId>(GetArenaNoVirtual());
    fancircuitid_ = p;
  }
  // @@protoc_insertion_point(field_mutable:Nmea2k.FantasticFanDevice.FanCircuitId)
  return fancircuitid_;
}
inline void FantasticFanDevice::set_allocated_fancircuitid(::Nmea2k::DataId* fancircuitid) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete fancircuitid_;
  }
  if (fancircuitid) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      fancircuitid = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, fancircuitid, submessage_arena);
    }
    
  } else {
    
  }
  fancircuitid_ = fancircuitid;
  // @@protoc_insertion_point(field_set_allocated:Nmea2k.FantasticFanDevice.FanCircuitId)
}

// -------------------------------------------------------------------

// SequentialName

// string Name = 1;
inline void SequentialName::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SequentialName::name() const {
  // @@protoc_insertion_point(field_get:Nmea2k.SequentialName.Name)
  return name_.GetNoArena();
}
inline void SequentialName::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Nmea2k.SequentialName.Name)
}
#if LANG_CXX11
inline void SequentialName::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Nmea2k.SequentialName.Name)
}
#endif
inline void SequentialName::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Nmea2k.SequentialName.Name)
}
inline void SequentialName::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Nmea2k.SequentialName.Name)
}
inline ::std::string* SequentialName::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:Nmea2k.SequentialName.Name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SequentialName::release_name() {
  // @@protoc_insertion_point(field_release:Nmea2k.SequentialName.Name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SequentialName::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:Nmea2k.SequentialName.Name)
}

// -------------------------------------------------------------------

// CircuitLoad

// .Nmea2k.ConfigRequest.eConfigType DisplayType = 1;
inline void CircuitLoad::clear_displaytype() {
  displaytype_ = 0;
}
inline ::Nmea2k::ConfigRequest_eConfigType CircuitLoad::displaytype() const {
  // @@protoc_insertion_point(field_get:Nmea2k.CircuitLoad.DisplayType)
  return static_cast< ::Nmea2k::ConfigRequest_eConfigType >(displaytype_);
}
inline void CircuitLoad::set_displaytype(::Nmea2k::ConfigRequest_eConfigType value) {
  
  displaytype_ = value;
  // @@protoc_insertion_point(field_set:Nmea2k.CircuitLoad.DisplayType)
}

// uint32 Id = 2;
inline void CircuitLoad::clear_id() {
  id_ = 0u;
}
inline ::google::protobuf::uint32 CircuitLoad::id() const {
  // @@protoc_insertion_point(field_get:Nmea2k.CircuitLoad.Id)
  return id_;
}
inline void CircuitLoad::set_id(::google::protobuf::uint32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:Nmea2k.CircuitLoad.Id)
}

// string NameUTF8 = 3;
inline void CircuitLoad::clear_nameutf8() {
  nameutf8_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CircuitLoad::nameutf8() const {
  // @@protoc_insertion_point(field_get:Nmea2k.CircuitLoad.NameUTF8)
  return nameutf8_.GetNoArena();
}
inline void CircuitLoad::set_nameutf8(const ::std::string& value) {
  
  nameutf8_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Nmea2k.CircuitLoad.NameUTF8)
}
#if LANG_CXX11
inline void CircuitLoad::set_nameutf8(::std::string&& value) {
  
  nameutf8_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Nmea2k.CircuitLoad.NameUTF8)
}
#endif
inline void CircuitLoad::set_nameutf8(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  nameutf8_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Nmea2k.CircuitLoad.NameUTF8)
}
inline void CircuitLoad::set_nameutf8(const char* value, size_t size) {
  
  nameutf8_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Nmea2k.CircuitLoad.NameUTF8)
}
inline ::std::string* CircuitLoad::mutable_nameutf8() {
  
  // @@protoc_insertion_point(field_mutable:Nmea2k.CircuitLoad.NameUTF8)
  return nameutf8_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CircuitLoad::release_nameutf8() {
  // @@protoc_insertion_point(field_release:Nmea2k.CircuitLoad.NameUTF8)
  
  return nameutf8_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CircuitLoad::set_allocated_nameutf8(::std::string* nameutf8) {
  if (nameutf8 != NULL) {
    
  } else {
    
  }
  nameutf8_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), nameutf8);
  // @@protoc_insertion_point(field_set_allocated:Nmea2k.CircuitLoad.NameUTF8)
}

// uint32 ChannelAddress = 4;
inline void CircuitLoad::clear_channeladdress() {
  channeladdress_ = 0u;
}
inline ::google::protobuf::uint32 CircuitLoad::channeladdress() const {
  // @@protoc_insertion_point(field_get:Nmea2k.CircuitLoad.ChannelAddress)
  return channeladdress_;
}
inline void CircuitLoad::set_channeladdress(::google::protobuf::uint32 value) {
  
  channeladdress_ = value;
  // @@protoc_insertion_point(field_set:Nmea2k.CircuitLoad.ChannelAddress)
}

// float FuseLevel = 5;
inline void CircuitLoad::clear_fuselevel() {
  fuselevel_ = 0;
}
inline float CircuitLoad::fuselevel() const {
  // @@protoc_insertion_point(field_get:Nmea2k.CircuitLoad.FuseLevel)
  return fuselevel_;
}
inline void CircuitLoad::set_fuselevel(float value) {
  
  fuselevel_ = value;
  // @@protoc_insertion_point(field_set:Nmea2k.CircuitLoad.FuseLevel)
}

// float RunningCurrent = 6;
inline void CircuitLoad::clear_runningcurrent() {
  runningcurrent_ = 0;
}
inline float CircuitLoad::runningcurrent() const {
  // @@protoc_insertion_point(field_get:Nmea2k.CircuitLoad.RunningCurrent)
  return runningcurrent_;
}
inline void CircuitLoad::set_runningcurrent(float value) {
  
  runningcurrent_ = value;
  // @@protoc_insertion_point(field_set:Nmea2k.CircuitLoad.RunningCurrent)
}

// float SystemOnCurrent = 7;
inline void CircuitLoad::clear_systemoncurrent() {
  systemoncurrent_ = 0;
}
inline float CircuitLoad::systemoncurrent() const {
  // @@protoc_insertion_point(field_get:Nmea2k.CircuitLoad.SystemOnCurrent)
  return systemoncurrent_;
}
inline void CircuitLoad::set_systemoncurrent(float value) {
  
  systemoncurrent_ = value;
  // @@protoc_insertion_point(field_set:Nmea2k.CircuitLoad.SystemOnCurrent)
}

// bool ForceAcknowledgeOn = 8;
inline void CircuitLoad::clear_forceacknowledgeon() {
  forceacknowledgeon_ = false;
}
inline bool CircuitLoad::forceacknowledgeon() const {
  // @@protoc_insertion_point(field_get:Nmea2k.CircuitLoad.ForceAcknowledgeOn)
  return forceacknowledgeon_;
}
inline void CircuitLoad::set_forceacknowledgeon(bool value) {
  
  forceacknowledgeon_ = value;
  // @@protoc_insertion_point(field_set:Nmea2k.CircuitLoad.ForceAcknowledgeOn)
}

// uint32 Level = 9;
inline void CircuitLoad::clear_level() {
  level_ = 0u;
}
inline ::google::protobuf::uint32 CircuitLoad::level() const {
  // @@protoc_insertion_point(field_get:Nmea2k.CircuitLoad.Level)
  return level_;
}
inline void CircuitLoad::set_level(::google::protobuf::uint32 value) {
  
  level_ = value;
  // @@protoc_insertion_point(field_set:Nmea2k.CircuitLoad.Level)
}

// .Nmea2k.CircuitLoad.eControlType ControlType = 10;
inline void CircuitLoad::clear_controltype() {
  controltype_ = 0;
}
inline ::Nmea2k::CircuitLoad_eControlType CircuitLoad::controltype() const {
  // @@protoc_insertion_point(field_get:Nmea2k.CircuitLoad.ControlType)
  return static_cast< ::Nmea2k::CircuitLoad_eControlType >(controltype_);
}
inline void CircuitLoad::set_controltype(::Nmea2k::CircuitLoad_eControlType value) {
  
  controltype_ = value;
  // @@protoc_insertion_point(field_set:Nmea2k.CircuitLoad.ControlType)
}

// bool IsSwitchedModule = 11;
inline void CircuitLoad::clear_isswitchedmodule() {
  isswitchedmodule_ = false;
}
inline bool CircuitLoad::isswitchedmodule() const {
  // @@protoc_insertion_point(field_get:Nmea2k.CircuitLoad.IsSwitchedModule)
  return isswitchedmodule_;
}
inline void CircuitLoad::set_isswitchedmodule(bool value) {
  
  isswitchedmodule_ = value;
  // @@protoc_insertion_point(field_set:Nmea2k.CircuitLoad.IsSwitchedModule)
}

// -------------------------------------------------------------------

// CircuitDevice

// .Nmea2k.ConfigRequest.eConfigType DisplayType = 1;
inline void CircuitDevice::clear_displaytype() {
  displaytype_ = 0;
}
inline ::Nmea2k::ConfigRequest_eConfigType CircuitDevice::displaytype() const {
  // @@protoc_insertion_point(field_get:Nmea2k.CircuitDevice.DisplayType)
  return static_cast< ::Nmea2k::ConfigRequest_eConfigType >(displaytype_);
}
inline void CircuitDevice::set_displaytype(::Nmea2k::ConfigRequest_eConfigType value) {
  
  displaytype_ = value;
  // @@protoc_insertion_point(field_set:Nmea2k.CircuitDevice.DisplayType)
}

// .Nmea2k.ValueU32 Id = 2;
inline bool CircuitDevice::has_id() const {
  return this != internal_default_instance() && id_ != NULL;
}
inline void CircuitDevice::clear_id() {
  if (GetArenaNoVirtual() == NULL && id_ != NULL) {
    delete id_;
  }
  id_ = NULL;
}
inline const ::Nmea2k::ValueU32& CircuitDevice::_internal_id() const {
  return *id_;
}
inline const ::Nmea2k::ValueU32& CircuitDevice::id() const {
  const ::Nmea2k::ValueU32* p = id_;
  // @@protoc_insertion_point(field_get:Nmea2k.CircuitDevice.Id)
  return p != NULL ? *p : *reinterpret_cast<const ::Nmea2k::ValueU32*>(
      &::Nmea2k::_ValueU32_default_instance_);
}
inline ::Nmea2k::ValueU32* CircuitDevice::release_id() {
  // @@protoc_insertion_point(field_release:Nmea2k.CircuitDevice.Id)
  
  ::Nmea2k::ValueU32* temp = id_;
  id_ = NULL;
  return temp;
}
inline ::Nmea2k::ValueU32* CircuitDevice::mutable_id() {
  
  if (id_ == NULL) {
    auto* p = CreateMaybeMessage<::Nmea2k::ValueU32>(GetArenaNoVirtual());
    id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:Nmea2k.CircuitDevice.Id)
  return id_;
}
inline void CircuitDevice::set_allocated_id(::Nmea2k::ValueU32* id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete id_;
  }
  if (id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:Nmea2k.CircuitDevice.Id)
}

// string NameUTF8 = 3;
inline void CircuitDevice::clear_nameutf8() {
  nameutf8_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CircuitDevice::nameutf8() const {
  // @@protoc_insertion_point(field_get:Nmea2k.CircuitDevice.NameUTF8)
  return nameutf8_.GetNoArena();
}
inline void CircuitDevice::set_nameutf8(const ::std::string& value) {
  
  nameutf8_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Nmea2k.CircuitDevice.NameUTF8)
}
#if LANG_CXX11
inline void CircuitDevice::set_nameutf8(::std::string&& value) {
  
  nameutf8_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Nmea2k.CircuitDevice.NameUTF8)
}
#endif
inline void CircuitDevice::set_nameutf8(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  nameutf8_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Nmea2k.CircuitDevice.NameUTF8)
}
inline void CircuitDevice::set_nameutf8(const char* value, size_t size) {
  
  nameutf8_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Nmea2k.CircuitDevice.NameUTF8)
}
inline ::std::string* CircuitDevice::mutable_nameutf8() {
  
  // @@protoc_insertion_point(field_mutable:Nmea2k.CircuitDevice.NameUTF8)
  return nameutf8_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CircuitDevice::release_nameutf8() {
  // @@protoc_insertion_point(field_release:Nmea2k.CircuitDevice.NameUTF8)
  
  return nameutf8_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CircuitDevice::set_allocated_nameutf8(::std::string* nameutf8) {
  if (nameutf8 != NULL) {
    
  } else {
    
  }
  nameutf8_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), nameutf8);
  // @@protoc_insertion_point(field_set_allocated:Nmea2k.CircuitDevice.NameUTF8)
}

// .Nmea2k.DataId SingleThrowId = 4;
inline bool CircuitDevice::has_singlethrowid() const {
  return this != internal_default_instance() && singlethrowid_ != NULL;
}
inline void CircuitDevice::clear_singlethrowid() {
  if (GetArenaNoVirtual() == NULL && singlethrowid_ != NULL) {
    delete singlethrowid_;
  }
  singlethrowid_ = NULL;
}
inline const ::Nmea2k::DataId& CircuitDevice::_internal_singlethrowid() const {
  return *singlethrowid_;
}
inline const ::Nmea2k::DataId& CircuitDevice::singlethrowid() const {
  const ::Nmea2k::DataId* p = singlethrowid_;
  // @@protoc_insertion_point(field_get:Nmea2k.CircuitDevice.SingleThrowId)
  return p != NULL ? *p : *reinterpret_cast<const ::Nmea2k::DataId*>(
      &::Nmea2k::_DataId_default_instance_);
}
inline ::Nmea2k::DataId* CircuitDevice::release_singlethrowid() {
  // @@protoc_insertion_point(field_release:Nmea2k.CircuitDevice.SingleThrowId)
  
  ::Nmea2k::DataId* temp = singlethrowid_;
  singlethrowid_ = NULL;
  return temp;
}
inline ::Nmea2k::DataId* CircuitDevice::mutable_singlethrowid() {
  
  if (singlethrowid_ == NULL) {
    auto* p = CreateMaybeMessage<::Nmea2k::DataId>(GetArenaNoVirtual());
    singlethrowid_ = p;
  }
  // @@protoc_insertion_point(field_mutable:Nmea2k.CircuitDevice.SingleThrowId)
  return singlethrowid_;
}
inline void CircuitDevice::set_allocated_singlethrowid(::Nmea2k::DataId* singlethrowid) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete singlethrowid_;
  }
  if (singlethrowid) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      singlethrowid = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, singlethrowid, submessage_arena);
    }
    
  } else {
    
  }
  singlethrowid_ = singlethrowid;
  // @@protoc_insertion_point(field_set_allocated:Nmea2k.CircuitDevice.SingleThrowId)
}

// repeated .Nmea2k.SequentialName SequentialNamesUTF8 = 5;
inline int CircuitDevice::sequentialnamesutf8_size() const {
  return sequentialnamesutf8_.size();
}
inline void CircuitDevice::clear_sequentialnamesutf8() {
  sequentialnamesutf8_.Clear();
}
inline ::Nmea2k::SequentialName* CircuitDevice::mutable_sequentialnamesutf8(int index) {
  // @@protoc_insertion_point(field_mutable:Nmea2k.CircuitDevice.SequentialNamesUTF8)
  return sequentialnamesutf8_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::Nmea2k::SequentialName >*
CircuitDevice::mutable_sequentialnamesutf8() {
  // @@protoc_insertion_point(field_mutable_list:Nmea2k.CircuitDevice.SequentialNamesUTF8)
  return &sequentialnamesutf8_;
}
inline const ::Nmea2k::SequentialName& CircuitDevice::sequentialnamesutf8(int index) const {
  // @@protoc_insertion_point(field_get:Nmea2k.CircuitDevice.SequentialNamesUTF8)
  return sequentialnamesutf8_.Get(index);
}
inline ::Nmea2k::SequentialName* CircuitDevice::add_sequentialnamesutf8() {
  // @@protoc_insertion_point(field_add:Nmea2k.CircuitDevice.SequentialNamesUTF8)
  return sequentialnamesutf8_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Nmea2k::SequentialName >&
CircuitDevice::sequentialnamesutf8() const {
  // @@protoc_insertion_point(field_list:Nmea2k.CircuitDevice.SequentialNamesUTF8)
  return sequentialnamesutf8_;
}

// bool HasComplement = 6;
inline void CircuitDevice::clear_hascomplement() {
  hascomplement_ = false;
}
inline bool CircuitDevice::hascomplement() const {
  // @@protoc_insertion_point(field_get:Nmea2k.CircuitDevice.HasComplement)
  return hascomplement_;
}
inline void CircuitDevice::set_hascomplement(bool value) {
  
  hascomplement_ = value;
  // @@protoc_insertion_point(field_set:Nmea2k.CircuitDevice.HasComplement)
}

// uint32 DisplayCategories = 7;
inline void CircuitDevice::clear_displaycategories() {
  displaycategories_ = 0u;
}
inline ::google::protobuf::uint32 CircuitDevice::displaycategories() const {
  // @@protoc_insertion_point(field_get:Nmea2k.CircuitDevice.DisplayCategories)
  return displaycategories_;
}
inline void CircuitDevice::set_displaycategories(::google::protobuf::uint32 value) {
  
  displaycategories_ = value;
  // @@protoc_insertion_point(field_set:Nmea2k.CircuitDevice.DisplayCategories)
}

// .Nmea2k.CircuitDevice.eConfirmType ConfirmDialog = 8;
inline void CircuitDevice::clear_confirmdialog() {
  confirmdialog_ = 0;
}
inline ::Nmea2k::CircuitDevice_eConfirmType CircuitDevice::confirmdialog() const {
  // @@protoc_insertion_point(field_get:Nmea2k.CircuitDevice.ConfirmDialog)
  return static_cast< ::Nmea2k::CircuitDevice_eConfirmType >(confirmdialog_);
}
inline void CircuitDevice::set_confirmdialog(::Nmea2k::CircuitDevice_eConfirmType value) {
  
  confirmdialog_ = value;
  // @@protoc_insertion_point(field_set:Nmea2k.CircuitDevice.ConfirmDialog)
}

// .Nmea2k.Instance VoltageSource = 9;
inline bool CircuitDevice::has_voltagesource() const {
  return this != internal_default_instance() && voltagesource_ != NULL;
}
inline void CircuitDevice::clear_voltagesource() {
  if (GetArenaNoVirtual() == NULL && voltagesource_ != NULL) {
    delete voltagesource_;
  }
  voltagesource_ = NULL;
}
inline const ::Nmea2k::Instance& CircuitDevice::_internal_voltagesource() const {
  return *voltagesource_;
}
inline const ::Nmea2k::Instance& CircuitDevice::voltagesource() const {
  const ::Nmea2k::Instance* p = voltagesource_;
  // @@protoc_insertion_point(field_get:Nmea2k.CircuitDevice.VoltageSource)
  return p != NULL ? *p : *reinterpret_cast<const ::Nmea2k::Instance*>(
      &::Nmea2k::_Instance_default_instance_);
}
inline ::Nmea2k::Instance* CircuitDevice::release_voltagesource() {
  // @@protoc_insertion_point(field_release:Nmea2k.CircuitDevice.VoltageSource)
  
  ::Nmea2k::Instance* temp = voltagesource_;
  voltagesource_ = NULL;
  return temp;
}
inline ::Nmea2k::Instance* CircuitDevice::mutable_voltagesource() {
  
  if (voltagesource_ == NULL) {
    auto* p = CreateMaybeMessage<::Nmea2k::Instance>(GetArenaNoVirtual());
    voltagesource_ = p;
  }
  // @@protoc_insertion_point(field_mutable:Nmea2k.CircuitDevice.VoltageSource)
  return voltagesource_;
}
inline void CircuitDevice::set_allocated_voltagesource(::Nmea2k::Instance* voltagesource) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete voltagesource_;
  }
  if (voltagesource) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      voltagesource = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, voltagesource, submessage_arena);
    }
    
  } else {
    
  }
  voltagesource_ = voltagesource;
  // @@protoc_insertion_point(field_set_allocated:Nmea2k.CircuitDevice.VoltageSource)
}

// .Nmea2k.CircuitDevice.eCircuitType CircuitType = 10;
inline void CircuitDevice::clear_circuittype() {
  circuittype_ = 0;
}
inline ::Nmea2k::CircuitDevice_eCircuitType CircuitDevice::circuittype() const {
  // @@protoc_insertion_point(field_get:Nmea2k.CircuitDevice.CircuitType)
  return static_cast< ::Nmea2k::CircuitDevice_eCircuitType >(circuittype_);
}
inline void CircuitDevice::set_circuittype(::Nmea2k::CircuitDevice_eCircuitType value) {
  
  circuittype_ = value;
  // @@protoc_insertion_point(field_set:Nmea2k.CircuitDevice.CircuitType)
}

// .Nmea2k.CircuitDevice.eSwitchType SwitchType = 11;
inline void CircuitDevice::clear_switchtype() {
  switchtype_ = 0;
}
inline ::Nmea2k::CircuitDevice_eSwitchType CircuitDevice::switchtype() const {
  // @@protoc_insertion_point(field_get:Nmea2k.CircuitDevice.SwitchType)
  return static_cast< ::Nmea2k::CircuitDevice_eSwitchType >(switchtype_);
}
inline void CircuitDevice::set_switchtype(::Nmea2k::CircuitDevice_eSwitchType value) {
  
  switchtype_ = value;
  // @@protoc_insertion_point(field_set:Nmea2k.CircuitDevice.SwitchType)
}

// uint32 MinLevel = 12;
inline void CircuitDevice::clear_minlevel() {
  minlevel_ = 0u;
}
inline ::google::protobuf::uint32 CircuitDevice::minlevel() const {
  // @@protoc_insertion_point(field_get:Nmea2k.CircuitDevice.MinLevel)
  return minlevel_;
}
inline void CircuitDevice::set_minlevel(::google::protobuf::uint32 value) {
  
  minlevel_ = value;
  // @@protoc_insertion_point(field_set:Nmea2k.CircuitDevice.MinLevel)
}

// uint32 MaxLevel = 13;
inline void CircuitDevice::clear_maxlevel() {
  maxlevel_ = 0u;
}
inline ::google::protobuf::uint32 CircuitDevice::maxlevel() const {
  // @@protoc_insertion_point(field_get:Nmea2k.CircuitDevice.MaxLevel)
  return maxlevel_;
}
inline void CircuitDevice::set_maxlevel(::google::protobuf::uint32 value) {
  
  maxlevel_ = value;
  // @@protoc_insertion_point(field_set:Nmea2k.CircuitDevice.MaxLevel)
}

// bool NonVisibleCircuit = 14;
inline void CircuitDevice::clear_nonvisiblecircuit() {
  nonvisiblecircuit_ = false;
}
inline bool CircuitDevice::nonvisiblecircuit() const {
  // @@protoc_insertion_point(field_get:Nmea2k.CircuitDevice.NonVisibleCircuit)
  return nonvisiblecircuit_;
}
inline void CircuitDevice::set_nonvisiblecircuit(bool value) {
  
  nonvisiblecircuit_ = value;
  // @@protoc_insertion_point(field_set:Nmea2k.CircuitDevice.NonVisibleCircuit)
}

// uint32 Dimstep = 15;
inline void CircuitDevice::clear_dimstep() {
  dimstep_ = 0u;
}
inline ::google::protobuf::uint32 CircuitDevice::dimstep() const {
  // @@protoc_insertion_point(field_get:Nmea2k.CircuitDevice.Dimstep)
  return dimstep_;
}
inline void CircuitDevice::set_dimstep(::google::protobuf::uint32 value) {
  
  dimstep_ = value;
  // @@protoc_insertion_point(field_set:Nmea2k.CircuitDevice.Dimstep)
}

// uint32 Step = 16;
inline void CircuitDevice::clear_step() {
  step_ = 0u;
}
inline ::google::protobuf::uint32 CircuitDevice::step() const {
  // @@protoc_insertion_point(field_get:Nmea2k.CircuitDevice.Step)
  return step_;
}
inline void CircuitDevice::set_step(::google::protobuf::uint32 value) {
  
  step_ = value;
  // @@protoc_insertion_point(field_set:Nmea2k.CircuitDevice.Step)
}

// bool Dimmable = 17;
inline void CircuitDevice::clear_dimmable() {
  dimmable_ = false;
}
inline bool CircuitDevice::dimmable() const {
  // @@protoc_insertion_point(field_get:Nmea2k.CircuitDevice.Dimmable)
  return dimmable_;
}
inline void CircuitDevice::set_dimmable(bool value) {
  
  dimmable_ = value;
  // @@protoc_insertion_point(field_set:Nmea2k.CircuitDevice.Dimmable)
}

// uint32 LoadSmoothStart = 18;
inline void CircuitDevice::clear_loadsmoothstart() {
  loadsmoothstart_ = 0u;
}
inline ::google::protobuf::uint32 CircuitDevice::loadsmoothstart() const {
  // @@protoc_insertion_point(field_get:Nmea2k.CircuitDevice.LoadSmoothStart)
  return loadsmoothstart_;
}
inline void CircuitDevice::set_loadsmoothstart(::google::protobuf::uint32 value) {
  
  loadsmoothstart_ = value;
  // @@protoc_insertion_point(field_set:Nmea2k.CircuitDevice.LoadSmoothStart)
}

// uint32 SequentialStates = 19;
inline void CircuitDevice::clear_sequentialstates() {
  sequentialstates_ = 0u;
}
inline ::google::protobuf::uint32 CircuitDevice::sequentialstates() const {
  // @@protoc_insertion_point(field_get:Nmea2k.CircuitDevice.SequentialStates)
  return sequentialstates_;
}
inline void CircuitDevice::set_sequentialstates(::google::protobuf::uint32 value) {
  
  sequentialstates_ = value;
  // @@protoc_insertion_point(field_set:Nmea2k.CircuitDevice.SequentialStates)
}

// uint32 ControlId = 20;
inline void CircuitDevice::clear_controlid() {
  controlid_ = 0u;
}
inline ::google::protobuf::uint32 CircuitDevice::controlid() const {
  // @@protoc_insertion_point(field_get:Nmea2k.CircuitDevice.ControlId)
  return controlid_;
}
inline void CircuitDevice::set_controlid(::google::protobuf::uint32 value) {
  
  controlid_ = value;
  // @@protoc_insertion_point(field_set:Nmea2k.CircuitDevice.ControlId)
}

// repeated .Nmea2k.CircuitLoad CircuitLoads = 21;
inline int CircuitDevice::circuitloads_size() const {
  return circuitloads_.size();
}
inline void CircuitDevice::clear_circuitloads() {
  circuitloads_.Clear();
}
inline ::Nmea2k::CircuitLoad* CircuitDevice::mutable_circuitloads(int index) {
  // @@protoc_insertion_point(field_mutable:Nmea2k.CircuitDevice.CircuitLoads)
  return circuitloads_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::Nmea2k::CircuitLoad >*
CircuitDevice::mutable_circuitloads() {
  // @@protoc_insertion_point(field_mutable_list:Nmea2k.CircuitDevice.CircuitLoads)
  return &circuitloads_;
}
inline const ::Nmea2k::CircuitLoad& CircuitDevice::circuitloads(int index) const {
  // @@protoc_insertion_point(field_get:Nmea2k.CircuitDevice.CircuitLoads)
  return circuitloads_.Get(index);
}
inline ::Nmea2k::CircuitLoad* CircuitDevice::add_circuitloads() {
  // @@protoc_insertion_point(field_add:Nmea2k.CircuitDevice.CircuitLoads)
  return circuitloads_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Nmea2k::CircuitLoad >&
CircuitDevice::circuitloads() const {
  // @@protoc_insertion_point(field_list:Nmea2k.CircuitDevice.CircuitLoads)
  return circuitloads_;
}

// repeated .Nmea2k.CategoryItem Categories = 22;
inline int CircuitDevice::categories_size() const {
  return categories_.size();
}
inline void CircuitDevice::clear_categories() {
  categories_.Clear();
}
inline ::Nmea2k::CategoryItem* CircuitDevice::mutable_categories(int index) {
  // @@protoc_insertion_point(field_mutable:Nmea2k.CircuitDevice.Categories)
  return categories_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::Nmea2k::CategoryItem >*
CircuitDevice::mutable_categories() {
  // @@protoc_insertion_point(field_mutable_list:Nmea2k.CircuitDevice.Categories)
  return &categories_;
}
inline const ::Nmea2k::CategoryItem& CircuitDevice::categories(int index) const {
  // @@protoc_insertion_point(field_get:Nmea2k.CircuitDevice.Categories)
  return categories_.Get(index);
}
inline ::Nmea2k::CategoryItem* CircuitDevice::add_categories() {
  // @@protoc_insertion_point(field_add:Nmea2k.CircuitDevice.Categories)
  return categories_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Nmea2k::CategoryItem >&
CircuitDevice::categories() const {
  // @@protoc_insertion_point(field_list:Nmea2k.CircuitDevice.Categories)
  return categories_;
}

// bool DCCircuit = 23;
inline void CircuitDevice::clear_dccircuit() {
  dccircuit_ = false;
}
inline bool CircuitDevice::dccircuit() const {
  // @@protoc_insertion_point(field_get:Nmea2k.CircuitDevice.DCCircuit)
  return dccircuit_;
}
inline void CircuitDevice::set_dccircuit(bool value) {
  
  dccircuit_ = value;
  // @@protoc_insertion_point(field_set:Nmea2k.CircuitDevice.DCCircuit)
}

// bool ACCircuit = 24;
inline void CircuitDevice::clear_accircuit() {
  accircuit_ = false;
}
inline bool CircuitDevice::accircuit() const {
  // @@protoc_insertion_point(field_get:Nmea2k.CircuitDevice.ACCircuit)
  return accircuit_;
}
inline void CircuitDevice::set_accircuit(bool value) {
  
  accircuit_ = value;
  // @@protoc_insertion_point(field_set:Nmea2k.CircuitDevice.ACCircuit)
}

// .Nmea2k.CircuitDevice.eModeIcon ModeIcon = 25;
inline void CircuitDevice::clear_modeicon() {
  modeicon_ = 0;
}
inline ::Nmea2k::CircuitDevice_eModeIcon CircuitDevice::modeicon() const {
  // @@protoc_insertion_point(field_get:Nmea2k.CircuitDevice.ModeIcon)
  return static_cast< ::Nmea2k::CircuitDevice_eModeIcon >(modeicon_);
}
inline void CircuitDevice::set_modeicon(::Nmea2k::CircuitDevice_eModeIcon value) {
  
  modeicon_ = value;
  // @@protoc_insertion_point(field_set:Nmea2k.CircuitDevice.ModeIcon)
}

// uint32 primaryCircuitId = 26;
inline void CircuitDevice::clear_primarycircuitid() {
  primarycircuitid_ = 0u;
}
inline ::google::protobuf::uint32 CircuitDevice::primarycircuitid() const {
  // @@protoc_insertion_point(field_get:Nmea2k.CircuitDevice.primaryCircuitId)
  return primarycircuitid_;
}
inline void CircuitDevice::set_primarycircuitid(::google::protobuf::uint32 value) {
  
  primarycircuitid_ = value;
  // @@protoc_insertion_point(field_set:Nmea2k.CircuitDevice.primaryCircuitId)
}

// uint32 remoteVisibility = 27;
inline void CircuitDevice::clear_remotevisibility() {
  remotevisibility_ = 0u;
}
inline ::google::protobuf::uint32 CircuitDevice::remotevisibility() const {
  // @@protoc_insertion_point(field_get:Nmea2k.CircuitDevice.remoteVisibility)
  return remotevisibility_;
}
inline void CircuitDevice::set_remotevisibility(::google::protobuf::uint32 value) {
  
  remotevisibility_ = value;
  // @@protoc_insertion_point(field_set:Nmea2k.CircuitDevice.remoteVisibility)
}

// string SwitchString = 28;
inline void CircuitDevice::clear_switchstring() {
  switchstring_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CircuitDevice::switchstring() const {
  // @@protoc_insertion_point(field_get:Nmea2k.CircuitDevice.SwitchString)
  return switchstring_.GetNoArena();
}
inline void CircuitDevice::set_switchstring(const ::std::string& value) {
  
  switchstring_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Nmea2k.CircuitDevice.SwitchString)
}
#if LANG_CXX11
inline void CircuitDevice::set_switchstring(::std::string&& value) {
  
  switchstring_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Nmea2k.CircuitDevice.SwitchString)
}
#endif
inline void CircuitDevice::set_switchstring(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  switchstring_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Nmea2k.CircuitDevice.SwitchString)
}
inline void CircuitDevice::set_switchstring(const char* value, size_t size) {
  
  switchstring_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Nmea2k.CircuitDevice.SwitchString)
}
inline ::std::string* CircuitDevice::mutable_switchstring() {
  
  // @@protoc_insertion_point(field_mutable:Nmea2k.CircuitDevice.SwitchString)
  return switchstring_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CircuitDevice::release_switchstring() {
  // @@protoc_insertion_point(field_release:Nmea2k.CircuitDevice.SwitchString)
  
  return switchstring_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CircuitDevice::set_allocated_switchstring(::std::string* switchstring) {
  if (switchstring != NULL) {
    
  } else {
    
  }
  switchstring_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), switchstring);
  // @@protoc_insertion_point(field_set_allocated:Nmea2k.CircuitDevice.SwitchString)
}

// bool SystemsOnAnd = 29;
inline void CircuitDevice::clear_systemsonand() {
  systemsonand_ = false;
}
inline bool CircuitDevice::systemsonand() const {
  // @@protoc_insertion_point(field_get:Nmea2k.CircuitDevice.SystemsOnAnd)
  return systemsonand_;
}
inline void CircuitDevice::set_systemsonand(bool value) {
  
  systemsonand_ = value;
  // @@protoc_insertion_point(field_set:Nmea2k.CircuitDevice.SystemsOnAnd)
}

// -------------------------------------------------------------------

// FavouritesInfo

// .Nmea2k.ConfigRequest.eConfigType DisplayType = 1;
inline void FavouritesInfo::clear_displaytype() {
  displaytype_ = 0;
}
inline ::Nmea2k::ConfigRequest_eConfigType FavouritesInfo::displaytype() const {
  // @@protoc_insertion_point(field_get:Nmea2k.FavouritesInfo.DisplayType)
  return static_cast< ::Nmea2k::ConfigRequest_eConfigType >(displaytype_);
}
inline void FavouritesInfo::set_displaytype(::Nmea2k::ConfigRequest_eConfigType value) {
  
  displaytype_ = value;
  // @@protoc_insertion_point(field_set:Nmea2k.FavouritesInfo.DisplayType)
}

// uint32 Id = 2;
inline void FavouritesInfo::clear_id() {
  id_ = 0u;
}
inline ::google::protobuf::uint32 FavouritesInfo::id() const {
  // @@protoc_insertion_point(field_get:Nmea2k.FavouritesInfo.Id)
  return id_;
}
inline void FavouritesInfo::set_id(::google::protobuf::uint32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:Nmea2k.FavouritesInfo.Id)
}

// uint32 TargetDisplayType = 3;
inline void FavouritesInfo::clear_targetdisplaytype() {
  targetdisplaytype_ = 0u;
}
inline ::google::protobuf::uint32 FavouritesInfo::targetdisplaytype() const {
  // @@protoc_insertion_point(field_get:Nmea2k.FavouritesInfo.TargetDisplayType)
  return targetdisplaytype_;
}
inline void FavouritesInfo::set_targetdisplaytype(::google::protobuf::uint32 value) {
  
  targetdisplaytype_ = value;
  // @@protoc_insertion_point(field_set:Nmea2k.FavouritesInfo.TargetDisplayType)
}

// uint32 TargetId = 4;
inline void FavouritesInfo::clear_targetid() {
  targetid_ = 0u;
}
inline ::google::protobuf::uint32 FavouritesInfo::targetid() const {
  // @@protoc_insertion_point(field_get:Nmea2k.FavouritesInfo.TargetId)
  return targetid_;
}
inline void FavouritesInfo::set_targetid(::google::protobuf::uint32 value) {
  
  targetid_ = value;
  // @@protoc_insertion_point(field_set:Nmea2k.FavouritesInfo.TargetId)
}

// uint32 X = 5;
inline void FavouritesInfo::clear_x() {
  x_ = 0u;
}
inline ::google::protobuf::uint32 FavouritesInfo::x() const {
  // @@protoc_insertion_point(field_get:Nmea2k.FavouritesInfo.X)
  return x_;
}
inline void FavouritesInfo::set_x(::google::protobuf::uint32 value) {
  
  x_ = value;
  // @@protoc_insertion_point(field_set:Nmea2k.FavouritesInfo.X)
}

// uint32 Y = 6;
inline void FavouritesInfo::clear_y() {
  y_ = 0u;
}
inline ::google::protobuf::uint32 FavouritesInfo::y() const {
  // @@protoc_insertion_point(field_get:Nmea2k.FavouritesInfo.Y)
  return y_;
}
inline void FavouritesInfo::set_y(::google::protobuf::uint32 value) {
  
  y_ = value;
  // @@protoc_insertion_point(field_set:Nmea2k.FavouritesInfo.Y)
}

// -------------------------------------------------------------------

// ScreenConfigHeader

// .Nmea2k.ConfigRequest.eConfigType DisplayType = 1;
inline void ScreenConfigHeader::clear_displaytype() {
  displaytype_ = 0;
}
inline ::Nmea2k::ConfigRequest_eConfigType ScreenConfigHeader::displaytype() const {
  // @@protoc_insertion_point(field_get:Nmea2k.ScreenConfigHeader.DisplayType)
  return static_cast< ::Nmea2k::ConfigRequest_eConfigType >(displaytype_);
}
inline void ScreenConfigHeader::set_displaytype(::Nmea2k::ConfigRequest_eConfigType value) {
  
  displaytype_ = value;
  // @@protoc_insertion_point(field_set:Nmea2k.ScreenConfigHeader.DisplayType)
}

// uint32 Id = 2;
inline void ScreenConfigHeader::clear_id() {
  id_ = 0u;
}
inline ::google::protobuf::uint32 ScreenConfigHeader::id() const {
  // @@protoc_insertion_point(field_get:Nmea2k.ScreenConfigHeader.Id)
  return id_;
}
inline void ScreenConfigHeader::set_id(::google::protobuf::uint32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:Nmea2k.ScreenConfigHeader.Id)
}

// uint32 TargetDisplayType = 3;
inline void ScreenConfigHeader::clear_targetdisplaytype() {
  targetdisplaytype_ = 0u;
}
inline ::google::protobuf::uint32 ScreenConfigHeader::targetdisplaytype() const {
  // @@protoc_insertion_point(field_get:Nmea2k.ScreenConfigHeader.TargetDisplayType)
  return targetdisplaytype_;
}
inline void ScreenConfigHeader::set_targetdisplaytype(::google::protobuf::uint32 value) {
  
  targetdisplaytype_ = value;
  // @@protoc_insertion_point(field_set:Nmea2k.ScreenConfigHeader.TargetDisplayType)
}

// uint32 TargetId = 4;
inline void ScreenConfigHeader::clear_targetid() {
  targetid_ = 0u;
}
inline ::google::protobuf::uint32 ScreenConfigHeader::targetid() const {
  // @@protoc_insertion_point(field_get:Nmea2k.ScreenConfigHeader.TargetId)
  return targetid_;
}
inline void ScreenConfigHeader::set_targetid(::google::protobuf::uint32 value) {
  
  targetid_ = value;
  // @@protoc_insertion_point(field_set:Nmea2k.ScreenConfigHeader.TargetId)
}

// uint32 ConfirmationType = 5;
inline void ScreenConfigHeader::clear_confirmationtype() {
  confirmationtype_ = 0u;
}
inline ::google::protobuf::uint32 ScreenConfigHeader::confirmationtype() const {
  // @@protoc_insertion_point(field_get:Nmea2k.ScreenConfigHeader.ConfirmationType)
  return confirmationtype_;
}
inline void ScreenConfigHeader::set_confirmationtype(::google::protobuf::uint32 value) {
  
  confirmationtype_ = value;
  // @@protoc_insertion_point(field_set:Nmea2k.ScreenConfigHeader.ConfirmationType)
}

// uint32 SmoothStart = 6;
inline void ScreenConfigHeader::clear_smoothstart() {
  smoothstart_ = 0u;
}
inline ::google::protobuf::uint32 ScreenConfigHeader::smoothstart() const {
  // @@protoc_insertion_point(field_get:Nmea2k.ScreenConfigHeader.SmoothStart)
  return smoothstart_;
}
inline void ScreenConfigHeader::set_smoothstart(::google::protobuf::uint32 value) {
  
  smoothstart_ = value;
  // @@protoc_insertion_point(field_set:Nmea2k.ScreenConfigHeader.SmoothStart)
}

// uint32 Index = 7;
inline void ScreenConfigHeader::clear_index() {
  index_ = 0u;
}
inline ::google::protobuf::uint32 ScreenConfigHeader::index() const {
  // @@protoc_insertion_point(field_get:Nmea2k.ScreenConfigHeader.Index)
  return index_;
}
inline void ScreenConfigHeader::set_index(::google::protobuf::uint32 value) {
  
  index_ = value;
  // @@protoc_insertion_point(field_set:Nmea2k.ScreenConfigHeader.Index)
}

// uint32 ParentIndex = 8;
inline void ScreenConfigHeader::clear_parentindex() {
  parentindex_ = 0u;
}
inline ::google::protobuf::uint32 ScreenConfigHeader::parentindex() const {
  // @@protoc_insertion_point(field_get:Nmea2k.ScreenConfigHeader.ParentIndex)
  return parentindex_;
}
inline void ScreenConfigHeader::set_parentindex(::google::protobuf::uint32 value) {
  
  parentindex_ = value;
  // @@protoc_insertion_point(field_set:Nmea2k.ScreenConfigHeader.ParentIndex)
}

// uint32 ControlId = 9;
inline void ScreenConfigHeader::clear_controlid() {
  controlid_ = 0u;
}
inline ::google::protobuf::uint32 ScreenConfigHeader::controlid() const {
  // @@protoc_insertion_point(field_get:Nmea2k.ScreenConfigHeader.ControlId)
  return controlid_;
}
inline void ScreenConfigHeader::set_controlid(::google::protobuf::uint32 value) {
  
  controlid_ = value;
  // @@protoc_insertion_point(field_set:Nmea2k.ScreenConfigHeader.ControlId)
}

// -------------------------------------------------------------------

// ScreenConfigPageImageItem

// .Nmea2k.ScreenConfigHeader Header = 1;
inline bool ScreenConfigPageImageItem::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
inline void ScreenConfigPageImageItem::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
}
inline const ::Nmea2k::ScreenConfigHeader& ScreenConfigPageImageItem::_internal_header() const {
  return *header_;
}
inline const ::Nmea2k::ScreenConfigHeader& ScreenConfigPageImageItem::header() const {
  const ::Nmea2k::ScreenConfigHeader* p = header_;
  // @@protoc_insertion_point(field_get:Nmea2k.ScreenConfigPageImageItem.Header)
  return p != NULL ? *p : *reinterpret_cast<const ::Nmea2k::ScreenConfigHeader*>(
      &::Nmea2k::_ScreenConfigHeader_default_instance_);
}
inline ::Nmea2k::ScreenConfigHeader* ScreenConfigPageImageItem::release_header() {
  // @@protoc_insertion_point(field_release:Nmea2k.ScreenConfigPageImageItem.Header)
  
  ::Nmea2k::ScreenConfigHeader* temp = header_;
  header_ = NULL;
  return temp;
}
inline ::Nmea2k::ScreenConfigHeader* ScreenConfigPageImageItem::mutable_header() {
  
  if (header_ == NULL) {
    auto* p = CreateMaybeMessage<::Nmea2k::ScreenConfigHeader>(GetArenaNoVirtual());
    header_ = p;
  }
  // @@protoc_insertion_point(field_mutable:Nmea2k.ScreenConfigPageImageItem.Header)
  return header_;
}
inline void ScreenConfigPageImageItem::set_allocated_header(::Nmea2k::ScreenConfigHeader* header) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete header_;
  }
  if (header) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      header = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:Nmea2k.ScreenConfigPageImageItem.Header)
}

// float LocationX = 2;
inline void ScreenConfigPageImageItem::clear_locationx() {
  locationx_ = 0;
}
inline float ScreenConfigPageImageItem::locationx() const {
  // @@protoc_insertion_point(field_get:Nmea2k.ScreenConfigPageImageItem.LocationX)
  return locationx_;
}
inline void ScreenConfigPageImageItem::set_locationx(float value) {
  
  locationx_ = value;
  // @@protoc_insertion_point(field_set:Nmea2k.ScreenConfigPageImageItem.LocationX)
}

// float LocationY = 3;
inline void ScreenConfigPageImageItem::clear_locationy() {
  locationy_ = 0;
}
inline float ScreenConfigPageImageItem::locationy() const {
  // @@protoc_insertion_point(field_get:Nmea2k.ScreenConfigPageImageItem.LocationY)
  return locationy_;
}
inline void ScreenConfigPageImageItem::set_locationy(float value) {
  
  locationy_ = value;
  // @@protoc_insertion_point(field_set:Nmea2k.ScreenConfigPageImageItem.LocationY)
}

// float TargetX = 4;
inline void ScreenConfigPageImageItem::clear_targetx() {
  targetx_ = 0;
}
inline float ScreenConfigPageImageItem::targetx() const {
  // @@protoc_insertion_point(field_get:Nmea2k.ScreenConfigPageImageItem.TargetX)
  return targetx_;
}
inline void ScreenConfigPageImageItem::set_targetx(float value) {
  
  targetx_ = value;
  // @@protoc_insertion_point(field_set:Nmea2k.ScreenConfigPageImageItem.TargetX)
}

// float TargetY = 5;
inline void ScreenConfigPageImageItem::clear_targety() {
  targety_ = 0;
}
inline float ScreenConfigPageImageItem::targety() const {
  // @@protoc_insertion_point(field_get:Nmea2k.ScreenConfigPageImageItem.TargetY)
  return targety_;
}
inline void ScreenConfigPageImageItem::set_targety(float value) {
  
  targety_ = value;
  // @@protoc_insertion_point(field_set:Nmea2k.ScreenConfigPageImageItem.TargetY)
}

// uint32 Icon = 6;
inline void ScreenConfigPageImageItem::clear_icon() {
  icon_ = 0u;
}
inline ::google::protobuf::uint32 ScreenConfigPageImageItem::icon() const {
  // @@protoc_insertion_point(field_get:Nmea2k.ScreenConfigPageImageItem.Icon)
  return icon_;
}
inline void ScreenConfigPageImageItem::set_icon(::google::protobuf::uint32 value) {
  
  icon_ = value;
  // @@protoc_insertion_point(field_set:Nmea2k.ScreenConfigPageImageItem.Icon)
}

// string Name = 7;
inline void ScreenConfigPageImageItem::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ScreenConfigPageImageItem::name() const {
  // @@protoc_insertion_point(field_get:Nmea2k.ScreenConfigPageImageItem.Name)
  return name_.GetNoArena();
}
inline void ScreenConfigPageImageItem::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Nmea2k.ScreenConfigPageImageItem.Name)
}
#if LANG_CXX11
inline void ScreenConfigPageImageItem::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Nmea2k.ScreenConfigPageImageItem.Name)
}
#endif
inline void ScreenConfigPageImageItem::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Nmea2k.ScreenConfigPageImageItem.Name)
}
inline void ScreenConfigPageImageItem::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Nmea2k.ScreenConfigPageImageItem.Name)
}
inline ::std::string* ScreenConfigPageImageItem::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:Nmea2k.ScreenConfigPageImageItem.Name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ScreenConfigPageImageItem::release_name() {
  // @@protoc_insertion_point(field_release:Nmea2k.ScreenConfigPageImageItem.Name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ScreenConfigPageImageItem::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:Nmea2k.ScreenConfigPageImageItem.Name)
}

// bool HideWhenOff = 8;
inline void ScreenConfigPageImageItem::clear_hidewhenoff() {
  hidewhenoff_ = false;
}
inline bool ScreenConfigPageImageItem::hidewhenoff() const {
  // @@protoc_insertion_point(field_get:Nmea2k.ScreenConfigPageImageItem.HideWhenOff)
  return hidewhenoff_;
}
inline void ScreenConfigPageImageItem::set_hidewhenoff(bool value) {
  
  hidewhenoff_ = value;
  // @@protoc_insertion_point(field_set:Nmea2k.ScreenConfigPageImageItem.HideWhenOff)
}

// -------------------------------------------------------------------

// ScreenConfigPageGridItem

// .Nmea2k.ScreenConfigHeader Header = 1;
inline bool ScreenConfigPageGridItem::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
inline void ScreenConfigPageGridItem::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
}
inline const ::Nmea2k::ScreenConfigHeader& ScreenConfigPageGridItem::_internal_header() const {
  return *header_;
}
inline const ::Nmea2k::ScreenConfigHeader& ScreenConfigPageGridItem::header() const {
  const ::Nmea2k::ScreenConfigHeader* p = header_;
  // @@protoc_insertion_point(field_get:Nmea2k.ScreenConfigPageGridItem.Header)
  return p != NULL ? *p : *reinterpret_cast<const ::Nmea2k::ScreenConfigHeader*>(
      &::Nmea2k::_ScreenConfigHeader_default_instance_);
}
inline ::Nmea2k::ScreenConfigHeader* ScreenConfigPageGridItem::release_header() {
  // @@protoc_insertion_point(field_release:Nmea2k.ScreenConfigPageGridItem.Header)
  
  ::Nmea2k::ScreenConfigHeader* temp = header_;
  header_ = NULL;
  return temp;
}
inline ::Nmea2k::ScreenConfigHeader* ScreenConfigPageGridItem::mutable_header() {
  
  if (header_ == NULL) {
    auto* p = CreateMaybeMessage<::Nmea2k::ScreenConfigHeader>(GetArenaNoVirtual());
    header_ = p;
  }
  // @@protoc_insertion_point(field_mutable:Nmea2k.ScreenConfigPageGridItem.Header)
  return header_;
}
inline void ScreenConfigPageGridItem::set_allocated_header(::Nmea2k::ScreenConfigHeader* header) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete header_;
  }
  if (header) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      header = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:Nmea2k.ScreenConfigPageGridItem.Header)
}

// uint32 GridX = 2;
inline void ScreenConfigPageGridItem::clear_gridx() {
  gridx_ = 0u;
}
inline ::google::protobuf::uint32 ScreenConfigPageGridItem::gridx() const {
  // @@protoc_insertion_point(field_get:Nmea2k.ScreenConfigPageGridItem.GridX)
  return gridx_;
}
inline void ScreenConfigPageGridItem::set_gridx(::google::protobuf::uint32 value) {
  
  gridx_ = value;
  // @@protoc_insertion_point(field_set:Nmea2k.ScreenConfigPageGridItem.GridX)
}

// uint32 GridY = 3;
inline void ScreenConfigPageGridItem::clear_gridy() {
  gridy_ = 0u;
}
inline ::google::protobuf::uint32 ScreenConfigPageGridItem::gridy() const {
  // @@protoc_insertion_point(field_get:Nmea2k.ScreenConfigPageGridItem.GridY)
  return gridy_;
}
inline void ScreenConfigPageGridItem::set_gridy(::google::protobuf::uint32 value) {
  
  gridy_ = value;
  // @@protoc_insertion_point(field_set:Nmea2k.ScreenConfigPageGridItem.GridY)
}

// float TargetX = 4;
inline void ScreenConfigPageGridItem::clear_targetx() {
  targetx_ = 0;
}
inline float ScreenConfigPageGridItem::targetx() const {
  // @@protoc_insertion_point(field_get:Nmea2k.ScreenConfigPageGridItem.TargetX)
  return targetx_;
}
inline void ScreenConfigPageGridItem::set_targetx(float value) {
  
  targetx_ = value;
  // @@protoc_insertion_point(field_set:Nmea2k.ScreenConfigPageGridItem.TargetX)
}

// float TargetY = 5;
inline void ScreenConfigPageGridItem::clear_targety() {
  targety_ = 0;
}
inline float ScreenConfigPageGridItem::targety() const {
  // @@protoc_insertion_point(field_get:Nmea2k.ScreenConfigPageGridItem.TargetY)
  return targety_;
}
inline void ScreenConfigPageGridItem::set_targety(float value) {
  
  targety_ = value;
  // @@protoc_insertion_point(field_set:Nmea2k.ScreenConfigPageGridItem.TargetY)
}

// float TargetWidth = 6;
inline void ScreenConfigPageGridItem::clear_targetwidth() {
  targetwidth_ = 0;
}
inline float ScreenConfigPageGridItem::targetwidth() const {
  // @@protoc_insertion_point(field_get:Nmea2k.ScreenConfigPageGridItem.TargetWidth)
  return targetwidth_;
}
inline void ScreenConfigPageGridItem::set_targetwidth(float value) {
  
  targetwidth_ = value;
  // @@protoc_insertion_point(field_set:Nmea2k.ScreenConfigPageGridItem.TargetWidth)
}

// float TargetHeight = 7;
inline void ScreenConfigPageGridItem::clear_targetheight() {
  targetheight_ = 0;
}
inline float ScreenConfigPageGridItem::targetheight() const {
  // @@protoc_insertion_point(field_get:Nmea2k.ScreenConfigPageGridItem.TargetHeight)
  return targetheight_;
}
inline void ScreenConfigPageGridItem::set_targetheight(float value) {
  
  targetheight_ = value;
  // @@protoc_insertion_point(field_set:Nmea2k.ScreenConfigPageGridItem.TargetHeight)
}

// uint32 Icon = 8;
inline void ScreenConfigPageGridItem::clear_icon() {
  icon_ = 0u;
}
inline ::google::protobuf::uint32 ScreenConfigPageGridItem::icon() const {
  // @@protoc_insertion_point(field_get:Nmea2k.ScreenConfigPageGridItem.Icon)
  return icon_;
}
inline void ScreenConfigPageGridItem::set_icon(::google::protobuf::uint32 value) {
  
  icon_ = value;
  // @@protoc_insertion_point(field_set:Nmea2k.ScreenConfigPageGridItem.Icon)
}

// string Name = 9;
inline void ScreenConfigPageGridItem::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ScreenConfigPageGridItem::name() const {
  // @@protoc_insertion_point(field_get:Nmea2k.ScreenConfigPageGridItem.Name)
  return name_.GetNoArena();
}
inline void ScreenConfigPageGridItem::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Nmea2k.ScreenConfigPageGridItem.Name)
}
#if LANG_CXX11
inline void ScreenConfigPageGridItem::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Nmea2k.ScreenConfigPageGridItem.Name)
}
#endif
inline void ScreenConfigPageGridItem::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Nmea2k.ScreenConfigPageGridItem.Name)
}
inline void ScreenConfigPageGridItem::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Nmea2k.ScreenConfigPageGridItem.Name)
}
inline ::std::string* ScreenConfigPageGridItem::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:Nmea2k.ScreenConfigPageGridItem.Name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ScreenConfigPageGridItem::release_name() {
  // @@protoc_insertion_point(field_release:Nmea2k.ScreenConfigPageGridItem.Name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ScreenConfigPageGridItem::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:Nmea2k.ScreenConfigPageGridItem.Name)
}

// uint32 ColumnSpan = 10;
inline void ScreenConfigPageGridItem::clear_columnspan() {
  columnspan_ = 0u;
}
inline ::google::protobuf::uint32 ScreenConfigPageGridItem::columnspan() const {
  // @@protoc_insertion_point(field_get:Nmea2k.ScreenConfigPageGridItem.ColumnSpan)
  return columnspan_;
}
inline void ScreenConfigPageGridItem::set_columnspan(::google::protobuf::uint32 value) {
  
  columnspan_ = value;
  // @@protoc_insertion_point(field_set:Nmea2k.ScreenConfigPageGridItem.ColumnSpan)
}

// uint32 RowSpan = 11;
inline void ScreenConfigPageGridItem::clear_rowspan() {
  rowspan_ = 0u;
}
inline ::google::protobuf::uint32 ScreenConfigPageGridItem::rowspan() const {
  // @@protoc_insertion_point(field_get:Nmea2k.ScreenConfigPageGridItem.RowSpan)
  return rowspan_;
}
inline void ScreenConfigPageGridItem::set_rowspan(::google::protobuf::uint32 value) {
  
  rowspan_ = value;
  // @@protoc_insertion_point(field_set:Nmea2k.ScreenConfigPageGridItem.RowSpan)
}

// uint32 DoubleThrowType = 12;
inline void ScreenConfigPageGridItem::clear_doublethrowtype() {
  doublethrowtype_ = 0u;
}
inline ::google::protobuf::uint32 ScreenConfigPageGridItem::doublethrowtype() const {
  // @@protoc_insertion_point(field_get:Nmea2k.ScreenConfigPageGridItem.DoubleThrowType)
  return doublethrowtype_;
}
inline void ScreenConfigPageGridItem::set_doublethrowtype(::google::protobuf::uint32 value) {
  
  doublethrowtype_ = value;
  // @@protoc_insertion_point(field_set:Nmea2k.ScreenConfigPageGridItem.DoubleThrowType)
}

// -------------------------------------------------------------------

// ScreenConfigPageImage

// .Nmea2k.ScreenConfigHeader Header = 1;
inline bool ScreenConfigPageImage::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
inline void ScreenConfigPageImage::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
}
inline const ::Nmea2k::ScreenConfigHeader& ScreenConfigPageImage::_internal_header() const {
  return *header_;
}
inline const ::Nmea2k::ScreenConfigHeader& ScreenConfigPageImage::header() const {
  const ::Nmea2k::ScreenConfigHeader* p = header_;
  // @@protoc_insertion_point(field_get:Nmea2k.ScreenConfigPageImage.Header)
  return p != NULL ? *p : *reinterpret_cast<const ::Nmea2k::ScreenConfigHeader*>(
      &::Nmea2k::_ScreenConfigHeader_default_instance_);
}
inline ::Nmea2k::ScreenConfigHeader* ScreenConfigPageImage::release_header() {
  // @@protoc_insertion_point(field_release:Nmea2k.ScreenConfigPageImage.Header)
  
  ::Nmea2k::ScreenConfigHeader* temp = header_;
  header_ = NULL;
  return temp;
}
inline ::Nmea2k::ScreenConfigHeader* ScreenConfigPageImage::mutable_header() {
  
  if (header_ == NULL) {
    auto* p = CreateMaybeMessage<::Nmea2k::ScreenConfigHeader>(GetArenaNoVirtual());
    header_ = p;
  }
  // @@protoc_insertion_point(field_mutable:Nmea2k.ScreenConfigPageImage.Header)
  return header_;
}
inline void ScreenConfigPageImage::set_allocated_header(::Nmea2k::ScreenConfigHeader* header) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete header_;
  }
  if (header) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      header = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:Nmea2k.ScreenConfigPageImage.Header)
}

// uint32 GridX = 2;
inline void ScreenConfigPageImage::clear_gridx() {
  gridx_ = 0u;
}
inline ::google::protobuf::uint32 ScreenConfigPageImage::gridx() const {
  // @@protoc_insertion_point(field_get:Nmea2k.ScreenConfigPageImage.GridX)
  return gridx_;
}
inline void ScreenConfigPageImage::set_gridx(::google::protobuf::uint32 value) {
  
  gridx_ = value;
  // @@protoc_insertion_point(field_set:Nmea2k.ScreenConfigPageImage.GridX)
}

// uint32 GridY = 3;
inline void ScreenConfigPageImage::clear_gridy() {
  gridy_ = 0u;
}
inline ::google::protobuf::uint32 ScreenConfigPageImage::gridy() const {
  // @@protoc_insertion_point(field_get:Nmea2k.ScreenConfigPageImage.GridY)
  return gridy_;
}
inline void ScreenConfigPageImage::set_gridy(::google::protobuf::uint32 value) {
  
  gridy_ = value;
  // @@protoc_insertion_point(field_set:Nmea2k.ScreenConfigPageImage.GridY)
}

// uint32 GridWidth = 4;
inline void ScreenConfigPageImage::clear_gridwidth() {
  gridwidth_ = 0u;
}
inline ::google::protobuf::uint32 ScreenConfigPageImage::gridwidth() const {
  // @@protoc_insertion_point(field_get:Nmea2k.ScreenConfigPageImage.GridWidth)
  return gridwidth_;
}
inline void ScreenConfigPageImage::set_gridwidth(::google::protobuf::uint32 value) {
  
  gridwidth_ = value;
  // @@protoc_insertion_point(field_set:Nmea2k.ScreenConfigPageImage.GridWidth)
}

// uint32 GridHeight = 5;
inline void ScreenConfigPageImage::clear_gridheight() {
  gridheight_ = 0u;
}
inline ::google::protobuf::uint32 ScreenConfigPageImage::gridheight() const {
  // @@protoc_insertion_point(field_get:Nmea2k.ScreenConfigPageImage.GridHeight)
  return gridheight_;
}
inline void ScreenConfigPageImage::set_gridheight(::google::protobuf::uint32 value) {
  
  gridheight_ = value;
  // @@protoc_insertion_point(field_set:Nmea2k.ScreenConfigPageImage.GridHeight)
}

// float SourceWidth = 6;
inline void ScreenConfigPageImage::clear_sourcewidth() {
  sourcewidth_ = 0;
}
inline float ScreenConfigPageImage::sourcewidth() const {
  // @@protoc_insertion_point(field_get:Nmea2k.ScreenConfigPageImage.SourceWidth)
  return sourcewidth_;
}
inline void ScreenConfigPageImage::set_sourcewidth(float value) {
  
  sourcewidth_ = value;
  // @@protoc_insertion_point(field_set:Nmea2k.ScreenConfigPageImage.SourceWidth)
}

// float SourceHeight = 7;
inline void ScreenConfigPageImage::clear_sourceheight() {
  sourceheight_ = 0;
}
inline float ScreenConfigPageImage::sourceheight() const {
  // @@protoc_insertion_point(field_get:Nmea2k.ScreenConfigPageImage.SourceHeight)
  return sourceheight_;
}
inline void ScreenConfigPageImage::set_sourceheight(float value) {
  
  sourceheight_ = value;
  // @@protoc_insertion_point(field_set:Nmea2k.ScreenConfigPageImage.SourceHeight)
}

// float TargetX = 8;
inline void ScreenConfigPageImage::clear_targetx() {
  targetx_ = 0;
}
inline float ScreenConfigPageImage::targetx() const {
  // @@protoc_insertion_point(field_get:Nmea2k.ScreenConfigPageImage.TargetX)
  return targetx_;
}
inline void ScreenConfigPageImage::set_targetx(float value) {
  
  targetx_ = value;
  // @@protoc_insertion_point(field_set:Nmea2k.ScreenConfigPageImage.TargetX)
}

// float TargetY = 9;
inline void ScreenConfigPageImage::clear_targety() {
  targety_ = 0;
}
inline float ScreenConfigPageImage::targety() const {
  // @@protoc_insertion_point(field_get:Nmea2k.ScreenConfigPageImage.TargetY)
  return targety_;
}
inline void ScreenConfigPageImage::set_targety(float value) {
  
  targety_ = value;
  // @@protoc_insertion_point(field_set:Nmea2k.ScreenConfigPageImage.TargetY)
}

// float TargetWidth = 10;
inline void ScreenConfigPageImage::clear_targetwidth() {
  targetwidth_ = 0;
}
inline float ScreenConfigPageImage::targetwidth() const {
  // @@protoc_insertion_point(field_get:Nmea2k.ScreenConfigPageImage.TargetWidth)
  return targetwidth_;
}
inline void ScreenConfigPageImage::set_targetwidth(float value) {
  
  targetwidth_ = value;
  // @@protoc_insertion_point(field_set:Nmea2k.ScreenConfigPageImage.TargetWidth)
}

// float TargetHeight = 11;
inline void ScreenConfigPageImage::clear_targetheight() {
  targetheight_ = 0;
}
inline float ScreenConfigPageImage::targetheight() const {
  // @@protoc_insertion_point(field_get:Nmea2k.ScreenConfigPageImage.TargetHeight)
  return targetheight_;
}
inline void ScreenConfigPageImage::set_targetheight(float value) {
  
  targetheight_ = value;
  // @@protoc_insertion_point(field_set:Nmea2k.ScreenConfigPageImage.TargetHeight)
}

// string FileName = 12;
inline void ScreenConfigPageImage::clear_filename() {
  filename_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ScreenConfigPageImage::filename() const {
  // @@protoc_insertion_point(field_get:Nmea2k.ScreenConfigPageImage.FileName)
  return filename_.GetNoArena();
}
inline void ScreenConfigPageImage::set_filename(const ::std::string& value) {
  
  filename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Nmea2k.ScreenConfigPageImage.FileName)
}
#if LANG_CXX11
inline void ScreenConfigPageImage::set_filename(::std::string&& value) {
  
  filename_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Nmea2k.ScreenConfigPageImage.FileName)
}
#endif
inline void ScreenConfigPageImage::set_filename(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  filename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Nmea2k.ScreenConfigPageImage.FileName)
}
inline void ScreenConfigPageImage::set_filename(const char* value, size_t size) {
  
  filename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Nmea2k.ScreenConfigPageImage.FileName)
}
inline ::std::string* ScreenConfigPageImage::mutable_filename() {
  
  // @@protoc_insertion_point(field_mutable:Nmea2k.ScreenConfigPageImage.FileName)
  return filename_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ScreenConfigPageImage::release_filename() {
  // @@protoc_insertion_point(field_release:Nmea2k.ScreenConfigPageImage.FileName)
  
  return filename_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ScreenConfigPageImage::set_allocated_filename(::std::string* filename) {
  if (filename != NULL) {
    
  } else {
    
  }
  filename_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), filename);
  // @@protoc_insertion_point(field_set_allocated:Nmea2k.ScreenConfigPageImage.FileName)
}

// uint32 BackgroundColourR = 13;
inline void ScreenConfigPageImage::clear_backgroundcolourr() {
  backgroundcolourr_ = 0u;
}
inline ::google::protobuf::uint32 ScreenConfigPageImage::backgroundcolourr() const {
  // @@protoc_insertion_point(field_get:Nmea2k.ScreenConfigPageImage.BackgroundColourR)
  return backgroundcolourr_;
}
inline void ScreenConfigPageImage::set_backgroundcolourr(::google::protobuf::uint32 value) {
  
  backgroundcolourr_ = value;
  // @@protoc_insertion_point(field_set:Nmea2k.ScreenConfigPageImage.BackgroundColourR)
}

// uint32 BackgroundColourG = 14;
inline void ScreenConfigPageImage::clear_backgroundcolourg() {
  backgroundcolourg_ = 0u;
}
inline ::google::protobuf::uint32 ScreenConfigPageImage::backgroundcolourg() const {
  // @@protoc_insertion_point(field_get:Nmea2k.ScreenConfigPageImage.BackgroundColourG)
  return backgroundcolourg_;
}
inline void ScreenConfigPageImage::set_backgroundcolourg(::google::protobuf::uint32 value) {
  
  backgroundcolourg_ = value;
  // @@protoc_insertion_point(field_set:Nmea2k.ScreenConfigPageImage.BackgroundColourG)
}

// uint32 BackgroundColourB = 15;
inline void ScreenConfigPageImage::clear_backgroundcolourb() {
  backgroundcolourb_ = 0u;
}
inline ::google::protobuf::uint32 ScreenConfigPageImage::backgroundcolourb() const {
  // @@protoc_insertion_point(field_get:Nmea2k.ScreenConfigPageImage.BackgroundColourB)
  return backgroundcolourb_;
}
inline void ScreenConfigPageImage::set_backgroundcolourb(::google::protobuf::uint32 value) {
  
  backgroundcolourb_ = value;
  // @@protoc_insertion_point(field_set:Nmea2k.ScreenConfigPageImage.BackgroundColourB)
}

// uint32 ShowBackground = 16;
inline void ScreenConfigPageImage::clear_showbackground() {
  showbackground_ = 0u;
}
inline ::google::protobuf::uint32 ScreenConfigPageImage::showbackground() const {
  // @@protoc_insertion_point(field_get:Nmea2k.ScreenConfigPageImage.ShowBackground)
  return showbackground_;
}
inline void ScreenConfigPageImage::set_showbackground(::google::protobuf::uint32 value) {
  
  showbackground_ = value;
  // @@protoc_insertion_point(field_set:Nmea2k.ScreenConfigPageImage.ShowBackground)
}

// uint32 CropToFit = 17;
inline void ScreenConfigPageImage::clear_croptofit() {
  croptofit_ = 0u;
}
inline ::google::protobuf::uint32 ScreenConfigPageImage::croptofit() const {
  // @@protoc_insertion_point(field_get:Nmea2k.ScreenConfigPageImage.CropToFit)
  return croptofit_;
}
inline void ScreenConfigPageImage::set_croptofit(::google::protobuf::uint32 value) {
  
  croptofit_ = value;
  // @@protoc_insertion_point(field_set:Nmea2k.ScreenConfigPageImage.CropToFit)
}

// -------------------------------------------------------------------

// ScreenConfigPage

// .Nmea2k.ScreenConfigHeader Header = 1;
inline bool ScreenConfigPage::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
inline void ScreenConfigPage::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
}
inline const ::Nmea2k::ScreenConfigHeader& ScreenConfigPage::_internal_header() const {
  return *header_;
}
inline const ::Nmea2k::ScreenConfigHeader& ScreenConfigPage::header() const {
  const ::Nmea2k::ScreenConfigHeader* p = header_;
  // @@protoc_insertion_point(field_get:Nmea2k.ScreenConfigPage.Header)
  return p != NULL ? *p : *reinterpret_cast<const ::Nmea2k::ScreenConfigHeader*>(
      &::Nmea2k::_ScreenConfigHeader_default_instance_);
}
inline ::Nmea2k::ScreenConfigHeader* ScreenConfigPage::release_header() {
  // @@protoc_insertion_point(field_release:Nmea2k.ScreenConfigPage.Header)
  
  ::Nmea2k::ScreenConfigHeader* temp = header_;
  header_ = NULL;
  return temp;
}
inline ::Nmea2k::ScreenConfigHeader* ScreenConfigPage::mutable_header() {
  
  if (header_ == NULL) {
    auto* p = CreateMaybeMessage<::Nmea2k::ScreenConfigHeader>(GetArenaNoVirtual());
    header_ = p;
  }
  // @@protoc_insertion_point(field_mutable:Nmea2k.ScreenConfigPage.Header)
  return header_;
}
inline void ScreenConfigPage::set_allocated_header(::Nmea2k::ScreenConfigHeader* header) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete header_;
  }
  if (header) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      header = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:Nmea2k.ScreenConfigPage.Header)
}

// -------------------------------------------------------------------

// ScreenConfigMode

// .Nmea2k.ScreenConfigHeader Header = 1;
inline bool ScreenConfigMode::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
inline void ScreenConfigMode::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
}
inline const ::Nmea2k::ScreenConfigHeader& ScreenConfigMode::_internal_header() const {
  return *header_;
}
inline const ::Nmea2k::ScreenConfigHeader& ScreenConfigMode::header() const {
  const ::Nmea2k::ScreenConfigHeader* p = header_;
  // @@protoc_insertion_point(field_get:Nmea2k.ScreenConfigMode.Header)
  return p != NULL ? *p : *reinterpret_cast<const ::Nmea2k::ScreenConfigHeader*>(
      &::Nmea2k::_ScreenConfigHeader_default_instance_);
}
inline ::Nmea2k::ScreenConfigHeader* ScreenConfigMode::release_header() {
  // @@protoc_insertion_point(field_release:Nmea2k.ScreenConfigMode.Header)
  
  ::Nmea2k::ScreenConfigHeader* temp = header_;
  header_ = NULL;
  return temp;
}
inline ::Nmea2k::ScreenConfigHeader* ScreenConfigMode::mutable_header() {
  
  if (header_ == NULL) {
    auto* p = CreateMaybeMessage<::Nmea2k::ScreenConfigHeader>(GetArenaNoVirtual());
    header_ = p;
  }
  // @@protoc_insertion_point(field_mutable:Nmea2k.ScreenConfigMode.Header)
  return header_;
}
inline void ScreenConfigMode::set_allocated_header(::Nmea2k::ScreenConfigHeader* header) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete header_;
  }
  if (header) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      header = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:Nmea2k.ScreenConfigMode.Header)
}

// string Name = 2;
inline void ScreenConfigMode::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ScreenConfigMode::name() const {
  // @@protoc_insertion_point(field_get:Nmea2k.ScreenConfigMode.Name)
  return name_.GetNoArena();
}
inline void ScreenConfigMode::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Nmea2k.ScreenConfigMode.Name)
}
#if LANG_CXX11
inline void ScreenConfigMode::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Nmea2k.ScreenConfigMode.Name)
}
#endif
inline void ScreenConfigMode::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Nmea2k.ScreenConfigMode.Name)
}
inline void ScreenConfigMode::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Nmea2k.ScreenConfigMode.Name)
}
inline ::std::string* ScreenConfigMode::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:Nmea2k.ScreenConfigMode.Name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ScreenConfigMode::release_name() {
  // @@protoc_insertion_point(field_release:Nmea2k.ScreenConfigMode.Name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ScreenConfigMode::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:Nmea2k.ScreenConfigMode.Name)
}

// -------------------------------------------------------------------

// ScreenConfig

// .Nmea2k.ScreenConfigHeader Header = 1;
inline bool ScreenConfig::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
inline void ScreenConfig::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
}
inline const ::Nmea2k::ScreenConfigHeader& ScreenConfig::_internal_header() const {
  return *header_;
}
inline const ::Nmea2k::ScreenConfigHeader& ScreenConfig::header() const {
  const ::Nmea2k::ScreenConfigHeader* p = header_;
  // @@protoc_insertion_point(field_get:Nmea2k.ScreenConfig.Header)
  return p != NULL ? *p : *reinterpret_cast<const ::Nmea2k::ScreenConfigHeader*>(
      &::Nmea2k::_ScreenConfigHeader_default_instance_);
}
inline ::Nmea2k::ScreenConfigHeader* ScreenConfig::release_header() {
  // @@protoc_insertion_point(field_release:Nmea2k.ScreenConfig.Header)
  
  ::Nmea2k::ScreenConfigHeader* temp = header_;
  header_ = NULL;
  return temp;
}
inline ::Nmea2k::ScreenConfigHeader* ScreenConfig::mutable_header() {
  
  if (header_ == NULL) {
    auto* p = CreateMaybeMessage<::Nmea2k::ScreenConfigHeader>(GetArenaNoVirtual());
    header_ = p;
  }
  // @@protoc_insertion_point(field_mutable:Nmea2k.ScreenConfig.Header)
  return header_;
}
inline void ScreenConfig::set_allocated_header(::Nmea2k::ScreenConfigHeader* header) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete header_;
  }
  if (header) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      header = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:Nmea2k.ScreenConfig.Header)
}

// uint32 GridWidth = 2;
inline void ScreenConfig::clear_gridwidth() {
  gridwidth_ = 0u;
}
inline ::google::protobuf::uint32 ScreenConfig::gridwidth() const {
  // @@protoc_insertion_point(field_get:Nmea2k.ScreenConfig.GridWidth)
  return gridwidth_;
}
inline void ScreenConfig::set_gridwidth(::google::protobuf::uint32 value) {
  
  gridwidth_ = value;
  // @@protoc_insertion_point(field_set:Nmea2k.ScreenConfig.GridWidth)
}

// uint32 GridHeight = 3;
inline void ScreenConfig::clear_gridheight() {
  gridheight_ = 0u;
}
inline ::google::protobuf::uint32 ScreenConfig::gridheight() const {
  // @@protoc_insertion_point(field_get:Nmea2k.ScreenConfig.GridHeight)
  return gridheight_;
}
inline void ScreenConfig::set_gridheight(::google::protobuf::uint32 value) {
  
  gridheight_ = value;
  // @@protoc_insertion_point(field_set:Nmea2k.ScreenConfig.GridHeight)
}

// uint32 Landscape = 4;
inline void ScreenConfig::clear_landscape() {
  landscape_ = 0u;
}
inline ::google::protobuf::uint32 ScreenConfig::landscape() const {
  // @@protoc_insertion_point(field_get:Nmea2k.ScreenConfig.Landscape)
  return landscape_;
}
inline void ScreenConfig::set_landscape(::google::protobuf::uint32 value) {
  
  landscape_ = value;
  // @@protoc_insertion_point(field_set:Nmea2k.ScreenConfig.Landscape)
}

// string DisplayName = 5;
inline void ScreenConfig::clear_displayname() {
  displayname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ScreenConfig::displayname() const {
  // @@protoc_insertion_point(field_get:Nmea2k.ScreenConfig.DisplayName)
  return displayname_.GetNoArena();
}
inline void ScreenConfig::set_displayname(const ::std::string& value) {
  
  displayname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Nmea2k.ScreenConfig.DisplayName)
}
#if LANG_CXX11
inline void ScreenConfig::set_displayname(::std::string&& value) {
  
  displayname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Nmea2k.ScreenConfig.DisplayName)
}
#endif
inline void ScreenConfig::set_displayname(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  displayname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Nmea2k.ScreenConfig.DisplayName)
}
inline void ScreenConfig::set_displayname(const char* value, size_t size) {
  
  displayname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Nmea2k.ScreenConfig.DisplayName)
}
inline ::std::string* ScreenConfig::mutable_displayname() {
  
  // @@protoc_insertion_point(field_mutable:Nmea2k.ScreenConfig.DisplayName)
  return displayname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ScreenConfig::release_displayname() {
  // @@protoc_insertion_point(field_release:Nmea2k.ScreenConfig.DisplayName)
  
  return displayname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ScreenConfig::set_allocated_displayname(::std::string* displayname) {
  if (displayname != NULL) {
    
  } else {
    
  }
  displayname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), displayname);
  // @@protoc_insertion_point(field_set_allocated:Nmea2k.ScreenConfig.DisplayName)
}

// string RelativePath = 6;
inline void ScreenConfig::clear_relativepath() {
  relativepath_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ScreenConfig::relativepath() const {
  // @@protoc_insertion_point(field_get:Nmea2k.ScreenConfig.RelativePath)
  return relativepath_.GetNoArena();
}
inline void ScreenConfig::set_relativepath(const ::std::string& value) {
  
  relativepath_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Nmea2k.ScreenConfig.RelativePath)
}
#if LANG_CXX11
inline void ScreenConfig::set_relativepath(::std::string&& value) {
  
  relativepath_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Nmea2k.ScreenConfig.RelativePath)
}
#endif
inline void ScreenConfig::set_relativepath(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  relativepath_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Nmea2k.ScreenConfig.RelativePath)
}
inline void ScreenConfig::set_relativepath(const char* value, size_t size) {
  
  relativepath_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Nmea2k.ScreenConfig.RelativePath)
}
inline ::std::string* ScreenConfig::mutable_relativepath() {
  
  // @@protoc_insertion_point(field_mutable:Nmea2k.ScreenConfig.RelativePath)
  return relativepath_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ScreenConfig::release_relativepath() {
  // @@protoc_insertion_point(field_release:Nmea2k.ScreenConfig.RelativePath)
  
  return relativepath_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ScreenConfig::set_allocated_relativepath(::std::string* relativepath) {
  if (relativepath != NULL) {
    
  } else {
    
  }
  relativepath_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), relativepath);
  // @@protoc_insertion_point(field_set_allocated:Nmea2k.ScreenConfig.RelativePath)
}

// -------------------------------------------------------------------

// GNSSDevice

// .Nmea2k.ConfigRequest.eConfigType DisplayType = 1;
inline void GNSSDevice::clear_displaytype() {
  displaytype_ = 0;
}
inline ::Nmea2k::ConfigRequest_eConfigType GNSSDevice::displaytype() const {
  // @@protoc_insertion_point(field_get:Nmea2k.GNSSDevice.DisplayType)
  return static_cast< ::Nmea2k::ConfigRequest_eConfigType >(displaytype_);
}
inline void GNSSDevice::set_displaytype(::Nmea2k::ConfigRequest_eConfigType value) {
  
  displaytype_ = value;
  // @@protoc_insertion_point(field_set:Nmea2k.GNSSDevice.DisplayType)
}

// uint32 Id = 2;
inline void GNSSDevice::clear_id() {
  id_ = 0u;
}
inline ::google::protobuf::uint32 GNSSDevice::id() const {
  // @@protoc_insertion_point(field_get:Nmea2k.GNSSDevice.Id)
  return id_;
}
inline void GNSSDevice::set_id(::google::protobuf::uint32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:Nmea2k.GNSSDevice.Id)
}

// string NameUTF8 = 3;
inline void GNSSDevice::clear_nameutf8() {
  nameutf8_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GNSSDevice::nameutf8() const {
  // @@protoc_insertion_point(field_get:Nmea2k.GNSSDevice.NameUTF8)
  return nameutf8_.GetNoArena();
}
inline void GNSSDevice::set_nameutf8(const ::std::string& value) {
  
  nameutf8_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Nmea2k.GNSSDevice.NameUTF8)
}
#if LANG_CXX11
inline void GNSSDevice::set_nameutf8(::std::string&& value) {
  
  nameutf8_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Nmea2k.GNSSDevice.NameUTF8)
}
#endif
inline void GNSSDevice::set_nameutf8(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  nameutf8_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Nmea2k.GNSSDevice.NameUTF8)
}
inline void GNSSDevice::set_nameutf8(const char* value, size_t size) {
  
  nameutf8_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Nmea2k.GNSSDevice.NameUTF8)
}
inline ::std::string* GNSSDevice::mutable_nameutf8() {
  
  // @@protoc_insertion_point(field_mutable:Nmea2k.GNSSDevice.NameUTF8)
  return nameutf8_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GNSSDevice::release_nameutf8() {
  // @@protoc_insertion_point(field_release:Nmea2k.GNSSDevice.NameUTF8)
  
  return nameutf8_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GNSSDevice::set_allocated_nameutf8(::std::string* nameutf8) {
  if (nameutf8 != NULL) {
    
  } else {
    
  }
  nameutf8_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), nameutf8);
  // @@protoc_insertion_point(field_set_allocated:Nmea2k.GNSSDevice.NameUTF8)
}

// .Nmea2k.Instance Instance = 4;
inline bool GNSSDevice::has_instance() const {
  return this != internal_default_instance() && instance_ != NULL;
}
inline void GNSSDevice::clear_instance() {
  if (GetArenaNoVirtual() == NULL && instance_ != NULL) {
    delete instance_;
  }
  instance_ = NULL;
}
inline const ::Nmea2k::Instance& GNSSDevice::_internal_instance() const {
  return *instance_;
}
inline const ::Nmea2k::Instance& GNSSDevice::instance() const {
  const ::Nmea2k::Instance* p = instance_;
  // @@protoc_insertion_point(field_get:Nmea2k.GNSSDevice.Instance)
  return p != NULL ? *p : *reinterpret_cast<const ::Nmea2k::Instance*>(
      &::Nmea2k::_Instance_default_instance_);
}
inline ::Nmea2k::Instance* GNSSDevice::release_instance() {
  // @@protoc_insertion_point(field_release:Nmea2k.GNSSDevice.Instance)
  
  ::Nmea2k::Instance* temp = instance_;
  instance_ = NULL;
  return temp;
}
inline ::Nmea2k::Instance* GNSSDevice::mutable_instance() {
  
  if (instance_ == NULL) {
    auto* p = CreateMaybeMessage<::Nmea2k::Instance>(GetArenaNoVirtual());
    instance_ = p;
  }
  // @@protoc_insertion_point(field_mutable:Nmea2k.GNSSDevice.Instance)
  return instance_;
}
inline void GNSSDevice::set_allocated_instance(::Nmea2k::Instance* instance) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete instance_;
  }
  if (instance) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      instance = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, instance, submessage_arena);
    }
    
  } else {
    
  }
  instance_ = instance;
  // @@protoc_insertion_point(field_set_allocated:Nmea2k.GNSSDevice.Instance)
}

// bool IsExternal = 5;
inline void GNSSDevice::clear_isexternal() {
  isexternal_ = false;
}
inline bool GNSSDevice::isexternal() const {
  // @@protoc_insertion_point(field_get:Nmea2k.GNSSDevice.IsExternal)
  return isexternal_;
}
inline void GNSSDevice::set_isexternal(bool value) {
  
  isexternal_ = value;
  // @@protoc_insertion_point(field_set:Nmea2k.GNSSDevice.IsExternal)
}

// -------------------------------------------------------------------

// EngineDevice

// .Nmea2k.ConfigRequest.eConfigType DisplayType = 1;
inline void EngineDevice::clear_displaytype() {
  displaytype_ = 0;
}
inline ::Nmea2k::ConfigRequest_eConfigType EngineDevice::displaytype() const {
  // @@protoc_insertion_point(field_get:Nmea2k.EngineDevice.DisplayType)
  return static_cast< ::Nmea2k::ConfigRequest_eConfigType >(displaytype_);
}
inline void EngineDevice::set_displaytype(::Nmea2k::ConfigRequest_eConfigType value) {
  
  displaytype_ = value;
  // @@protoc_insertion_point(field_set:Nmea2k.EngineDevice.DisplayType)
}

// uint32 Id = 2;
inline void EngineDevice::clear_id() {
  id_ = 0u;
}
inline ::google::protobuf::uint32 EngineDevice::id() const {
  // @@protoc_insertion_point(field_get:Nmea2k.EngineDevice.Id)
  return id_;
}
inline void EngineDevice::set_id(::google::protobuf::uint32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:Nmea2k.EngineDevice.Id)
}

// string NameUTF8 = 3;
inline void EngineDevice::clear_nameutf8() {
  nameutf8_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& EngineDevice::nameutf8() const {
  // @@protoc_insertion_point(field_get:Nmea2k.EngineDevice.NameUTF8)
  return nameutf8_.GetNoArena();
}
inline void EngineDevice::set_nameutf8(const ::std::string& value) {
  
  nameutf8_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Nmea2k.EngineDevice.NameUTF8)
}
#if LANG_CXX11
inline void EngineDevice::set_nameutf8(::std::string&& value) {
  
  nameutf8_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Nmea2k.EngineDevice.NameUTF8)
}
#endif
inline void EngineDevice::set_nameutf8(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  nameutf8_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Nmea2k.EngineDevice.NameUTF8)
}
inline void EngineDevice::set_nameutf8(const char* value, size_t size) {
  
  nameutf8_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Nmea2k.EngineDevice.NameUTF8)
}
inline ::std::string* EngineDevice::mutable_nameutf8() {
  
  // @@protoc_insertion_point(field_mutable:Nmea2k.EngineDevice.NameUTF8)
  return nameutf8_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* EngineDevice::release_nameutf8() {
  // @@protoc_insertion_point(field_release:Nmea2k.EngineDevice.NameUTF8)
  
  return nameutf8_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void EngineDevice::set_allocated_nameutf8(::std::string* nameutf8) {
  if (nameutf8 != NULL) {
    
  } else {
    
  }
  nameutf8_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), nameutf8);
  // @@protoc_insertion_point(field_set_allocated:Nmea2k.EngineDevice.NameUTF8)
}

// .Nmea2k.Instance Instance = 4;
inline bool EngineDevice::has_instance() const {
  return this != internal_default_instance() && instance_ != NULL;
}
inline void EngineDevice::clear_instance() {
  if (GetArenaNoVirtual() == NULL && instance_ != NULL) {
    delete instance_;
  }
  instance_ = NULL;
}
inline const ::Nmea2k::Instance& EngineDevice::_internal_instance() const {
  return *instance_;
}
inline const ::Nmea2k::Instance& EngineDevice::instance() const {
  const ::Nmea2k::Instance* p = instance_;
  // @@protoc_insertion_point(field_get:Nmea2k.EngineDevice.Instance)
  return p != NULL ? *p : *reinterpret_cast<const ::Nmea2k::Instance*>(
      &::Nmea2k::_Instance_default_instance_);
}
inline ::Nmea2k::Instance* EngineDevice::release_instance() {
  // @@protoc_insertion_point(field_release:Nmea2k.EngineDevice.Instance)
  
  ::Nmea2k::Instance* temp = instance_;
  instance_ = NULL;
  return temp;
}
inline ::Nmea2k::Instance* EngineDevice::mutable_instance() {
  
  if (instance_ == NULL) {
    auto* p = CreateMaybeMessage<::Nmea2k::Instance>(GetArenaNoVirtual());
    instance_ = p;
  }
  // @@protoc_insertion_point(field_mutable:Nmea2k.EngineDevice.Instance)
  return instance_;
}
inline void EngineDevice::set_allocated_instance(::Nmea2k::Instance* instance) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete instance_;
  }
  if (instance) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      instance = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, instance, submessage_arena);
    }
    
  } else {
    
  }
  instance_ = instance;
  // @@protoc_insertion_point(field_set_allocated:Nmea2k.EngineDevice.Instance)
}

// string SoftwareId = 5;
inline void EngineDevice::clear_softwareid() {
  softwareid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& EngineDevice::softwareid() const {
  // @@protoc_insertion_point(field_get:Nmea2k.EngineDevice.SoftwareId)
  return softwareid_.GetNoArena();
}
inline void EngineDevice::set_softwareid(const ::std::string& value) {
  
  softwareid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Nmea2k.EngineDevice.SoftwareId)
}
#if LANG_CXX11
inline void EngineDevice::set_softwareid(::std::string&& value) {
  
  softwareid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Nmea2k.EngineDevice.SoftwareId)
}
#endif
inline void EngineDevice::set_softwareid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  softwareid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Nmea2k.EngineDevice.SoftwareId)
}
inline void EngineDevice::set_softwareid(const char* value, size_t size) {
  
  softwareid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Nmea2k.EngineDevice.SoftwareId)
}
inline ::std::string* EngineDevice::mutable_softwareid() {
  
  // @@protoc_insertion_point(field_mutable:Nmea2k.EngineDevice.SoftwareId)
  return softwareid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* EngineDevice::release_softwareid() {
  // @@protoc_insertion_point(field_release:Nmea2k.EngineDevice.SoftwareId)
  
  return softwareid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void EngineDevice::set_allocated_softwareid(::std::string* softwareid) {
  if (softwareid != NULL) {
    
  } else {
    
  }
  softwareid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), softwareid);
  // @@protoc_insertion_point(field_set_allocated:Nmea2k.EngineDevice.SoftwareId)
}

// string CalibrationId = 6;
inline void EngineDevice::clear_calibrationid() {
  calibrationid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& EngineDevice::calibrationid() const {
  // @@protoc_insertion_point(field_get:Nmea2k.EngineDevice.CalibrationId)
  return calibrationid_.GetNoArena();
}
inline void EngineDevice::set_calibrationid(const ::std::string& value) {
  
  calibrationid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Nmea2k.EngineDevice.CalibrationId)
}
#if LANG_CXX11
inline void EngineDevice::set_calibrationid(::std::string&& value) {
  
  calibrationid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Nmea2k.EngineDevice.CalibrationId)
}
#endif
inline void EngineDevice::set_calibrationid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  calibrationid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Nmea2k.EngineDevice.CalibrationId)
}
inline void EngineDevice::set_calibrationid(const char* value, size_t size) {
  
  calibrationid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Nmea2k.EngineDevice.CalibrationId)
}
inline ::std::string* EngineDevice::mutable_calibrationid() {
  
  // @@protoc_insertion_point(field_mutable:Nmea2k.EngineDevice.CalibrationId)
  return calibrationid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* EngineDevice::release_calibrationid() {
  // @@protoc_insertion_point(field_release:Nmea2k.EngineDevice.CalibrationId)
  
  return calibrationid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void EngineDevice::set_allocated_calibrationid(::std::string* calibrationid) {
  if (calibrationid != NULL) {
    
  } else {
    
  }
  calibrationid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), calibrationid);
  // @@protoc_insertion_point(field_set_allocated:Nmea2k.EngineDevice.CalibrationId)
}

// string SerialNumber = 7;
inline void EngineDevice::clear_serialnumber() {
  serialnumber_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& EngineDevice::serialnumber() const {
  // @@protoc_insertion_point(field_get:Nmea2k.EngineDevice.SerialNumber)
  return serialnumber_.GetNoArena();
}
inline void EngineDevice::set_serialnumber(const ::std::string& value) {
  
  serialnumber_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Nmea2k.EngineDevice.SerialNumber)
}
#if LANG_CXX11
inline void EngineDevice::set_serialnumber(::std::string&& value) {
  
  serialnumber_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Nmea2k.EngineDevice.SerialNumber)
}
#endif
inline void EngineDevice::set_serialnumber(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  serialnumber_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Nmea2k.EngineDevice.SerialNumber)
}
inline void EngineDevice::set_serialnumber(const char* value, size_t size) {
  
  serialnumber_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Nmea2k.EngineDevice.SerialNumber)
}
inline ::std::string* EngineDevice::mutable_serialnumber() {
  
  // @@protoc_insertion_point(field_mutable:Nmea2k.EngineDevice.SerialNumber)
  return serialnumber_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* EngineDevice::release_serialnumber() {
  // @@protoc_insertion_point(field_release:Nmea2k.EngineDevice.SerialNumber)
  
  return serialnumber_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void EngineDevice::set_allocated_serialnumber(::std::string* serialnumber) {
  if (serialnumber != NULL) {
    
  } else {
    
  }
  serialnumber_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), serialnumber);
  // @@protoc_insertion_point(field_set_allocated:Nmea2k.EngineDevice.SerialNumber)
}

// string ECUSerialNumber = 8;
inline void EngineDevice::clear_ecuserialnumber() {
  ecuserialnumber_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& EngineDevice::ecuserialnumber() const {
  // @@protoc_insertion_point(field_get:Nmea2k.EngineDevice.ECUSerialNumber)
  return ecuserialnumber_.GetNoArena();
}
inline void EngineDevice::set_ecuserialnumber(const ::std::string& value) {
  
  ecuserialnumber_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Nmea2k.EngineDevice.ECUSerialNumber)
}
#if LANG_CXX11
inline void EngineDevice::set_ecuserialnumber(::std::string&& value) {
  
  ecuserialnumber_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Nmea2k.EngineDevice.ECUSerialNumber)
}
#endif
inline void EngineDevice::set_ecuserialnumber(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  ecuserialnumber_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Nmea2k.EngineDevice.ECUSerialNumber)
}
inline void EngineDevice::set_ecuserialnumber(const char* value, size_t size) {
  
  ecuserialnumber_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Nmea2k.EngineDevice.ECUSerialNumber)
}
inline ::std::string* EngineDevice::mutable_ecuserialnumber() {
  
  // @@protoc_insertion_point(field_mutable:Nmea2k.EngineDevice.ECUSerialNumber)
  return ecuserialnumber_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* EngineDevice::release_ecuserialnumber() {
  // @@protoc_insertion_point(field_release:Nmea2k.EngineDevice.ECUSerialNumber)
  
  return ecuserialnumber_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void EngineDevice::set_allocated_ecuserialnumber(::std::string* ecuserialnumber) {
  if (ecuserialnumber != NULL) {
    
  } else {
    
  }
  ecuserialnumber_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ecuserialnumber);
  // @@protoc_insertion_point(field_set_allocated:Nmea2k.EngineDevice.ECUSerialNumber)
}

// .Nmea2k.EngineDevice.eEngineType EngineType = 9;
inline void EngineDevice::clear_enginetype() {
  enginetype_ = 0;
}
inline ::Nmea2k::EngineDevice_eEngineType EngineDevice::enginetype() const {
  // @@protoc_insertion_point(field_get:Nmea2k.EngineDevice.EngineType)
  return static_cast< ::Nmea2k::EngineDevice_eEngineType >(enginetype_);
}
inline void EngineDevice::set_enginetype(::Nmea2k::EngineDevice_eEngineType value) {
  
  enginetype_ = value;
  // @@protoc_insertion_point(field_set:Nmea2k.EngineDevice.EngineType)
}

// -------------------------------------------------------------------

// CZoneRawConfig

// uint32 Type = 1;
inline void CZoneRawConfig::clear_type() {
  type_ = 0u;
}
inline ::google::protobuf::uint32 CZoneRawConfig::type() const {
  // @@protoc_insertion_point(field_get:Nmea2k.CZoneRawConfig.Type)
  return type_;
}
inline void CZoneRawConfig::set_type(::google::protobuf::uint32 value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:Nmea2k.CZoneRawConfig.Type)
}

// bytes Content = 2;
inline void CZoneRawConfig::clear_content() {
  content_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CZoneRawConfig::content() const {
  // @@protoc_insertion_point(field_get:Nmea2k.CZoneRawConfig.Content)
  return content_.GetNoArena();
}
inline void CZoneRawConfig::set_content(const ::std::string& value) {
  
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Nmea2k.CZoneRawConfig.Content)
}
#if LANG_CXX11
inline void CZoneRawConfig::set_content(::std::string&& value) {
  
  content_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Nmea2k.CZoneRawConfig.Content)
}
#endif
inline void CZoneRawConfig::set_content(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Nmea2k.CZoneRawConfig.Content)
}
inline void CZoneRawConfig::set_content(const void* value, size_t size) {
  
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Nmea2k.CZoneRawConfig.Content)
}
inline ::std::string* CZoneRawConfig::mutable_content() {
  
  // @@protoc_insertion_point(field_mutable:Nmea2k.CZoneRawConfig.Content)
  return content_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CZoneRawConfig::release_content() {
  // @@protoc_insertion_point(field_release:Nmea2k.CZoneRawConfig.Content)
  
  return content_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CZoneRawConfig::set_allocated_content(::std::string* content) {
  if (content != NULL) {
    
  } else {
    
  }
  content_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), content);
  // @@protoc_insertion_point(field_set_allocated:Nmea2k.CZoneRawConfig.Content)
}

// uint32 Length = 3;
inline void CZoneRawConfig::clear_length() {
  length_ = 0u;
}
inline ::google::protobuf::uint32 CZoneRawConfig::length() const {
  // @@protoc_insertion_point(field_get:Nmea2k.CZoneRawConfig.Length)
  return length_;
}
inline void CZoneRawConfig::set_length(::google::protobuf::uint32 value) {
  
  length_ = value;
  // @@protoc_insertion_point(field_set:Nmea2k.CZoneRawConfig.Length)
}

// uint32 SizeOfData = 4;
inline void CZoneRawConfig::clear_sizeofdata() {
  sizeofdata_ = 0u;
}
inline ::google::protobuf::uint32 CZoneRawConfig::sizeofdata() const {
  // @@protoc_insertion_point(field_get:Nmea2k.CZoneRawConfig.SizeOfData)
  return sizeofdata_;
}
inline void CZoneRawConfig::set_sizeofdata(::google::protobuf::uint32 value) {
  
  sizeofdata_ = value;
  // @@protoc_insertion_point(field_set:Nmea2k.CZoneRawConfig.SizeOfData)
}

// -------------------------------------------------------------------

// SwitchPositiveNegtive

// uint32 ChannelAddress = 1;
inline void SwitchPositiveNegtive::clear_channeladdress() {
  channeladdress_ = 0u;
}
inline ::google::protobuf::uint32 SwitchPositiveNegtive::channeladdress() const {
  // @@protoc_insertion_point(field_get:Nmea2k.SwitchPositiveNegtive.ChannelAddress)
  return channeladdress_;
}
inline void SwitchPositiveNegtive::set_channeladdress(::google::protobuf::uint32 value) {
  
  channeladdress_ = value;
  // @@protoc_insertion_point(field_set:Nmea2k.SwitchPositiveNegtive.ChannelAddress)
}

// uint32 Channel = 2;
inline void SwitchPositiveNegtive::clear_channel() {
  channel_ = 0u;
}
inline ::google::protobuf::uint32 SwitchPositiveNegtive::channel() const {
  // @@protoc_insertion_point(field_get:Nmea2k.SwitchPositiveNegtive.Channel)
  return channel_;
}
inline void SwitchPositiveNegtive::set_channel(::google::protobuf::uint32 value) {
  
  channel_ = value;
  // @@protoc_insertion_point(field_set:Nmea2k.SwitchPositiveNegtive.Channel)
}

// .Nmea2k.SwitchPositiveNegtive.eSwitchPositiveNegtiveMode Mode = 3;
inline void SwitchPositiveNegtive::clear_mode() {
  mode_ = 0;
}
inline ::Nmea2k::SwitchPositiveNegtive_eSwitchPositiveNegtiveMode SwitchPositiveNegtive::mode() const {
  // @@protoc_insertion_point(field_get:Nmea2k.SwitchPositiveNegtive.Mode)
  return static_cast< ::Nmea2k::SwitchPositiveNegtive_eSwitchPositiveNegtiveMode >(mode_);
}
inline void SwitchPositiveNegtive::set_mode(::Nmea2k::SwitchPositiveNegtive_eSwitchPositiveNegtiveMode value) {
  
  mode_ = value;
  // @@protoc_insertion_point(field_set:Nmea2k.SwitchPositiveNegtive.Mode)
}

// uint32 BinaryStatusIndex = 4;
inline void SwitchPositiveNegtive::clear_binarystatusindex() {
  binarystatusindex_ = 0u;
}
inline ::google::protobuf::uint32 SwitchPositiveNegtive::binarystatusindex() const {
  // @@protoc_insertion_point(field_get:Nmea2k.SwitchPositiveNegtive.BinaryStatusIndex)
  return binarystatusindex_;
}
inline void SwitchPositiveNegtive::set_binarystatusindex(::google::protobuf::uint32 value) {
  
  binarystatusindex_ = value;
  // @@protoc_insertion_point(field_set:Nmea2k.SwitchPositiveNegtive.BinaryStatusIndex)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// RTCoreMapEntry

// .Nmea2k.ConfigRequest.eConfigType DisplayType = 1;
inline void RTCoreMapEntry::clear_displaytype() {
  displaytype_ = 0;
}
inline ::Nmea2k::ConfigRequest_eConfigType RTCoreMapEntry::displaytype() const {
  // @@protoc_insertion_point(field_get:Nmea2k.RTCoreMapEntry.DisplayType)
  return static_cast< ::Nmea2k::ConfigRequest_eConfigType >(displaytype_);
}
inline void RTCoreMapEntry::set_displaytype(::Nmea2k::ConfigRequest_eConfigType value) {
  
  displaytype_ = value;
  // @@protoc_insertion_point(field_set:Nmea2k.RTCoreMapEntry.DisplayType)
}

// .Nmea2k.CircuitLoad CircuitLoads = 2;
inline bool RTCoreMapEntry::has_circuitloads() const {
  return this != internal_default_instance() && circuitloads_ != NULL;
}
inline void RTCoreMapEntry::clear_circuitloads() {
  if (GetArenaNoVirtual() == NULL && circuitloads_ != NULL) {
    delete circuitloads_;
  }
  circuitloads_ = NULL;
}
inline const ::Nmea2k::CircuitLoad& RTCoreMapEntry::_internal_circuitloads() const {
  return *circuitloads_;
}
inline const ::Nmea2k::CircuitLoad& RTCoreMapEntry::circuitloads() const {
  const ::Nmea2k::CircuitLoad* p = circuitloads_;
  // @@protoc_insertion_point(field_get:Nmea2k.RTCoreMapEntry.CircuitLoads)
  return p != NULL ? *p : *reinterpret_cast<const ::Nmea2k::CircuitLoad*>(
      &::Nmea2k::_CircuitLoad_default_instance_);
}
inline ::Nmea2k::CircuitLoad* RTCoreMapEntry::release_circuitloads() {
  // @@protoc_insertion_point(field_release:Nmea2k.RTCoreMapEntry.CircuitLoads)
  
  ::Nmea2k::CircuitLoad* temp = circuitloads_;
  circuitloads_ = NULL;
  return temp;
}
inline ::Nmea2k::CircuitLoad* RTCoreMapEntry::mutable_circuitloads() {
  
  if (circuitloads_ == NULL) {
    auto* p = CreateMaybeMessage<::Nmea2k::CircuitLoad>(GetArenaNoVirtual());
    circuitloads_ = p;
  }
  // @@protoc_insertion_point(field_mutable:Nmea2k.RTCoreMapEntry.CircuitLoads)
  return circuitloads_;
}
inline void RTCoreMapEntry::set_allocated_circuitloads(::Nmea2k::CircuitLoad* circuitloads) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete circuitloads_;
  }
  if (circuitloads) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      circuitloads = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, circuitloads, submessage_arena);
    }
    
  } else {
    
  }
  circuitloads_ = circuitloads;
  // @@protoc_insertion_point(field_set_allocated:Nmea2k.RTCoreMapEntry.CircuitLoads)
}

// .Nmea2k.MeteringDevice DCMeters = 3;
inline bool RTCoreMapEntry::has_dcmeters() const {
  return this != internal_default_instance() && dcmeters_ != NULL;
}
inline void RTCoreMapEntry::clear_dcmeters() {
  if (GetArenaNoVirtual() == NULL && dcmeters_ != NULL) {
    delete dcmeters_;
  }
  dcmeters_ = NULL;
}
inline const ::Nmea2k::MeteringDevice& RTCoreMapEntry::_internal_dcmeters() const {
  return *dcmeters_;
}
inline const ::Nmea2k::MeteringDevice& RTCoreMapEntry::dcmeters() const {
  const ::Nmea2k::MeteringDevice* p = dcmeters_;
  // @@protoc_insertion_point(field_get:Nmea2k.RTCoreMapEntry.DCMeters)
  return p != NULL ? *p : *reinterpret_cast<const ::Nmea2k::MeteringDevice*>(
      &::Nmea2k::_MeteringDevice_default_instance_);
}
inline ::Nmea2k::MeteringDevice* RTCoreMapEntry::release_dcmeters() {
  // @@protoc_insertion_point(field_release:Nmea2k.RTCoreMapEntry.DCMeters)
  
  ::Nmea2k::MeteringDevice* temp = dcmeters_;
  dcmeters_ = NULL;
  return temp;
}
inline ::Nmea2k::MeteringDevice* RTCoreMapEntry::mutable_dcmeters() {
  
  if (dcmeters_ == NULL) {
    auto* p = CreateMaybeMessage<::Nmea2k::MeteringDevice>(GetArenaNoVirtual());
    dcmeters_ = p;
  }
  // @@protoc_insertion_point(field_mutable:Nmea2k.RTCoreMapEntry.DCMeters)
  return dcmeters_;
}
inline void RTCoreMapEntry::set_allocated_dcmeters(::Nmea2k::MeteringDevice* dcmeters) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete dcmeters_;
  }
  if (dcmeters) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      dcmeters = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, dcmeters, submessage_arena);
    }
    
  } else {
    
  }
  dcmeters_ = dcmeters;
  // @@protoc_insertion_point(field_set_allocated:Nmea2k.RTCoreMapEntry.DCMeters)
}

// .Nmea2k.MonitoringDevice MonitoringDevice = 4;
inline bool RTCoreMapEntry::has_monitoringdevice() const {
  return this != internal_default_instance() && monitoringdevice_ != NULL;
}
inline void RTCoreMapEntry::clear_monitoringdevice() {
  if (GetArenaNoVirtual() == NULL && monitoringdevice_ != NULL) {
    delete monitoringdevice_;
  }
  monitoringdevice_ = NULL;
}
inline const ::Nmea2k::MonitoringDevice& RTCoreMapEntry::_internal_monitoringdevice() const {
  return *monitoringdevice_;
}
inline const ::Nmea2k::MonitoringDevice& RTCoreMapEntry::monitoringdevice() const {
  const ::Nmea2k::MonitoringDevice* p = monitoringdevice_;
  // @@protoc_insertion_point(field_get:Nmea2k.RTCoreMapEntry.MonitoringDevice)
  return p != NULL ? *p : *reinterpret_cast<const ::Nmea2k::MonitoringDevice*>(
      &::Nmea2k::_MonitoringDevice_default_instance_);
}
inline ::Nmea2k::MonitoringDevice* RTCoreMapEntry::release_monitoringdevice() {
  // @@protoc_insertion_point(field_release:Nmea2k.RTCoreMapEntry.MonitoringDevice)
  
  ::Nmea2k::MonitoringDevice* temp = monitoringdevice_;
  monitoringdevice_ = NULL;
  return temp;
}
inline ::Nmea2k::MonitoringDevice* RTCoreMapEntry::mutable_monitoringdevice() {
  
  if (monitoringdevice_ == NULL) {
    auto* p = CreateMaybeMessage<::Nmea2k::MonitoringDevice>(GetArenaNoVirtual());
    monitoringdevice_ = p;
  }
  // @@protoc_insertion_point(field_mutable:Nmea2k.RTCoreMapEntry.MonitoringDevice)
  return monitoringdevice_;
}
inline void RTCoreMapEntry::set_allocated_monitoringdevice(::Nmea2k::MonitoringDevice* monitoringdevice) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete monitoringdevice_;
  }
  if (monitoringdevice) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      monitoringdevice = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, monitoringdevice, submessage_arena);
    }
    
  } else {
    
  }
  monitoringdevice_ = monitoringdevice;
  // @@protoc_insertion_point(field_set_allocated:Nmea2k.RTCoreMapEntry.MonitoringDevice)
}

// .Nmea2k.SwitchPositiveNegtive SwitchPositiveNegtive = 5;
inline bool RTCoreMapEntry::has_switchpositivenegtive() const {
  return this != internal_default_instance() && switchpositivenegtive_ != NULL;
}
inline void RTCoreMapEntry::clear_switchpositivenegtive() {
  if (GetArenaNoVirtual() == NULL && switchpositivenegtive_ != NULL) {
    delete switchpositivenegtive_;
  }
  switchpositivenegtive_ = NULL;
}
inline const ::Nmea2k::SwitchPositiveNegtive& RTCoreMapEntry::_internal_switchpositivenegtive() const {
  return *switchpositivenegtive_;
}
inline const ::Nmea2k::SwitchPositiveNegtive& RTCoreMapEntry::switchpositivenegtive() const {
  const ::Nmea2k::SwitchPositiveNegtive* p = switchpositivenegtive_;
  // @@protoc_insertion_point(field_get:Nmea2k.RTCoreMapEntry.SwitchPositiveNegtive)
  return p != NULL ? *p : *reinterpret_cast<const ::Nmea2k::SwitchPositiveNegtive*>(
      &::Nmea2k::_SwitchPositiveNegtive_default_instance_);
}
inline ::Nmea2k::SwitchPositiveNegtive* RTCoreMapEntry::release_switchpositivenegtive() {
  // @@protoc_insertion_point(field_release:Nmea2k.RTCoreMapEntry.SwitchPositiveNegtive)
  
  ::Nmea2k::SwitchPositiveNegtive* temp = switchpositivenegtive_;
  switchpositivenegtive_ = NULL;
  return temp;
}
inline ::Nmea2k::SwitchPositiveNegtive* RTCoreMapEntry::mutable_switchpositivenegtive() {
  
  if (switchpositivenegtive_ == NULL) {
    auto* p = CreateMaybeMessage<::Nmea2k::SwitchPositiveNegtive>(GetArenaNoVirtual());
    switchpositivenegtive_ = p;
  }
  // @@protoc_insertion_point(field_mutable:Nmea2k.RTCoreMapEntry.SwitchPositiveNegtive)
  return switchpositivenegtive_;
}
inline void RTCoreMapEntry::set_allocated_switchpositivenegtive(::Nmea2k::SwitchPositiveNegtive* switchpositivenegtive) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete switchpositivenegtive_;
  }
  if (switchpositivenegtive) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      switchpositivenegtive = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, switchpositivenegtive, submessage_arena);
    }
    
  } else {
    
  }
  switchpositivenegtive_ = switchpositivenegtive;
  // @@protoc_insertion_point(field_set_allocated:Nmea2k.RTCoreMapEntry.SwitchPositiveNegtive)
}

// map<string, .Nmea2k.Alarm> Alarms = 6;
inline int RTCoreMapEntry::alarms_size() const {
  return alarms_.size();
}
inline void RTCoreMapEntry::clear_alarms() {
  alarms_.Clear();
}
inline const ::google::protobuf::Map< ::std::string, ::Nmea2k::Alarm >&
RTCoreMapEntry::alarms() const {
  // @@protoc_insertion_point(field_map:Nmea2k.RTCoreMapEntry.Alarms)
  return alarms_.GetMap();
}
inline ::google::protobuf::Map< ::std::string, ::Nmea2k::Alarm >*
RTCoreMapEntry::mutable_alarms() {
  // @@protoc_insertion_point(field_mutable_map:Nmea2k.RTCoreMapEntry.Alarms)
  return alarms_.MutableMap();
}

// repeated .Nmea2k.CircuitDevice Circuits = 7;
inline int RTCoreMapEntry::circuits_size() const {
  return circuits_.size();
}
inline void RTCoreMapEntry::clear_circuits() {
  circuits_.Clear();
}
inline ::Nmea2k::CircuitDevice* RTCoreMapEntry::mutable_circuits(int index) {
  // @@protoc_insertion_point(field_mutable:Nmea2k.RTCoreMapEntry.Circuits)
  return circuits_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::Nmea2k::CircuitDevice >*
RTCoreMapEntry::mutable_circuits() {
  // @@protoc_insertion_point(field_mutable_list:Nmea2k.RTCoreMapEntry.Circuits)
  return &circuits_;
}
inline const ::Nmea2k::CircuitDevice& RTCoreMapEntry::circuits(int index) const {
  // @@protoc_insertion_point(field_get:Nmea2k.RTCoreMapEntry.Circuits)
  return circuits_.Get(index);
}
inline ::Nmea2k::CircuitDevice* RTCoreMapEntry::add_circuits() {
  // @@protoc_insertion_point(field_add:Nmea2k.RTCoreMapEntry.Circuits)
  return circuits_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Nmea2k::CircuitDevice >&
RTCoreMapEntry::circuits() const {
  // @@protoc_insertion_point(field_list:Nmea2k.RTCoreMapEntry.Circuits)
  return circuits_;
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// RTCoreLogicalIdToDeviceConfig

// map<uint32, .Nmea2k.RTCoreMapEntry> CircuitLoads = 1;
inline int RTCoreLogicalIdToDeviceConfig::circuitloads_size() const {
  return circuitloads_.size();
}
inline void RTCoreLogicalIdToDeviceConfig::clear_circuitloads() {
  circuitloads_.Clear();
}
inline const ::google::protobuf::Map< ::google::protobuf::uint32, ::Nmea2k::RTCoreMapEntry >&
RTCoreLogicalIdToDeviceConfig::circuitloads() const {
  // @@protoc_insertion_point(field_map:Nmea2k.RTCoreLogicalIdToDeviceConfig.CircuitLoads)
  return circuitloads_.GetMap();
}
inline ::google::protobuf::Map< ::google::protobuf::uint32, ::Nmea2k::RTCoreMapEntry >*
RTCoreLogicalIdToDeviceConfig::mutable_circuitloads() {
  // @@protoc_insertion_point(field_mutable_map:Nmea2k.RTCoreLogicalIdToDeviceConfig.CircuitLoads)
  return circuitloads_.MutableMap();
}

// map<uint32, .Nmea2k.RTCoreMapEntry> DCMeters = 2;
inline int RTCoreLogicalIdToDeviceConfig::dcmeters_size() const {
  return dcmeters_.size();
}
inline void RTCoreLogicalIdToDeviceConfig::clear_dcmeters() {
  dcmeters_.Clear();
}
inline const ::google::protobuf::Map< ::google::protobuf::uint32, ::Nmea2k::RTCoreMapEntry >&
RTCoreLogicalIdToDeviceConfig::dcmeters() const {
  // @@protoc_insertion_point(field_map:Nmea2k.RTCoreLogicalIdToDeviceConfig.DCMeters)
  return dcmeters_.GetMap();
}
inline ::google::protobuf::Map< ::google::protobuf::uint32, ::Nmea2k::RTCoreMapEntry >*
RTCoreLogicalIdToDeviceConfig::mutable_dcmeters() {
  // @@protoc_insertion_point(field_mutable_map:Nmea2k.RTCoreLogicalIdToDeviceConfig.DCMeters)
  return dcmeters_.MutableMap();
}

// map<uint32, .Nmea2k.RTCoreMapEntry> MonitoringDevice = 3;
inline int RTCoreLogicalIdToDeviceConfig::monitoringdevice_size() const {
  return monitoringdevice_.size();
}
inline void RTCoreLogicalIdToDeviceConfig::clear_monitoringdevice() {
  monitoringdevice_.Clear();
}
inline const ::google::protobuf::Map< ::google::protobuf::uint32, ::Nmea2k::RTCoreMapEntry >&
RTCoreLogicalIdToDeviceConfig::monitoringdevice() const {
  // @@protoc_insertion_point(field_map:Nmea2k.RTCoreLogicalIdToDeviceConfig.MonitoringDevice)
  return monitoringdevice_.GetMap();
}
inline ::google::protobuf::Map< ::google::protobuf::uint32, ::Nmea2k::RTCoreMapEntry >*
RTCoreLogicalIdToDeviceConfig::mutable_monitoringdevice() {
  // @@protoc_insertion_point(field_mutable_map:Nmea2k.RTCoreLogicalIdToDeviceConfig.MonitoringDevice)
  return monitoringdevice_.MutableMap();
}

// map<uint32, .Nmea2k.RTCoreMapEntry> SwitchPositiveNegtive = 4;
inline int RTCoreLogicalIdToDeviceConfig::switchpositivenegtive_size() const {
  return switchpositivenegtive_.size();
}
inline void RTCoreLogicalIdToDeviceConfig::clear_switchpositivenegtive() {
  switchpositivenegtive_.Clear();
}
inline const ::google::protobuf::Map< ::google::protobuf::uint32, ::Nmea2k::RTCoreMapEntry >&
RTCoreLogicalIdToDeviceConfig::switchpositivenegtive() const {
  // @@protoc_insertion_point(field_map:Nmea2k.RTCoreLogicalIdToDeviceConfig.SwitchPositiveNegtive)
  return switchpositivenegtive_.GetMap();
}
inline ::google::protobuf::Map< ::google::protobuf::uint32, ::Nmea2k::RTCoreMapEntry >*
RTCoreLogicalIdToDeviceConfig::mutable_switchpositivenegtive() {
  // @@protoc_insertion_point(field_mutable_map:Nmea2k.RTCoreLogicalIdToDeviceConfig.SwitchPositiveNegtive)
  return switchpositivenegtive_.MutableMap();
}

// -------------------------------------------------------------------

// ConfigResult

// repeated .Nmea2k.MeteringDevice DCs = 1;
inline int ConfigResult::dcs_size() const {
  return dcs_.size();
}
inline void ConfigResult::clear_dcs() {
  dcs_.Clear();
}
inline ::Nmea2k::MeteringDevice* ConfigResult::mutable_dcs(int index) {
  // @@protoc_insertion_point(field_mutable:Nmea2k.ConfigResult.DCs)
  return dcs_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::Nmea2k::MeteringDevice >*
ConfigResult::mutable_dcs() {
  // @@protoc_insertion_point(field_mutable_list:Nmea2k.ConfigResult.DCs)
  return &dcs_;
}
inline const ::Nmea2k::MeteringDevice& ConfigResult::dcs(int index) const {
  // @@protoc_insertion_point(field_get:Nmea2k.ConfigResult.DCs)
  return dcs_.Get(index);
}
inline ::Nmea2k::MeteringDevice* ConfigResult::add_dcs() {
  // @@protoc_insertion_point(field_add:Nmea2k.ConfigResult.DCs)
  return dcs_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Nmea2k::MeteringDevice >&
ConfigResult::dcs() const {
  // @@protoc_insertion_point(field_list:Nmea2k.ConfigResult.DCs)
  return dcs_;
}

// repeated .Nmea2k.MeteringDevice ACs = 2;
inline int ConfigResult::acs_size() const {
  return acs_.size();
}
inline void ConfigResult::clear_acs() {
  acs_.Clear();
}
inline ::Nmea2k::MeteringDevice* ConfigResult::mutable_acs(int index) {
  // @@protoc_insertion_point(field_mutable:Nmea2k.ConfigResult.ACs)
  return acs_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::Nmea2k::MeteringDevice >*
ConfigResult::mutable_acs() {
  // @@protoc_insertion_point(field_mutable_list:Nmea2k.ConfigResult.ACs)
  return &acs_;
}
inline const ::Nmea2k::MeteringDevice& ConfigResult::acs(int index) const {
  // @@protoc_insertion_point(field_get:Nmea2k.ConfigResult.ACs)
  return acs_.Get(index);
}
inline ::Nmea2k::MeteringDevice* ConfigResult::add_acs() {
  // @@protoc_insertion_point(field_add:Nmea2k.ConfigResult.ACs)
  return acs_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Nmea2k::MeteringDevice >&
ConfigResult::acs() const {
  // @@protoc_insertion_point(field_list:Nmea2k.ConfigResult.ACs)
  return acs_;
}

// repeated .Nmea2k.MonitoringDevice Pressures = 3;
inline int ConfigResult::pressures_size() const {
  return pressures_.size();
}
inline void ConfigResult::clear_pressures() {
  pressures_.Clear();
}
inline ::Nmea2k::MonitoringDevice* ConfigResult::mutable_pressures(int index) {
  // @@protoc_insertion_point(field_mutable:Nmea2k.ConfigResult.Pressures)
  return pressures_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::Nmea2k::MonitoringDevice >*
ConfigResult::mutable_pressures() {
  // @@protoc_insertion_point(field_mutable_list:Nmea2k.ConfigResult.Pressures)
  return &pressures_;
}
inline const ::Nmea2k::MonitoringDevice& ConfigResult::pressures(int index) const {
  // @@protoc_insertion_point(field_get:Nmea2k.ConfigResult.Pressures)
  return pressures_.Get(index);
}
inline ::Nmea2k::MonitoringDevice* ConfigResult::add_pressures() {
  // @@protoc_insertion_point(field_add:Nmea2k.ConfigResult.Pressures)
  return pressures_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Nmea2k::MonitoringDevice >&
ConfigResult::pressures() const {
  // @@protoc_insertion_point(field_list:Nmea2k.ConfigResult.Pressures)
  return pressures_;
}

// repeated .Nmea2k.MonitoringDevice Tanks = 4;
inline int ConfigResult::tanks_size() const {
  return tanks_.size();
}
inline void ConfigResult::clear_tanks() {
  tanks_.Clear();
}
inline ::Nmea2k::MonitoringDevice* ConfigResult::mutable_tanks(int index) {
  // @@protoc_insertion_point(field_mutable:Nmea2k.ConfigResult.Tanks)
  return tanks_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::Nmea2k::MonitoringDevice >*
ConfigResult::mutable_tanks() {
  // @@protoc_insertion_point(field_mutable_list:Nmea2k.ConfigResult.Tanks)
  return &tanks_;
}
inline const ::Nmea2k::MonitoringDevice& ConfigResult::tanks(int index) const {
  // @@protoc_insertion_point(field_get:Nmea2k.ConfigResult.Tanks)
  return tanks_.Get(index);
}
inline ::Nmea2k::MonitoringDevice* ConfigResult::add_tanks() {
  // @@protoc_insertion_point(field_add:Nmea2k.ConfigResult.Tanks)
  return tanks_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Nmea2k::MonitoringDevice >&
ConfigResult::tanks() const {
  // @@protoc_insertion_point(field_list:Nmea2k.ConfigResult.Tanks)
  return tanks_;
}

// repeated .Nmea2k.MonitoringDevice Temperatures = 5;
inline int ConfigResult::temperatures_size() const {
  return temperatures_.size();
}
inline void ConfigResult::clear_temperatures() {
  temperatures_.Clear();
}
inline ::Nmea2k::MonitoringDevice* ConfigResult::mutable_temperatures(int index) {
  // @@protoc_insertion_point(field_mutable:Nmea2k.ConfigResult.Temperatures)
  return temperatures_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::Nmea2k::MonitoringDevice >*
ConfigResult::mutable_temperatures() {
  // @@protoc_insertion_point(field_mutable_list:Nmea2k.ConfigResult.Temperatures)
  return &temperatures_;
}
inline const ::Nmea2k::MonitoringDevice& ConfigResult::temperatures(int index) const {
  // @@protoc_insertion_point(field_get:Nmea2k.ConfigResult.Temperatures)
  return temperatures_.Get(index);
}
inline ::Nmea2k::MonitoringDevice* ConfigResult::add_temperatures() {
  // @@protoc_insertion_point(field_add:Nmea2k.ConfigResult.Temperatures)
  return temperatures_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Nmea2k::MonitoringDevice >&
ConfigResult::temperatures() const {
  // @@protoc_insertion_point(field_list:Nmea2k.ConfigResult.Temperatures)
  return temperatures_;
}

// repeated .Nmea2k.ACMainDevice ACMains = 6;
inline int ConfigResult::acmains_size() const {
  return acmains_.size();
}
inline void ConfigResult::clear_acmains() {
  acmains_.Clear();
}
inline ::Nmea2k::ACMainDevice* ConfigResult::mutable_acmains(int index) {
  // @@protoc_insertion_point(field_mutable:Nmea2k.ConfigResult.ACMains)
  return acmains_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::Nmea2k::ACMainDevice >*
ConfigResult::mutable_acmains() {
  // @@protoc_insertion_point(field_mutable_list:Nmea2k.ConfigResult.ACMains)
  return &acmains_;
}
inline const ::Nmea2k::ACMainDevice& ConfigResult::acmains(int index) const {
  // @@protoc_insertion_point(field_get:Nmea2k.ConfigResult.ACMains)
  return acmains_.Get(index);
}
inline ::Nmea2k::ACMainDevice* ConfigResult::add_acmains() {
  // @@protoc_insertion_point(field_add:Nmea2k.ConfigResult.ACMains)
  return acmains_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Nmea2k::ACMainDevice >&
ConfigResult::acmains() const {
  // @@protoc_insertion_point(field_list:Nmea2k.ConfigResult.ACMains)
  return acmains_;
}

// repeated .Nmea2k.InverterChargerDevice InverterChargers = 7;
inline int ConfigResult::inverterchargers_size() const {
  return inverterchargers_.size();
}
inline void ConfigResult::clear_inverterchargers() {
  inverterchargers_.Clear();
}
inline ::Nmea2k::InverterChargerDevice* ConfigResult::mutable_inverterchargers(int index) {
  // @@protoc_insertion_point(field_mutable:Nmea2k.ConfigResult.InverterChargers)
  return inverterchargers_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::Nmea2k::InverterChargerDevice >*
ConfigResult::mutable_inverterchargers() {
  // @@protoc_insertion_point(field_mutable_list:Nmea2k.ConfigResult.InverterChargers)
  return &inverterchargers_;
}
inline const ::Nmea2k::InverterChargerDevice& ConfigResult::inverterchargers(int index) const {
  // @@protoc_insertion_point(field_get:Nmea2k.ConfigResult.InverterChargers)
  return inverterchargers_.Get(index);
}
inline ::Nmea2k::InverterChargerDevice* ConfigResult::add_inverterchargers() {
  // @@protoc_insertion_point(field_add:Nmea2k.ConfigResult.InverterChargers)
  return inverterchargers_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Nmea2k::InverterChargerDevice >&
ConfigResult::inverterchargers() const {
  // @@protoc_insertion_point(field_list:Nmea2k.ConfigResult.InverterChargers)
  return inverterchargers_;
}

// repeated .Nmea2k.HVACDevice HVACs = 8;
inline int ConfigResult::hvacs_size() const {
  return hvacs_.size();
}
inline void ConfigResult::clear_hvacs() {
  hvacs_.Clear();
}
inline ::Nmea2k::HVACDevice* ConfigResult::mutable_hvacs(int index) {
  // @@protoc_insertion_point(field_mutable:Nmea2k.ConfigResult.HVACs)
  return hvacs_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::Nmea2k::HVACDevice >*
ConfigResult::mutable_hvacs() {
  // @@protoc_insertion_point(field_mutable_list:Nmea2k.ConfigResult.HVACs)
  return &hvacs_;
}
inline const ::Nmea2k::HVACDevice& ConfigResult::hvacs(int index) const {
  // @@protoc_insertion_point(field_get:Nmea2k.ConfigResult.HVACs)
  return hvacs_.Get(index);
}
inline ::Nmea2k::HVACDevice* ConfigResult::add_hvacs() {
  // @@protoc_insertion_point(field_add:Nmea2k.ConfigResult.HVACs)
  return hvacs_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Nmea2k::HVACDevice >&
ConfigResult::hvacs() const {
  // @@protoc_insertion_point(field_list:Nmea2k.ConfigResult.HVACs)
  return hvacs_;
}

// repeated .Nmea2k.ZipdeeAwningDevice ZipdeeAwnings = 9;
inline int ConfigResult::zipdeeawnings_size() const {
  return zipdeeawnings_.size();
}
inline void ConfigResult::clear_zipdeeawnings() {
  zipdeeawnings_.Clear();
}
inline ::Nmea2k::ZipdeeAwningDevice* ConfigResult::mutable_zipdeeawnings(int index) {
  // @@protoc_insertion_point(field_mutable:Nmea2k.ConfigResult.ZipdeeAwnings)
  return zipdeeawnings_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::Nmea2k::ZipdeeAwningDevice >*
ConfigResult::mutable_zipdeeawnings() {
  // @@protoc_insertion_point(field_mutable_list:Nmea2k.ConfigResult.ZipdeeAwnings)
  return &zipdeeawnings_;
}
inline const ::Nmea2k::ZipdeeAwningDevice& ConfigResult::zipdeeawnings(int index) const {
  // @@protoc_insertion_point(field_get:Nmea2k.ConfigResult.ZipdeeAwnings)
  return zipdeeawnings_.Get(index);
}
inline ::Nmea2k::ZipdeeAwningDevice* ConfigResult::add_zipdeeawnings() {
  // @@protoc_insertion_point(field_add:Nmea2k.ConfigResult.ZipdeeAwnings)
  return zipdeeawnings_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Nmea2k::ZipdeeAwningDevice >&
ConfigResult::zipdeeawnings() const {
  // @@protoc_insertion_point(field_list:Nmea2k.ConfigResult.ZipdeeAwnings)
  return zipdeeawnings_;
}

// repeated .Nmea2k.ThirdPartyGeneratorDevice ThirdPartyGenerators = 10;
inline int ConfigResult::thirdpartygenerators_size() const {
  return thirdpartygenerators_.size();
}
inline void ConfigResult::clear_thirdpartygenerators() {
  thirdpartygenerators_.Clear();
}
inline ::Nmea2k::ThirdPartyGeneratorDevice* ConfigResult::mutable_thirdpartygenerators(int index) {
  // @@protoc_insertion_point(field_mutable:Nmea2k.ConfigResult.ThirdPartyGenerators)
  return thirdpartygenerators_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::Nmea2k::ThirdPartyGeneratorDevice >*
ConfigResult::mutable_thirdpartygenerators() {
  // @@protoc_insertion_point(field_mutable_list:Nmea2k.ConfigResult.ThirdPartyGenerators)
  return &thirdpartygenerators_;
}
inline const ::Nmea2k::ThirdPartyGeneratorDevice& ConfigResult::thirdpartygenerators(int index) const {
  // @@protoc_insertion_point(field_get:Nmea2k.ConfigResult.ThirdPartyGenerators)
  return thirdpartygenerators_.Get(index);
}
inline ::Nmea2k::ThirdPartyGeneratorDevice* ConfigResult::add_thirdpartygenerators() {
  // @@protoc_insertion_point(field_add:Nmea2k.ConfigResult.ThirdPartyGenerators)
  return thirdpartygenerators_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Nmea2k::ThirdPartyGeneratorDevice >&
ConfigResult::thirdpartygenerators() const {
  // @@protoc_insertion_point(field_list:Nmea2k.ConfigResult.ThirdPartyGenerators)
  return thirdpartygenerators_;
}

// repeated .Nmea2k.TyrePressureDevice TyrePressures = 11;
inline int ConfigResult::tyrepressures_size() const {
  return tyrepressures_.size();
}
inline void ConfigResult::clear_tyrepressures() {
  tyrepressures_.Clear();
}
inline ::Nmea2k::TyrePressureDevice* ConfigResult::mutable_tyrepressures(int index) {
  // @@protoc_insertion_point(field_mutable:Nmea2k.ConfigResult.TyrePressures)
  return tyrepressures_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::Nmea2k::TyrePressureDevice >*
ConfigResult::mutable_tyrepressures() {
  // @@protoc_insertion_point(field_mutable_list:Nmea2k.ConfigResult.TyrePressures)
  return &tyrepressures_;
}
inline const ::Nmea2k::TyrePressureDevice& ConfigResult::tyrepressures(int index) const {
  // @@protoc_insertion_point(field_get:Nmea2k.ConfigResult.TyrePressures)
  return tyrepressures_.Get(index);
}
inline ::Nmea2k::TyrePressureDevice* ConfigResult::add_tyrepressures() {
  // @@protoc_insertion_point(field_add:Nmea2k.ConfigResult.TyrePressures)
  return tyrepressures_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Nmea2k::TyrePressureDevice >&
ConfigResult::tyrepressures() const {
  // @@protoc_insertion_point(field_list:Nmea2k.ConfigResult.TyrePressures)
  return tyrepressures_;
}

// repeated .Nmea2k.AudioStereoDevice AudioStereos = 12;
inline int ConfigResult::audiostereos_size() const {
  return audiostereos_.size();
}
inline void ConfigResult::clear_audiostereos() {
  audiostereos_.Clear();
}
inline ::Nmea2k::AudioStereoDevice* ConfigResult::mutable_audiostereos(int index) {
  // @@protoc_insertion_point(field_mutable:Nmea2k.ConfigResult.AudioStereos)
  return audiostereos_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::Nmea2k::AudioStereoDevice >*
ConfigResult::mutable_audiostereos() {
  // @@protoc_insertion_point(field_mutable_list:Nmea2k.ConfigResult.AudioStereos)
  return &audiostereos_;
}
inline const ::Nmea2k::AudioStereoDevice& ConfigResult::audiostereos(int index) const {
  // @@protoc_insertion_point(field_get:Nmea2k.ConfigResult.AudioStereos)
  return audiostereos_.Get(index);
}
inline ::Nmea2k::AudioStereoDevice* ConfigResult::add_audiostereos() {
  // @@protoc_insertion_point(field_add:Nmea2k.ConfigResult.AudioStereos)
  return audiostereos_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Nmea2k::AudioStereoDevice >&
ConfigResult::audiostereos() const {
  // @@protoc_insertion_point(field_list:Nmea2k.ConfigResult.AudioStereos)
  return audiostereos_;
}

// repeated .Nmea2k.ShoreFuseDevice ShoreFuses = 13;
inline int ConfigResult::shorefuses_size() const {
  return shorefuses_.size();
}
inline void ConfigResult::clear_shorefuses() {
  shorefuses_.Clear();
}
inline ::Nmea2k::ShoreFuseDevice* ConfigResult::mutable_shorefuses(int index) {
  // @@protoc_insertion_point(field_mutable:Nmea2k.ConfigResult.ShoreFuses)
  return shorefuses_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::Nmea2k::ShoreFuseDevice >*
ConfigResult::mutable_shorefuses() {
  // @@protoc_insertion_point(field_mutable_list:Nmea2k.ConfigResult.ShoreFuses)
  return &shorefuses_;
}
inline const ::Nmea2k::ShoreFuseDevice& ConfigResult::shorefuses(int index) const {
  // @@protoc_insertion_point(field_get:Nmea2k.ConfigResult.ShoreFuses)
  return shorefuses_.Get(index);
}
inline ::Nmea2k::ShoreFuseDevice* ConfigResult::add_shorefuses() {
  // @@protoc_insertion_point(field_add:Nmea2k.ConfigResult.ShoreFuses)
  return shorefuses_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Nmea2k::ShoreFuseDevice >&
ConfigResult::shorefuses() const {
  // @@protoc_insertion_point(field_list:Nmea2k.ConfigResult.ShoreFuses)
  return shorefuses_;
}

// repeated .Nmea2k.CircuitDevice Circuits = 14;
inline int ConfigResult::circuits_size() const {
  return circuits_.size();
}
inline void ConfigResult::clear_circuits() {
  circuits_.Clear();
}
inline ::Nmea2k::CircuitDevice* ConfigResult::mutable_circuits(int index) {
  // @@protoc_insertion_point(field_mutable:Nmea2k.ConfigResult.Circuits)
  return circuits_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::Nmea2k::CircuitDevice >*
ConfigResult::mutable_circuits() {
  // @@protoc_insertion_point(field_mutable_list:Nmea2k.ConfigResult.Circuits)
  return &circuits_;
}
inline const ::Nmea2k::CircuitDevice& ConfigResult::circuits(int index) const {
  // @@protoc_insertion_point(field_get:Nmea2k.ConfigResult.Circuits)
  return circuits_.Get(index);
}
inline ::Nmea2k::CircuitDevice* ConfigResult::add_circuits() {
  // @@protoc_insertion_point(field_add:Nmea2k.ConfigResult.Circuits)
  return circuits_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Nmea2k::CircuitDevice >&
ConfigResult::circuits() const {
  // @@protoc_insertion_point(field_list:Nmea2k.ConfigResult.Circuits)
  return circuits_;
}

// repeated .Nmea2k.CircuitDevice Modes = 15;
inline int ConfigResult::modes_size() const {
  return modes_.size();
}
inline void ConfigResult::clear_modes() {
  modes_.Clear();
}
inline ::Nmea2k::CircuitDevice* ConfigResult::mutable_modes(int index) {
  // @@protoc_insertion_point(field_mutable:Nmea2k.ConfigResult.Modes)
  return modes_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::Nmea2k::CircuitDevice >*
ConfigResult::mutable_modes() {
  // @@protoc_insertion_point(field_mutable_list:Nmea2k.ConfigResult.Modes)
  return &modes_;
}
inline const ::Nmea2k::CircuitDevice& ConfigResult::modes(int index) const {
  // @@protoc_insertion_point(field_get:Nmea2k.ConfigResult.Modes)
  return modes_.Get(index);
}
inline ::Nmea2k::CircuitDevice* ConfigResult::add_modes() {
  // @@protoc_insertion_point(field_add:Nmea2k.ConfigResult.Modes)
  return modes_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Nmea2k::CircuitDevice >&
ConfigResult::modes() const {
  // @@protoc_insertion_point(field_list:Nmea2k.ConfigResult.Modes)
  return modes_;
}

// repeated .Nmea2k.FantasticFanDevice FantasticFans = 16;
inline int ConfigResult::fantasticfans_size() const {
  return fantasticfans_.size();
}
inline void ConfigResult::clear_fantasticfans() {
  fantasticfans_.Clear();
}
inline ::Nmea2k::FantasticFanDevice* ConfigResult::mutable_fantasticfans(int index) {
  // @@protoc_insertion_point(field_mutable:Nmea2k.ConfigResult.FantasticFans)
  return fantasticfans_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::Nmea2k::FantasticFanDevice >*
ConfigResult::mutable_fantasticfans() {
  // @@protoc_insertion_point(field_mutable_list:Nmea2k.ConfigResult.FantasticFans)
  return &fantasticfans_;
}
inline const ::Nmea2k::FantasticFanDevice& ConfigResult::fantasticfans(int index) const {
  // @@protoc_insertion_point(field_get:Nmea2k.ConfigResult.FantasticFans)
  return fantasticfans_.Get(index);
}
inline ::Nmea2k::FantasticFanDevice* ConfigResult::add_fantasticfans() {
  // @@protoc_insertion_point(field_add:Nmea2k.ConfigResult.FantasticFans)
  return fantasticfans_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Nmea2k::FantasticFanDevice >&
ConfigResult::fantasticfans() const {
  // @@protoc_insertion_point(field_list:Nmea2k.ConfigResult.FantasticFans)
  return fantasticfans_;
}

// repeated .Nmea2k.ScreenConfigPageImageItem ScreenConfigPageImageItems = 17;
inline int ConfigResult::screenconfigpageimageitems_size() const {
  return screenconfigpageimageitems_.size();
}
inline void ConfigResult::clear_screenconfigpageimageitems() {
  screenconfigpageimageitems_.Clear();
}
inline ::Nmea2k::ScreenConfigPageImageItem* ConfigResult::mutable_screenconfigpageimageitems(int index) {
  // @@protoc_insertion_point(field_mutable:Nmea2k.ConfigResult.ScreenConfigPageImageItems)
  return screenconfigpageimageitems_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::Nmea2k::ScreenConfigPageImageItem >*
ConfigResult::mutable_screenconfigpageimageitems() {
  // @@protoc_insertion_point(field_mutable_list:Nmea2k.ConfigResult.ScreenConfigPageImageItems)
  return &screenconfigpageimageitems_;
}
inline const ::Nmea2k::ScreenConfigPageImageItem& ConfigResult::screenconfigpageimageitems(int index) const {
  // @@protoc_insertion_point(field_get:Nmea2k.ConfigResult.ScreenConfigPageImageItems)
  return screenconfigpageimageitems_.Get(index);
}
inline ::Nmea2k::ScreenConfigPageImageItem* ConfigResult::add_screenconfigpageimageitems() {
  // @@protoc_insertion_point(field_add:Nmea2k.ConfigResult.ScreenConfigPageImageItems)
  return screenconfigpageimageitems_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Nmea2k::ScreenConfigPageImageItem >&
ConfigResult::screenconfigpageimageitems() const {
  // @@protoc_insertion_point(field_list:Nmea2k.ConfigResult.ScreenConfigPageImageItems)
  return screenconfigpageimageitems_;
}

// repeated .Nmea2k.ScreenConfigPageGridItem ScreenConfigPageGridItems = 18;
inline int ConfigResult::screenconfigpagegriditems_size() const {
  return screenconfigpagegriditems_.size();
}
inline void ConfigResult::clear_screenconfigpagegriditems() {
  screenconfigpagegriditems_.Clear();
}
inline ::Nmea2k::ScreenConfigPageGridItem* ConfigResult::mutable_screenconfigpagegriditems(int index) {
  // @@protoc_insertion_point(field_mutable:Nmea2k.ConfigResult.ScreenConfigPageGridItems)
  return screenconfigpagegriditems_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::Nmea2k::ScreenConfigPageGridItem >*
ConfigResult::mutable_screenconfigpagegriditems() {
  // @@protoc_insertion_point(field_mutable_list:Nmea2k.ConfigResult.ScreenConfigPageGridItems)
  return &screenconfigpagegriditems_;
}
inline const ::Nmea2k::ScreenConfigPageGridItem& ConfigResult::screenconfigpagegriditems(int index) const {
  // @@protoc_insertion_point(field_get:Nmea2k.ConfigResult.ScreenConfigPageGridItems)
  return screenconfigpagegriditems_.Get(index);
}
inline ::Nmea2k::ScreenConfigPageGridItem* ConfigResult::add_screenconfigpagegriditems() {
  // @@protoc_insertion_point(field_add:Nmea2k.ConfigResult.ScreenConfigPageGridItems)
  return screenconfigpagegriditems_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Nmea2k::ScreenConfigPageGridItem >&
ConfigResult::screenconfigpagegriditems() const {
  // @@protoc_insertion_point(field_list:Nmea2k.ConfigResult.ScreenConfigPageGridItems)
  return screenconfigpagegriditems_;
}

// repeated .Nmea2k.ScreenConfigPageImage ScreenConfigPageImages = 19;
inline int ConfigResult::screenconfigpageimages_size() const {
  return screenconfigpageimages_.size();
}
inline void ConfigResult::clear_screenconfigpageimages() {
  screenconfigpageimages_.Clear();
}
inline ::Nmea2k::ScreenConfigPageImage* ConfigResult::mutable_screenconfigpageimages(int index) {
  // @@protoc_insertion_point(field_mutable:Nmea2k.ConfigResult.ScreenConfigPageImages)
  return screenconfigpageimages_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::Nmea2k::ScreenConfigPageImage >*
ConfigResult::mutable_screenconfigpageimages() {
  // @@protoc_insertion_point(field_mutable_list:Nmea2k.ConfigResult.ScreenConfigPageImages)
  return &screenconfigpageimages_;
}
inline const ::Nmea2k::ScreenConfigPageImage& ConfigResult::screenconfigpageimages(int index) const {
  // @@protoc_insertion_point(field_get:Nmea2k.ConfigResult.ScreenConfigPageImages)
  return screenconfigpageimages_.Get(index);
}
inline ::Nmea2k::ScreenConfigPageImage* ConfigResult::add_screenconfigpageimages() {
  // @@protoc_insertion_point(field_add:Nmea2k.ConfigResult.ScreenConfigPageImages)
  return screenconfigpageimages_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Nmea2k::ScreenConfigPageImage >&
ConfigResult::screenconfigpageimages() const {
  // @@protoc_insertion_point(field_list:Nmea2k.ConfigResult.ScreenConfigPageImages)
  return screenconfigpageimages_;
}

// repeated .Nmea2k.ScreenConfigPage ScreenConfigPages = 20;
inline int ConfigResult::screenconfigpages_size() const {
  return screenconfigpages_.size();
}
inline void ConfigResult::clear_screenconfigpages() {
  screenconfigpages_.Clear();
}
inline ::Nmea2k::ScreenConfigPage* ConfigResult::mutable_screenconfigpages(int index) {
  // @@protoc_insertion_point(field_mutable:Nmea2k.ConfigResult.ScreenConfigPages)
  return screenconfigpages_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::Nmea2k::ScreenConfigPage >*
ConfigResult::mutable_screenconfigpages() {
  // @@protoc_insertion_point(field_mutable_list:Nmea2k.ConfigResult.ScreenConfigPages)
  return &screenconfigpages_;
}
inline const ::Nmea2k::ScreenConfigPage& ConfigResult::screenconfigpages(int index) const {
  // @@protoc_insertion_point(field_get:Nmea2k.ConfigResult.ScreenConfigPages)
  return screenconfigpages_.Get(index);
}
inline ::Nmea2k::ScreenConfigPage* ConfigResult::add_screenconfigpages() {
  // @@protoc_insertion_point(field_add:Nmea2k.ConfigResult.ScreenConfigPages)
  return screenconfigpages_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Nmea2k::ScreenConfigPage >&
ConfigResult::screenconfigpages() const {
  // @@protoc_insertion_point(field_list:Nmea2k.ConfigResult.ScreenConfigPages)
  return screenconfigpages_;
}

// repeated .Nmea2k.ScreenConfigMode ScreenConfigModes = 21;
inline int ConfigResult::screenconfigmodes_size() const {
  return screenconfigmodes_.size();
}
inline void ConfigResult::clear_screenconfigmodes() {
  screenconfigmodes_.Clear();
}
inline ::Nmea2k::ScreenConfigMode* ConfigResult::mutable_screenconfigmodes(int index) {
  // @@protoc_insertion_point(field_mutable:Nmea2k.ConfigResult.ScreenConfigModes)
  return screenconfigmodes_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::Nmea2k::ScreenConfigMode >*
ConfigResult::mutable_screenconfigmodes() {
  // @@protoc_insertion_point(field_mutable_list:Nmea2k.ConfigResult.ScreenConfigModes)
  return &screenconfigmodes_;
}
inline const ::Nmea2k::ScreenConfigMode& ConfigResult::screenconfigmodes(int index) const {
  // @@protoc_insertion_point(field_get:Nmea2k.ConfigResult.ScreenConfigModes)
  return screenconfigmodes_.Get(index);
}
inline ::Nmea2k::ScreenConfigMode* ConfigResult::add_screenconfigmodes() {
  // @@protoc_insertion_point(field_add:Nmea2k.ConfigResult.ScreenConfigModes)
  return screenconfigmodes_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Nmea2k::ScreenConfigMode >&
ConfigResult::screenconfigmodes() const {
  // @@protoc_insertion_point(field_list:Nmea2k.ConfigResult.ScreenConfigModes)
  return screenconfigmodes_;
}

// repeated .Nmea2k.ScreenConfig ScreenConfigs = 22;
inline int ConfigResult::screenconfigs_size() const {
  return screenconfigs_.size();
}
inline void ConfigResult::clear_screenconfigs() {
  screenconfigs_.Clear();
}
inline ::Nmea2k::ScreenConfig* ConfigResult::mutable_screenconfigs(int index) {
  // @@protoc_insertion_point(field_mutable:Nmea2k.ConfigResult.ScreenConfigs)
  return screenconfigs_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::Nmea2k::ScreenConfig >*
ConfigResult::mutable_screenconfigs() {
  // @@protoc_insertion_point(field_mutable_list:Nmea2k.ConfigResult.ScreenConfigs)
  return &screenconfigs_;
}
inline const ::Nmea2k::ScreenConfig& ConfigResult::screenconfigs(int index) const {
  // @@protoc_insertion_point(field_get:Nmea2k.ConfigResult.ScreenConfigs)
  return screenconfigs_.Get(index);
}
inline ::Nmea2k::ScreenConfig* ConfigResult::add_screenconfigs() {
  // @@protoc_insertion_point(field_add:Nmea2k.ConfigResult.ScreenConfigs)
  return screenconfigs_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Nmea2k::ScreenConfig >&
ConfigResult::screenconfigs() const {
  // @@protoc_insertion_point(field_list:Nmea2k.ConfigResult.ScreenConfigs)
  return screenconfigs_;
}

// repeated .Nmea2k.FavouritesInfo FavouritesModes = 23;
inline int ConfigResult::favouritesmodes_size() const {
  return favouritesmodes_.size();
}
inline void ConfigResult::clear_favouritesmodes() {
  favouritesmodes_.Clear();
}
inline ::Nmea2k::FavouritesInfo* ConfigResult::mutable_favouritesmodes(int index) {
  // @@protoc_insertion_point(field_mutable:Nmea2k.ConfigResult.FavouritesModes)
  return favouritesmodes_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::Nmea2k::FavouritesInfo >*
ConfigResult::mutable_favouritesmodes() {
  // @@protoc_insertion_point(field_mutable_list:Nmea2k.ConfigResult.FavouritesModes)
  return &favouritesmodes_;
}
inline const ::Nmea2k::FavouritesInfo& ConfigResult::favouritesmodes(int index) const {
  // @@protoc_insertion_point(field_get:Nmea2k.ConfigResult.FavouritesModes)
  return favouritesmodes_.Get(index);
}
inline ::Nmea2k::FavouritesInfo* ConfigResult::add_favouritesmodes() {
  // @@protoc_insertion_point(field_add:Nmea2k.ConfigResult.FavouritesModes)
  return favouritesmodes_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Nmea2k::FavouritesInfo >&
ConfigResult::favouritesmodes() const {
  // @@protoc_insertion_point(field_list:Nmea2k.ConfigResult.FavouritesModes)
  return favouritesmodes_;
}

// repeated .Nmea2k.FavouritesInfo FavouritesControls = 24;
inline int ConfigResult::favouritescontrols_size() const {
  return favouritescontrols_.size();
}
inline void ConfigResult::clear_favouritescontrols() {
  favouritescontrols_.Clear();
}
inline ::Nmea2k::FavouritesInfo* ConfigResult::mutable_favouritescontrols(int index) {
  // @@protoc_insertion_point(field_mutable:Nmea2k.ConfigResult.FavouritesControls)
  return favouritescontrols_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::Nmea2k::FavouritesInfo >*
ConfigResult::mutable_favouritescontrols() {
  // @@protoc_insertion_point(field_mutable_list:Nmea2k.ConfigResult.FavouritesControls)
  return &favouritescontrols_;
}
inline const ::Nmea2k::FavouritesInfo& ConfigResult::favouritescontrols(int index) const {
  // @@protoc_insertion_point(field_get:Nmea2k.ConfigResult.FavouritesControls)
  return favouritescontrols_.Get(index);
}
inline ::Nmea2k::FavouritesInfo* ConfigResult::add_favouritescontrols() {
  // @@protoc_insertion_point(field_add:Nmea2k.ConfigResult.FavouritesControls)
  return favouritescontrols_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Nmea2k::FavouritesInfo >&
ConfigResult::favouritescontrols() const {
  // @@protoc_insertion_point(field_list:Nmea2k.ConfigResult.FavouritesControls)
  return favouritescontrols_;
}

// repeated .Nmea2k.FavouritesInfo FavouritesMonitorings = 25;
inline int ConfigResult::favouritesmonitorings_size() const {
  return favouritesmonitorings_.size();
}
inline void ConfigResult::clear_favouritesmonitorings() {
  favouritesmonitorings_.Clear();
}
inline ::Nmea2k::FavouritesInfo* ConfigResult::mutable_favouritesmonitorings(int index) {
  // @@protoc_insertion_point(field_mutable:Nmea2k.ConfigResult.FavouritesMonitorings)
  return favouritesmonitorings_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::Nmea2k::FavouritesInfo >*
ConfigResult::mutable_favouritesmonitorings() {
  // @@protoc_insertion_point(field_mutable_list:Nmea2k.ConfigResult.FavouritesMonitorings)
  return &favouritesmonitorings_;
}
inline const ::Nmea2k::FavouritesInfo& ConfigResult::favouritesmonitorings(int index) const {
  // @@protoc_insertion_point(field_get:Nmea2k.ConfigResult.FavouritesMonitorings)
  return favouritesmonitorings_.Get(index);
}
inline ::Nmea2k::FavouritesInfo* ConfigResult::add_favouritesmonitorings() {
  // @@protoc_insertion_point(field_add:Nmea2k.ConfigResult.FavouritesMonitorings)
  return favouritesmonitorings_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Nmea2k::FavouritesInfo >&
ConfigResult::favouritesmonitorings() const {
  // @@protoc_insertion_point(field_list:Nmea2k.ConfigResult.FavouritesMonitorings)
  return favouritesmonitorings_;
}

// repeated .Nmea2k.FavouritesInfo FavouritesAlarms = 26;
inline int ConfigResult::favouritesalarms_size() const {
  return favouritesalarms_.size();
}
inline void ConfigResult::clear_favouritesalarms() {
  favouritesalarms_.Clear();
}
inline ::Nmea2k::FavouritesInfo* ConfigResult::mutable_favouritesalarms(int index) {
  // @@protoc_insertion_point(field_mutable:Nmea2k.ConfigResult.FavouritesAlarms)
  return favouritesalarms_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::Nmea2k::FavouritesInfo >*
ConfigResult::mutable_favouritesalarms() {
  // @@protoc_insertion_point(field_mutable_list:Nmea2k.ConfigResult.FavouritesAlarms)
  return &favouritesalarms_;
}
inline const ::Nmea2k::FavouritesInfo& ConfigResult::favouritesalarms(int index) const {
  // @@protoc_insertion_point(field_get:Nmea2k.ConfigResult.FavouritesAlarms)
  return favouritesalarms_.Get(index);
}
inline ::Nmea2k::FavouritesInfo* ConfigResult::add_favouritesalarms() {
  // @@protoc_insertion_point(field_add:Nmea2k.ConfigResult.FavouritesAlarms)
  return favouritesalarms_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Nmea2k::FavouritesInfo >&
ConfigResult::favouritesalarms() const {
  // @@protoc_insertion_point(field_list:Nmea2k.ConfigResult.FavouritesAlarms)
  return favouritesalarms_;
}

// repeated .Nmea2k.FavouritesInfo FavouritesACMains = 27;
inline int ConfigResult::favouritesacmains_size() const {
  return favouritesacmains_.size();
}
inline void ConfigResult::clear_favouritesacmains() {
  favouritesacmains_.Clear();
}
inline ::Nmea2k::FavouritesInfo* ConfigResult::mutable_favouritesacmains(int index) {
  // @@protoc_insertion_point(field_mutable:Nmea2k.ConfigResult.FavouritesACMains)
  return favouritesacmains_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::Nmea2k::FavouritesInfo >*
ConfigResult::mutable_favouritesacmains() {
  // @@protoc_insertion_point(field_mutable_list:Nmea2k.ConfigResult.FavouritesACMains)
  return &favouritesacmains_;
}
inline const ::Nmea2k::FavouritesInfo& ConfigResult::favouritesacmains(int index) const {
  // @@protoc_insertion_point(field_get:Nmea2k.ConfigResult.FavouritesACMains)
  return favouritesacmains_.Get(index);
}
inline ::Nmea2k::FavouritesInfo* ConfigResult::add_favouritesacmains() {
  // @@protoc_insertion_point(field_add:Nmea2k.ConfigResult.FavouritesACMains)
  return favouritesacmains_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Nmea2k::FavouritesInfo >&
ConfigResult::favouritesacmains() const {
  // @@protoc_insertion_point(field_list:Nmea2k.ConfigResult.FavouritesACMains)
  return favouritesacmains_;
}

// repeated .Nmea2k.FavouritesInfo FavouritesInverterChargers = 28;
inline int ConfigResult::favouritesinverterchargers_size() const {
  return favouritesinverterchargers_.size();
}
inline void ConfigResult::clear_favouritesinverterchargers() {
  favouritesinverterchargers_.Clear();
}
inline ::Nmea2k::FavouritesInfo* ConfigResult::mutable_favouritesinverterchargers(int index) {
  // @@protoc_insertion_point(field_mutable:Nmea2k.ConfigResult.FavouritesInverterChargers)
  return favouritesinverterchargers_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::Nmea2k::FavouritesInfo >*
ConfigResult::mutable_favouritesinverterchargers() {
  // @@protoc_insertion_point(field_mutable_list:Nmea2k.ConfigResult.FavouritesInverterChargers)
  return &favouritesinverterchargers_;
}
inline const ::Nmea2k::FavouritesInfo& ConfigResult::favouritesinverterchargers(int index) const {
  // @@protoc_insertion_point(field_get:Nmea2k.ConfigResult.FavouritesInverterChargers)
  return favouritesinverterchargers_.Get(index);
}
inline ::Nmea2k::FavouritesInfo* ConfigResult::add_favouritesinverterchargers() {
  // @@protoc_insertion_point(field_add:Nmea2k.ConfigResult.FavouritesInverterChargers)
  return favouritesinverterchargers_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Nmea2k::FavouritesInfo >&
ConfigResult::favouritesinverterchargers() const {
  // @@protoc_insertion_point(field_list:Nmea2k.ConfigResult.FavouritesInverterChargers)
  return favouritesinverterchargers_;
}

// repeated .Nmea2k.FavouritesInfo FavouritesBoatViews = 29;
inline int ConfigResult::favouritesboatviews_size() const {
  return favouritesboatviews_.size();
}
inline void ConfigResult::clear_favouritesboatviews() {
  favouritesboatviews_.Clear();
}
inline ::Nmea2k::FavouritesInfo* ConfigResult::mutable_favouritesboatviews(int index) {
  // @@protoc_insertion_point(field_mutable:Nmea2k.ConfigResult.FavouritesBoatViews)
  return favouritesboatviews_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::Nmea2k::FavouritesInfo >*
ConfigResult::mutable_favouritesboatviews() {
  // @@protoc_insertion_point(field_mutable_list:Nmea2k.ConfigResult.FavouritesBoatViews)
  return &favouritesboatviews_;
}
inline const ::Nmea2k::FavouritesInfo& ConfigResult::favouritesboatviews(int index) const {
  // @@protoc_insertion_point(field_get:Nmea2k.ConfigResult.FavouritesBoatViews)
  return favouritesboatviews_.Get(index);
}
inline ::Nmea2k::FavouritesInfo* ConfigResult::add_favouritesboatviews() {
  // @@protoc_insertion_point(field_add:Nmea2k.ConfigResult.FavouritesBoatViews)
  return favouritesboatviews_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Nmea2k::FavouritesInfo >&
ConfigResult::favouritesboatviews() const {
  // @@protoc_insertion_point(field_list:Nmea2k.ConfigResult.FavouritesBoatViews)
  return favouritesboatviews_;
}

// repeated .Nmea2k.Alarm Alarms = 30;
inline int ConfigResult::alarms_size() const {
  return alarms_.size();
}
inline void ConfigResult::clear_alarms() {
  alarms_.Clear();
}
inline ::Nmea2k::Alarm* ConfigResult::mutable_alarms(int index) {
  // @@protoc_insertion_point(field_mutable:Nmea2k.ConfigResult.Alarms)
  return alarms_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::Nmea2k::Alarm >*
ConfigResult::mutable_alarms() {
  // @@protoc_insertion_point(field_mutable_list:Nmea2k.ConfigResult.Alarms)
  return &alarms_;
}
inline const ::Nmea2k::Alarm& ConfigResult::alarms(int index) const {
  // @@protoc_insertion_point(field_get:Nmea2k.ConfigResult.Alarms)
  return alarms_.Get(index);
}
inline ::Nmea2k::Alarm* ConfigResult::add_alarms() {
  // @@protoc_insertion_point(field_add:Nmea2k.ConfigResult.Alarms)
  return alarms_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Nmea2k::Alarm >&
ConfigResult::alarms() const {
  // @@protoc_insertion_point(field_list:Nmea2k.ConfigResult.Alarms)
  return alarms_;
}

// repeated .Nmea2k.Device Devices = 31;
inline int ConfigResult::devices_size() const {
  return devices_.size();
}
inline void ConfigResult::clear_devices() {
  devices_.Clear();
}
inline ::Nmea2k::Device* ConfigResult::mutable_devices(int index) {
  // @@protoc_insertion_point(field_mutable:Nmea2k.ConfigResult.Devices)
  return devices_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::Nmea2k::Device >*
ConfigResult::mutable_devices() {
  // @@protoc_insertion_point(field_mutable_list:Nmea2k.ConfigResult.Devices)
  return &devices_;
}
inline const ::Nmea2k::Device& ConfigResult::devices(int index) const {
  // @@protoc_insertion_point(field_get:Nmea2k.ConfigResult.Devices)
  return devices_.Get(index);
}
inline ::Nmea2k::Device* ConfigResult::add_devices() {
  // @@protoc_insertion_point(field_add:Nmea2k.ConfigResult.Devices)
  return devices_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Nmea2k::Device >&
ConfigResult::devices() const {
  // @@protoc_insertion_point(field_list:Nmea2k.ConfigResult.Devices)
  return devices_;
}

// repeated .Nmea2k.GNSSDevice GNSS = 32;
inline int ConfigResult::gnss_size() const {
  return gnss_.size();
}
inline void ConfigResult::clear_gnss() {
  gnss_.Clear();
}
inline ::Nmea2k::GNSSDevice* ConfigResult::mutable_gnss(int index) {
  // @@protoc_insertion_point(field_mutable:Nmea2k.ConfigResult.GNSS)
  return gnss_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::Nmea2k::GNSSDevice >*
ConfigResult::mutable_gnss() {
  // @@protoc_insertion_point(field_mutable_list:Nmea2k.ConfigResult.GNSS)
  return &gnss_;
}
inline const ::Nmea2k::GNSSDevice& ConfigResult::gnss(int index) const {
  // @@protoc_insertion_point(field_get:Nmea2k.ConfigResult.GNSS)
  return gnss_.Get(index);
}
inline ::Nmea2k::GNSSDevice* ConfigResult::add_gnss() {
  // @@protoc_insertion_point(field_add:Nmea2k.ConfigResult.GNSS)
  return gnss_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Nmea2k::GNSSDevice >&
ConfigResult::gnss() const {
  // @@protoc_insertion_point(field_list:Nmea2k.ConfigResult.GNSS)
  return gnss_;
}

// repeated .Nmea2k.EngineDevice Engines = 33;
inline int ConfigResult::engines_size() const {
  return engines_.size();
}
inline void ConfigResult::clear_engines() {
  engines_.Clear();
}
inline ::Nmea2k::EngineDevice* ConfigResult::mutable_engines(int index) {
  // @@protoc_insertion_point(field_mutable:Nmea2k.ConfigResult.Engines)
  return engines_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::Nmea2k::EngineDevice >*
ConfigResult::mutable_engines() {
  // @@protoc_insertion_point(field_mutable_list:Nmea2k.ConfigResult.Engines)
  return &engines_;
}
inline const ::Nmea2k::EngineDevice& ConfigResult::engines(int index) const {
  // @@protoc_insertion_point(field_get:Nmea2k.ConfigResult.Engines)
  return engines_.Get(index);
}
inline ::Nmea2k::EngineDevice* ConfigResult::add_engines() {
  // @@protoc_insertion_point(field_add:Nmea2k.ConfigResult.Engines)
  return engines_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Nmea2k::EngineDevice >&
ConfigResult::engines() const {
  // @@protoc_insertion_point(field_list:Nmea2k.ConfigResult.Engines)
  return engines_;
}

// repeated .Nmea2k.UiRelationshipMsg UiRelationships = 34;
inline int ConfigResult::uirelationships_size() const {
  return uirelationships_.size();
}
inline void ConfigResult::clear_uirelationships() {
  uirelationships_.Clear();
}
inline ::Nmea2k::UiRelationshipMsg* ConfigResult::mutable_uirelationships(int index) {
  // @@protoc_insertion_point(field_mutable:Nmea2k.ConfigResult.UiRelationships)
  return uirelationships_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::Nmea2k::UiRelationshipMsg >*
ConfigResult::mutable_uirelationships() {
  // @@protoc_insertion_point(field_mutable_list:Nmea2k.ConfigResult.UiRelationships)
  return &uirelationships_;
}
inline const ::Nmea2k::UiRelationshipMsg& ConfigResult::uirelationships(int index) const {
  // @@protoc_insertion_point(field_get:Nmea2k.ConfigResult.UiRelationships)
  return uirelationships_.Get(index);
}
inline ::Nmea2k::UiRelationshipMsg* ConfigResult::add_uirelationships() {
  // @@protoc_insertion_point(field_add:Nmea2k.ConfigResult.UiRelationships)
  return uirelationships_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Nmea2k::UiRelationshipMsg >&
ConfigResult::uirelationships() const {
  // @@protoc_insertion_point(field_list:Nmea2k.ConfigResult.UiRelationships)
  return uirelationships_;
}

// repeated .Nmea2k.BinaryLogicStateMsg BinaryLogicStates = 35;
inline int ConfigResult::binarylogicstates_size() const {
  return binarylogicstates_.size();
}
inline void ConfigResult::clear_binarylogicstates() {
  binarylogicstates_.Clear();
}
inline ::Nmea2k::BinaryLogicStateMsg* ConfigResult::mutable_binarylogicstates(int index) {
  // @@protoc_insertion_point(field_mutable:Nmea2k.ConfigResult.BinaryLogicStates)
  return binarylogicstates_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::Nmea2k::BinaryLogicStateMsg >*
ConfigResult::mutable_binarylogicstates() {
  // @@protoc_insertion_point(field_mutable_list:Nmea2k.ConfigResult.BinaryLogicStates)
  return &binarylogicstates_;
}
inline const ::Nmea2k::BinaryLogicStateMsg& ConfigResult::binarylogicstates(int index) const {
  // @@protoc_insertion_point(field_get:Nmea2k.ConfigResult.BinaryLogicStates)
  return binarylogicstates_.Get(index);
}
inline ::Nmea2k::BinaryLogicStateMsg* ConfigResult::add_binarylogicstates() {
  // @@protoc_insertion_point(field_add:Nmea2k.ConfigResult.BinaryLogicStates)
  return binarylogicstates_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Nmea2k::BinaryLogicStateMsg >&
ConfigResult::binarylogicstates() const {
  // @@protoc_insertion_point(field_list:Nmea2k.ConfigResult.BinaryLogicStates)
  return binarylogicstates_;
}

// .Nmea2k.CZoneRawConfig DisplayList = 36;
inline bool ConfigResult::has_displaylist() const {
  return this != internal_default_instance() && displaylist_ != NULL;
}
inline void ConfigResult::clear_displaylist() {
  if (GetArenaNoVirtual() == NULL && displaylist_ != NULL) {
    delete displaylist_;
  }
  displaylist_ = NULL;
}
inline const ::Nmea2k::CZoneRawConfig& ConfigResult::_internal_displaylist() const {
  return *displaylist_;
}
inline const ::Nmea2k::CZoneRawConfig& ConfigResult::displaylist() const {
  const ::Nmea2k::CZoneRawConfig* p = displaylist_;
  // @@protoc_insertion_point(field_get:Nmea2k.ConfigResult.DisplayList)
  return p != NULL ? *p : *reinterpret_cast<const ::Nmea2k::CZoneRawConfig*>(
      &::Nmea2k::_CZoneRawConfig_default_instance_);
}
inline ::Nmea2k::CZoneRawConfig* ConfigResult::release_displaylist() {
  // @@protoc_insertion_point(field_release:Nmea2k.ConfigResult.DisplayList)
  
  ::Nmea2k::CZoneRawConfig* temp = displaylist_;
  displaylist_ = NULL;
  return temp;
}
inline ::Nmea2k::CZoneRawConfig* ConfigResult::mutable_displaylist() {
  
  if (displaylist_ == NULL) {
    auto* p = CreateMaybeMessage<::Nmea2k::CZoneRawConfig>(GetArenaNoVirtual());
    displaylist_ = p;
  }
  // @@protoc_insertion_point(field_mutable:Nmea2k.ConfigResult.DisplayList)
  return displaylist_;
}
inline void ConfigResult::set_allocated_displaylist(::Nmea2k::CZoneRawConfig* displaylist) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete displaylist_;
  }
  if (displaylist) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      displaylist = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, displaylist, submessage_arena);
    }
    
  } else {
    
  }
  displaylist_ = displaylist;
  // @@protoc_insertion_point(field_set_allocated:Nmea2k.ConfigResult.DisplayList)
}

// .Nmea2k.RTCoreLogicalIdToDeviceConfig RTCoreLogicalIdToDeviceConfig = 37;
inline bool ConfigResult::has_rtcorelogicalidtodeviceconfig() const {
  return this != internal_default_instance() && rtcorelogicalidtodeviceconfig_ != NULL;
}
inline void ConfigResult::clear_rtcorelogicalidtodeviceconfig() {
  if (GetArenaNoVirtual() == NULL && rtcorelogicalidtodeviceconfig_ != NULL) {
    delete rtcorelogicalidtodeviceconfig_;
  }
  rtcorelogicalidtodeviceconfig_ = NULL;
}
inline const ::Nmea2k::RTCoreLogicalIdToDeviceConfig& ConfigResult::_internal_rtcorelogicalidtodeviceconfig() const {
  return *rtcorelogicalidtodeviceconfig_;
}
inline const ::Nmea2k::RTCoreLogicalIdToDeviceConfig& ConfigResult::rtcorelogicalidtodeviceconfig() const {
  const ::Nmea2k::RTCoreLogicalIdToDeviceConfig* p = rtcorelogicalidtodeviceconfig_;
  // @@protoc_insertion_point(field_get:Nmea2k.ConfigResult.RTCoreLogicalIdToDeviceConfig)
  return p != NULL ? *p : *reinterpret_cast<const ::Nmea2k::RTCoreLogicalIdToDeviceConfig*>(
      &::Nmea2k::_RTCoreLogicalIdToDeviceConfig_default_instance_);
}
inline ::Nmea2k::RTCoreLogicalIdToDeviceConfig* ConfigResult::release_rtcorelogicalidtodeviceconfig() {
  // @@protoc_insertion_point(field_release:Nmea2k.ConfigResult.RTCoreLogicalIdToDeviceConfig)
  
  ::Nmea2k::RTCoreLogicalIdToDeviceConfig* temp = rtcorelogicalidtodeviceconfig_;
  rtcorelogicalidtodeviceconfig_ = NULL;
  return temp;
}
inline ::Nmea2k::RTCoreLogicalIdToDeviceConfig* ConfigResult::mutable_rtcorelogicalidtodeviceconfig() {
  
  if (rtcorelogicalidtodeviceconfig_ == NULL) {
    auto* p = CreateMaybeMessage<::Nmea2k::RTCoreLogicalIdToDeviceConfig>(GetArenaNoVirtual());
    rtcorelogicalidtodeviceconfig_ = p;
  }
  // @@protoc_insertion_point(field_mutable:Nmea2k.ConfigResult.RTCoreLogicalIdToDeviceConfig)
  return rtcorelogicalidtodeviceconfig_;
}
inline void ConfigResult::set_allocated_rtcorelogicalidtodeviceconfig(::Nmea2k::RTCoreLogicalIdToDeviceConfig* rtcorelogicalidtodeviceconfig) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete rtcorelogicalidtodeviceconfig_;
  }
  if (rtcorelogicalidtodeviceconfig) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      rtcorelogicalidtodeviceconfig = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, rtcorelogicalidtodeviceconfig, submessage_arena);
    }
    
  } else {
    
  }
  rtcorelogicalidtodeviceconfig_ = rtcorelogicalidtodeviceconfig;
  // @@protoc_insertion_point(field_set_allocated:Nmea2k.ConfigResult.RTCoreLogicalIdToDeviceConfig)
}

// .Nmea2k.ConfigResult.eConfigResultStatus Status = 38;
inline void ConfigResult::clear_status() {
  status_ = 0;
}
inline ::Nmea2k::ConfigResult_eConfigResultStatus ConfigResult::status() const {
  // @@protoc_insertion_point(field_get:Nmea2k.ConfigResult.Status)
  return static_cast< ::Nmea2k::ConfigResult_eConfigResultStatus >(status_);
}
inline void ConfigResult::set_status(::Nmea2k::ConfigResult_eConfigResultStatus value) {
  
  status_ = value;
  // @@protoc_insertion_point(field_set:Nmea2k.ConfigResult.Status)
}

// -------------------------------------------------------------------

// ControlTypeValueRequest

// uint32 Instance = 1;
inline void ControlTypeValueRequest::clear_instance() {
  instance_ = 0u;
}
inline ::google::protobuf::uint32 ControlTypeValueRequest::instance() const {
  // @@protoc_insertion_point(field_get:Nmea2k.ControlTypeValueRequest.Instance)
  return instance_;
}
inline void ControlTypeValueRequest::set_instance(::google::protobuf::uint32 value) {
  
  instance_ = value;
  // @@protoc_insertion_point(field_set:Nmea2k.ControlTypeValueRequest.Instance)
}

// uint32 Type = 2;
inline void ControlTypeValueRequest::clear_type() {
  type_ = 0u;
}
inline ::google::protobuf::uint32 ControlTypeValueRequest::type() const {
  // @@protoc_insertion_point(field_get:Nmea2k.ControlTypeValueRequest.Type)
  return type_;
}
inline void ControlTypeValueRequest::set_type(::google::protobuf::uint32 value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:Nmea2k.ControlTypeValueRequest.Type)
}

// uint32 Value = 3;
inline void ControlTypeValueRequest::clear_value() {
  value_ = 0u;
}
inline ::google::protobuf::uint32 ControlTypeValueRequest::value() const {
  // @@protoc_insertion_point(field_get:Nmea2k.ControlTypeValueRequest.Value)
  return value_;
}
inline void ControlTypeValueRequest::set_value(::google::protobuf::uint32 value) {
  
  value_ = value;
  // @@protoc_insertion_point(field_set:Nmea2k.ControlTypeValueRequest.Value)
}

// string Token = 4;
inline void ControlTypeValueRequest::clear_token() {
  token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ControlTypeValueRequest::token() const {
  // @@protoc_insertion_point(field_get:Nmea2k.ControlTypeValueRequest.Token)
  return token_.GetNoArena();
}
inline void ControlTypeValueRequest::set_token(const ::std::string& value) {
  
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Nmea2k.ControlTypeValueRequest.Token)
}
#if LANG_CXX11
inline void ControlTypeValueRequest::set_token(::std::string&& value) {
  
  token_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Nmea2k.ControlTypeValueRequest.Token)
}
#endif
inline void ControlTypeValueRequest::set_token(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Nmea2k.ControlTypeValueRequest.Token)
}
inline void ControlTypeValueRequest::set_token(const char* value, size_t size) {
  
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Nmea2k.ControlTypeValueRequest.Token)
}
inline ::std::string* ControlTypeValueRequest::mutable_token() {
  
  // @@protoc_insertion_point(field_mutable:Nmea2k.ControlTypeValueRequest.Token)
  return token_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ControlTypeValueRequest::release_token() {
  // @@protoc_insertion_point(field_release:Nmea2k.ControlTypeValueRequest.Token)
  
  return token_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ControlTypeValueRequest::set_allocated_token(::std::string* token) {
  if (token != NULL) {
    
  } else {
    
  }
  token_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), token);
  // @@protoc_insertion_point(field_set_allocated:Nmea2k.ControlTypeValueRequest.Token)
}

// -------------------------------------------------------------------

// ControlRequest

// .Nmea2k.ControlRequest.eControlType Type = 1;
inline void ControlRequest::clear_type() {
  type_ = 0;
}
inline ::Nmea2k::ControlRequest_eControlType ControlRequest::type() const {
  // @@protoc_insertion_point(field_get:Nmea2k.ControlRequest.Type)
  return static_cast< ::Nmea2k::ControlRequest_eControlType >(type_);
}
inline void ControlRequest::set_type(::Nmea2k::ControlRequest_eControlType value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:Nmea2k.ControlRequest.Type)
}

// uint32 Id = 2;
inline void ControlRequest::clear_id() {
  id_ = 0u;
}
inline ::google::protobuf::uint32 ControlRequest::id() const {
  // @@protoc_insertion_point(field_get:Nmea2k.ControlRequest.Id)
  return id_;
}
inline void ControlRequest::set_id(::google::protobuf::uint32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:Nmea2k.ControlRequest.Id)
}

// .Nmea2k.ControlRequest.eThrowType ThrowType = 3;
inline void ControlRequest::clear_throwtype() {
  throwtype_ = 0;
}
inline ::Nmea2k::ControlRequest_eThrowType ControlRequest::throwtype() const {
  // @@protoc_insertion_point(field_get:Nmea2k.ControlRequest.ThrowType)
  return static_cast< ::Nmea2k::ControlRequest_eThrowType >(throwtype_);
}
inline void ControlRequest::set_throwtype(::Nmea2k::ControlRequest_eThrowType value) {
  
  throwtype_ = value;
  // @@protoc_insertion_point(field_set:Nmea2k.ControlRequest.ThrowType)
}

// uint32 Value = 4;
inline void ControlRequest::clear_value() {
  value_ = 0u;
}
inline ::google::protobuf::uint32 ControlRequest::value() const {
  // @@protoc_insertion_point(field_get:Nmea2k.ControlRequest.Value)
  return value_;
}
inline void ControlRequest::set_value(::google::protobuf::uint32 value) {
  
  value_ = value;
  // @@protoc_insertion_point(field_set:Nmea2k.ControlRequest.Value)
}

// .Nmea2k.ControlRequest.eButtonInfoType ButtonType = 5;
inline void ControlRequest::clear_buttontype() {
  buttontype_ = 0;
}
inline ::Nmea2k::ControlRequest_eButtonInfoType ControlRequest::buttontype() const {
  // @@protoc_insertion_point(field_get:Nmea2k.ControlRequest.ButtonType)
  return static_cast< ::Nmea2k::ControlRequest_eButtonInfoType >(buttontype_);
}
inline void ControlRequest::set_buttontype(::Nmea2k::ControlRequest_eButtonInfoType value) {
  
  buttontype_ = value;
  // @@protoc_insertion_point(field_set:Nmea2k.ControlRequest.ButtonType)
}

// string Token = 6;
inline void ControlRequest::clear_token() {
  token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ControlRequest::token() const {
  // @@protoc_insertion_point(field_get:Nmea2k.ControlRequest.Token)
  return token_.GetNoArena();
}
inline void ControlRequest::set_token(const ::std::string& value) {
  
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Nmea2k.ControlRequest.Token)
}
#if LANG_CXX11
inline void ControlRequest::set_token(::std::string&& value) {
  
  token_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Nmea2k.ControlRequest.Token)
}
#endif
inline void ControlRequest::set_token(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Nmea2k.ControlRequest.Token)
}
inline void ControlRequest::set_token(const char* value, size_t size) {
  
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Nmea2k.ControlRequest.Token)
}
inline ::std::string* ControlRequest::mutable_token() {
  
  // @@protoc_insertion_point(field_mutable:Nmea2k.ControlRequest.Token)
  return token_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ControlRequest::release_token() {
  // @@protoc_insertion_point(field_release:Nmea2k.ControlRequest.Token)
  
  return token_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ControlRequest::set_allocated_token(::std::string* token) {
  if (token != NULL) {
    
  } else {
    
  }
  token_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), token);
  // @@protoc_insertion_point(field_set_allocated:Nmea2k.ControlRequest.Token)
}

// -------------------------------------------------------------------

// CircuitButtonInfo

// string Name = 1;
inline void CircuitButtonInfo::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CircuitButtonInfo::name() const {
  // @@protoc_insertion_point(field_get:Nmea2k.CircuitButtonInfo.Name)
  return name_.GetNoArena();
}
inline void CircuitButtonInfo::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Nmea2k.CircuitButtonInfo.Name)
}
#if LANG_CXX11
inline void CircuitButtonInfo::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Nmea2k.CircuitButtonInfo.Name)
}
#endif
inline void CircuitButtonInfo::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Nmea2k.CircuitButtonInfo.Name)
}
inline void CircuitButtonInfo::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Nmea2k.CircuitButtonInfo.Name)
}
inline ::std::string* CircuitButtonInfo::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:Nmea2k.CircuitButtonInfo.Name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CircuitButtonInfo::release_name() {
  // @@protoc_insertion_point(field_release:Nmea2k.CircuitButtonInfo.Name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CircuitButtonInfo::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:Nmea2k.CircuitButtonInfo.Name)
}

// uint32 IconType = 2;
inline void CircuitButtonInfo::clear_icontype() {
  icontype_ = 0u;
}
inline ::google::protobuf::uint32 CircuitButtonInfo::icontype() const {
  // @@protoc_insertion_point(field_get:Nmea2k.CircuitButtonInfo.IconType)
  return icontype_;
}
inline void CircuitButtonInfo::set_icontype(::google::protobuf::uint32 value) {
  
  icontype_ = value;
  // @@protoc_insertion_point(field_set:Nmea2k.CircuitButtonInfo.IconType)
}

// bool Invert = 3;
inline void CircuitButtonInfo::clear_invert() {
  invert_ = false;
}
inline bool CircuitButtonInfo::invert() const {
  // @@protoc_insertion_point(field_get:Nmea2k.CircuitButtonInfo.Invert)
  return invert_;
}
inline void CircuitButtonInfo::set_invert(bool value) {
  
  invert_ = value;
  // @@protoc_insertion_point(field_set:Nmea2k.CircuitButtonInfo.Invert)
}

// uint32 SingleThrowIconType = 4;
inline void CircuitButtonInfo::clear_singlethrowicontype() {
  singlethrowicontype_ = 0u;
}
inline ::google::protobuf::uint32 CircuitButtonInfo::singlethrowicontype() const {
  // @@protoc_insertion_point(field_get:Nmea2k.CircuitButtonInfo.SingleThrowIconType)
  return singlethrowicontype_;
}
inline void CircuitButtonInfo::set_singlethrowicontype(::google::protobuf::uint32 value) {
  
  singlethrowicontype_ = value;
  // @@protoc_insertion_point(field_set:Nmea2k.CircuitButtonInfo.SingleThrowIconType)
}

// uint32 DoubleThrowIconType = 5;
inline void CircuitButtonInfo::clear_doublethrowicontype() {
  doublethrowicontype_ = 0u;
}
inline ::google::protobuf::uint32 CircuitButtonInfo::doublethrowicontype() const {
  // @@protoc_insertion_point(field_get:Nmea2k.CircuitButtonInfo.DoubleThrowIconType)
  return doublethrowicontype_;
}
inline void CircuitButtonInfo::set_doublethrowicontype(::google::protobuf::uint32 value) {
  
  doublethrowicontype_ = value;
  // @@protoc_insertion_point(field_set:Nmea2k.CircuitButtonInfo.DoubleThrowIconType)
}

// -------------------------------------------------------------------

// Request

// uint32 Source = 1;
inline void Request::clear_source() {
  source_ = 0u;
}
inline ::google::protobuf::uint32 Request::source() const {
  // @@protoc_insertion_point(field_get:Nmea2k.Request.Source)
  return source_;
}
inline void Request::set_source(::google::protobuf::uint32 value) {
  
  source_ = value;
  // @@protoc_insertion_point(field_set:Nmea2k.Request.Source)
}

// uint32 Instance = 2;
inline void Request::clear_instance() {
  instance_ = 0u;
}
inline ::google::protobuf::uint32 Request::instance() const {
  // @@protoc_insertion_point(field_get:Nmea2k.Request.Instance)
  return instance_;
}
inline void Request::set_instance(::google::protobuf::uint32 value) {
  
  instance_ = value;
  // @@protoc_insertion_point(field_set:Nmea2k.Request.Instance)
}

// .Nmea2k.Request.eRequestType type = 3;
inline void Request::clear_type() {
  type_ = 0;
}
inline ::Nmea2k::Request_eRequestType Request::type() const {
  // @@protoc_insertion_point(field_get:Nmea2k.Request.type)
  return static_cast< ::Nmea2k::Request_eRequestType >(type_);
}
inline void Request::set_type(::Nmea2k::Request_eRequestType value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:Nmea2k.Request.type)
}

// string Token = 4;
inline void Request::clear_token() {
  token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Request::token() const {
  // @@protoc_insertion_point(field_get:Nmea2k.Request.Token)
  return token_.GetNoArena();
}
inline void Request::set_token(const ::std::string& value) {
  
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Nmea2k.Request.Token)
}
#if LANG_CXX11
inline void Request::set_token(::std::string&& value) {
  
  token_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Nmea2k.Request.Token)
}
#endif
inline void Request::set_token(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Nmea2k.Request.Token)
}
inline void Request::set_token(const char* value, size_t size) {
  
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Nmea2k.Request.Token)
}
inline ::std::string* Request::mutable_token() {
  
  // @@protoc_insertion_point(field_mutable:Nmea2k.Request.Token)
  return token_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Request::release_token() {
  // @@protoc_insertion_point(field_release:Nmea2k.Request.Token)
  
  return token_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Request::set_allocated_token(::std::string* token) {
  if (token != NULL) {
    
  } else {
    
  }
  token_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), token);
  // @@protoc_insertion_point(field_set_allocated:Nmea2k.Request.Token)
}

// bool RequestCZoneRawEvent = 5;
inline void Request::clear_requestczonerawevent() {
  requestczonerawevent_ = false;
}
inline bool Request::requestczonerawevent() const {
  // @@protoc_insertion_point(field_get:Nmea2k.Request.RequestCZoneRawEvent)
  return requestczonerawevent_;
}
inline void Request::set_requestczonerawevent(bool value) {
  
  requestczonerawevent_ = value;
  // @@protoc_insertion_point(field_set:Nmea2k.Request.RequestCZoneRawEvent)
}

// -------------------------------------------------------------------

// Result

// .Nmea2k.Result.eResultType Result = 1;
inline void Result::clear_result() {
  result_ = 0;
}
inline ::Nmea2k::Result_eResultType Result::result() const {
  // @@protoc_insertion_point(field_get:Nmea2k.Result.Result)
  return static_cast< ::Nmea2k::Result_eResultType >(result_);
}
inline void Result::set_result(::Nmea2k::Result_eResultType value) {
  
  result_ = value;
  // @@protoc_insertion_point(field_set:Nmea2k.Result.Result)
}

// -------------------------------------------------------------------

// ValueF

// bool Valid = 1;
inline void ValueF::clear_valid() {
  valid_ = false;
}
inline bool ValueF::valid() const {
  // @@protoc_insertion_point(field_get:Nmea2k.ValueF.Valid)
  return valid_;
}
inline void ValueF::set_valid(bool value) {
  
  valid_ = value;
  // @@protoc_insertion_point(field_set:Nmea2k.ValueF.Valid)
}

// float Value = 2;
inline void ValueF::clear_value() {
  value_ = 0;
}
inline float ValueF::value() const {
  // @@protoc_insertion_point(field_get:Nmea2k.ValueF.Value)
  return value_;
}
inline void ValueF::set_value(float value) {
  
  value_ = value;
  // @@protoc_insertion_point(field_set:Nmea2k.ValueF.Value)
}

// -------------------------------------------------------------------

// ValueDouble

// bool Valid = 1;
inline void ValueDouble::clear_valid() {
  valid_ = false;
}
inline bool ValueDouble::valid() const {
  // @@protoc_insertion_point(field_get:Nmea2k.ValueDouble.Valid)
  return valid_;
}
inline void ValueDouble::set_valid(bool value) {
  
  valid_ = value;
  // @@protoc_insertion_point(field_set:Nmea2k.ValueDouble.Valid)
}

// double Value = 2;
inline void ValueDouble::clear_value() {
  value_ = 0;
}
inline double ValueDouble::value() const {
  // @@protoc_insertion_point(field_get:Nmea2k.ValueDouble.Value)
  return value_;
}
inline void ValueDouble::set_value(double value) {
  
  value_ = value;
  // @@protoc_insertion_point(field_set:Nmea2k.ValueDouble.Value)
}

// -------------------------------------------------------------------

// ValueU32

// bool Valid = 1;
inline void ValueU32::clear_valid() {
  valid_ = false;
}
inline bool ValueU32::valid() const {
  // @@protoc_insertion_point(field_get:Nmea2k.ValueU32.Valid)
  return valid_;
}
inline void ValueU32::set_valid(bool value) {
  
  valid_ = value;
  // @@protoc_insertion_point(field_set:Nmea2k.ValueU32.Valid)
}

// uint32 Value = 2;
inline void ValueU32::clear_value() {
  value_ = 0u;
}
inline ::google::protobuf::uint32 ValueU32::value() const {
  // @@protoc_insertion_point(field_get:Nmea2k.ValueU32.Value)
  return value_;
}
inline void ValueU32::set_value(::google::protobuf::uint32 value) {
  
  value_ = value;
  // @@protoc_insertion_point(field_set:Nmea2k.ValueU32.Value)
}

// -------------------------------------------------------------------

// ValueS32

// bool Valid = 1;
inline void ValueS32::clear_valid() {
  valid_ = false;
}
inline bool ValueS32::valid() const {
  // @@protoc_insertion_point(field_get:Nmea2k.ValueS32.Valid)
  return valid_;
}
inline void ValueS32::set_valid(bool value) {
  
  valid_ = value;
  // @@protoc_insertion_point(field_set:Nmea2k.ValueS32.Valid)
}

// int32 Value = 2;
inline void ValueS32::clear_value() {
  value_ = 0;
}
inline ::google::protobuf::int32 ValueS32::value() const {
  // @@protoc_insertion_point(field_get:Nmea2k.ValueS32.Value)
  return value_;
}
inline void ValueS32::set_value(::google::protobuf::int32 value) {
  
  value_ = value;
  // @@protoc_insertion_point(field_set:Nmea2k.ValueS32.Value)
}

// -------------------------------------------------------------------

// ValueBool

// bool Valid = 1;
inline void ValueBool::clear_valid() {
  valid_ = false;
}
inline bool ValueBool::valid() const {
  // @@protoc_insertion_point(field_get:Nmea2k.ValueBool.Valid)
  return valid_;
}
inline void ValueBool::set_valid(bool value) {
  
  valid_ = value;
  // @@protoc_insertion_point(field_set:Nmea2k.ValueBool.Valid)
}

// bool Value = 2;
inline void ValueBool::clear_value() {
  value_ = false;
}
inline bool ValueBool::value() const {
  // @@protoc_insertion_point(field_get:Nmea2k.ValueBool.Value)
  return value_;
}
inline void ValueBool::set_value(bool value) {
  
  value_ = value;
  // @@protoc_insertion_point(field_set:Nmea2k.ValueBool.Value)
}

// -------------------------------------------------------------------

// ValueTankType

// bool Valid = 1;
inline void ValueTankType::clear_valid() {
  valid_ = false;
}
inline bool ValueTankType::valid() const {
  // @@protoc_insertion_point(field_get:Nmea2k.ValueTankType.Valid)
  return valid_;
}
inline void ValueTankType::set_valid(bool value) {
  
  valid_ = value;
  // @@protoc_insertion_point(field_set:Nmea2k.ValueTankType.Valid)
}

// .Nmea2k.MonitoringType.eTankType Value = 2;
inline void ValueTankType::clear_value() {
  value_ = 0;
}
inline ::Nmea2k::MonitoringType_eTankType ValueTankType::value() const {
  // @@protoc_insertion_point(field_get:Nmea2k.ValueTankType.Value)
  return static_cast< ::Nmea2k::MonitoringType_eTankType >(value_);
}
inline void ValueTankType::set_value(::Nmea2k::MonitoringType_eTankType value) {
  
  value_ = value;
  // @@protoc_insertion_point(field_set:Nmea2k.ValueTankType.Value)
}

// -------------------------------------------------------------------

// Tank

// uint32 Instance = 1;
inline void Tank::clear_instance() {
  instance_ = 0u;
}
inline ::google::protobuf::uint32 Tank::instance() const {
  // @@protoc_insertion_point(field_get:Nmea2k.Tank.Instance)
  return instance_;
}
inline void Tank::set_instance(::google::protobuf::uint32 value) {
  
  instance_ = value;
  // @@protoc_insertion_point(field_set:Nmea2k.Tank.Instance)
}

// .Nmea2k.ValueU32 LevelPercent = 2;
inline bool Tank::has_levelpercent() const {
  return this != internal_default_instance() && levelpercent_ != NULL;
}
inline void Tank::clear_levelpercent() {
  if (GetArenaNoVirtual() == NULL && levelpercent_ != NULL) {
    delete levelpercent_;
  }
  levelpercent_ = NULL;
}
inline const ::Nmea2k::ValueU32& Tank::_internal_levelpercent() const {
  return *levelpercent_;
}
inline const ::Nmea2k::ValueU32& Tank::levelpercent() const {
  const ::Nmea2k::ValueU32* p = levelpercent_;
  // @@protoc_insertion_point(field_get:Nmea2k.Tank.LevelPercent)
  return p != NULL ? *p : *reinterpret_cast<const ::Nmea2k::ValueU32*>(
      &::Nmea2k::_ValueU32_default_instance_);
}
inline ::Nmea2k::ValueU32* Tank::release_levelpercent() {
  // @@protoc_insertion_point(field_release:Nmea2k.Tank.LevelPercent)
  
  ::Nmea2k::ValueU32* temp = levelpercent_;
  levelpercent_ = NULL;
  return temp;
}
inline ::Nmea2k::ValueU32* Tank::mutable_levelpercent() {
  
  if (levelpercent_ == NULL) {
    auto* p = CreateMaybeMessage<::Nmea2k::ValueU32>(GetArenaNoVirtual());
    levelpercent_ = p;
  }
  // @@protoc_insertion_point(field_mutable:Nmea2k.Tank.LevelPercent)
  return levelpercent_;
}
inline void Tank::set_allocated_levelpercent(::Nmea2k::ValueU32* levelpercent) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete levelpercent_;
  }
  if (levelpercent) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      levelpercent = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, levelpercent, submessage_arena);
    }
    
  } else {
    
  }
  levelpercent_ = levelpercent;
  // @@protoc_insertion_point(field_set_allocated:Nmea2k.Tank.LevelPercent)
}

// .Nmea2k.ValueU32 Level = 3;
inline bool Tank::has_level() const {
  return this != internal_default_instance() && level_ != NULL;
}
inline void Tank::clear_level() {
  if (GetArenaNoVirtual() == NULL && level_ != NULL) {
    delete level_;
  }
  level_ = NULL;
}
inline const ::Nmea2k::ValueU32& Tank::_internal_level() const {
  return *level_;
}
inline const ::Nmea2k::ValueU32& Tank::level() const {
  const ::Nmea2k::ValueU32* p = level_;
  // @@protoc_insertion_point(field_get:Nmea2k.Tank.Level)
  return p != NULL ? *p : *reinterpret_cast<const ::Nmea2k::ValueU32*>(
      &::Nmea2k::_ValueU32_default_instance_);
}
inline ::Nmea2k::ValueU32* Tank::release_level() {
  // @@protoc_insertion_point(field_release:Nmea2k.Tank.Level)
  
  ::Nmea2k::ValueU32* temp = level_;
  level_ = NULL;
  return temp;
}
inline ::Nmea2k::ValueU32* Tank::mutable_level() {
  
  if (level_ == NULL) {
    auto* p = CreateMaybeMessage<::Nmea2k::ValueU32>(GetArenaNoVirtual());
    level_ = p;
  }
  // @@protoc_insertion_point(field_mutable:Nmea2k.Tank.Level)
  return level_;
}
inline void Tank::set_allocated_level(::Nmea2k::ValueU32* level) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete level_;
  }
  if (level) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      level = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, level, submessage_arena);
    }
    
  } else {
    
  }
  level_ = level;
  // @@protoc_insertion_point(field_set_allocated:Nmea2k.Tank.Level)
}

// .Nmea2k.ValueU32 Capacity = 4;
inline bool Tank::has_capacity() const {
  return this != internal_default_instance() && capacity_ != NULL;
}
inline void Tank::clear_capacity() {
  if (GetArenaNoVirtual() == NULL && capacity_ != NULL) {
    delete capacity_;
  }
  capacity_ = NULL;
}
inline const ::Nmea2k::ValueU32& Tank::_internal_capacity() const {
  return *capacity_;
}
inline const ::Nmea2k::ValueU32& Tank::capacity() const {
  const ::Nmea2k::ValueU32* p = capacity_;
  // @@protoc_insertion_point(field_get:Nmea2k.Tank.Capacity)
  return p != NULL ? *p : *reinterpret_cast<const ::Nmea2k::ValueU32*>(
      &::Nmea2k::_ValueU32_default_instance_);
}
inline ::Nmea2k::ValueU32* Tank::release_capacity() {
  // @@protoc_insertion_point(field_release:Nmea2k.Tank.Capacity)
  
  ::Nmea2k::ValueU32* temp = capacity_;
  capacity_ = NULL;
  return temp;
}
inline ::Nmea2k::ValueU32* Tank::mutable_capacity() {
  
  if (capacity_ == NULL) {
    auto* p = CreateMaybeMessage<::Nmea2k::ValueU32>(GetArenaNoVirtual());
    capacity_ = p;
  }
  // @@protoc_insertion_point(field_mutable:Nmea2k.Tank.Capacity)
  return capacity_;
}
inline void Tank::set_allocated_capacity(::Nmea2k::ValueU32* capacity) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete capacity_;
  }
  if (capacity) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      capacity = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, capacity, submessage_arena);
    }
    
  } else {
    
  }
  capacity_ = capacity;
  // @@protoc_insertion_point(field_set_allocated:Nmea2k.Tank.Capacity)
}

// .Nmea2k.ValueTankType TankType = 5;
inline bool Tank::has_tanktype() const {
  return this != internal_default_instance() && tanktype_ != NULL;
}
inline void Tank::clear_tanktype() {
  if (GetArenaNoVirtual() == NULL && tanktype_ != NULL) {
    delete tanktype_;
  }
  tanktype_ = NULL;
}
inline const ::Nmea2k::ValueTankType& Tank::_internal_tanktype() const {
  return *tanktype_;
}
inline const ::Nmea2k::ValueTankType& Tank::tanktype() const {
  const ::Nmea2k::ValueTankType* p = tanktype_;
  // @@protoc_insertion_point(field_get:Nmea2k.Tank.TankType)
  return p != NULL ? *p : *reinterpret_cast<const ::Nmea2k::ValueTankType*>(
      &::Nmea2k::_ValueTankType_default_instance_);
}
inline ::Nmea2k::ValueTankType* Tank::release_tanktype() {
  // @@protoc_insertion_point(field_release:Nmea2k.Tank.TankType)
  
  ::Nmea2k::ValueTankType* temp = tanktype_;
  tanktype_ = NULL;
  return temp;
}
inline ::Nmea2k::ValueTankType* Tank::mutable_tanktype() {
  
  if (tanktype_ == NULL) {
    auto* p = CreateMaybeMessage<::Nmea2k::ValueTankType>(GetArenaNoVirtual());
    tanktype_ = p;
  }
  // @@protoc_insertion_point(field_mutable:Nmea2k.Tank.TankType)
  return tanktype_;
}
inline void Tank::set_allocated_tanktype(::Nmea2k::ValueTankType* tanktype) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete tanktype_;
  }
  if (tanktype) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      tanktype = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, tanktype, submessage_arena);
    }
    
  } else {
    
  }
  tanktype_ = tanktype;
  // @@protoc_insertion_point(field_set_allocated:Nmea2k.Tank.TankType)
}

// -------------------------------------------------------------------

// BinaryLogicState

// uint32 Dipswitch = 1;
inline void BinaryLogicState::clear_dipswitch() {
  dipswitch_ = 0u;
}
inline ::google::protobuf::uint32 BinaryLogicState::dipswitch() const {
  // @@protoc_insertion_point(field_get:Nmea2k.BinaryLogicState.Dipswitch)
  return dipswitch_;
}
inline void BinaryLogicState::set_dipswitch(::google::protobuf::uint32 value) {
  
  dipswitch_ = value;
  // @@protoc_insertion_point(field_set:Nmea2k.BinaryLogicState.Dipswitch)
}

// uint32 Instance = 2;
inline void BinaryLogicState::clear_instance() {
  instance_ = 0u;
}
inline ::google::protobuf::uint32 BinaryLogicState::instance() const {
  // @@protoc_insertion_point(field_get:Nmea2k.BinaryLogicState.Instance)
  return instance_;
}
inline void BinaryLogicState::set_instance(::google::protobuf::uint32 value) {
  
  instance_ = value;
  // @@protoc_insertion_point(field_set:Nmea2k.BinaryLogicState.Instance)
}

// .Nmea2k.ValueU32 States = 3;
inline bool BinaryLogicState::has_states() const {
  return this != internal_default_instance() && states_ != NULL;
}
inline void BinaryLogicState::clear_states() {
  if (GetArenaNoVirtual() == NULL && states_ != NULL) {
    delete states_;
  }
  states_ = NULL;
}
inline const ::Nmea2k::ValueU32& BinaryLogicState::_internal_states() const {
  return *states_;
}
inline const ::Nmea2k::ValueU32& BinaryLogicState::states() const {
  const ::Nmea2k::ValueU32* p = states_;
  // @@protoc_insertion_point(field_get:Nmea2k.BinaryLogicState.States)
  return p != NULL ? *p : *reinterpret_cast<const ::Nmea2k::ValueU32*>(
      &::Nmea2k::_ValueU32_default_instance_);
}
inline ::Nmea2k::ValueU32* BinaryLogicState::release_states() {
  // @@protoc_insertion_point(field_release:Nmea2k.BinaryLogicState.States)
  
  ::Nmea2k::ValueU32* temp = states_;
  states_ = NULL;
  return temp;
}
inline ::Nmea2k::ValueU32* BinaryLogicState::mutable_states() {
  
  if (states_ == NULL) {
    auto* p = CreateMaybeMessage<::Nmea2k::ValueU32>(GetArenaNoVirtual());
    states_ = p;
  }
  // @@protoc_insertion_point(field_mutable:Nmea2k.BinaryLogicState.States)
  return states_;
}
inline void BinaryLogicState::set_allocated_states(::Nmea2k::ValueU32* states) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete states_;
  }
  if (states) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      states = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, states, submessage_arena);
    }
    
  } else {
    
  }
  states_ = states;
  // @@protoc_insertion_point(field_set_allocated:Nmea2k.BinaryLogicState.States)
}

// -------------------------------------------------------------------

// ValueEngineState

// bool Valid = 1;
inline void ValueEngineState::clear_valid() {
  valid_ = false;
}
inline bool ValueEngineState::valid() const {
  // @@protoc_insertion_point(field_get:Nmea2k.ValueEngineState.Valid)
  return valid_;
}
inline void ValueEngineState::set_valid(bool value) {
  
  valid_ = value;
  // @@protoc_insertion_point(field_set:Nmea2k.ValueEngineState.Valid)
}

// .Nmea2k.ValueEngineState.eEngineState Value = 2;
inline void ValueEngineState::clear_value() {
  value_ = 0;
}
inline ::Nmea2k::ValueEngineState_eEngineState ValueEngineState::value() const {
  // @@protoc_insertion_point(field_get:Nmea2k.ValueEngineState.Value)
  return static_cast< ::Nmea2k::ValueEngineState_eEngineState >(value_);
}
inline void ValueEngineState::set_value(::Nmea2k::ValueEngineState_eEngineState value) {
  
  value_ = value;
  // @@protoc_insertion_point(field_set:Nmea2k.ValueEngineState.Value)
}

// -------------------------------------------------------------------

// Engine

// uint32 Instance = 1;
inline void Engine::clear_instance() {
  instance_ = 0u;
}
inline ::google::protobuf::uint32 Engine::instance() const {
  // @@protoc_insertion_point(field_get:Nmea2k.Engine.Instance)
  return instance_;
}
inline void Engine::set_instance(::google::protobuf::uint32 value) {
  
  instance_ = value;
  // @@protoc_insertion_point(field_set:Nmea2k.Engine.Instance)
}

// .Nmea2k.ValueU32 Speed = 2;
inline bool Engine::has_speed() const {
  return this != internal_default_instance() && speed_ != NULL;
}
inline void Engine::clear_speed() {
  if (GetArenaNoVirtual() == NULL && speed_ != NULL) {
    delete speed_;
  }
  speed_ = NULL;
}
inline const ::Nmea2k::ValueU32& Engine::_internal_speed() const {
  return *speed_;
}
inline const ::Nmea2k::ValueU32& Engine::speed() const {
  const ::Nmea2k::ValueU32* p = speed_;
  // @@protoc_insertion_point(field_get:Nmea2k.Engine.Speed)
  return p != NULL ? *p : *reinterpret_cast<const ::Nmea2k::ValueU32*>(
      &::Nmea2k::_ValueU32_default_instance_);
}
inline ::Nmea2k::ValueU32* Engine::release_speed() {
  // @@protoc_insertion_point(field_release:Nmea2k.Engine.Speed)
  
  ::Nmea2k::ValueU32* temp = speed_;
  speed_ = NULL;
  return temp;
}
inline ::Nmea2k::ValueU32* Engine::mutable_speed() {
  
  if (speed_ == NULL) {
    auto* p = CreateMaybeMessage<::Nmea2k::ValueU32>(GetArenaNoVirtual());
    speed_ = p;
  }
  // @@protoc_insertion_point(field_mutable:Nmea2k.Engine.Speed)
  return speed_;
}
inline void Engine::set_allocated_speed(::Nmea2k::ValueU32* speed) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete speed_;
  }
  if (speed) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      speed = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, speed, submessage_arena);
    }
    
  } else {
    
  }
  speed_ = speed;
  // @@protoc_insertion_point(field_set_allocated:Nmea2k.Engine.Speed)
}

// .Nmea2k.ValueF BoostPressure = 3;
inline bool Engine::has_boostpressure() const {
  return this != internal_default_instance() && boostpressure_ != NULL;
}
inline void Engine::clear_boostpressure() {
  if (GetArenaNoVirtual() == NULL && boostpressure_ != NULL) {
    delete boostpressure_;
  }
  boostpressure_ = NULL;
}
inline const ::Nmea2k::ValueF& Engine::_internal_boostpressure() const {
  return *boostpressure_;
}
inline const ::Nmea2k::ValueF& Engine::boostpressure() const {
  const ::Nmea2k::ValueF* p = boostpressure_;
  // @@protoc_insertion_point(field_get:Nmea2k.Engine.BoostPressure)
  return p != NULL ? *p : *reinterpret_cast<const ::Nmea2k::ValueF*>(
      &::Nmea2k::_ValueF_default_instance_);
}
inline ::Nmea2k::ValueF* Engine::release_boostpressure() {
  // @@protoc_insertion_point(field_release:Nmea2k.Engine.BoostPressure)
  
  ::Nmea2k::ValueF* temp = boostpressure_;
  boostpressure_ = NULL;
  return temp;
}
inline ::Nmea2k::ValueF* Engine::mutable_boostpressure() {
  
  if (boostpressure_ == NULL) {
    auto* p = CreateMaybeMessage<::Nmea2k::ValueF>(GetArenaNoVirtual());
    boostpressure_ = p;
  }
  // @@protoc_insertion_point(field_mutable:Nmea2k.Engine.BoostPressure)
  return boostpressure_;
}
inline void Engine::set_allocated_boostpressure(::Nmea2k::ValueF* boostpressure) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete boostpressure_;
  }
  if (boostpressure) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      boostpressure = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, boostpressure, submessage_arena);
    }
    
  } else {
    
  }
  boostpressure_ = boostpressure;
  // @@protoc_insertion_point(field_set_allocated:Nmea2k.Engine.BoostPressure)
}

// .Nmea2k.ValueS32 Trim = 4;
inline bool Engine::has_trim() const {
  return this != internal_default_instance() && trim_ != NULL;
}
inline void Engine::clear_trim() {
  if (GetArenaNoVirtual() == NULL && trim_ != NULL) {
    delete trim_;
  }
  trim_ = NULL;
}
inline const ::Nmea2k::ValueS32& Engine::_internal_trim() const {
  return *trim_;
}
inline const ::Nmea2k::ValueS32& Engine::trim() const {
  const ::Nmea2k::ValueS32* p = trim_;
  // @@protoc_insertion_point(field_get:Nmea2k.Engine.Trim)
  return p != NULL ? *p : *reinterpret_cast<const ::Nmea2k::ValueS32*>(
      &::Nmea2k::_ValueS32_default_instance_);
}
inline ::Nmea2k::ValueS32* Engine::release_trim() {
  // @@protoc_insertion_point(field_release:Nmea2k.Engine.Trim)
  
  ::Nmea2k::ValueS32* temp = trim_;
  trim_ = NULL;
  return temp;
}
inline ::Nmea2k::ValueS32* Engine::mutable_trim() {
  
  if (trim_ == NULL) {
    auto* p = CreateMaybeMessage<::Nmea2k::ValueS32>(GetArenaNoVirtual());
    trim_ = p;
  }
  // @@protoc_insertion_point(field_mutable:Nmea2k.Engine.Trim)
  return trim_;
}
inline void Engine::set_allocated_trim(::Nmea2k::ValueS32* trim) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete trim_;
  }
  if (trim) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      trim = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, trim, submessage_arena);
    }
    
  } else {
    
  }
  trim_ = trim;
  // @@protoc_insertion_point(field_set_allocated:Nmea2k.Engine.Trim)
}

// .Nmea2k.ValueU32 OilPressure = 5;
inline bool Engine::has_oilpressure() const {
  return this != internal_default_instance() && oilpressure_ != NULL;
}
inline void Engine::clear_oilpressure() {
  if (GetArenaNoVirtual() == NULL && oilpressure_ != NULL) {
    delete oilpressure_;
  }
  oilpressure_ = NULL;
}
inline const ::Nmea2k::ValueU32& Engine::_internal_oilpressure() const {
  return *oilpressure_;
}
inline const ::Nmea2k::ValueU32& Engine::oilpressure() const {
  const ::Nmea2k::ValueU32* p = oilpressure_;
  // @@protoc_insertion_point(field_get:Nmea2k.Engine.OilPressure)
  return p != NULL ? *p : *reinterpret_cast<const ::Nmea2k::ValueU32*>(
      &::Nmea2k::_ValueU32_default_instance_);
}
inline ::Nmea2k::ValueU32* Engine::release_oilpressure() {
  // @@protoc_insertion_point(field_release:Nmea2k.Engine.OilPressure)
  
  ::Nmea2k::ValueU32* temp = oilpressure_;
  oilpressure_ = NULL;
  return temp;
}
inline ::Nmea2k::ValueU32* Engine::mutable_oilpressure() {
  
  if (oilpressure_ == NULL) {
    auto* p = CreateMaybeMessage<::Nmea2k::ValueU32>(GetArenaNoVirtual());
    oilpressure_ = p;
  }
  // @@protoc_insertion_point(field_mutable:Nmea2k.Engine.OilPressure)
  return oilpressure_;
}
inline void Engine::set_allocated_oilpressure(::Nmea2k::ValueU32* oilpressure) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete oilpressure_;
  }
  if (oilpressure) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      oilpressure = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, oilpressure, submessage_arena);
    }
    
  } else {
    
  }
  oilpressure_ = oilpressure;
  // @@protoc_insertion_point(field_set_allocated:Nmea2k.Engine.OilPressure)
}

// .Nmea2k.ValueF OilTemperature = 6;
inline bool Engine::has_oiltemperature() const {
  return this != internal_default_instance() && oiltemperature_ != NULL;
}
inline void Engine::clear_oiltemperature() {
  if (GetArenaNoVirtual() == NULL && oiltemperature_ != NULL) {
    delete oiltemperature_;
  }
  oiltemperature_ = NULL;
}
inline const ::Nmea2k::ValueF& Engine::_internal_oiltemperature() const {
  return *oiltemperature_;
}
inline const ::Nmea2k::ValueF& Engine::oiltemperature() const {
  const ::Nmea2k::ValueF* p = oiltemperature_;
  // @@protoc_insertion_point(field_get:Nmea2k.Engine.OilTemperature)
  return p != NULL ? *p : *reinterpret_cast<const ::Nmea2k::ValueF*>(
      &::Nmea2k::_ValueF_default_instance_);
}
inline ::Nmea2k::ValueF* Engine::release_oiltemperature() {
  // @@protoc_insertion_point(field_release:Nmea2k.Engine.OilTemperature)
  
  ::Nmea2k::ValueF* temp = oiltemperature_;
  oiltemperature_ = NULL;
  return temp;
}
inline ::Nmea2k::ValueF* Engine::mutable_oiltemperature() {
  
  if (oiltemperature_ == NULL) {
    auto* p = CreateMaybeMessage<::Nmea2k::ValueF>(GetArenaNoVirtual());
    oiltemperature_ = p;
  }
  // @@protoc_insertion_point(field_mutable:Nmea2k.Engine.OilTemperature)
  return oiltemperature_;
}
inline void Engine::set_allocated_oiltemperature(::Nmea2k::ValueF* oiltemperature) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete oiltemperature_;
  }
  if (oiltemperature) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      oiltemperature = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, oiltemperature, submessage_arena);
    }
    
  } else {
    
  }
  oiltemperature_ = oiltemperature;
  // @@protoc_insertion_point(field_set_allocated:Nmea2k.Engine.OilTemperature)
}

// .Nmea2k.ValueF Temperature = 7;
inline bool Engine::has_temperature() const {
  return this != internal_default_instance() && temperature_ != NULL;
}
inline void Engine::clear_temperature() {
  if (GetArenaNoVirtual() == NULL && temperature_ != NULL) {
    delete temperature_;
  }
  temperature_ = NULL;
}
inline const ::Nmea2k::ValueF& Engine::_internal_temperature() const {
  return *temperature_;
}
inline const ::Nmea2k::ValueF& Engine::temperature() const {
  const ::Nmea2k::ValueF* p = temperature_;
  // @@protoc_insertion_point(field_get:Nmea2k.Engine.Temperature)
  return p != NULL ? *p : *reinterpret_cast<const ::Nmea2k::ValueF*>(
      &::Nmea2k::_ValueF_default_instance_);
}
inline ::Nmea2k::ValueF* Engine::release_temperature() {
  // @@protoc_insertion_point(field_release:Nmea2k.Engine.Temperature)
  
  ::Nmea2k::ValueF* temp = temperature_;
  temperature_ = NULL;
  return temp;
}
inline ::Nmea2k::ValueF* Engine::mutable_temperature() {
  
  if (temperature_ == NULL) {
    auto* p = CreateMaybeMessage<::Nmea2k::ValueF>(GetArenaNoVirtual());
    temperature_ = p;
  }
  // @@protoc_insertion_point(field_mutable:Nmea2k.Engine.Temperature)
  return temperature_;
}
inline void Engine::set_allocated_temperature(::Nmea2k::ValueF* temperature) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete temperature_;
  }
  if (temperature) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      temperature = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, temperature, submessage_arena);
    }
    
  } else {
    
  }
  temperature_ = temperature;
  // @@protoc_insertion_point(field_set_allocated:Nmea2k.Engine.Temperature)
}

// .Nmea2k.ValueF AlternatorPotential = 8;
inline bool Engine::has_alternatorpotential() const {
  return this != internal_default_instance() && alternatorpotential_ != NULL;
}
inline void Engine::clear_alternatorpotential() {
  if (GetArenaNoVirtual() == NULL && alternatorpotential_ != NULL) {
    delete alternatorpotential_;
  }
  alternatorpotential_ = NULL;
}
inline const ::Nmea2k::ValueF& Engine::_internal_alternatorpotential() const {
  return *alternatorpotential_;
}
inline const ::Nmea2k::ValueF& Engine::alternatorpotential() const {
  const ::Nmea2k::ValueF* p = alternatorpotential_;
  // @@protoc_insertion_point(field_get:Nmea2k.Engine.AlternatorPotential)
  return p != NULL ? *p : *reinterpret_cast<const ::Nmea2k::ValueF*>(
      &::Nmea2k::_ValueF_default_instance_);
}
inline ::Nmea2k::ValueF* Engine::release_alternatorpotential() {
  // @@protoc_insertion_point(field_release:Nmea2k.Engine.AlternatorPotential)
  
  ::Nmea2k::ValueF* temp = alternatorpotential_;
  alternatorpotential_ = NULL;
  return temp;
}
inline ::Nmea2k::ValueF* Engine::mutable_alternatorpotential() {
  
  if (alternatorpotential_ == NULL) {
    auto* p = CreateMaybeMessage<::Nmea2k::ValueF>(GetArenaNoVirtual());
    alternatorpotential_ = p;
  }
  // @@protoc_insertion_point(field_mutable:Nmea2k.Engine.AlternatorPotential)
  return alternatorpotential_;
}
inline void Engine::set_allocated_alternatorpotential(::Nmea2k::ValueF* alternatorpotential) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete alternatorpotential_;
  }
  if (alternatorpotential) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      alternatorpotential = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, alternatorpotential, submessage_arena);
    }
    
  } else {
    
  }
  alternatorpotential_ = alternatorpotential;
  // @@protoc_insertion_point(field_set_allocated:Nmea2k.Engine.AlternatorPotential)
}

// .Nmea2k.ValueF FuelRate = 9;
inline bool Engine::has_fuelrate() const {
  return this != internal_default_instance() && fuelrate_ != NULL;
}
inline void Engine::clear_fuelrate() {
  if (GetArenaNoVirtual() == NULL && fuelrate_ != NULL) {
    delete fuelrate_;
  }
  fuelrate_ = NULL;
}
inline const ::Nmea2k::ValueF& Engine::_internal_fuelrate() const {
  return *fuelrate_;
}
inline const ::Nmea2k::ValueF& Engine::fuelrate() const {
  const ::Nmea2k::ValueF* p = fuelrate_;
  // @@protoc_insertion_point(field_get:Nmea2k.Engine.FuelRate)
  return p != NULL ? *p : *reinterpret_cast<const ::Nmea2k::ValueF*>(
      &::Nmea2k::_ValueF_default_instance_);
}
inline ::Nmea2k::ValueF* Engine::release_fuelrate() {
  // @@protoc_insertion_point(field_release:Nmea2k.Engine.FuelRate)
  
  ::Nmea2k::ValueF* temp = fuelrate_;
  fuelrate_ = NULL;
  return temp;
}
inline ::Nmea2k::ValueF* Engine::mutable_fuelrate() {
  
  if (fuelrate_ == NULL) {
    auto* p = CreateMaybeMessage<::Nmea2k::ValueF>(GetArenaNoVirtual());
    fuelrate_ = p;
  }
  // @@protoc_insertion_point(field_mutable:Nmea2k.Engine.FuelRate)
  return fuelrate_;
}
inline void Engine::set_allocated_fuelrate(::Nmea2k::ValueF* fuelrate) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete fuelrate_;
  }
  if (fuelrate) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      fuelrate = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, fuelrate, submessage_arena);
    }
    
  } else {
    
  }
  fuelrate_ = fuelrate;
  // @@protoc_insertion_point(field_set_allocated:Nmea2k.Engine.FuelRate)
}

// .Nmea2k.ValueU32 TotalEngineHours = 10;
inline bool Engine::has_totalenginehours() const {
  return this != internal_default_instance() && totalenginehours_ != NULL;
}
inline void Engine::clear_totalenginehours() {
  if (GetArenaNoVirtual() == NULL && totalenginehours_ != NULL) {
    delete totalenginehours_;
  }
  totalenginehours_ = NULL;
}
inline const ::Nmea2k::ValueU32& Engine::_internal_totalenginehours() const {
  return *totalenginehours_;
}
inline const ::Nmea2k::ValueU32& Engine::totalenginehours() const {
  const ::Nmea2k::ValueU32* p = totalenginehours_;
  // @@protoc_insertion_point(field_get:Nmea2k.Engine.TotalEngineHours)
  return p != NULL ? *p : *reinterpret_cast<const ::Nmea2k::ValueU32*>(
      &::Nmea2k::_ValueU32_default_instance_);
}
inline ::Nmea2k::ValueU32* Engine::release_totalenginehours() {
  // @@protoc_insertion_point(field_release:Nmea2k.Engine.TotalEngineHours)
  
  ::Nmea2k::ValueU32* temp = totalenginehours_;
  totalenginehours_ = NULL;
  return temp;
}
inline ::Nmea2k::ValueU32* Engine::mutable_totalenginehours() {
  
  if (totalenginehours_ == NULL) {
    auto* p = CreateMaybeMessage<::Nmea2k::ValueU32>(GetArenaNoVirtual());
    totalenginehours_ = p;
  }
  // @@protoc_insertion_point(field_mutable:Nmea2k.Engine.TotalEngineHours)
  return totalenginehours_;
}
inline void Engine::set_allocated_totalenginehours(::Nmea2k::ValueU32* totalenginehours) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete totalenginehours_;
  }
  if (totalenginehours) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      totalenginehours = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, totalenginehours, submessage_arena);
    }
    
  } else {
    
  }
  totalenginehours_ = totalenginehours;
  // @@protoc_insertion_point(field_set_allocated:Nmea2k.Engine.TotalEngineHours)
}

// .Nmea2k.ValueF CoolantPressure = 11;
inline bool Engine::has_coolantpressure() const {
  return this != internal_default_instance() && coolantpressure_ != NULL;
}
inline void Engine::clear_coolantpressure() {
  if (GetArenaNoVirtual() == NULL && coolantpressure_ != NULL) {
    delete coolantpressure_;
  }
  coolantpressure_ = NULL;
}
inline const ::Nmea2k::ValueF& Engine::_internal_coolantpressure() const {
  return *coolantpressure_;
}
inline const ::Nmea2k::ValueF& Engine::coolantpressure() const {
  const ::Nmea2k::ValueF* p = coolantpressure_;
  // @@protoc_insertion_point(field_get:Nmea2k.Engine.CoolantPressure)
  return p != NULL ? *p : *reinterpret_cast<const ::Nmea2k::ValueF*>(
      &::Nmea2k::_ValueF_default_instance_);
}
inline ::Nmea2k::ValueF* Engine::release_coolantpressure() {
  // @@protoc_insertion_point(field_release:Nmea2k.Engine.CoolantPressure)
  
  ::Nmea2k::ValueF* temp = coolantpressure_;
  coolantpressure_ = NULL;
  return temp;
}
inline ::Nmea2k::ValueF* Engine::mutable_coolantpressure() {
  
  if (coolantpressure_ == NULL) {
    auto* p = CreateMaybeMessage<::Nmea2k::ValueF>(GetArenaNoVirtual());
    coolantpressure_ = p;
  }
  // @@protoc_insertion_point(field_mutable:Nmea2k.Engine.CoolantPressure)
  return coolantpressure_;
}
inline void Engine::set_allocated_coolantpressure(::Nmea2k::ValueF* coolantpressure) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete coolantpressure_;
  }
  if (coolantpressure) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      coolantpressure = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, coolantpressure, submessage_arena);
    }
    
  } else {
    
  }
  coolantpressure_ = coolantpressure;
  // @@protoc_insertion_point(field_set_allocated:Nmea2k.Engine.CoolantPressure)
}

// .Nmea2k.ValueF CoolantTemperature = 12;
inline bool Engine::has_coolanttemperature() const {
  return this != internal_default_instance() && coolanttemperature_ != NULL;
}
inline void Engine::clear_coolanttemperature() {
  if (GetArenaNoVirtual() == NULL && coolanttemperature_ != NULL) {
    delete coolanttemperature_;
  }
  coolanttemperature_ = NULL;
}
inline const ::Nmea2k::ValueF& Engine::_internal_coolanttemperature() const {
  return *coolanttemperature_;
}
inline const ::Nmea2k::ValueF& Engine::coolanttemperature() const {
  const ::Nmea2k::ValueF* p = coolanttemperature_;
  // @@protoc_insertion_point(field_get:Nmea2k.Engine.CoolantTemperature)
  return p != NULL ? *p : *reinterpret_cast<const ::Nmea2k::ValueF*>(
      &::Nmea2k::_ValueF_default_instance_);
}
inline ::Nmea2k::ValueF* Engine::release_coolanttemperature() {
  // @@protoc_insertion_point(field_release:Nmea2k.Engine.CoolantTemperature)
  
  ::Nmea2k::ValueF* temp = coolanttemperature_;
  coolanttemperature_ = NULL;
  return temp;
}
inline ::Nmea2k::ValueF* Engine::mutable_coolanttemperature() {
  
  if (coolanttemperature_ == NULL) {
    auto* p = CreateMaybeMessage<::Nmea2k::ValueF>(GetArenaNoVirtual());
    coolanttemperature_ = p;
  }
  // @@protoc_insertion_point(field_mutable:Nmea2k.Engine.CoolantTemperature)
  return coolanttemperature_;
}
inline void Engine::set_allocated_coolanttemperature(::Nmea2k::ValueF* coolanttemperature) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete coolanttemperature_;
  }
  if (coolanttemperature) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      coolanttemperature = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, coolanttemperature, submessage_arena);
    }
    
  } else {
    
  }
  coolanttemperature_ = coolanttemperature;
  // @@protoc_insertion_point(field_set_allocated:Nmea2k.Engine.CoolantTemperature)
}

// .Nmea2k.ValueF FuelPressure = 13;
inline bool Engine::has_fuelpressure() const {
  return this != internal_default_instance() && fuelpressure_ != NULL;
}
inline void Engine::clear_fuelpressure() {
  if (GetArenaNoVirtual() == NULL && fuelpressure_ != NULL) {
    delete fuelpressure_;
  }
  fuelpressure_ = NULL;
}
inline const ::Nmea2k::ValueF& Engine::_internal_fuelpressure() const {
  return *fuelpressure_;
}
inline const ::Nmea2k::ValueF& Engine::fuelpressure() const {
  const ::Nmea2k::ValueF* p = fuelpressure_;
  // @@protoc_insertion_point(field_get:Nmea2k.Engine.FuelPressure)
  return p != NULL ? *p : *reinterpret_cast<const ::Nmea2k::ValueF*>(
      &::Nmea2k::_ValueF_default_instance_);
}
inline ::Nmea2k::ValueF* Engine::release_fuelpressure() {
  // @@protoc_insertion_point(field_release:Nmea2k.Engine.FuelPressure)
  
  ::Nmea2k::ValueF* temp = fuelpressure_;
  fuelpressure_ = NULL;
  return temp;
}
inline ::Nmea2k::ValueF* Engine::mutable_fuelpressure() {
  
  if (fuelpressure_ == NULL) {
    auto* p = CreateMaybeMessage<::Nmea2k::ValueF>(GetArenaNoVirtual());
    fuelpressure_ = p;
  }
  // @@protoc_insertion_point(field_mutable:Nmea2k.Engine.FuelPressure)
  return fuelpressure_;
}
inline void Engine::set_allocated_fuelpressure(::Nmea2k::ValueF* fuelpressure) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete fuelpressure_;
  }
  if (fuelpressure) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      fuelpressure = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, fuelpressure, submessage_arena);
    }
    
  } else {
    
  }
  fuelpressure_ = fuelpressure;
  // @@protoc_insertion_point(field_set_allocated:Nmea2k.Engine.FuelPressure)
}

// .Nmea2k.ValueU32 DiscreteStatus1 = 14;
inline bool Engine::has_discretestatus1() const {
  return this != internal_default_instance() && discretestatus1_ != NULL;
}
inline void Engine::clear_discretestatus1() {
  if (GetArenaNoVirtual() == NULL && discretestatus1_ != NULL) {
    delete discretestatus1_;
  }
  discretestatus1_ = NULL;
}
inline const ::Nmea2k::ValueU32& Engine::_internal_discretestatus1() const {
  return *discretestatus1_;
}
inline const ::Nmea2k::ValueU32& Engine::discretestatus1() const {
  const ::Nmea2k::ValueU32* p = discretestatus1_;
  // @@protoc_insertion_point(field_get:Nmea2k.Engine.DiscreteStatus1)
  return p != NULL ? *p : *reinterpret_cast<const ::Nmea2k::ValueU32*>(
      &::Nmea2k::_ValueU32_default_instance_);
}
inline ::Nmea2k::ValueU32* Engine::release_discretestatus1() {
  // @@protoc_insertion_point(field_release:Nmea2k.Engine.DiscreteStatus1)
  
  ::Nmea2k::ValueU32* temp = discretestatus1_;
  discretestatus1_ = NULL;
  return temp;
}
inline ::Nmea2k::ValueU32* Engine::mutable_discretestatus1() {
  
  if (discretestatus1_ == NULL) {
    auto* p = CreateMaybeMessage<::Nmea2k::ValueU32>(GetArenaNoVirtual());
    discretestatus1_ = p;
  }
  // @@protoc_insertion_point(field_mutable:Nmea2k.Engine.DiscreteStatus1)
  return discretestatus1_;
}
inline void Engine::set_allocated_discretestatus1(::Nmea2k::ValueU32* discretestatus1) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete discretestatus1_;
  }
  if (discretestatus1) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      discretestatus1 = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, discretestatus1, submessage_arena);
    }
    
  } else {
    
  }
  discretestatus1_ = discretestatus1;
  // @@protoc_insertion_point(field_set_allocated:Nmea2k.Engine.DiscreteStatus1)
}

// .Nmea2k.ValueU32 DiscreteStatus2 = 15;
inline bool Engine::has_discretestatus2() const {
  return this != internal_default_instance() && discretestatus2_ != NULL;
}
inline void Engine::clear_discretestatus2() {
  if (GetArenaNoVirtual() == NULL && discretestatus2_ != NULL) {
    delete discretestatus2_;
  }
  discretestatus2_ = NULL;
}
inline const ::Nmea2k::ValueU32& Engine::_internal_discretestatus2() const {
  return *discretestatus2_;
}
inline const ::Nmea2k::ValueU32& Engine::discretestatus2() const {
  const ::Nmea2k::ValueU32* p = discretestatus2_;
  // @@protoc_insertion_point(field_get:Nmea2k.Engine.DiscreteStatus2)
  return p != NULL ? *p : *reinterpret_cast<const ::Nmea2k::ValueU32*>(
      &::Nmea2k::_ValueU32_default_instance_);
}
inline ::Nmea2k::ValueU32* Engine::release_discretestatus2() {
  // @@protoc_insertion_point(field_release:Nmea2k.Engine.DiscreteStatus2)
  
  ::Nmea2k::ValueU32* temp = discretestatus2_;
  discretestatus2_ = NULL;
  return temp;
}
inline ::Nmea2k::ValueU32* Engine::mutable_discretestatus2() {
  
  if (discretestatus2_ == NULL) {
    auto* p = CreateMaybeMessage<::Nmea2k::ValueU32>(GetArenaNoVirtual());
    discretestatus2_ = p;
  }
  // @@protoc_insertion_point(field_mutable:Nmea2k.Engine.DiscreteStatus2)
  return discretestatus2_;
}
inline void Engine::set_allocated_discretestatus2(::Nmea2k::ValueU32* discretestatus2) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete discretestatus2_;
  }
  if (discretestatus2) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      discretestatus2 = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, discretestatus2, submessage_arena);
    }
    
  } else {
    
  }
  discretestatus2_ = discretestatus2;
  // @@protoc_insertion_point(field_set_allocated:Nmea2k.Engine.DiscreteStatus2)
}

// .Nmea2k.ValueS32 PercentEngineLoad = 16;
inline bool Engine::has_percentengineload() const {
  return this != internal_default_instance() && percentengineload_ != NULL;
}
inline void Engine::clear_percentengineload() {
  if (GetArenaNoVirtual() == NULL && percentengineload_ != NULL) {
    delete percentengineload_;
  }
  percentengineload_ = NULL;
}
inline const ::Nmea2k::ValueS32& Engine::_internal_percentengineload() const {
  return *percentengineload_;
}
inline const ::Nmea2k::ValueS32& Engine::percentengineload() const {
  const ::Nmea2k::ValueS32* p = percentengineload_;
  // @@protoc_insertion_point(field_get:Nmea2k.Engine.PercentEngineLoad)
  return p != NULL ? *p : *reinterpret_cast<const ::Nmea2k::ValueS32*>(
      &::Nmea2k::_ValueS32_default_instance_);
}
inline ::Nmea2k::ValueS32* Engine::release_percentengineload() {
  // @@protoc_insertion_point(field_release:Nmea2k.Engine.PercentEngineLoad)
  
  ::Nmea2k::ValueS32* temp = percentengineload_;
  percentengineload_ = NULL;
  return temp;
}
inline ::Nmea2k::ValueS32* Engine::mutable_percentengineload() {
  
  if (percentengineload_ == NULL) {
    auto* p = CreateMaybeMessage<::Nmea2k::ValueS32>(GetArenaNoVirtual());
    percentengineload_ = p;
  }
  // @@protoc_insertion_point(field_mutable:Nmea2k.Engine.PercentEngineLoad)
  return percentengineload_;
}
inline void Engine::set_allocated_percentengineload(::Nmea2k::ValueS32* percentengineload) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete percentengineload_;
  }
  if (percentengineload) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      percentengineload = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, percentengineload, submessage_arena);
    }
    
  } else {
    
  }
  percentengineload_ = percentengineload;
  // @@protoc_insertion_point(field_set_allocated:Nmea2k.Engine.PercentEngineLoad)
}

// .Nmea2k.ValueS32 PercentEngineTorque = 17;
inline bool Engine::has_percentenginetorque() const {
  return this != internal_default_instance() && percentenginetorque_ != NULL;
}
inline void Engine::clear_percentenginetorque() {
  if (GetArenaNoVirtual() == NULL && percentenginetorque_ != NULL) {
    delete percentenginetorque_;
  }
  percentenginetorque_ = NULL;
}
inline const ::Nmea2k::ValueS32& Engine::_internal_percentenginetorque() const {
  return *percentenginetorque_;
}
inline const ::Nmea2k::ValueS32& Engine::percentenginetorque() const {
  const ::Nmea2k::ValueS32* p = percentenginetorque_;
  // @@protoc_insertion_point(field_get:Nmea2k.Engine.PercentEngineTorque)
  return p != NULL ? *p : *reinterpret_cast<const ::Nmea2k::ValueS32*>(
      &::Nmea2k::_ValueS32_default_instance_);
}
inline ::Nmea2k::ValueS32* Engine::release_percentenginetorque() {
  // @@protoc_insertion_point(field_release:Nmea2k.Engine.PercentEngineTorque)
  
  ::Nmea2k::ValueS32* temp = percentenginetorque_;
  percentenginetorque_ = NULL;
  return temp;
}
inline ::Nmea2k::ValueS32* Engine::mutable_percentenginetorque() {
  
  if (percentenginetorque_ == NULL) {
    auto* p = CreateMaybeMessage<::Nmea2k::ValueS32>(GetArenaNoVirtual());
    percentenginetorque_ = p;
  }
  // @@protoc_insertion_point(field_mutable:Nmea2k.Engine.PercentEngineTorque)
  return percentenginetorque_;
}
inline void Engine::set_allocated_percentenginetorque(::Nmea2k::ValueS32* percentenginetorque) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete percentenginetorque_;
  }
  if (percentenginetorque) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      percentenginetorque = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, percentenginetorque, submessage_arena);
    }
    
  } else {
    
  }
  percentenginetorque_ = percentenginetorque;
  // @@protoc_insertion_point(field_set_allocated:Nmea2k.Engine.PercentEngineTorque)
}

// .Nmea2k.ValueEngineState EngineState = 18;
inline bool Engine::has_enginestate() const {
  return this != internal_default_instance() && enginestate_ != NULL;
}
inline void Engine::clear_enginestate() {
  if (GetArenaNoVirtual() == NULL && enginestate_ != NULL) {
    delete enginestate_;
  }
  enginestate_ = NULL;
}
inline const ::Nmea2k::ValueEngineState& Engine::_internal_enginestate() const {
  return *enginestate_;
}
inline const ::Nmea2k::ValueEngineState& Engine::enginestate() const {
  const ::Nmea2k::ValueEngineState* p = enginestate_;
  // @@protoc_insertion_point(field_get:Nmea2k.Engine.EngineState)
  return p != NULL ? *p : *reinterpret_cast<const ::Nmea2k::ValueEngineState*>(
      &::Nmea2k::_ValueEngineState_default_instance_);
}
inline ::Nmea2k::ValueEngineState* Engine::release_enginestate() {
  // @@protoc_insertion_point(field_release:Nmea2k.Engine.EngineState)
  
  ::Nmea2k::ValueEngineState* temp = enginestate_;
  enginestate_ = NULL;
  return temp;
}
inline ::Nmea2k::ValueEngineState* Engine::mutable_enginestate() {
  
  if (enginestate_ == NULL) {
    auto* p = CreateMaybeMessage<::Nmea2k::ValueEngineState>(GetArenaNoVirtual());
    enginestate_ = p;
  }
  // @@protoc_insertion_point(field_mutable:Nmea2k.Engine.EngineState)
  return enginestate_;
}
inline void Engine::set_allocated_enginestate(::Nmea2k::ValueEngineState* enginestate) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete enginestate_;
  }
  if (enginestate) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      enginestate = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, enginestate, submessage_arena);
    }
    
  } else {
    
  }
  enginestate_ = enginestate;
  // @@protoc_insertion_point(field_set_allocated:Nmea2k.Engine.EngineState)
}

// .Nmea2k.ValueU32 ActiveEnginesId = 19;
inline bool Engine::has_activeenginesid() const {
  return this != internal_default_instance() && activeenginesid_ != NULL;
}
inline void Engine::clear_activeenginesid() {
  if (GetArenaNoVirtual() == NULL && activeenginesid_ != NULL) {
    delete activeenginesid_;
  }
  activeenginesid_ = NULL;
}
inline const ::Nmea2k::ValueU32& Engine::_internal_activeenginesid() const {
  return *activeenginesid_;
}
inline const ::Nmea2k::ValueU32& Engine::activeenginesid() const {
  const ::Nmea2k::ValueU32* p = activeenginesid_;
  // @@protoc_insertion_point(field_get:Nmea2k.Engine.ActiveEnginesId)
  return p != NULL ? *p : *reinterpret_cast<const ::Nmea2k::ValueU32*>(
      &::Nmea2k::_ValueU32_default_instance_);
}
inline ::Nmea2k::ValueU32* Engine::release_activeenginesid() {
  // @@protoc_insertion_point(field_release:Nmea2k.Engine.ActiveEnginesId)
  
  ::Nmea2k::ValueU32* temp = activeenginesid_;
  activeenginesid_ = NULL;
  return temp;
}
inline ::Nmea2k::ValueU32* Engine::mutable_activeenginesid() {
  
  if (activeenginesid_ == NULL) {
    auto* p = CreateMaybeMessage<::Nmea2k::ValueU32>(GetArenaNoVirtual());
    activeenginesid_ = p;
  }
  // @@protoc_insertion_point(field_mutable:Nmea2k.Engine.ActiveEnginesId)
  return activeenginesid_;
}
inline void Engine::set_allocated_activeenginesid(::Nmea2k::ValueU32* activeenginesid) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete activeenginesid_;
  }
  if (activeenginesid) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      activeenginesid = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, activeenginesid, submessage_arena);
    }
    
  } else {
    
  }
  activeenginesid_ = activeenginesid;
  // @@protoc_insertion_point(field_set_allocated:Nmea2k.Engine.ActiveEnginesId)
}

// -------------------------------------------------------------------

// ACLine

// uint32 Instance = 1;
inline void ACLine::clear_instance() {
  instance_ = 0u;
}
inline ::google::protobuf::uint32 ACLine::instance() const {
  // @@protoc_insertion_point(field_get:Nmea2k.ACLine.Instance)
  return instance_;
}
inline void ACLine::set_instance(::google::protobuf::uint32 value) {
  
  instance_ = value;
  // @@protoc_insertion_point(field_set:Nmea2k.ACLine.Instance)
}

// .Nmea2k.MeteringDevice.eACLine Line = 2;
inline void ACLine::clear_line() {
  line_ = 0;
}
inline ::Nmea2k::MeteringDevice_eACLine ACLine::line() const {
  // @@protoc_insertion_point(field_get:Nmea2k.ACLine.Line)
  return static_cast< ::Nmea2k::MeteringDevice_eACLine >(line_);
}
inline void ACLine::set_line(::Nmea2k::MeteringDevice_eACLine value) {
  
  line_ = value;
  // @@protoc_insertion_point(field_set:Nmea2k.ACLine.Line)
}

// .Nmea2k.ValueF Voltage = 3;
inline bool ACLine::has_voltage() const {
  return this != internal_default_instance() && voltage_ != NULL;
}
inline void ACLine::clear_voltage() {
  if (GetArenaNoVirtual() == NULL && voltage_ != NULL) {
    delete voltage_;
  }
  voltage_ = NULL;
}
inline const ::Nmea2k::ValueF& ACLine::_internal_voltage() const {
  return *voltage_;
}
inline const ::Nmea2k::ValueF& ACLine::voltage() const {
  const ::Nmea2k::ValueF* p = voltage_;
  // @@protoc_insertion_point(field_get:Nmea2k.ACLine.Voltage)
  return p != NULL ? *p : *reinterpret_cast<const ::Nmea2k::ValueF*>(
      &::Nmea2k::_ValueF_default_instance_);
}
inline ::Nmea2k::ValueF* ACLine::release_voltage() {
  // @@protoc_insertion_point(field_release:Nmea2k.ACLine.Voltage)
  
  ::Nmea2k::ValueF* temp = voltage_;
  voltage_ = NULL;
  return temp;
}
inline ::Nmea2k::ValueF* ACLine::mutable_voltage() {
  
  if (voltage_ == NULL) {
    auto* p = CreateMaybeMessage<::Nmea2k::ValueF>(GetArenaNoVirtual());
    voltage_ = p;
  }
  // @@protoc_insertion_point(field_mutable:Nmea2k.ACLine.Voltage)
  return voltage_;
}
inline void ACLine::set_allocated_voltage(::Nmea2k::ValueF* voltage) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete voltage_;
  }
  if (voltage) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      voltage = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, voltage, submessage_arena);
    }
    
  } else {
    
  }
  voltage_ = voltage;
  // @@protoc_insertion_point(field_set_allocated:Nmea2k.ACLine.Voltage)
}

// .Nmea2k.ValueF Current = 4;
inline bool ACLine::has_current() const {
  return this != internal_default_instance() && current_ != NULL;
}
inline void ACLine::clear_current() {
  if (GetArenaNoVirtual() == NULL && current_ != NULL) {
    delete current_;
  }
  current_ = NULL;
}
inline const ::Nmea2k::ValueF& ACLine::_internal_current() const {
  return *current_;
}
inline const ::Nmea2k::ValueF& ACLine::current() const {
  const ::Nmea2k::ValueF* p = current_;
  // @@protoc_insertion_point(field_get:Nmea2k.ACLine.Current)
  return p != NULL ? *p : *reinterpret_cast<const ::Nmea2k::ValueF*>(
      &::Nmea2k::_ValueF_default_instance_);
}
inline ::Nmea2k::ValueF* ACLine::release_current() {
  // @@protoc_insertion_point(field_release:Nmea2k.ACLine.Current)
  
  ::Nmea2k::ValueF* temp = current_;
  current_ = NULL;
  return temp;
}
inline ::Nmea2k::ValueF* ACLine::mutable_current() {
  
  if (current_ == NULL) {
    auto* p = CreateMaybeMessage<::Nmea2k::ValueF>(GetArenaNoVirtual());
    current_ = p;
  }
  // @@protoc_insertion_point(field_mutable:Nmea2k.ACLine.Current)
  return current_;
}
inline void ACLine::set_allocated_current(::Nmea2k::ValueF* current) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete current_;
  }
  if (current) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      current = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, current, submessage_arena);
    }
    
  } else {
    
  }
  current_ = current;
  // @@protoc_insertion_point(field_set_allocated:Nmea2k.ACLine.Current)
}

// .Nmea2k.ValueF Frequency = 5;
inline bool ACLine::has_frequency() const {
  return this != internal_default_instance() && frequency_ != NULL;
}
inline void ACLine::clear_frequency() {
  if (GetArenaNoVirtual() == NULL && frequency_ != NULL) {
    delete frequency_;
  }
  frequency_ = NULL;
}
inline const ::Nmea2k::ValueF& ACLine::_internal_frequency() const {
  return *frequency_;
}
inline const ::Nmea2k::ValueF& ACLine::frequency() const {
  const ::Nmea2k::ValueF* p = frequency_;
  // @@protoc_insertion_point(field_get:Nmea2k.ACLine.Frequency)
  return p != NULL ? *p : *reinterpret_cast<const ::Nmea2k::ValueF*>(
      &::Nmea2k::_ValueF_default_instance_);
}
inline ::Nmea2k::ValueF* ACLine::release_frequency() {
  // @@protoc_insertion_point(field_release:Nmea2k.ACLine.Frequency)
  
  ::Nmea2k::ValueF* temp = frequency_;
  frequency_ = NULL;
  return temp;
}
inline ::Nmea2k::ValueF* ACLine::mutable_frequency() {
  
  if (frequency_ == NULL) {
    auto* p = CreateMaybeMessage<::Nmea2k::ValueF>(GetArenaNoVirtual());
    frequency_ = p;
  }
  // @@protoc_insertion_point(field_mutable:Nmea2k.ACLine.Frequency)
  return frequency_;
}
inline void ACLine::set_allocated_frequency(::Nmea2k::ValueF* frequency) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete frequency_;
  }
  if (frequency) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      frequency = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, frequency, submessage_arena);
    }
    
  } else {
    
  }
  frequency_ = frequency;
  // @@protoc_insertion_point(field_set_allocated:Nmea2k.ACLine.Frequency)
}

// .Nmea2k.ValueF Power = 6;
inline bool ACLine::has_power() const {
  return this != internal_default_instance() && power_ != NULL;
}
inline void ACLine::clear_power() {
  if (GetArenaNoVirtual() == NULL && power_ != NULL) {
    delete power_;
  }
  power_ = NULL;
}
inline const ::Nmea2k::ValueF& ACLine::_internal_power() const {
  return *power_;
}
inline const ::Nmea2k::ValueF& ACLine::power() const {
  const ::Nmea2k::ValueF* p = power_;
  // @@protoc_insertion_point(field_get:Nmea2k.ACLine.Power)
  return p != NULL ? *p : *reinterpret_cast<const ::Nmea2k::ValueF*>(
      &::Nmea2k::_ValueF_default_instance_);
}
inline ::Nmea2k::ValueF* ACLine::release_power() {
  // @@protoc_insertion_point(field_release:Nmea2k.ACLine.Power)
  
  ::Nmea2k::ValueF* temp = power_;
  power_ = NULL;
  return temp;
}
inline ::Nmea2k::ValueF* ACLine::mutable_power() {
  
  if (power_ == NULL) {
    auto* p = CreateMaybeMessage<::Nmea2k::ValueF>(GetArenaNoVirtual());
    power_ = p;
  }
  // @@protoc_insertion_point(field_mutable:Nmea2k.ACLine.Power)
  return power_;
}
inline void ACLine::set_allocated_power(::Nmea2k::ValueF* power) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete power_;
  }
  if (power) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      power = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, power, submessage_arena);
    }
    
  } else {
    
  }
  power_ = power;
  // @@protoc_insertion_point(field_set_allocated:Nmea2k.ACLine.Power)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// AC

// uint32 Instance = 1;
inline void AC::clear_instance() {
  instance_ = 0u;
}
inline ::google::protobuf::uint32 AC::instance() const {
  // @@protoc_insertion_point(field_get:Nmea2k.AC.Instance)
  return instance_;
}
inline void AC::set_instance(::google::protobuf::uint32 value) {
  
  instance_ = value;
  // @@protoc_insertion_point(field_set:Nmea2k.AC.Instance)
}

// map<uint32, .Nmea2k.ACLine> AClines = 2;
inline int AC::aclines_size() const {
  return aclines_.size();
}
inline void AC::clear_aclines() {
  aclines_.Clear();
}
inline const ::google::protobuf::Map< ::google::protobuf::uint32, ::Nmea2k::ACLine >&
AC::aclines() const {
  // @@protoc_insertion_point(field_map:Nmea2k.AC.AClines)
  return aclines_.GetMap();
}
inline ::google::protobuf::Map< ::google::protobuf::uint32, ::Nmea2k::ACLine >*
AC::mutable_aclines() {
  // @@protoc_insertion_point(field_mutable_map:Nmea2k.AC.AClines)
  return aclines_.MutableMap();
}

// -------------------------------------------------------------------

// DC

// uint32 Instance = 1;
inline void DC::clear_instance() {
  instance_ = 0u;
}
inline ::google::protobuf::uint32 DC::instance() const {
  // @@protoc_insertion_point(field_get:Nmea2k.DC.Instance)
  return instance_;
}
inline void DC::set_instance(::google::protobuf::uint32 value) {
  
  instance_ = value;
  // @@protoc_insertion_point(field_set:Nmea2k.DC.Instance)
}

// .Nmea2k.ValueF Voltage = 2;
inline bool DC::has_voltage() const {
  return this != internal_default_instance() && voltage_ != NULL;
}
inline void DC::clear_voltage() {
  if (GetArenaNoVirtual() == NULL && voltage_ != NULL) {
    delete voltage_;
  }
  voltage_ = NULL;
}
inline const ::Nmea2k::ValueF& DC::_internal_voltage() const {
  return *voltage_;
}
inline const ::Nmea2k::ValueF& DC::voltage() const {
  const ::Nmea2k::ValueF* p = voltage_;
  // @@protoc_insertion_point(field_get:Nmea2k.DC.Voltage)
  return p != NULL ? *p : *reinterpret_cast<const ::Nmea2k::ValueF*>(
      &::Nmea2k::_ValueF_default_instance_);
}
inline ::Nmea2k::ValueF* DC::release_voltage() {
  // @@protoc_insertion_point(field_release:Nmea2k.DC.Voltage)
  
  ::Nmea2k::ValueF* temp = voltage_;
  voltage_ = NULL;
  return temp;
}
inline ::Nmea2k::ValueF* DC::mutable_voltage() {
  
  if (voltage_ == NULL) {
    auto* p = CreateMaybeMessage<::Nmea2k::ValueF>(GetArenaNoVirtual());
    voltage_ = p;
  }
  // @@protoc_insertion_point(field_mutable:Nmea2k.DC.Voltage)
  return voltage_;
}
inline void DC::set_allocated_voltage(::Nmea2k::ValueF* voltage) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete voltage_;
  }
  if (voltage) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      voltage = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, voltage, submessage_arena);
    }
    
  } else {
    
  }
  voltage_ = voltage;
  // @@protoc_insertion_point(field_set_allocated:Nmea2k.DC.Voltage)
}

// .Nmea2k.ValueF Current = 3;
inline bool DC::has_current() const {
  return this != internal_default_instance() && current_ != NULL;
}
inline void DC::clear_current() {
  if (GetArenaNoVirtual() == NULL && current_ != NULL) {
    delete current_;
  }
  current_ = NULL;
}
inline const ::Nmea2k::ValueF& DC::_internal_current() const {
  return *current_;
}
inline const ::Nmea2k::ValueF& DC::current() const {
  const ::Nmea2k::ValueF* p = current_;
  // @@protoc_insertion_point(field_get:Nmea2k.DC.Current)
  return p != NULL ? *p : *reinterpret_cast<const ::Nmea2k::ValueF*>(
      &::Nmea2k::_ValueF_default_instance_);
}
inline ::Nmea2k::ValueF* DC::release_current() {
  // @@protoc_insertion_point(field_release:Nmea2k.DC.Current)
  
  ::Nmea2k::ValueF* temp = current_;
  current_ = NULL;
  return temp;
}
inline ::Nmea2k::ValueF* DC::mutable_current() {
  
  if (current_ == NULL) {
    auto* p = CreateMaybeMessage<::Nmea2k::ValueF>(GetArenaNoVirtual());
    current_ = p;
  }
  // @@protoc_insertion_point(field_mutable:Nmea2k.DC.Current)
  return current_;
}
inline void DC::set_allocated_current(::Nmea2k::ValueF* current) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete current_;
  }
  if (current) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      current = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, current, submessage_arena);
    }
    
  } else {
    
  }
  current_ = current;
  // @@protoc_insertion_point(field_set_allocated:Nmea2k.DC.Current)
}

// .Nmea2k.ValueF Temperature = 4;
inline bool DC::has_temperature() const {
  return this != internal_default_instance() && temperature_ != NULL;
}
inline void DC::clear_temperature() {
  if (GetArenaNoVirtual() == NULL && temperature_ != NULL) {
    delete temperature_;
  }
  temperature_ = NULL;
}
inline const ::Nmea2k::ValueF& DC::_internal_temperature() const {
  return *temperature_;
}
inline const ::Nmea2k::ValueF& DC::temperature() const {
  const ::Nmea2k::ValueF* p = temperature_;
  // @@protoc_insertion_point(field_get:Nmea2k.DC.Temperature)
  return p != NULL ? *p : *reinterpret_cast<const ::Nmea2k::ValueF*>(
      &::Nmea2k::_ValueF_default_instance_);
}
inline ::Nmea2k::ValueF* DC::release_temperature() {
  // @@protoc_insertion_point(field_release:Nmea2k.DC.Temperature)
  
  ::Nmea2k::ValueF* temp = temperature_;
  temperature_ = NULL;
  return temp;
}
inline ::Nmea2k::ValueF* DC::mutable_temperature() {
  
  if (temperature_ == NULL) {
    auto* p = CreateMaybeMessage<::Nmea2k::ValueF>(GetArenaNoVirtual());
    temperature_ = p;
  }
  // @@protoc_insertion_point(field_mutable:Nmea2k.DC.Temperature)
  return temperature_;
}
inline void DC::set_allocated_temperature(::Nmea2k::ValueF* temperature) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete temperature_;
  }
  if (temperature) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      temperature = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, temperature, submessage_arena);
    }
    
  } else {
    
  }
  temperature_ = temperature;
  // @@protoc_insertion_point(field_set_allocated:Nmea2k.DC.Temperature)
}

// .Nmea2k.ValueS32 StateOfCharge = 5;
inline bool DC::has_stateofcharge() const {
  return this != internal_default_instance() && stateofcharge_ != NULL;
}
inline void DC::clear_stateofcharge() {
  if (GetArenaNoVirtual() == NULL && stateofcharge_ != NULL) {
    delete stateofcharge_;
  }
  stateofcharge_ = NULL;
}
inline const ::Nmea2k::ValueS32& DC::_internal_stateofcharge() const {
  return *stateofcharge_;
}
inline const ::Nmea2k::ValueS32& DC::stateofcharge() const {
  const ::Nmea2k::ValueS32* p = stateofcharge_;
  // @@protoc_insertion_point(field_get:Nmea2k.DC.StateOfCharge)
  return p != NULL ? *p : *reinterpret_cast<const ::Nmea2k::ValueS32*>(
      &::Nmea2k::_ValueS32_default_instance_);
}
inline ::Nmea2k::ValueS32* DC::release_stateofcharge() {
  // @@protoc_insertion_point(field_release:Nmea2k.DC.StateOfCharge)
  
  ::Nmea2k::ValueS32* temp = stateofcharge_;
  stateofcharge_ = NULL;
  return temp;
}
inline ::Nmea2k::ValueS32* DC::mutable_stateofcharge() {
  
  if (stateofcharge_ == NULL) {
    auto* p = CreateMaybeMessage<::Nmea2k::ValueS32>(GetArenaNoVirtual());
    stateofcharge_ = p;
  }
  // @@protoc_insertion_point(field_mutable:Nmea2k.DC.StateOfCharge)
  return stateofcharge_;
}
inline void DC::set_allocated_stateofcharge(::Nmea2k::ValueS32* stateofcharge) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete stateofcharge_;
  }
  if (stateofcharge) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      stateofcharge = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, stateofcharge, submessage_arena);
    }
    
  } else {
    
  }
  stateofcharge_ = stateofcharge;
  // @@protoc_insertion_point(field_set_allocated:Nmea2k.DC.StateOfCharge)
}

// .Nmea2k.ValueF CapacityRemaining = 6;
inline bool DC::has_capacityremaining() const {
  return this != internal_default_instance() && capacityremaining_ != NULL;
}
inline void DC::clear_capacityremaining() {
  if (GetArenaNoVirtual() == NULL && capacityremaining_ != NULL) {
    delete capacityremaining_;
  }
  capacityremaining_ = NULL;
}
inline const ::Nmea2k::ValueF& DC::_internal_capacityremaining() const {
  return *capacityremaining_;
}
inline const ::Nmea2k::ValueF& DC::capacityremaining() const {
  const ::Nmea2k::ValueF* p = capacityremaining_;
  // @@protoc_insertion_point(field_get:Nmea2k.DC.CapacityRemaining)
  return p != NULL ? *p : *reinterpret_cast<const ::Nmea2k::ValueF*>(
      &::Nmea2k::_ValueF_default_instance_);
}
inline ::Nmea2k::ValueF* DC::release_capacityremaining() {
  // @@protoc_insertion_point(field_release:Nmea2k.DC.CapacityRemaining)
  
  ::Nmea2k::ValueF* temp = capacityremaining_;
  capacityremaining_ = NULL;
  return temp;
}
inline ::Nmea2k::ValueF* DC::mutable_capacityremaining() {
  
  if (capacityremaining_ == NULL) {
    auto* p = CreateMaybeMessage<::Nmea2k::ValueF>(GetArenaNoVirtual());
    capacityremaining_ = p;
  }
  // @@protoc_insertion_point(field_mutable:Nmea2k.DC.CapacityRemaining)
  return capacityremaining_;
}
inline void DC::set_allocated_capacityremaining(::Nmea2k::ValueF* capacityremaining) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete capacityremaining_;
  }
  if (capacityremaining) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      capacityremaining = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, capacityremaining, submessage_arena);
    }
    
  } else {
    
  }
  capacityremaining_ = capacityremaining;
  // @@protoc_insertion_point(field_set_allocated:Nmea2k.DC.CapacityRemaining)
}

// .Nmea2k.ValueU32 TimeRemaining = 7;
inline bool DC::has_timeremaining() const {
  return this != internal_default_instance() && timeremaining_ != NULL;
}
inline void DC::clear_timeremaining() {
  if (GetArenaNoVirtual() == NULL && timeremaining_ != NULL) {
    delete timeremaining_;
  }
  timeremaining_ = NULL;
}
inline const ::Nmea2k::ValueU32& DC::_internal_timeremaining() const {
  return *timeremaining_;
}
inline const ::Nmea2k::ValueU32& DC::timeremaining() const {
  const ::Nmea2k::ValueU32* p = timeremaining_;
  // @@protoc_insertion_point(field_get:Nmea2k.DC.TimeRemaining)
  return p != NULL ? *p : *reinterpret_cast<const ::Nmea2k::ValueU32*>(
      &::Nmea2k::_ValueU32_default_instance_);
}
inline ::Nmea2k::ValueU32* DC::release_timeremaining() {
  // @@protoc_insertion_point(field_release:Nmea2k.DC.TimeRemaining)
  
  ::Nmea2k::ValueU32* temp = timeremaining_;
  timeremaining_ = NULL;
  return temp;
}
inline ::Nmea2k::ValueU32* DC::mutable_timeremaining() {
  
  if (timeremaining_ == NULL) {
    auto* p = CreateMaybeMessage<::Nmea2k::ValueU32>(GetArenaNoVirtual());
    timeremaining_ = p;
  }
  // @@protoc_insertion_point(field_mutable:Nmea2k.DC.TimeRemaining)
  return timeremaining_;
}
inline void DC::set_allocated_timeremaining(::Nmea2k::ValueU32* timeremaining) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete timeremaining_;
  }
  if (timeremaining) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      timeremaining = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, timeremaining, submessage_arena);
    }
    
  } else {
    
  }
  timeremaining_ = timeremaining;
  // @@protoc_insertion_point(field_set_allocated:Nmea2k.DC.TimeRemaining)
}

// .Nmea2k.ValueU32 TimeToCharge = 8;
inline bool DC::has_timetocharge() const {
  return this != internal_default_instance() && timetocharge_ != NULL;
}
inline void DC::clear_timetocharge() {
  if (GetArenaNoVirtual() == NULL && timetocharge_ != NULL) {
    delete timetocharge_;
  }
  timetocharge_ = NULL;
}
inline const ::Nmea2k::ValueU32& DC::_internal_timetocharge() const {
  return *timetocharge_;
}
inline const ::Nmea2k::ValueU32& DC::timetocharge() const {
  const ::Nmea2k::ValueU32* p = timetocharge_;
  // @@protoc_insertion_point(field_get:Nmea2k.DC.TimeToCharge)
  return p != NULL ? *p : *reinterpret_cast<const ::Nmea2k::ValueU32*>(
      &::Nmea2k::_ValueU32_default_instance_);
}
inline ::Nmea2k::ValueU32* DC::release_timetocharge() {
  // @@protoc_insertion_point(field_release:Nmea2k.DC.TimeToCharge)
  
  ::Nmea2k::ValueU32* temp = timetocharge_;
  timetocharge_ = NULL;
  return temp;
}
inline ::Nmea2k::ValueU32* DC::mutable_timetocharge() {
  
  if (timetocharge_ == NULL) {
    auto* p = CreateMaybeMessage<::Nmea2k::ValueU32>(GetArenaNoVirtual());
    timetocharge_ = p;
  }
  // @@protoc_insertion_point(field_mutable:Nmea2k.DC.TimeToCharge)
  return timetocharge_;
}
inline void DC::set_allocated_timetocharge(::Nmea2k::ValueU32* timetocharge) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete timetocharge_;
  }
  if (timetocharge) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      timetocharge = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, timetocharge, submessage_arena);
    }
    
  } else {
    
  }
  timetocharge_ = timetocharge;
  // @@protoc_insertion_point(field_set_allocated:Nmea2k.DC.TimeToCharge)
}

// .Nmea2k.ValueU32 TimeRemainingOrToCharge = 9;
inline bool DC::has_timeremainingortocharge() const {
  return this != internal_default_instance() && timeremainingortocharge_ != NULL;
}
inline void DC::clear_timeremainingortocharge() {
  if (GetArenaNoVirtual() == NULL && timeremainingortocharge_ != NULL) {
    delete timeremainingortocharge_;
  }
  timeremainingortocharge_ = NULL;
}
inline const ::Nmea2k::ValueU32& DC::_internal_timeremainingortocharge() const {
  return *timeremainingortocharge_;
}
inline const ::Nmea2k::ValueU32& DC::timeremainingortocharge() const {
  const ::Nmea2k::ValueU32* p = timeremainingortocharge_;
  // @@protoc_insertion_point(field_get:Nmea2k.DC.TimeRemainingOrToCharge)
  return p != NULL ? *p : *reinterpret_cast<const ::Nmea2k::ValueU32*>(
      &::Nmea2k::_ValueU32_default_instance_);
}
inline ::Nmea2k::ValueU32* DC::release_timeremainingortocharge() {
  // @@protoc_insertion_point(field_release:Nmea2k.DC.TimeRemainingOrToCharge)
  
  ::Nmea2k::ValueU32* temp = timeremainingortocharge_;
  timeremainingortocharge_ = NULL;
  return temp;
}
inline ::Nmea2k::ValueU32* DC::mutable_timeremainingortocharge() {
  
  if (timeremainingortocharge_ == NULL) {
    auto* p = CreateMaybeMessage<::Nmea2k::ValueU32>(GetArenaNoVirtual());
    timeremainingortocharge_ = p;
  }
  // @@protoc_insertion_point(field_mutable:Nmea2k.DC.TimeRemainingOrToCharge)
  return timeremainingortocharge_;
}
inline void DC::set_allocated_timeremainingortocharge(::Nmea2k::ValueU32* timeremainingortocharge) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete timeremainingortocharge_;
  }
  if (timeremainingortocharge) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      timeremainingortocharge = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, timeremainingortocharge, submessage_arena);
    }
    
  } else {
    
  }
  timeremainingortocharge_ = timeremainingortocharge;
  // @@protoc_insertion_point(field_set_allocated:Nmea2k.DC.TimeRemainingOrToCharge)
}

// -------------------------------------------------------------------

// ValueFaultState

// bool Valid = 1;
inline void ValueFaultState::clear_valid() {
  valid_ = false;
}
inline bool ValueFaultState::valid() const {
  // @@protoc_insertion_point(field_get:Nmea2k.ValueFaultState.Valid)
  return valid_;
}
inline void ValueFaultState::set_valid(bool value) {
  
  valid_ = value;
  // @@protoc_insertion_point(field_set:Nmea2k.ValueFaultState.Valid)
}

// .Nmea2k.ValueFaultState.eFaultState Value = 2;
inline void ValueFaultState::clear_value() {
  value_ = 0;
}
inline ::Nmea2k::ValueFaultState_eFaultState ValueFaultState::value() const {
  // @@protoc_insertion_point(field_get:Nmea2k.ValueFaultState.Value)
  return static_cast< ::Nmea2k::ValueFaultState_eFaultState >(value_);
}
inline void ValueFaultState::set_value(::Nmea2k::ValueFaultState_eFaultState value) {
  
  value_ = value;
  // @@protoc_insertion_point(field_set:Nmea2k.ValueFaultState.Value)
}

// -------------------------------------------------------------------

// ValueSystemOnState

// bool Valid = 1;
inline void ValueSystemOnState::clear_valid() {
  valid_ = false;
}
inline bool ValueSystemOnState::valid() const {
  // @@protoc_insertion_point(field_get:Nmea2k.ValueSystemOnState.Valid)
  return valid_;
}
inline void ValueSystemOnState::set_valid(bool value) {
  
  valid_ = value;
  // @@protoc_insertion_point(field_set:Nmea2k.ValueSystemOnState.Valid)
}

// .Nmea2k.ValueSystemOnState.eSystemOnState Value = 2;
inline void ValueSystemOnState::clear_value() {
  value_ = 0;
}
inline ::Nmea2k::ValueSystemOnState_eSystemOnState ValueSystemOnState::value() const {
  // @@protoc_insertion_point(field_get:Nmea2k.ValueSystemOnState.Value)
  return static_cast< ::Nmea2k::ValueSystemOnState_eSystemOnState >(value_);
}
inline void ValueSystemOnState::set_value(::Nmea2k::ValueSystemOnState_eSystemOnState value) {
  
  value_ = value;
  // @@protoc_insertion_point(field_set:Nmea2k.ValueSystemOnState.Value)
}

// -------------------------------------------------------------------

// ValueSourceAvailable

// bool Valid = 1;
inline void ValueSourceAvailable::clear_valid() {
  valid_ = false;
}
inline bool ValueSourceAvailable::valid() const {
  // @@protoc_insertion_point(field_get:Nmea2k.ValueSourceAvailable.Valid)
  return valid_;
}
inline void ValueSourceAvailable::set_valid(bool value) {
  
  valid_ = value;
  // @@protoc_insertion_point(field_set:Nmea2k.ValueSourceAvailable.Valid)
}

// .Nmea2k.ValueSourceAvailable.eSourceAvailable Value = 2;
inline void ValueSourceAvailable::clear_value() {
  value_ = 0;
}
inline ::Nmea2k::ValueSourceAvailable_eSourceAvailable ValueSourceAvailable::value() const {
  // @@protoc_insertion_point(field_get:Nmea2k.ValueSourceAvailable.Value)
  return static_cast< ::Nmea2k::ValueSourceAvailable_eSourceAvailable >(value_);
}
inline void ValueSourceAvailable::set_value(::Nmea2k::ValueSourceAvailable_eSourceAvailable value) {
  
  value_ = value;
  // @@protoc_insertion_point(field_set:Nmea2k.ValueSourceAvailable.Value)
}

// -------------------------------------------------------------------

// Circuit

// uint32 Id = 1;
inline void Circuit::clear_id() {
  id_ = 0u;
}
inline ::google::protobuf::uint32 Circuit::id() const {
  // @@protoc_insertion_point(field_get:Nmea2k.Circuit.Id)
  return id_;
}
inline void Circuit::set_id(::google::protobuf::uint32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:Nmea2k.Circuit.Id)
}

// .Nmea2k.ValueSystemOnState SystemsOn = 2;
inline bool Circuit::has_systemson() const {
  return this != internal_default_instance() && systemson_ != NULL;
}
inline void Circuit::clear_systemson() {
  if (GetArenaNoVirtual() == NULL && systemson_ != NULL) {
    delete systemson_;
  }
  systemson_ = NULL;
}
inline const ::Nmea2k::ValueSystemOnState& Circuit::_internal_systemson() const {
  return *systemson_;
}
inline const ::Nmea2k::ValueSystemOnState& Circuit::systemson() const {
  const ::Nmea2k::ValueSystemOnState* p = systemson_;
  // @@protoc_insertion_point(field_get:Nmea2k.Circuit.SystemsOn)
  return p != NULL ? *p : *reinterpret_cast<const ::Nmea2k::ValueSystemOnState*>(
      &::Nmea2k::_ValueSystemOnState_default_instance_);
}
inline ::Nmea2k::ValueSystemOnState* Circuit::release_systemson() {
  // @@protoc_insertion_point(field_release:Nmea2k.Circuit.SystemsOn)
  
  ::Nmea2k::ValueSystemOnState* temp = systemson_;
  systemson_ = NULL;
  return temp;
}
inline ::Nmea2k::ValueSystemOnState* Circuit::mutable_systemson() {
  
  if (systemson_ == NULL) {
    auto* p = CreateMaybeMessage<::Nmea2k::ValueSystemOnState>(GetArenaNoVirtual());
    systemson_ = p;
  }
  // @@protoc_insertion_point(field_mutable:Nmea2k.Circuit.SystemsOn)
  return systemson_;
}
inline void Circuit::set_allocated_systemson(::Nmea2k::ValueSystemOnState* systemson) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete systemson_;
  }
  if (systemson) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      systemson = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, systemson, submessage_arena);
    }
    
  } else {
    
  }
  systemson_ = systemson;
  // @@protoc_insertion_point(field_set_allocated:Nmea2k.Circuit.SystemsOn)
}

// .Nmea2k.ValueU32 Level = 3;
inline bool Circuit::has_level() const {
  return this != internal_default_instance() && level_ != NULL;
}
inline void Circuit::clear_level() {
  if (GetArenaNoVirtual() == NULL && level_ != NULL) {
    delete level_;
  }
  level_ = NULL;
}
inline const ::Nmea2k::ValueU32& Circuit::_internal_level() const {
  return *level_;
}
inline const ::Nmea2k::ValueU32& Circuit::level() const {
  const ::Nmea2k::ValueU32* p = level_;
  // @@protoc_insertion_point(field_get:Nmea2k.Circuit.Level)
  return p != NULL ? *p : *reinterpret_cast<const ::Nmea2k::ValueU32*>(
      &::Nmea2k::_ValueU32_default_instance_);
}
inline ::Nmea2k::ValueU32* Circuit::release_level() {
  // @@protoc_insertion_point(field_release:Nmea2k.Circuit.Level)
  
  ::Nmea2k::ValueU32* temp = level_;
  level_ = NULL;
  return temp;
}
inline ::Nmea2k::ValueU32* Circuit::mutable_level() {
  
  if (level_ == NULL) {
    auto* p = CreateMaybeMessage<::Nmea2k::ValueU32>(GetArenaNoVirtual());
    level_ = p;
  }
  // @@protoc_insertion_point(field_mutable:Nmea2k.Circuit.Level)
  return level_;
}
inline void Circuit::set_allocated_level(::Nmea2k::ValueU32* level) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete level_;
  }
  if (level) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      level = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, level, submessage_arena);
    }
    
  } else {
    
  }
  level_ = level;
  // @@protoc_insertion_point(field_set_allocated:Nmea2k.Circuit.Level)
}

// .Nmea2k.ValueF Current = 4;
inline bool Circuit::has_current() const {
  return this != internal_default_instance() && current_ != NULL;
}
inline void Circuit::clear_current() {
  if (GetArenaNoVirtual() == NULL && current_ != NULL) {
    delete current_;
  }
  current_ = NULL;
}
inline const ::Nmea2k::ValueF& Circuit::_internal_current() const {
  return *current_;
}
inline const ::Nmea2k::ValueF& Circuit::current() const {
  const ::Nmea2k::ValueF* p = current_;
  // @@protoc_insertion_point(field_get:Nmea2k.Circuit.Current)
  return p != NULL ? *p : *reinterpret_cast<const ::Nmea2k::ValueF*>(
      &::Nmea2k::_ValueF_default_instance_);
}
inline ::Nmea2k::ValueF* Circuit::release_current() {
  // @@protoc_insertion_point(field_release:Nmea2k.Circuit.Current)
  
  ::Nmea2k::ValueF* temp = current_;
  current_ = NULL;
  return temp;
}
inline ::Nmea2k::ValueF* Circuit::mutable_current() {
  
  if (current_ == NULL) {
    auto* p = CreateMaybeMessage<::Nmea2k::ValueF>(GetArenaNoVirtual());
    current_ = p;
  }
  // @@protoc_insertion_point(field_mutable:Nmea2k.Circuit.Current)
  return current_;
}
inline void Circuit::set_allocated_current(::Nmea2k::ValueF* current) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete current_;
  }
  if (current) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      current = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, current, submessage_arena);
    }
    
  } else {
    
  }
  current_ = current;
  // @@protoc_insertion_point(field_set_allocated:Nmea2k.Circuit.Current)
}

// .Nmea2k.ValueFaultState Fault = 5;
inline bool Circuit::has_fault() const {
  return this != internal_default_instance() && fault_ != NULL;
}
inline void Circuit::clear_fault() {
  if (GetArenaNoVirtual() == NULL && fault_ != NULL) {
    delete fault_;
  }
  fault_ = NULL;
}
inline const ::Nmea2k::ValueFaultState& Circuit::_internal_fault() const {
  return *fault_;
}
inline const ::Nmea2k::ValueFaultState& Circuit::fault() const {
  const ::Nmea2k::ValueFaultState* p = fault_;
  // @@protoc_insertion_point(field_get:Nmea2k.Circuit.Fault)
  return p != NULL ? *p : *reinterpret_cast<const ::Nmea2k::ValueFaultState*>(
      &::Nmea2k::_ValueFaultState_default_instance_);
}
inline ::Nmea2k::ValueFaultState* Circuit::release_fault() {
  // @@protoc_insertion_point(field_release:Nmea2k.Circuit.Fault)
  
  ::Nmea2k::ValueFaultState* temp = fault_;
  fault_ = NULL;
  return temp;
}
inline ::Nmea2k::ValueFaultState* Circuit::mutable_fault() {
  
  if (fault_ == NULL) {
    auto* p = CreateMaybeMessage<::Nmea2k::ValueFaultState>(GetArenaNoVirtual());
    fault_ = p;
  }
  // @@protoc_insertion_point(field_mutable:Nmea2k.Circuit.Fault)
  return fault_;
}
inline void Circuit::set_allocated_fault(::Nmea2k::ValueFaultState* fault) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete fault_;
  }
  if (fault) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      fault = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, fault, submessage_arena);
    }
    
  } else {
    
  }
  fault_ = fault;
  // @@protoc_insertion_point(field_set_allocated:Nmea2k.Circuit.Fault)
}

// .Nmea2k.ValueU32 OnCount = 6;
inline bool Circuit::has_oncount() const {
  return this != internal_default_instance() && oncount_ != NULL;
}
inline void Circuit::clear_oncount() {
  if (GetArenaNoVirtual() == NULL && oncount_ != NULL) {
    delete oncount_;
  }
  oncount_ = NULL;
}
inline const ::Nmea2k::ValueU32& Circuit::_internal_oncount() const {
  return *oncount_;
}
inline const ::Nmea2k::ValueU32& Circuit::oncount() const {
  const ::Nmea2k::ValueU32* p = oncount_;
  // @@protoc_insertion_point(field_get:Nmea2k.Circuit.OnCount)
  return p != NULL ? *p : *reinterpret_cast<const ::Nmea2k::ValueU32*>(
      &::Nmea2k::_ValueU32_default_instance_);
}
inline ::Nmea2k::ValueU32* Circuit::release_oncount() {
  // @@protoc_insertion_point(field_release:Nmea2k.Circuit.OnCount)
  
  ::Nmea2k::ValueU32* temp = oncount_;
  oncount_ = NULL;
  return temp;
}
inline ::Nmea2k::ValueU32* Circuit::mutable_oncount() {
  
  if (oncount_ == NULL) {
    auto* p = CreateMaybeMessage<::Nmea2k::ValueU32>(GetArenaNoVirtual());
    oncount_ = p;
  }
  // @@protoc_insertion_point(field_mutable:Nmea2k.Circuit.OnCount)
  return oncount_;
}
inline void Circuit::set_allocated_oncount(::Nmea2k::ValueU32* oncount) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete oncount_;
  }
  if (oncount) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      oncount = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, oncount, submessage_arena);
    }
    
  } else {
    
  }
  oncount_ = oncount;
  // @@protoc_insertion_point(field_set_allocated:Nmea2k.Circuit.OnCount)
}

// .Nmea2k.ValueU32 OnTime = 7;
inline bool Circuit::has_ontime() const {
  return this != internal_default_instance() && ontime_ != NULL;
}
inline void Circuit::clear_ontime() {
  if (GetArenaNoVirtual() == NULL && ontime_ != NULL) {
    delete ontime_;
  }
  ontime_ = NULL;
}
inline const ::Nmea2k::ValueU32& Circuit::_internal_ontime() const {
  return *ontime_;
}
inline const ::Nmea2k::ValueU32& Circuit::ontime() const {
  const ::Nmea2k::ValueU32* p = ontime_;
  // @@protoc_insertion_point(field_get:Nmea2k.Circuit.OnTime)
  return p != NULL ? *p : *reinterpret_cast<const ::Nmea2k::ValueU32*>(
      &::Nmea2k::_ValueU32_default_instance_);
}
inline ::Nmea2k::ValueU32* Circuit::release_ontime() {
  // @@protoc_insertion_point(field_release:Nmea2k.Circuit.OnTime)
  
  ::Nmea2k::ValueU32* temp = ontime_;
  ontime_ = NULL;
  return temp;
}
inline ::Nmea2k::ValueU32* Circuit::mutable_ontime() {
  
  if (ontime_ == NULL) {
    auto* p = CreateMaybeMessage<::Nmea2k::ValueU32>(GetArenaNoVirtual());
    ontime_ = p;
  }
  // @@protoc_insertion_point(field_mutable:Nmea2k.Circuit.OnTime)
  return ontime_;
}
inline void Circuit::set_allocated_ontime(::Nmea2k::ValueU32* ontime) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete ontime_;
  }
  if (ontime) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      ontime = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, ontime, submessage_arena);
    }
    
  } else {
    
  }
  ontime_ = ontime;
  // @@protoc_insertion_point(field_set_allocated:Nmea2k.Circuit.OnTime)
}

// .Nmea2k.ValueU32 SequentialState = 8;
inline bool Circuit::has_sequentialstate() const {
  return this != internal_default_instance() && sequentialstate_ != NULL;
}
inline void Circuit::clear_sequentialstate() {
  if (GetArenaNoVirtual() == NULL && sequentialstate_ != NULL) {
    delete sequentialstate_;
  }
  sequentialstate_ = NULL;
}
inline const ::Nmea2k::ValueU32& Circuit::_internal_sequentialstate() const {
  return *sequentialstate_;
}
inline const ::Nmea2k::ValueU32& Circuit::sequentialstate() const {
  const ::Nmea2k::ValueU32* p = sequentialstate_;
  // @@protoc_insertion_point(field_get:Nmea2k.Circuit.SequentialState)
  return p != NULL ? *p : *reinterpret_cast<const ::Nmea2k::ValueU32*>(
      &::Nmea2k::_ValueU32_default_instance_);
}
inline ::Nmea2k::ValueU32* Circuit::release_sequentialstate() {
  // @@protoc_insertion_point(field_release:Nmea2k.Circuit.SequentialState)
  
  ::Nmea2k::ValueU32* temp = sequentialstate_;
  sequentialstate_ = NULL;
  return temp;
}
inline ::Nmea2k::ValueU32* Circuit::mutable_sequentialstate() {
  
  if (sequentialstate_ == NULL) {
    auto* p = CreateMaybeMessage<::Nmea2k::ValueU32>(GetArenaNoVirtual());
    sequentialstate_ = p;
  }
  // @@protoc_insertion_point(field_mutable:Nmea2k.Circuit.SequentialState)
  return sequentialstate_;
}
inline void Circuit::set_allocated_sequentialstate(::Nmea2k::ValueU32* sequentialstate) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete sequentialstate_;
  }
  if (sequentialstate) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      sequentialstate = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, sequentialstate, submessage_arena);
    }
    
  } else {
    
  }
  sequentialstate_ = sequentialstate;
  // @@protoc_insertion_point(field_set_allocated:Nmea2k.Circuit.SequentialState)
}

// .Nmea2k.ValueU32 ModesSystemOn = 9;
inline bool Circuit::has_modessystemon() const {
  return this != internal_default_instance() && modessystemon_ != NULL;
}
inline void Circuit::clear_modessystemon() {
  if (GetArenaNoVirtual() == NULL && modessystemon_ != NULL) {
    delete modessystemon_;
  }
  modessystemon_ = NULL;
}
inline const ::Nmea2k::ValueU32& Circuit::_internal_modessystemon() const {
  return *modessystemon_;
}
inline const ::Nmea2k::ValueU32& Circuit::modessystemon() const {
  const ::Nmea2k::ValueU32* p = modessystemon_;
  // @@protoc_insertion_point(field_get:Nmea2k.Circuit.ModesSystemOn)
  return p != NULL ? *p : *reinterpret_cast<const ::Nmea2k::ValueU32*>(
      &::Nmea2k::_ValueU32_default_instance_);
}
inline ::Nmea2k::ValueU32* Circuit::release_modessystemon() {
  // @@protoc_insertion_point(field_release:Nmea2k.Circuit.ModesSystemOn)
  
  ::Nmea2k::ValueU32* temp = modessystemon_;
  modessystemon_ = NULL;
  return temp;
}
inline ::Nmea2k::ValueU32* Circuit::mutable_modessystemon() {
  
  if (modessystemon_ == NULL) {
    auto* p = CreateMaybeMessage<::Nmea2k::ValueU32>(GetArenaNoVirtual());
    modessystemon_ = p;
  }
  // @@protoc_insertion_point(field_mutable:Nmea2k.Circuit.ModesSystemOn)
  return modessystemon_;
}
inline void Circuit::set_allocated_modessystemon(::Nmea2k::ValueU32* modessystemon) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete modessystemon_;
  }
  if (modessystemon) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      modessystemon = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, modessystemon, submessage_arena);
    }
    
  } else {
    
  }
  modessystemon_ = modessystemon;
  // @@protoc_insertion_point(field_set_allocated:Nmea2k.Circuit.ModesSystemOn)
}

// .Nmea2k.ValueSourceAvailable ACSourceAvailable = 10;
inline bool Circuit::has_acsourceavailable() const {
  return this != internal_default_instance() && acsourceavailable_ != NULL;
}
inline void Circuit::clear_acsourceavailable() {
  if (GetArenaNoVirtual() == NULL && acsourceavailable_ != NULL) {
    delete acsourceavailable_;
  }
  acsourceavailable_ = NULL;
}
inline const ::Nmea2k::ValueSourceAvailable& Circuit::_internal_acsourceavailable() const {
  return *acsourceavailable_;
}
inline const ::Nmea2k::ValueSourceAvailable& Circuit::acsourceavailable() const {
  const ::Nmea2k::ValueSourceAvailable* p = acsourceavailable_;
  // @@protoc_insertion_point(field_get:Nmea2k.Circuit.ACSourceAvailable)
  return p != NULL ? *p : *reinterpret_cast<const ::Nmea2k::ValueSourceAvailable*>(
      &::Nmea2k::_ValueSourceAvailable_default_instance_);
}
inline ::Nmea2k::ValueSourceAvailable* Circuit::release_acsourceavailable() {
  // @@protoc_insertion_point(field_release:Nmea2k.Circuit.ACSourceAvailable)
  
  ::Nmea2k::ValueSourceAvailable* temp = acsourceavailable_;
  acsourceavailable_ = NULL;
  return temp;
}
inline ::Nmea2k::ValueSourceAvailable* Circuit::mutable_acsourceavailable() {
  
  if (acsourceavailable_ == NULL) {
    auto* p = CreateMaybeMessage<::Nmea2k::ValueSourceAvailable>(GetArenaNoVirtual());
    acsourceavailable_ = p;
  }
  // @@protoc_insertion_point(field_mutable:Nmea2k.Circuit.ACSourceAvailable)
  return acsourceavailable_;
}
inline void Circuit::set_allocated_acsourceavailable(::Nmea2k::ValueSourceAvailable* acsourceavailable) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete acsourceavailable_;
  }
  if (acsourceavailable) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      acsourceavailable = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, acsourceavailable, submessage_arena);
    }
    
  } else {
    
  }
  acsourceavailable_ = acsourceavailable;
  // @@protoc_insertion_point(field_set_allocated:Nmea2k.Circuit.ACSourceAvailable)
}

// .Nmea2k.ValueBool IsOffline = 11;
inline bool Circuit::has_isoffline() const {
  return this != internal_default_instance() && isoffline_ != NULL;
}
inline void Circuit::clear_isoffline() {
  if (GetArenaNoVirtual() == NULL && isoffline_ != NULL) {
    delete isoffline_;
  }
  isoffline_ = NULL;
}
inline const ::Nmea2k::ValueBool& Circuit::_internal_isoffline() const {
  return *isoffline_;
}
inline const ::Nmea2k::ValueBool& Circuit::isoffline() const {
  const ::Nmea2k::ValueBool* p = isoffline_;
  // @@protoc_insertion_point(field_get:Nmea2k.Circuit.IsOffline)
  return p != NULL ? *p : *reinterpret_cast<const ::Nmea2k::ValueBool*>(
      &::Nmea2k::_ValueBool_default_instance_);
}
inline ::Nmea2k::ValueBool* Circuit::release_isoffline() {
  // @@protoc_insertion_point(field_release:Nmea2k.Circuit.IsOffline)
  
  ::Nmea2k::ValueBool* temp = isoffline_;
  isoffline_ = NULL;
  return temp;
}
inline ::Nmea2k::ValueBool* Circuit::mutable_isoffline() {
  
  if (isoffline_ == NULL) {
    auto* p = CreateMaybeMessage<::Nmea2k::ValueBool>(GetArenaNoVirtual());
    isoffline_ = p;
  }
  // @@protoc_insertion_point(field_mutable:Nmea2k.Circuit.IsOffline)
  return isoffline_;
}
inline void Circuit::set_allocated_isoffline(::Nmea2k::ValueBool* isoffline) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete isoffline_;
  }
  if (isoffline) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      isoffline = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, isoffline, submessage_arena);
    }
    
  } else {
    
  }
  isoffline_ = isoffline;
  // @@protoc_insertion_point(field_set_allocated:Nmea2k.Circuit.IsOffline)
}

// -------------------------------------------------------------------

// ValueContactorOnState

// bool Valid = 1;
inline void ValueContactorOnState::clear_valid() {
  valid_ = false;
}
inline bool ValueContactorOnState::valid() const {
  // @@protoc_insertion_point(field_get:Nmea2k.ValueContactorOnState.Valid)
  return valid_;
}
inline void ValueContactorOnState::set_valid(bool value) {
  
  valid_ = value;
  // @@protoc_insertion_point(field_set:Nmea2k.ValueContactorOnState.Valid)
}

// .Nmea2k.ValueContactorOnState.eContactorOnState Value = 2;
inline void ValueContactorOnState::clear_value() {
  value_ = 0;
}
inline ::Nmea2k::ValueContactorOnState_eContactorOnState ValueContactorOnState::value() const {
  // @@protoc_insertion_point(field_get:Nmea2k.ValueContactorOnState.Value)
  return static_cast< ::Nmea2k::ValueContactorOnState_eContactorOnState >(value_);
}
inline void ValueContactorOnState::set_value(::Nmea2k::ValueContactorOnState_eContactorOnState value) {
  
  value_ = value;
  // @@protoc_insertion_point(field_set:Nmea2k.ValueContactorOnState.Value)
}

// -------------------------------------------------------------------

// ACMainContactor

// uint32 SystemStateId = 1;
inline void ACMainContactor::clear_systemstateid() {
  systemstateid_ = 0u;
}
inline ::google::protobuf::uint32 ACMainContactor::systemstateid() const {
  // @@protoc_insertion_point(field_get:Nmea2k.ACMainContactor.SystemStateId)
  return systemstateid_;
}
inline void ACMainContactor::set_systemstateid(::google::protobuf::uint32 value) {
  
  systemstateid_ = value;
  // @@protoc_insertion_point(field_set:Nmea2k.ACMainContactor.SystemStateId)
}

// .Nmea2k.ValueContactorOnState ACContactorSystemsState = 2;
inline bool ACMainContactor::has_accontactorsystemsstate() const {
  return this != internal_default_instance() && accontactorsystemsstate_ != NULL;
}
inline void ACMainContactor::clear_accontactorsystemsstate() {
  if (GetArenaNoVirtual() == NULL && accontactorsystemsstate_ != NULL) {
    delete accontactorsystemsstate_;
  }
  accontactorsystemsstate_ = NULL;
}
inline const ::Nmea2k::ValueContactorOnState& ACMainContactor::_internal_accontactorsystemsstate() const {
  return *accontactorsystemsstate_;
}
inline const ::Nmea2k::ValueContactorOnState& ACMainContactor::accontactorsystemsstate() const {
  const ::Nmea2k::ValueContactorOnState* p = accontactorsystemsstate_;
  // @@protoc_insertion_point(field_get:Nmea2k.ACMainContactor.ACContactorSystemsState)
  return p != NULL ? *p : *reinterpret_cast<const ::Nmea2k::ValueContactorOnState*>(
      &::Nmea2k::_ValueContactorOnState_default_instance_);
}
inline ::Nmea2k::ValueContactorOnState* ACMainContactor::release_accontactorsystemsstate() {
  // @@protoc_insertion_point(field_release:Nmea2k.ACMainContactor.ACContactorSystemsState)
  
  ::Nmea2k::ValueContactorOnState* temp = accontactorsystemsstate_;
  accontactorsystemsstate_ = NULL;
  return temp;
}
inline ::Nmea2k::ValueContactorOnState* ACMainContactor::mutable_accontactorsystemsstate() {
  
  if (accontactorsystemsstate_ == NULL) {
    auto* p = CreateMaybeMessage<::Nmea2k::ValueContactorOnState>(GetArenaNoVirtual());
    accontactorsystemsstate_ = p;
  }
  // @@protoc_insertion_point(field_mutable:Nmea2k.ACMainContactor.ACContactorSystemsState)
  return accontactorsystemsstate_;
}
inline void ACMainContactor::set_allocated_accontactorsystemsstate(::Nmea2k::ValueContactorOnState* accontactorsystemsstate) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete accontactorsystemsstate_;
  }
  if (accontactorsystemsstate) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      accontactorsystemsstate = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, accontactorsystemsstate, submessage_arena);
    }
    
  } else {
    
  }
  accontactorsystemsstate_ = accontactorsystemsstate;
  // @@protoc_insertion_point(field_set_allocated:Nmea2k.ACMainContactor.ACContactorSystemsState)
}

// .Nmea2k.ValueBool ACContactorSourceAvailable = 3;
inline bool ACMainContactor::has_accontactorsourceavailable() const {
  return this != internal_default_instance() && accontactorsourceavailable_ != NULL;
}
inline void ACMainContactor::clear_accontactorsourceavailable() {
  if (GetArenaNoVirtual() == NULL && accontactorsourceavailable_ != NULL) {
    delete accontactorsourceavailable_;
  }
  accontactorsourceavailable_ = NULL;
}
inline const ::Nmea2k::ValueBool& ACMainContactor::_internal_accontactorsourceavailable() const {
  return *accontactorsourceavailable_;
}
inline const ::Nmea2k::ValueBool& ACMainContactor::accontactorsourceavailable() const {
  const ::Nmea2k::ValueBool* p = accontactorsourceavailable_;
  // @@protoc_insertion_point(field_get:Nmea2k.ACMainContactor.ACContactorSourceAvailable)
  return p != NULL ? *p : *reinterpret_cast<const ::Nmea2k::ValueBool*>(
      &::Nmea2k::_ValueBool_default_instance_);
}
inline ::Nmea2k::ValueBool* ACMainContactor::release_accontactorsourceavailable() {
  // @@protoc_insertion_point(field_release:Nmea2k.ACMainContactor.ACContactorSourceAvailable)
  
  ::Nmea2k::ValueBool* temp = accontactorsourceavailable_;
  accontactorsourceavailable_ = NULL;
  return temp;
}
inline ::Nmea2k::ValueBool* ACMainContactor::mutable_accontactorsourceavailable() {
  
  if (accontactorsourceavailable_ == NULL) {
    auto* p = CreateMaybeMessage<::Nmea2k::ValueBool>(GetArenaNoVirtual());
    accontactorsourceavailable_ = p;
  }
  // @@protoc_insertion_point(field_mutable:Nmea2k.ACMainContactor.ACContactorSourceAvailable)
  return accontactorsourceavailable_;
}
inline void ACMainContactor::set_allocated_accontactorsourceavailable(::Nmea2k::ValueBool* accontactorsourceavailable) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete accontactorsourceavailable_;
  }
  if (accontactorsourceavailable) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      accontactorsourceavailable = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, accontactorsourceavailable, submessage_arena);
    }
    
  } else {
    
  }
  accontactorsourceavailable_ = accontactorsourceavailable;
  // @@protoc_insertion_point(field_set_allocated:Nmea2k.ACMainContactor.ACContactorSourceAvailable)
}

// .Nmea2k.ValueBool ReversePolarity = 4;
inline bool ACMainContactor::has_reversepolarity() const {
  return this != internal_default_instance() && reversepolarity_ != NULL;
}
inline void ACMainContactor::clear_reversepolarity() {
  if (GetArenaNoVirtual() == NULL && reversepolarity_ != NULL) {
    delete reversepolarity_;
  }
  reversepolarity_ = NULL;
}
inline const ::Nmea2k::ValueBool& ACMainContactor::_internal_reversepolarity() const {
  return *reversepolarity_;
}
inline const ::Nmea2k::ValueBool& ACMainContactor::reversepolarity() const {
  const ::Nmea2k::ValueBool* p = reversepolarity_;
  // @@protoc_insertion_point(field_get:Nmea2k.ACMainContactor.ReversePolarity)
  return p != NULL ? *p : *reinterpret_cast<const ::Nmea2k::ValueBool*>(
      &::Nmea2k::_ValueBool_default_instance_);
}
inline ::Nmea2k::ValueBool* ACMainContactor::release_reversepolarity() {
  // @@protoc_insertion_point(field_release:Nmea2k.ACMainContactor.ReversePolarity)
  
  ::Nmea2k::ValueBool* temp = reversepolarity_;
  reversepolarity_ = NULL;
  return temp;
}
inline ::Nmea2k::ValueBool* ACMainContactor::mutable_reversepolarity() {
  
  if (reversepolarity_ == NULL) {
    auto* p = CreateMaybeMessage<::Nmea2k::ValueBool>(GetArenaNoVirtual());
    reversepolarity_ = p;
  }
  // @@protoc_insertion_point(field_mutable:Nmea2k.ACMainContactor.ReversePolarity)
  return reversepolarity_;
}
inline void ACMainContactor::set_allocated_reversepolarity(::Nmea2k::ValueBool* reversepolarity) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reversepolarity_;
  }
  if (reversepolarity) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      reversepolarity = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, reversepolarity, submessage_arena);
    }
    
  } else {
    
  }
  reversepolarity_ = reversepolarity;
  // @@protoc_insertion_point(field_set_allocated:Nmea2k.ACMainContactor.ReversePolarity)
}

// .Nmea2k.ValueBool ACContactorAutoChangeOver = 5;
inline bool ACMainContactor::has_accontactorautochangeover() const {
  return this != internal_default_instance() && accontactorautochangeover_ != NULL;
}
inline void ACMainContactor::clear_accontactorautochangeover() {
  if (GetArenaNoVirtual() == NULL && accontactorautochangeover_ != NULL) {
    delete accontactorautochangeover_;
  }
  accontactorautochangeover_ = NULL;
}
inline const ::Nmea2k::ValueBool& ACMainContactor::_internal_accontactorautochangeover() const {
  return *accontactorautochangeover_;
}
inline const ::Nmea2k::ValueBool& ACMainContactor::accontactorautochangeover() const {
  const ::Nmea2k::ValueBool* p = accontactorautochangeover_;
  // @@protoc_insertion_point(field_get:Nmea2k.ACMainContactor.ACContactorAutoChangeOver)
  return p != NULL ? *p : *reinterpret_cast<const ::Nmea2k::ValueBool*>(
      &::Nmea2k::_ValueBool_default_instance_);
}
inline ::Nmea2k::ValueBool* ACMainContactor::release_accontactorautochangeover() {
  // @@protoc_insertion_point(field_release:Nmea2k.ACMainContactor.ACContactorAutoChangeOver)
  
  ::Nmea2k::ValueBool* temp = accontactorautochangeover_;
  accontactorautochangeover_ = NULL;
  return temp;
}
inline ::Nmea2k::ValueBool* ACMainContactor::mutable_accontactorautochangeover() {
  
  if (accontactorautochangeover_ == NULL) {
    auto* p = CreateMaybeMessage<::Nmea2k::ValueBool>(GetArenaNoVirtual());
    accontactorautochangeover_ = p;
  }
  // @@protoc_insertion_point(field_mutable:Nmea2k.ACMainContactor.ACContactorAutoChangeOver)
  return accontactorautochangeover_;
}
inline void ACMainContactor::set_allocated_accontactorautochangeover(::Nmea2k::ValueBool* accontactorautochangeover) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete accontactorautochangeover_;
  }
  if (accontactorautochangeover) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      accontactorautochangeover = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, accontactorautochangeover, submessage_arena);
    }
    
  } else {
    
  }
  accontactorautochangeover_ = accontactorautochangeover;
  // @@protoc_insertion_point(field_set_allocated:Nmea2k.ACMainContactor.ACContactorAutoChangeOver)
}

// .Nmea2k.ValueBool ManualOverride = 6;
inline bool ACMainContactor::has_manualoverride() const {
  return this != internal_default_instance() && manualoverride_ != NULL;
}
inline void ACMainContactor::clear_manualoverride() {
  if (GetArenaNoVirtual() == NULL && manualoverride_ != NULL) {
    delete manualoverride_;
  }
  manualoverride_ = NULL;
}
inline const ::Nmea2k::ValueBool& ACMainContactor::_internal_manualoverride() const {
  return *manualoverride_;
}
inline const ::Nmea2k::ValueBool& ACMainContactor::manualoverride() const {
  const ::Nmea2k::ValueBool* p = manualoverride_;
  // @@protoc_insertion_point(field_get:Nmea2k.ACMainContactor.ManualOverride)
  return p != NULL ? *p : *reinterpret_cast<const ::Nmea2k::ValueBool*>(
      &::Nmea2k::_ValueBool_default_instance_);
}
inline ::Nmea2k::ValueBool* ACMainContactor::release_manualoverride() {
  // @@protoc_insertion_point(field_release:Nmea2k.ACMainContactor.ManualOverride)
  
  ::Nmea2k::ValueBool* temp = manualoverride_;
  manualoverride_ = NULL;
  return temp;
}
inline ::Nmea2k::ValueBool* ACMainContactor::mutable_manualoverride() {
  
  if (manualoverride_ == NULL) {
    auto* p = CreateMaybeMessage<::Nmea2k::ValueBool>(GetArenaNoVirtual());
    manualoverride_ = p;
  }
  // @@protoc_insertion_point(field_mutable:Nmea2k.ACMainContactor.ManualOverride)
  return manualoverride_;
}
inline void ACMainContactor::set_allocated_manualoverride(::Nmea2k::ValueBool* manualoverride) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete manualoverride_;
  }
  if (manualoverride) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      manualoverride = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, manualoverride, submessage_arena);
    }
    
  } else {
    
  }
  manualoverride_ = manualoverride;
  // @@protoc_insertion_point(field_set_allocated:Nmea2k.ACMainContactor.ManualOverride)
}

// -------------------------------------------------------------------

// Temperature

// uint32 Instance = 1;
inline void Temperature::clear_instance() {
  instance_ = 0u;
}
inline ::google::protobuf::uint32 Temperature::instance() const {
  // @@protoc_insertion_point(field_get:Nmea2k.Temperature.Instance)
  return instance_;
}
inline void Temperature::set_instance(::google::protobuf::uint32 value) {
  
  instance_ = value;
  // @@protoc_insertion_point(field_set:Nmea2k.Temperature.Instance)
}

// .Nmea2k.ValueF Temperature = 2;
inline bool Temperature::has_temperature() const {
  return this != internal_default_instance() && temperature_ != NULL;
}
inline void Temperature::clear_temperature() {
  if (GetArenaNoVirtual() == NULL && temperature_ != NULL) {
    delete temperature_;
  }
  temperature_ = NULL;
}
inline const ::Nmea2k::ValueF& Temperature::_internal_temperature() const {
  return *temperature_;
}
inline const ::Nmea2k::ValueF& Temperature::temperature() const {
  const ::Nmea2k::ValueF* p = temperature_;
  // @@protoc_insertion_point(field_get:Nmea2k.Temperature.Temperature)
  return p != NULL ? *p : *reinterpret_cast<const ::Nmea2k::ValueF*>(
      &::Nmea2k::_ValueF_default_instance_);
}
inline ::Nmea2k::ValueF* Temperature::release_temperature() {
  // @@protoc_insertion_point(field_release:Nmea2k.Temperature.Temperature)
  
  ::Nmea2k::ValueF* temp = temperature_;
  temperature_ = NULL;
  return temp;
}
inline ::Nmea2k::ValueF* Temperature::mutable_temperature() {
  
  if (temperature_ == NULL) {
    auto* p = CreateMaybeMessage<::Nmea2k::ValueF>(GetArenaNoVirtual());
    temperature_ = p;
  }
  // @@protoc_insertion_point(field_mutable:Nmea2k.Temperature.Temperature)
  return temperature_;
}
inline void Temperature::set_allocated_temperature(::Nmea2k::ValueF* temperature) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete temperature_;
  }
  if (temperature) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      temperature = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, temperature, submessage_arena);
    }
    
  } else {
    
  }
  temperature_ = temperature;
  // @@protoc_insertion_point(field_set_allocated:Nmea2k.Temperature.Temperature)
}

// -------------------------------------------------------------------

// Pressure

// uint32 Instance = 1;
inline void Pressure::clear_instance() {
  instance_ = 0u;
}
inline ::google::protobuf::uint32 Pressure::instance() const {
  // @@protoc_insertion_point(field_get:Nmea2k.Pressure.Instance)
  return instance_;
}
inline void Pressure::set_instance(::google::protobuf::uint32 value) {
  
  instance_ = value;
  // @@protoc_insertion_point(field_set:Nmea2k.Pressure.Instance)
}

// .Nmea2k.ValueF Pressure = 2;
inline bool Pressure::has_pressure() const {
  return this != internal_default_instance() && pressure_ != NULL;
}
inline void Pressure::clear_pressure() {
  if (GetArenaNoVirtual() == NULL && pressure_ != NULL) {
    delete pressure_;
  }
  pressure_ = NULL;
}
inline const ::Nmea2k::ValueF& Pressure::_internal_pressure() const {
  return *pressure_;
}
inline const ::Nmea2k::ValueF& Pressure::pressure() const {
  const ::Nmea2k::ValueF* p = pressure_;
  // @@protoc_insertion_point(field_get:Nmea2k.Pressure.Pressure)
  return p != NULL ? *p : *reinterpret_cast<const ::Nmea2k::ValueF*>(
      &::Nmea2k::_ValueF_default_instance_);
}
inline ::Nmea2k::ValueF* Pressure::release_pressure() {
  // @@protoc_insertion_point(field_release:Nmea2k.Pressure.Pressure)
  
  ::Nmea2k::ValueF* temp = pressure_;
  pressure_ = NULL;
  return temp;
}
inline ::Nmea2k::ValueF* Pressure::mutable_pressure() {
  
  if (pressure_ == NULL) {
    auto* p = CreateMaybeMessage<::Nmea2k::ValueF>(GetArenaNoVirtual());
    pressure_ = p;
  }
  // @@protoc_insertion_point(field_mutable:Nmea2k.Pressure.Pressure)
  return pressure_;
}
inline void Pressure::set_allocated_pressure(::Nmea2k::ValueF* pressure) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete pressure_;
  }
  if (pressure) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      pressure = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, pressure, submessage_arena);
    }
    
  } else {
    
  }
  pressure_ = pressure;
  // @@protoc_insertion_point(field_set_allocated:Nmea2k.Pressure.Pressure)
}

// -------------------------------------------------------------------

// ValueHVACOperatingMode

// bool Valid = 1;
inline void ValueHVACOperatingMode::clear_valid() {
  valid_ = false;
}
inline bool ValueHVACOperatingMode::valid() const {
  // @@protoc_insertion_point(field_get:Nmea2k.ValueHVACOperatingMode.Valid)
  return valid_;
}
inline void ValueHVACOperatingMode::set_valid(bool value) {
  
  valid_ = value;
  // @@protoc_insertion_point(field_set:Nmea2k.ValueHVACOperatingMode.Valid)
}

// .Nmea2k.ValueHVACOperatingMode.eHVACOperatingMode Value = 2;
inline void ValueHVACOperatingMode::clear_value() {
  value_ = 0;
}
inline ::Nmea2k::ValueHVACOperatingMode_eHVACOperatingMode ValueHVACOperatingMode::value() const {
  // @@protoc_insertion_point(field_get:Nmea2k.ValueHVACOperatingMode.Value)
  return static_cast< ::Nmea2k::ValueHVACOperatingMode_eHVACOperatingMode >(value_);
}
inline void ValueHVACOperatingMode::set_value(::Nmea2k::ValueHVACOperatingMode_eHVACOperatingMode value) {
  
  value_ = value;
  // @@protoc_insertion_point(field_set:Nmea2k.ValueHVACOperatingMode.Value)
}

// -------------------------------------------------------------------

// HVAC

// uint32 Instance = 1;
inline void HVAC::clear_instance() {
  instance_ = 0u;
}
inline ::google::protobuf::uint32 HVAC::instance() const {
  // @@protoc_insertion_point(field_get:Nmea2k.HVAC.Instance)
  return instance_;
}
inline void HVAC::set_instance(::google::protobuf::uint32 value) {
  
  instance_ = value;
  // @@protoc_insertion_point(field_set:Nmea2k.HVAC.Instance)
}

// .Nmea2k.ValueHVACOperatingMode OperationMode = 2;
inline bool HVAC::has_operationmode() const {
  return this != internal_default_instance() && operationmode_ != NULL;
}
inline void HVAC::clear_operationmode() {
  if (GetArenaNoVirtual() == NULL && operationmode_ != NULL) {
    delete operationmode_;
  }
  operationmode_ = NULL;
}
inline const ::Nmea2k::ValueHVACOperatingMode& HVAC::_internal_operationmode() const {
  return *operationmode_;
}
inline const ::Nmea2k::ValueHVACOperatingMode& HVAC::operationmode() const {
  const ::Nmea2k::ValueHVACOperatingMode* p = operationmode_;
  // @@protoc_insertion_point(field_get:Nmea2k.HVAC.OperationMode)
  return p != NULL ? *p : *reinterpret_cast<const ::Nmea2k::ValueHVACOperatingMode*>(
      &::Nmea2k::_ValueHVACOperatingMode_default_instance_);
}
inline ::Nmea2k::ValueHVACOperatingMode* HVAC::release_operationmode() {
  // @@protoc_insertion_point(field_release:Nmea2k.HVAC.OperationMode)
  
  ::Nmea2k::ValueHVACOperatingMode* temp = operationmode_;
  operationmode_ = NULL;
  return temp;
}
inline ::Nmea2k::ValueHVACOperatingMode* HVAC::mutable_operationmode() {
  
  if (operationmode_ == NULL) {
    auto* p = CreateMaybeMessage<::Nmea2k::ValueHVACOperatingMode>(GetArenaNoVirtual());
    operationmode_ = p;
  }
  // @@protoc_insertion_point(field_mutable:Nmea2k.HVAC.OperationMode)
  return operationmode_;
}
inline void HVAC::set_allocated_operationmode(::Nmea2k::ValueHVACOperatingMode* operationmode) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete operationmode_;
  }
  if (operationmode) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      operationmode = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, operationmode, submessage_arena);
    }
    
  } else {
    
  }
  operationmode_ = operationmode;
  // @@protoc_insertion_point(field_set_allocated:Nmea2k.HVAC.OperationMode)
}

// .Nmea2k.ValueU32 FanMode = 3;
inline bool HVAC::has_fanmode() const {
  return this != internal_default_instance() && fanmode_ != NULL;
}
inline void HVAC::clear_fanmode() {
  if (GetArenaNoVirtual() == NULL && fanmode_ != NULL) {
    delete fanmode_;
  }
  fanmode_ = NULL;
}
inline const ::Nmea2k::ValueU32& HVAC::_internal_fanmode() const {
  return *fanmode_;
}
inline const ::Nmea2k::ValueU32& HVAC::fanmode() const {
  const ::Nmea2k::ValueU32* p = fanmode_;
  // @@protoc_insertion_point(field_get:Nmea2k.HVAC.FanMode)
  return p != NULL ? *p : *reinterpret_cast<const ::Nmea2k::ValueU32*>(
      &::Nmea2k::_ValueU32_default_instance_);
}
inline ::Nmea2k::ValueU32* HVAC::release_fanmode() {
  // @@protoc_insertion_point(field_release:Nmea2k.HVAC.FanMode)
  
  ::Nmea2k::ValueU32* temp = fanmode_;
  fanmode_ = NULL;
  return temp;
}
inline ::Nmea2k::ValueU32* HVAC::mutable_fanmode() {
  
  if (fanmode_ == NULL) {
    auto* p = CreateMaybeMessage<::Nmea2k::ValueU32>(GetArenaNoVirtual());
    fanmode_ = p;
  }
  // @@protoc_insertion_point(field_mutable:Nmea2k.HVAC.FanMode)
  return fanmode_;
}
inline void HVAC::set_allocated_fanmode(::Nmea2k::ValueU32* fanmode) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete fanmode_;
  }
  if (fanmode) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      fanmode = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, fanmode, submessage_arena);
    }
    
  } else {
    
  }
  fanmode_ = fanmode;
  // @@protoc_insertion_point(field_set_allocated:Nmea2k.HVAC.FanMode)
}

// .Nmea2k.ValueU32 FanSpeed = 4;
inline bool HVAC::has_fanspeed() const {
  return this != internal_default_instance() && fanspeed_ != NULL;
}
inline void HVAC::clear_fanspeed() {
  if (GetArenaNoVirtual() == NULL && fanspeed_ != NULL) {
    delete fanspeed_;
  }
  fanspeed_ = NULL;
}
inline const ::Nmea2k::ValueU32& HVAC::_internal_fanspeed() const {
  return *fanspeed_;
}
inline const ::Nmea2k::ValueU32& HVAC::fanspeed() const {
  const ::Nmea2k::ValueU32* p = fanspeed_;
  // @@protoc_insertion_point(field_get:Nmea2k.HVAC.FanSpeed)
  return p != NULL ? *p : *reinterpret_cast<const ::Nmea2k::ValueU32*>(
      &::Nmea2k::_ValueU32_default_instance_);
}
inline ::Nmea2k::ValueU32* HVAC::release_fanspeed() {
  // @@protoc_insertion_point(field_release:Nmea2k.HVAC.FanSpeed)
  
  ::Nmea2k::ValueU32* temp = fanspeed_;
  fanspeed_ = NULL;
  return temp;
}
inline ::Nmea2k::ValueU32* HVAC::mutable_fanspeed() {
  
  if (fanspeed_ == NULL) {
    auto* p = CreateMaybeMessage<::Nmea2k::ValueU32>(GetArenaNoVirtual());
    fanspeed_ = p;
  }
  // @@protoc_insertion_point(field_mutable:Nmea2k.HVAC.FanSpeed)
  return fanspeed_;
}
inline void HVAC::set_allocated_fanspeed(::Nmea2k::ValueU32* fanspeed) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete fanspeed_;
  }
  if (fanspeed) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      fanspeed = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, fanspeed, submessage_arena);
    }
    
  } else {
    
  }
  fanspeed_ = fanspeed;
  // @@protoc_insertion_point(field_set_allocated:Nmea2k.HVAC.FanSpeed)
}

// .Nmea2k.ValueF EnvironmentSetTemperature = 5;
inline bool HVAC::has_environmentsettemperature() const {
  return this != internal_default_instance() && environmentsettemperature_ != NULL;
}
inline void HVAC::clear_environmentsettemperature() {
  if (GetArenaNoVirtual() == NULL && environmentsettemperature_ != NULL) {
    delete environmentsettemperature_;
  }
  environmentsettemperature_ = NULL;
}
inline const ::Nmea2k::ValueF& HVAC::_internal_environmentsettemperature() const {
  return *environmentsettemperature_;
}
inline const ::Nmea2k::ValueF& HVAC::environmentsettemperature() const {
  const ::Nmea2k::ValueF* p = environmentsettemperature_;
  // @@protoc_insertion_point(field_get:Nmea2k.HVAC.EnvironmentSetTemperature)
  return p != NULL ? *p : *reinterpret_cast<const ::Nmea2k::ValueF*>(
      &::Nmea2k::_ValueF_default_instance_);
}
inline ::Nmea2k::ValueF* HVAC::release_environmentsettemperature() {
  // @@protoc_insertion_point(field_release:Nmea2k.HVAC.EnvironmentSetTemperature)
  
  ::Nmea2k::ValueF* temp = environmentsettemperature_;
  environmentsettemperature_ = NULL;
  return temp;
}
inline ::Nmea2k::ValueF* HVAC::mutable_environmentsettemperature() {
  
  if (environmentsettemperature_ == NULL) {
    auto* p = CreateMaybeMessage<::Nmea2k::ValueF>(GetArenaNoVirtual());
    environmentsettemperature_ = p;
  }
  // @@protoc_insertion_point(field_mutable:Nmea2k.HVAC.EnvironmentSetTemperature)
  return environmentsettemperature_;
}
inline void HVAC::set_allocated_environmentsettemperature(::Nmea2k::ValueF* environmentsettemperature) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete environmentsettemperature_;
  }
  if (environmentsettemperature) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      environmentsettemperature = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, environmentsettemperature, submessage_arena);
    }
    
  } else {
    
  }
  environmentsettemperature_ = environmentsettemperature;
  // @@protoc_insertion_point(field_set_allocated:Nmea2k.HVAC.EnvironmentSetTemperature)
}

// .Nmea2k.ValueF EnvironmentTemperature = 6;
inline bool HVAC::has_environmenttemperature() const {
  return this != internal_default_instance() && environmenttemperature_ != NULL;
}
inline void HVAC::clear_environmenttemperature() {
  if (GetArenaNoVirtual() == NULL && environmenttemperature_ != NULL) {
    delete environmenttemperature_;
  }
  environmenttemperature_ = NULL;
}
inline const ::Nmea2k::ValueF& HVAC::_internal_environmenttemperature() const {
  return *environmenttemperature_;
}
inline const ::Nmea2k::ValueF& HVAC::environmenttemperature() const {
  const ::Nmea2k::ValueF* p = environmenttemperature_;
  // @@protoc_insertion_point(field_get:Nmea2k.HVAC.EnvironmentTemperature)
  return p != NULL ? *p : *reinterpret_cast<const ::Nmea2k::ValueF*>(
      &::Nmea2k::_ValueF_default_instance_);
}
inline ::Nmea2k::ValueF* HVAC::release_environmenttemperature() {
  // @@protoc_insertion_point(field_release:Nmea2k.HVAC.EnvironmentTemperature)
  
  ::Nmea2k::ValueF* temp = environmenttemperature_;
  environmenttemperature_ = NULL;
  return temp;
}
inline ::Nmea2k::ValueF* HVAC::mutable_environmenttemperature() {
  
  if (environmenttemperature_ == NULL) {
    auto* p = CreateMaybeMessage<::Nmea2k::ValueF>(GetArenaNoVirtual());
    environmenttemperature_ = p;
  }
  // @@protoc_insertion_point(field_mutable:Nmea2k.HVAC.EnvironmentTemperature)
  return environmenttemperature_;
}
inline void HVAC::set_allocated_environmenttemperature(::Nmea2k::ValueF* environmenttemperature) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete environmenttemperature_;
  }
  if (environmenttemperature) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      environmenttemperature = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, environmenttemperature, submessage_arena);
    }
    
  } else {
    
  }
  environmenttemperature_ = environmenttemperature;
  // @@protoc_insertion_point(field_set_allocated:Nmea2k.HVAC.EnvironmentTemperature)
}

// -------------------------------------------------------------------

// ValueAwningState

// bool Valid = 1;
inline void ValueAwningState::clear_valid() {
  valid_ = false;
}
inline bool ValueAwningState::valid() const {
  // @@protoc_insertion_point(field_get:Nmea2k.ValueAwningState.Valid)
  return valid_;
}
inline void ValueAwningState::set_valid(bool value) {
  
  valid_ = value;
  // @@protoc_insertion_point(field_set:Nmea2k.ValueAwningState.Valid)
}

// .Nmea2k.ValueAwningState.eAwningState Value = 2;
inline void ValueAwningState::clear_value() {
  value_ = 0;
}
inline ::Nmea2k::ValueAwningState_eAwningState ValueAwningState::value() const {
  // @@protoc_insertion_point(field_get:Nmea2k.ValueAwningState.Value)
  return static_cast< ::Nmea2k::ValueAwningState_eAwningState >(value_);
}
inline void ValueAwningState::set_value(::Nmea2k::ValueAwningState_eAwningState value) {
  
  value_ = value;
  // @@protoc_insertion_point(field_set:Nmea2k.ValueAwningState.Value)
}

// -------------------------------------------------------------------

// ZipdeeAwning

// uint32 Instance = 1;
inline void ZipdeeAwning::clear_instance() {
  instance_ = 0u;
}
inline ::google::protobuf::uint32 ZipdeeAwning::instance() const {
  // @@protoc_insertion_point(field_get:Nmea2k.ZipdeeAwning.Instance)
  return instance_;
}
inline void ZipdeeAwning::set_instance(::google::protobuf::uint32 value) {
  
  instance_ = value;
  // @@protoc_insertion_point(field_set:Nmea2k.ZipdeeAwning.Instance)
}

// .Nmea2k.ValueAwningState State = 2;
inline bool ZipdeeAwning::has_state() const {
  return this != internal_default_instance() && state_ != NULL;
}
inline void ZipdeeAwning::clear_state() {
  if (GetArenaNoVirtual() == NULL && state_ != NULL) {
    delete state_;
  }
  state_ = NULL;
}
inline const ::Nmea2k::ValueAwningState& ZipdeeAwning::_internal_state() const {
  return *state_;
}
inline const ::Nmea2k::ValueAwningState& ZipdeeAwning::state() const {
  const ::Nmea2k::ValueAwningState* p = state_;
  // @@protoc_insertion_point(field_get:Nmea2k.ZipdeeAwning.State)
  return p != NULL ? *p : *reinterpret_cast<const ::Nmea2k::ValueAwningState*>(
      &::Nmea2k::_ValueAwningState_default_instance_);
}
inline ::Nmea2k::ValueAwningState* ZipdeeAwning::release_state() {
  // @@protoc_insertion_point(field_release:Nmea2k.ZipdeeAwning.State)
  
  ::Nmea2k::ValueAwningState* temp = state_;
  state_ = NULL;
  return temp;
}
inline ::Nmea2k::ValueAwningState* ZipdeeAwning::mutable_state() {
  
  if (state_ == NULL) {
    auto* p = CreateMaybeMessage<::Nmea2k::ValueAwningState>(GetArenaNoVirtual());
    state_ = p;
  }
  // @@protoc_insertion_point(field_mutable:Nmea2k.ZipdeeAwning.State)
  return state_;
}
inline void ZipdeeAwning::set_allocated_state(::Nmea2k::ValueAwningState* state) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete state_;
  }
  if (state) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      state = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, state, submessage_arena);
    }
    
  } else {
    
  }
  state_ = state;
  // @@protoc_insertion_point(field_set_allocated:Nmea2k.ZipdeeAwning.State)
}

// -------------------------------------------------------------------

// ValueGeneratorState

// bool Valid = 1;
inline void ValueGeneratorState::clear_valid() {
  valid_ = false;
}
inline bool ValueGeneratorState::valid() const {
  // @@protoc_insertion_point(field_get:Nmea2k.ValueGeneratorState.Valid)
  return valid_;
}
inline void ValueGeneratorState::set_valid(bool value) {
  
  valid_ = value;
  // @@protoc_insertion_point(field_set:Nmea2k.ValueGeneratorState.Valid)
}

// .Nmea2k.ValueGeneratorState.eGeneratorState Value = 2;
inline void ValueGeneratorState::clear_value() {
  value_ = 0;
}
inline ::Nmea2k::ValueGeneratorState_eGeneratorState ValueGeneratorState::value() const {
  // @@protoc_insertion_point(field_get:Nmea2k.ValueGeneratorState.Value)
  return static_cast< ::Nmea2k::ValueGeneratorState_eGeneratorState >(value_);
}
inline void ValueGeneratorState::set_value(::Nmea2k::ValueGeneratorState_eGeneratorState value) {
  
  value_ = value;
  // @@protoc_insertion_point(field_set:Nmea2k.ValueGeneratorState.Value)
}

// -------------------------------------------------------------------

// ThirdPartyGenerator

// uint32 Instance = 1;
inline void ThirdPartyGenerator::clear_instance() {
  instance_ = 0u;
}
inline ::google::protobuf::uint32 ThirdPartyGenerator::instance() const {
  // @@protoc_insertion_point(field_get:Nmea2k.ThirdPartyGenerator.Instance)
  return instance_;
}
inline void ThirdPartyGenerator::set_instance(::google::protobuf::uint32 value) {
  
  instance_ = value;
  // @@protoc_insertion_point(field_set:Nmea2k.ThirdPartyGenerator.Instance)
}

// .Nmea2k.ValueU32 OnTime = 2;
inline bool ThirdPartyGenerator::has_ontime() const {
  return this != internal_default_instance() && ontime_ != NULL;
}
inline void ThirdPartyGenerator::clear_ontime() {
  if (GetArenaNoVirtual() == NULL && ontime_ != NULL) {
    delete ontime_;
  }
  ontime_ = NULL;
}
inline const ::Nmea2k::ValueU32& ThirdPartyGenerator::_internal_ontime() const {
  return *ontime_;
}
inline const ::Nmea2k::ValueU32& ThirdPartyGenerator::ontime() const {
  const ::Nmea2k::ValueU32* p = ontime_;
  // @@protoc_insertion_point(field_get:Nmea2k.ThirdPartyGenerator.OnTime)
  return p != NULL ? *p : *reinterpret_cast<const ::Nmea2k::ValueU32*>(
      &::Nmea2k::_ValueU32_default_instance_);
}
inline ::Nmea2k::ValueU32* ThirdPartyGenerator::release_ontime() {
  // @@protoc_insertion_point(field_release:Nmea2k.ThirdPartyGenerator.OnTime)
  
  ::Nmea2k::ValueU32* temp = ontime_;
  ontime_ = NULL;
  return temp;
}
inline ::Nmea2k::ValueU32* ThirdPartyGenerator::mutable_ontime() {
  
  if (ontime_ == NULL) {
    auto* p = CreateMaybeMessage<::Nmea2k::ValueU32>(GetArenaNoVirtual());
    ontime_ = p;
  }
  // @@protoc_insertion_point(field_mutable:Nmea2k.ThirdPartyGenerator.OnTime)
  return ontime_;
}
inline void ThirdPartyGenerator::set_allocated_ontime(::Nmea2k::ValueU32* ontime) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete ontime_;
  }
  if (ontime) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      ontime = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, ontime, submessage_arena);
    }
    
  } else {
    
  }
  ontime_ = ontime;
  // @@protoc_insertion_point(field_set_allocated:Nmea2k.ThirdPartyGenerator.OnTime)
}

// .Nmea2k.ValueGeneratorState Status = 3;
inline bool ThirdPartyGenerator::has_status() const {
  return this != internal_default_instance() && status_ != NULL;
}
inline void ThirdPartyGenerator::clear_status() {
  if (GetArenaNoVirtual() == NULL && status_ != NULL) {
    delete status_;
  }
  status_ = NULL;
}
inline const ::Nmea2k::ValueGeneratorState& ThirdPartyGenerator::_internal_status() const {
  return *status_;
}
inline const ::Nmea2k::ValueGeneratorState& ThirdPartyGenerator::status() const {
  const ::Nmea2k::ValueGeneratorState* p = status_;
  // @@protoc_insertion_point(field_get:Nmea2k.ThirdPartyGenerator.Status)
  return p != NULL ? *p : *reinterpret_cast<const ::Nmea2k::ValueGeneratorState*>(
      &::Nmea2k::_ValueGeneratorState_default_instance_);
}
inline ::Nmea2k::ValueGeneratorState* ThirdPartyGenerator::release_status() {
  // @@protoc_insertion_point(field_release:Nmea2k.ThirdPartyGenerator.Status)
  
  ::Nmea2k::ValueGeneratorState* temp = status_;
  status_ = NULL;
  return temp;
}
inline ::Nmea2k::ValueGeneratorState* ThirdPartyGenerator::mutable_status() {
  
  if (status_ == NULL) {
    auto* p = CreateMaybeMessage<::Nmea2k::ValueGeneratorState>(GetArenaNoVirtual());
    status_ = p;
  }
  // @@protoc_insertion_point(field_mutable:Nmea2k.ThirdPartyGenerator.Status)
  return status_;
}
inline void ThirdPartyGenerator::set_allocated_status(::Nmea2k::ValueGeneratorState* status) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete status_;
  }
  if (status) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      status = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  status_ = status;
  // @@protoc_insertion_point(field_set_allocated:Nmea2k.ThirdPartyGenerator.Status)
}

// -------------------------------------------------------------------

// ValueInverterState

// bool Valid = 1;
inline void ValueInverterState::clear_valid() {
  valid_ = false;
}
inline bool ValueInverterState::valid() const {
  // @@protoc_insertion_point(field_get:Nmea2k.ValueInverterState.Valid)
  return valid_;
}
inline void ValueInverterState::set_valid(bool value) {
  
  valid_ = value;
  // @@protoc_insertion_point(field_set:Nmea2k.ValueInverterState.Valid)
}

// .Nmea2k.ValueInverterState.eInverterState Value = 2;
inline void ValueInverterState::clear_value() {
  value_ = 0;
}
inline ::Nmea2k::ValueInverterState_eInverterState ValueInverterState::value() const {
  // @@protoc_insertion_point(field_get:Nmea2k.ValueInverterState.Value)
  return static_cast< ::Nmea2k::ValueInverterState_eInverterState >(value_);
}
inline void ValueInverterState::set_value(::Nmea2k::ValueInverterState_eInverterState value) {
  
  value_ = value;
  // @@protoc_insertion_point(field_set:Nmea2k.ValueInverterState.Value)
}

// -------------------------------------------------------------------

// ValueChargerState

// bool Valid = 1;
inline void ValueChargerState::clear_valid() {
  valid_ = false;
}
inline bool ValueChargerState::valid() const {
  // @@protoc_insertion_point(field_get:Nmea2k.ValueChargerState.Valid)
  return valid_;
}
inline void ValueChargerState::set_valid(bool value) {
  
  valid_ = value;
  // @@protoc_insertion_point(field_set:Nmea2k.ValueChargerState.Valid)
}

// .Nmea2k.ValueChargerState.eChargerState Value = 2;
inline void ValueChargerState::clear_value() {
  value_ = 0;
}
inline ::Nmea2k::ValueChargerState_eChargerState ValueChargerState::value() const {
  // @@protoc_insertion_point(field_get:Nmea2k.ValueChargerState.Value)
  return static_cast< ::Nmea2k::ValueChargerState_eChargerState >(value_);
}
inline void ValueChargerState::set_value(::Nmea2k::ValueChargerState_eChargerState value) {
  
  value_ = value;
  // @@protoc_insertion_point(field_set:Nmea2k.ValueChargerState.Value)
}

// -------------------------------------------------------------------

// ValueInverterChargerEnabled

// bool Valid = 1;
inline void ValueInverterChargerEnabled::clear_valid() {
  valid_ = false;
}
inline bool ValueInverterChargerEnabled::valid() const {
  // @@protoc_insertion_point(field_get:Nmea2k.ValueInverterChargerEnabled.Valid)
  return valid_;
}
inline void ValueInverterChargerEnabled::set_valid(bool value) {
  
  valid_ = value;
  // @@protoc_insertion_point(field_set:Nmea2k.ValueInverterChargerEnabled.Valid)
}

// .Nmea2k.ValueInverterChargerEnabled.eInverterChargerEnabled Value = 2;
inline void ValueInverterChargerEnabled::clear_value() {
  value_ = 0;
}
inline ::Nmea2k::ValueInverterChargerEnabled_eInverterChargerEnabled ValueInverterChargerEnabled::value() const {
  // @@protoc_insertion_point(field_get:Nmea2k.ValueInverterChargerEnabled.Value)
  return static_cast< ::Nmea2k::ValueInverterChargerEnabled_eInverterChargerEnabled >(value_);
}
inline void ValueInverterChargerEnabled::set_value(::Nmea2k::ValueInverterChargerEnabled_eInverterChargerEnabled value) {
  
  value_ = value;
  // @@protoc_insertion_point(field_set:Nmea2k.ValueInverterChargerEnabled.Value)
}

// -------------------------------------------------------------------

// InverterCharger

// uint32 Instance = 1;
inline void InverterCharger::clear_instance() {
  instance_ = 0u;
}
inline ::google::protobuf::uint32 InverterCharger::instance() const {
  // @@protoc_insertion_point(field_get:Nmea2k.InverterCharger.Instance)
  return instance_;
}
inline void InverterCharger::set_instance(::google::protobuf::uint32 value) {
  
  instance_ = value;
  // @@protoc_insertion_point(field_set:Nmea2k.InverterCharger.Instance)
}

// .Nmea2k.ValueU32 InverterInstance = 2;
inline bool InverterCharger::has_inverterinstance() const {
  return this != internal_default_instance() && inverterinstance_ != NULL;
}
inline void InverterCharger::clear_inverterinstance() {
  if (GetArenaNoVirtual() == NULL && inverterinstance_ != NULL) {
    delete inverterinstance_;
  }
  inverterinstance_ = NULL;
}
inline const ::Nmea2k::ValueU32& InverterCharger::_internal_inverterinstance() const {
  return *inverterinstance_;
}
inline const ::Nmea2k::ValueU32& InverterCharger::inverterinstance() const {
  const ::Nmea2k::ValueU32* p = inverterinstance_;
  // @@protoc_insertion_point(field_get:Nmea2k.InverterCharger.InverterInstance)
  return p != NULL ? *p : *reinterpret_cast<const ::Nmea2k::ValueU32*>(
      &::Nmea2k::_ValueU32_default_instance_);
}
inline ::Nmea2k::ValueU32* InverterCharger::release_inverterinstance() {
  // @@protoc_insertion_point(field_release:Nmea2k.InverterCharger.InverterInstance)
  
  ::Nmea2k::ValueU32* temp = inverterinstance_;
  inverterinstance_ = NULL;
  return temp;
}
inline ::Nmea2k::ValueU32* InverterCharger::mutable_inverterinstance() {
  
  if (inverterinstance_ == NULL) {
    auto* p = CreateMaybeMessage<::Nmea2k::ValueU32>(GetArenaNoVirtual());
    inverterinstance_ = p;
  }
  // @@protoc_insertion_point(field_mutable:Nmea2k.InverterCharger.InverterInstance)
  return inverterinstance_;
}
inline void InverterCharger::set_allocated_inverterinstance(::Nmea2k::ValueU32* inverterinstance) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete inverterinstance_;
  }
  if (inverterinstance) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      inverterinstance = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, inverterinstance, submessage_arena);
    }
    
  } else {
    
  }
  inverterinstance_ = inverterinstance;
  // @@protoc_insertion_point(field_set_allocated:Nmea2k.InverterCharger.InverterInstance)
}

// .Nmea2k.ValueU32 ChargerInstance = 3;
inline bool InverterCharger::has_chargerinstance() const {
  return this != internal_default_instance() && chargerinstance_ != NULL;
}
inline void InverterCharger::clear_chargerinstance() {
  if (GetArenaNoVirtual() == NULL && chargerinstance_ != NULL) {
    delete chargerinstance_;
  }
  chargerinstance_ = NULL;
}
inline const ::Nmea2k::ValueU32& InverterCharger::_internal_chargerinstance() const {
  return *chargerinstance_;
}
inline const ::Nmea2k::ValueU32& InverterCharger::chargerinstance() const {
  const ::Nmea2k::ValueU32* p = chargerinstance_;
  // @@protoc_insertion_point(field_get:Nmea2k.InverterCharger.ChargerInstance)
  return p != NULL ? *p : *reinterpret_cast<const ::Nmea2k::ValueU32*>(
      &::Nmea2k::_ValueU32_default_instance_);
}
inline ::Nmea2k::ValueU32* InverterCharger::release_chargerinstance() {
  // @@protoc_insertion_point(field_release:Nmea2k.InverterCharger.ChargerInstance)
  
  ::Nmea2k::ValueU32* temp = chargerinstance_;
  chargerinstance_ = NULL;
  return temp;
}
inline ::Nmea2k::ValueU32* InverterCharger::mutable_chargerinstance() {
  
  if (chargerinstance_ == NULL) {
    auto* p = CreateMaybeMessage<::Nmea2k::ValueU32>(GetArenaNoVirtual());
    chargerinstance_ = p;
  }
  // @@protoc_insertion_point(field_mutable:Nmea2k.InverterCharger.ChargerInstance)
  return chargerinstance_;
}
inline void InverterCharger::set_allocated_chargerinstance(::Nmea2k::ValueU32* chargerinstance) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete chargerinstance_;
  }
  if (chargerinstance) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      chargerinstance = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, chargerinstance, submessage_arena);
    }
    
  } else {
    
  }
  chargerinstance_ = chargerinstance;
  // @@protoc_insertion_point(field_set_allocated:Nmea2k.InverterCharger.ChargerInstance)
}

// .Nmea2k.ValueInverterChargerEnabled InverterEnable = 4;
inline bool InverterCharger::has_inverterenable() const {
  return this != internal_default_instance() && inverterenable_ != NULL;
}
inline void InverterCharger::clear_inverterenable() {
  if (GetArenaNoVirtual() == NULL && inverterenable_ != NULL) {
    delete inverterenable_;
  }
  inverterenable_ = NULL;
}
inline const ::Nmea2k::ValueInverterChargerEnabled& InverterCharger::_internal_inverterenable() const {
  return *inverterenable_;
}
inline const ::Nmea2k::ValueInverterChargerEnabled& InverterCharger::inverterenable() const {
  const ::Nmea2k::ValueInverterChargerEnabled* p = inverterenable_;
  // @@protoc_insertion_point(field_get:Nmea2k.InverterCharger.InverterEnable)
  return p != NULL ? *p : *reinterpret_cast<const ::Nmea2k::ValueInverterChargerEnabled*>(
      &::Nmea2k::_ValueInverterChargerEnabled_default_instance_);
}
inline ::Nmea2k::ValueInverterChargerEnabled* InverterCharger::release_inverterenable() {
  // @@protoc_insertion_point(field_release:Nmea2k.InverterCharger.InverterEnable)
  
  ::Nmea2k::ValueInverterChargerEnabled* temp = inverterenable_;
  inverterenable_ = NULL;
  return temp;
}
inline ::Nmea2k::ValueInverterChargerEnabled* InverterCharger::mutable_inverterenable() {
  
  if (inverterenable_ == NULL) {
    auto* p = CreateMaybeMessage<::Nmea2k::ValueInverterChargerEnabled>(GetArenaNoVirtual());
    inverterenable_ = p;
  }
  // @@protoc_insertion_point(field_mutable:Nmea2k.InverterCharger.InverterEnable)
  return inverterenable_;
}
inline void InverterCharger::set_allocated_inverterenable(::Nmea2k::ValueInverterChargerEnabled* inverterenable) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete inverterenable_;
  }
  if (inverterenable) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      inverterenable = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, inverterenable, submessage_arena);
    }
    
  } else {
    
  }
  inverterenable_ = inverterenable;
  // @@protoc_insertion_point(field_set_allocated:Nmea2k.InverterCharger.InverterEnable)
}

// .Nmea2k.ValueInverterState InverterState = 5;
inline bool InverterCharger::has_inverterstate() const {
  return this != internal_default_instance() && inverterstate_ != NULL;
}
inline void InverterCharger::clear_inverterstate() {
  if (GetArenaNoVirtual() == NULL && inverterstate_ != NULL) {
    delete inverterstate_;
  }
  inverterstate_ = NULL;
}
inline const ::Nmea2k::ValueInverterState& InverterCharger::_internal_inverterstate() const {
  return *inverterstate_;
}
inline const ::Nmea2k::ValueInverterState& InverterCharger::inverterstate() const {
  const ::Nmea2k::ValueInverterState* p = inverterstate_;
  // @@protoc_insertion_point(field_get:Nmea2k.InverterCharger.InverterState)
  return p != NULL ? *p : *reinterpret_cast<const ::Nmea2k::ValueInverterState*>(
      &::Nmea2k::_ValueInverterState_default_instance_);
}
inline ::Nmea2k::ValueInverterState* InverterCharger::release_inverterstate() {
  // @@protoc_insertion_point(field_release:Nmea2k.InverterCharger.InverterState)
  
  ::Nmea2k::ValueInverterState* temp = inverterstate_;
  inverterstate_ = NULL;
  return temp;
}
inline ::Nmea2k::ValueInverterState* InverterCharger::mutable_inverterstate() {
  
  if (inverterstate_ == NULL) {
    auto* p = CreateMaybeMessage<::Nmea2k::ValueInverterState>(GetArenaNoVirtual());
    inverterstate_ = p;
  }
  // @@protoc_insertion_point(field_mutable:Nmea2k.InverterCharger.InverterState)
  return inverterstate_;
}
inline void InverterCharger::set_allocated_inverterstate(::Nmea2k::ValueInverterState* inverterstate) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete inverterstate_;
  }
  if (inverterstate) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      inverterstate = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, inverterstate, submessage_arena);
    }
    
  } else {
    
  }
  inverterstate_ = inverterstate;
  // @@protoc_insertion_point(field_set_allocated:Nmea2k.InverterCharger.InverterState)
}

// .Nmea2k.ValueInverterChargerEnabled ChargerEnable = 6;
inline bool InverterCharger::has_chargerenable() const {
  return this != internal_default_instance() && chargerenable_ != NULL;
}
inline void InverterCharger::clear_chargerenable() {
  if (GetArenaNoVirtual() == NULL && chargerenable_ != NULL) {
    delete chargerenable_;
  }
  chargerenable_ = NULL;
}
inline const ::Nmea2k::ValueInverterChargerEnabled& InverterCharger::_internal_chargerenable() const {
  return *chargerenable_;
}
inline const ::Nmea2k::ValueInverterChargerEnabled& InverterCharger::chargerenable() const {
  const ::Nmea2k::ValueInverterChargerEnabled* p = chargerenable_;
  // @@protoc_insertion_point(field_get:Nmea2k.InverterCharger.ChargerEnable)
  return p != NULL ? *p : *reinterpret_cast<const ::Nmea2k::ValueInverterChargerEnabled*>(
      &::Nmea2k::_ValueInverterChargerEnabled_default_instance_);
}
inline ::Nmea2k::ValueInverterChargerEnabled* InverterCharger::release_chargerenable() {
  // @@protoc_insertion_point(field_release:Nmea2k.InverterCharger.ChargerEnable)
  
  ::Nmea2k::ValueInverterChargerEnabled* temp = chargerenable_;
  chargerenable_ = NULL;
  return temp;
}
inline ::Nmea2k::ValueInverterChargerEnabled* InverterCharger::mutable_chargerenable() {
  
  if (chargerenable_ == NULL) {
    auto* p = CreateMaybeMessage<::Nmea2k::ValueInverterChargerEnabled>(GetArenaNoVirtual());
    chargerenable_ = p;
  }
  // @@protoc_insertion_point(field_mutable:Nmea2k.InverterCharger.ChargerEnable)
  return chargerenable_;
}
inline void InverterCharger::set_allocated_chargerenable(::Nmea2k::ValueInverterChargerEnabled* chargerenable) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete chargerenable_;
  }
  if (chargerenable) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      chargerenable = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, chargerenable, submessage_arena);
    }
    
  } else {
    
  }
  chargerenable_ = chargerenable;
  // @@protoc_insertion_point(field_set_allocated:Nmea2k.InverterCharger.ChargerEnable)
}

// .Nmea2k.ValueChargerState ChargerState = 7;
inline bool InverterCharger::has_chargerstate() const {
  return this != internal_default_instance() && chargerstate_ != NULL;
}
inline void InverterCharger::clear_chargerstate() {
  if (GetArenaNoVirtual() == NULL && chargerstate_ != NULL) {
    delete chargerstate_;
  }
  chargerstate_ = NULL;
}
inline const ::Nmea2k::ValueChargerState& InverterCharger::_internal_chargerstate() const {
  return *chargerstate_;
}
inline const ::Nmea2k::ValueChargerState& InverterCharger::chargerstate() const {
  const ::Nmea2k::ValueChargerState* p = chargerstate_;
  // @@protoc_insertion_point(field_get:Nmea2k.InverterCharger.ChargerState)
  return p != NULL ? *p : *reinterpret_cast<const ::Nmea2k::ValueChargerState*>(
      &::Nmea2k::_ValueChargerState_default_instance_);
}
inline ::Nmea2k::ValueChargerState* InverterCharger::release_chargerstate() {
  // @@protoc_insertion_point(field_release:Nmea2k.InverterCharger.ChargerState)
  
  ::Nmea2k::ValueChargerState* temp = chargerstate_;
  chargerstate_ = NULL;
  return temp;
}
inline ::Nmea2k::ValueChargerState* InverterCharger::mutable_chargerstate() {
  
  if (chargerstate_ == NULL) {
    auto* p = CreateMaybeMessage<::Nmea2k::ValueChargerState>(GetArenaNoVirtual());
    chargerstate_ = p;
  }
  // @@protoc_insertion_point(field_mutable:Nmea2k.InverterCharger.ChargerState)
  return chargerstate_;
}
inline void InverterCharger::set_allocated_chargerstate(::Nmea2k::ValueChargerState* chargerstate) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete chargerstate_;
  }
  if (chargerstate) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      chargerstate = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, chargerstate, submessage_arena);
    }
    
  } else {
    
  }
  chargerstate_ = chargerstate;
  // @@protoc_insertion_point(field_set_allocated:Nmea2k.InverterCharger.ChargerState)
}

// -------------------------------------------------------------------

// ValueTyreStatus

// bool Valid = 1;
inline void ValueTyreStatus::clear_valid() {
  valid_ = false;
}
inline bool ValueTyreStatus::valid() const {
  // @@protoc_insertion_point(field_get:Nmea2k.ValueTyreStatus.Valid)
  return valid_;
}
inline void ValueTyreStatus::set_valid(bool value) {
  
  valid_ = value;
  // @@protoc_insertion_point(field_set:Nmea2k.ValueTyreStatus.Valid)
}

// .Nmea2k.ValueTyreStatus.eTyreStatus Value = 2;
inline void ValueTyreStatus::clear_value() {
  value_ = 0;
}
inline ::Nmea2k::ValueTyreStatus_eTyreStatus ValueTyreStatus::value() const {
  // @@protoc_insertion_point(field_get:Nmea2k.ValueTyreStatus.Value)
  return static_cast< ::Nmea2k::ValueTyreStatus_eTyreStatus >(value_);
}
inline void ValueTyreStatus::set_value(::Nmea2k::ValueTyreStatus_eTyreStatus value) {
  
  value_ = value;
  // @@protoc_insertion_point(field_set:Nmea2k.ValueTyreStatus.Value)
}

// -------------------------------------------------------------------

// ValueTyreLimitStatus

// bool Valid = 1;
inline void ValueTyreLimitStatus::clear_valid() {
  valid_ = false;
}
inline bool ValueTyreLimitStatus::valid() const {
  // @@protoc_insertion_point(field_get:Nmea2k.ValueTyreLimitStatus.Valid)
  return valid_;
}
inline void ValueTyreLimitStatus::set_valid(bool value) {
  
  valid_ = value;
  // @@protoc_insertion_point(field_set:Nmea2k.ValueTyreLimitStatus.Valid)
}

// .Nmea2k.ValueTyreLimitStatus.eTyreLimitStatus Value = 2;
inline void ValueTyreLimitStatus::clear_value() {
  value_ = 0;
}
inline ::Nmea2k::ValueTyreLimitStatus_eTyreLimitStatus ValueTyreLimitStatus::value() const {
  // @@protoc_insertion_point(field_get:Nmea2k.ValueTyreLimitStatus.Value)
  return static_cast< ::Nmea2k::ValueTyreLimitStatus_eTyreLimitStatus >(value_);
}
inline void ValueTyreLimitStatus::set_value(::Nmea2k::ValueTyreLimitStatus_eTyreLimitStatus value) {
  
  value_ = value;
  // @@protoc_insertion_point(field_set:Nmea2k.ValueTyreLimitStatus.Value)
}

// -------------------------------------------------------------------

// TyrePressure

// uint32 Instance = 1;
inline void TyrePressure::clear_instance() {
  instance_ = 0u;
}
inline ::google::protobuf::uint32 TyrePressure::instance() const {
  // @@protoc_insertion_point(field_get:Nmea2k.TyrePressure.Instance)
  return instance_;
}
inline void TyrePressure::set_instance(::google::protobuf::uint32 value) {
  
  instance_ = value;
  // @@protoc_insertion_point(field_set:Nmea2k.TyrePressure.Instance)
}

// .Nmea2k.ValueF Pressure = 2;
inline bool TyrePressure::has_pressure() const {
  return this != internal_default_instance() && pressure_ != NULL;
}
inline void TyrePressure::clear_pressure() {
  if (GetArenaNoVirtual() == NULL && pressure_ != NULL) {
    delete pressure_;
  }
  pressure_ = NULL;
}
inline const ::Nmea2k::ValueF& TyrePressure::_internal_pressure() const {
  return *pressure_;
}
inline const ::Nmea2k::ValueF& TyrePressure::pressure() const {
  const ::Nmea2k::ValueF* p = pressure_;
  // @@protoc_insertion_point(field_get:Nmea2k.TyrePressure.Pressure)
  return p != NULL ? *p : *reinterpret_cast<const ::Nmea2k::ValueF*>(
      &::Nmea2k::_ValueF_default_instance_);
}
inline ::Nmea2k::ValueF* TyrePressure::release_pressure() {
  // @@protoc_insertion_point(field_release:Nmea2k.TyrePressure.Pressure)
  
  ::Nmea2k::ValueF* temp = pressure_;
  pressure_ = NULL;
  return temp;
}
inline ::Nmea2k::ValueF* TyrePressure::mutable_pressure() {
  
  if (pressure_ == NULL) {
    auto* p = CreateMaybeMessage<::Nmea2k::ValueF>(GetArenaNoVirtual());
    pressure_ = p;
  }
  // @@protoc_insertion_point(field_mutable:Nmea2k.TyrePressure.Pressure)
  return pressure_;
}
inline void TyrePressure::set_allocated_pressure(::Nmea2k::ValueF* pressure) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete pressure_;
  }
  if (pressure) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      pressure = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, pressure, submessage_arena);
    }
    
  } else {
    
  }
  pressure_ = pressure;
  // @@protoc_insertion_point(field_set_allocated:Nmea2k.TyrePressure.Pressure)
}

// .Nmea2k.ValueF Temperature = 3;
inline bool TyrePressure::has_temperature() const {
  return this != internal_default_instance() && temperature_ != NULL;
}
inline void TyrePressure::clear_temperature() {
  if (GetArenaNoVirtual() == NULL && temperature_ != NULL) {
    delete temperature_;
  }
  temperature_ = NULL;
}
inline const ::Nmea2k::ValueF& TyrePressure::_internal_temperature() const {
  return *temperature_;
}
inline const ::Nmea2k::ValueF& TyrePressure::temperature() const {
  const ::Nmea2k::ValueF* p = temperature_;
  // @@protoc_insertion_point(field_get:Nmea2k.TyrePressure.Temperature)
  return p != NULL ? *p : *reinterpret_cast<const ::Nmea2k::ValueF*>(
      &::Nmea2k::_ValueF_default_instance_);
}
inline ::Nmea2k::ValueF* TyrePressure::release_temperature() {
  // @@protoc_insertion_point(field_release:Nmea2k.TyrePressure.Temperature)
  
  ::Nmea2k::ValueF* temp = temperature_;
  temperature_ = NULL;
  return temp;
}
inline ::Nmea2k::ValueF* TyrePressure::mutable_temperature() {
  
  if (temperature_ == NULL) {
    auto* p = CreateMaybeMessage<::Nmea2k::ValueF>(GetArenaNoVirtual());
    temperature_ = p;
  }
  // @@protoc_insertion_point(field_mutable:Nmea2k.TyrePressure.Temperature)
  return temperature_;
}
inline void TyrePressure::set_allocated_temperature(::Nmea2k::ValueF* temperature) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete temperature_;
  }
  if (temperature) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      temperature = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, temperature, submessage_arena);
    }
    
  } else {
    
  }
  temperature_ = temperature;
  // @@protoc_insertion_point(field_set_allocated:Nmea2k.TyrePressure.Temperature)
}

// .Nmea2k.ValueTyreStatus Status = 4;
inline bool TyrePressure::has_status() const {
  return this != internal_default_instance() && status_ != NULL;
}
inline void TyrePressure::clear_status() {
  if (GetArenaNoVirtual() == NULL && status_ != NULL) {
    delete status_;
  }
  status_ = NULL;
}
inline const ::Nmea2k::ValueTyreStatus& TyrePressure::_internal_status() const {
  return *status_;
}
inline const ::Nmea2k::ValueTyreStatus& TyrePressure::status() const {
  const ::Nmea2k::ValueTyreStatus* p = status_;
  // @@protoc_insertion_point(field_get:Nmea2k.TyrePressure.Status)
  return p != NULL ? *p : *reinterpret_cast<const ::Nmea2k::ValueTyreStatus*>(
      &::Nmea2k::_ValueTyreStatus_default_instance_);
}
inline ::Nmea2k::ValueTyreStatus* TyrePressure::release_status() {
  // @@protoc_insertion_point(field_release:Nmea2k.TyrePressure.Status)
  
  ::Nmea2k::ValueTyreStatus* temp = status_;
  status_ = NULL;
  return temp;
}
inline ::Nmea2k::ValueTyreStatus* TyrePressure::mutable_status() {
  
  if (status_ == NULL) {
    auto* p = CreateMaybeMessage<::Nmea2k::ValueTyreStatus>(GetArenaNoVirtual());
    status_ = p;
  }
  // @@protoc_insertion_point(field_mutable:Nmea2k.TyrePressure.Status)
  return status_;
}
inline void TyrePressure::set_allocated_status(::Nmea2k::ValueTyreStatus* status) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete status_;
  }
  if (status) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      status = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  status_ = status;
  // @@protoc_insertion_point(field_set_allocated:Nmea2k.TyrePressure.Status)
}

// .Nmea2k.ValueTyreLimitStatus LimitStatus = 5;
inline bool TyrePressure::has_limitstatus() const {
  return this != internal_default_instance() && limitstatus_ != NULL;
}
inline void TyrePressure::clear_limitstatus() {
  if (GetArenaNoVirtual() == NULL && limitstatus_ != NULL) {
    delete limitstatus_;
  }
  limitstatus_ = NULL;
}
inline const ::Nmea2k::ValueTyreLimitStatus& TyrePressure::_internal_limitstatus() const {
  return *limitstatus_;
}
inline const ::Nmea2k::ValueTyreLimitStatus& TyrePressure::limitstatus() const {
  const ::Nmea2k::ValueTyreLimitStatus* p = limitstatus_;
  // @@protoc_insertion_point(field_get:Nmea2k.TyrePressure.LimitStatus)
  return p != NULL ? *p : *reinterpret_cast<const ::Nmea2k::ValueTyreLimitStatus*>(
      &::Nmea2k::_ValueTyreLimitStatus_default_instance_);
}
inline ::Nmea2k::ValueTyreLimitStatus* TyrePressure::release_limitstatus() {
  // @@protoc_insertion_point(field_release:Nmea2k.TyrePressure.LimitStatus)
  
  ::Nmea2k::ValueTyreLimitStatus* temp = limitstatus_;
  limitstatus_ = NULL;
  return temp;
}
inline ::Nmea2k::ValueTyreLimitStatus* TyrePressure::mutable_limitstatus() {
  
  if (limitstatus_ == NULL) {
    auto* p = CreateMaybeMessage<::Nmea2k::ValueTyreLimitStatus>(GetArenaNoVirtual());
    limitstatus_ = p;
  }
  // @@protoc_insertion_point(field_mutable:Nmea2k.TyrePressure.LimitStatus)
  return limitstatus_;
}
inline void TyrePressure::set_allocated_limitstatus(::Nmea2k::ValueTyreLimitStatus* limitstatus) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete limitstatus_;
  }
  if (limitstatus) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      limitstatus = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, limitstatus, submessage_arena);
    }
    
  } else {
    
  }
  limitstatus_ = limitstatus;
  // @@protoc_insertion_point(field_set_allocated:Nmea2k.TyrePressure.LimitStatus)
}

// -------------------------------------------------------------------

// ValueAudioSource

// bool Valid = 1;
inline void ValueAudioSource::clear_valid() {
  valid_ = false;
}
inline bool ValueAudioSource::valid() const {
  // @@protoc_insertion_point(field_get:Nmea2k.ValueAudioSource.Valid)
  return valid_;
}
inline void ValueAudioSource::set_valid(bool value) {
  
  valid_ = value;
  // @@protoc_insertion_point(field_set:Nmea2k.ValueAudioSource.Valid)
}

// .Nmea2k.ValueAudioSource.eAudioSource Value = 2;
inline void ValueAudioSource::clear_value() {
  value_ = 0;
}
inline ::Nmea2k::ValueAudioSource_eAudioSource ValueAudioSource::value() const {
  // @@protoc_insertion_point(field_get:Nmea2k.ValueAudioSource.Value)
  return static_cast< ::Nmea2k::ValueAudioSource_eAudioSource >(value_);
}
inline void ValueAudioSource::set_value(::Nmea2k::ValueAudioSource_eAudioSource value) {
  
  value_ = value;
  // @@protoc_insertion_point(field_set:Nmea2k.ValueAudioSource.Value)
}

// -------------------------------------------------------------------

// ValueAudioStatus

// bool Valid = 1;
inline void ValueAudioStatus::clear_valid() {
  valid_ = false;
}
inline bool ValueAudioStatus::valid() const {
  // @@protoc_insertion_point(field_get:Nmea2k.ValueAudioStatus.Valid)
  return valid_;
}
inline void ValueAudioStatus::set_valid(bool value) {
  
  valid_ = value;
  // @@protoc_insertion_point(field_set:Nmea2k.ValueAudioStatus.Valid)
}

// .Nmea2k.ValueAudioStatus.eAudioStatus Value = 2;
inline void ValueAudioStatus::clear_value() {
  value_ = 0;
}
inline ::Nmea2k::ValueAudioStatus_eAudioStatus ValueAudioStatus::value() const {
  // @@protoc_insertion_point(field_get:Nmea2k.ValueAudioStatus.Value)
  return static_cast< ::Nmea2k::ValueAudioStatus_eAudioStatus >(value_);
}
inline void ValueAudioStatus::set_value(::Nmea2k::ValueAudioStatus_eAudioStatus value) {
  
  value_ = value;
  // @@protoc_insertion_point(field_set:Nmea2k.ValueAudioStatus.Value)
}

// -------------------------------------------------------------------

// AudioStereo

// uint32 Instance = 1;
inline void AudioStereo::clear_instance() {
  instance_ = 0u;
}
inline ::google::protobuf::uint32 AudioStereo::instance() const {
  // @@protoc_insertion_point(field_get:Nmea2k.AudioStereo.Instance)
  return instance_;
}
inline void AudioStereo::set_instance(::google::protobuf::uint32 value) {
  
  instance_ = value;
  // @@protoc_insertion_point(field_set:Nmea2k.AudioStereo.Instance)
}

// .Nmea2k.ValueBool Power = 2;
inline bool AudioStereo::has_power() const {
  return this != internal_default_instance() && power_ != NULL;
}
inline void AudioStereo::clear_power() {
  if (GetArenaNoVirtual() == NULL && power_ != NULL) {
    delete power_;
  }
  power_ = NULL;
}
inline const ::Nmea2k::ValueBool& AudioStereo::_internal_power() const {
  return *power_;
}
inline const ::Nmea2k::ValueBool& AudioStereo::power() const {
  const ::Nmea2k::ValueBool* p = power_;
  // @@protoc_insertion_point(field_get:Nmea2k.AudioStereo.Power)
  return p != NULL ? *p : *reinterpret_cast<const ::Nmea2k::ValueBool*>(
      &::Nmea2k::_ValueBool_default_instance_);
}
inline ::Nmea2k::ValueBool* AudioStereo::release_power() {
  // @@protoc_insertion_point(field_release:Nmea2k.AudioStereo.Power)
  
  ::Nmea2k::ValueBool* temp = power_;
  power_ = NULL;
  return temp;
}
inline ::Nmea2k::ValueBool* AudioStereo::mutable_power() {
  
  if (power_ == NULL) {
    auto* p = CreateMaybeMessage<::Nmea2k::ValueBool>(GetArenaNoVirtual());
    power_ = p;
  }
  // @@protoc_insertion_point(field_mutable:Nmea2k.AudioStereo.Power)
  return power_;
}
inline void AudioStereo::set_allocated_power(::Nmea2k::ValueBool* power) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete power_;
  }
  if (power) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      power = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, power, submessage_arena);
    }
    
  } else {
    
  }
  power_ = power;
  // @@protoc_insertion_point(field_set_allocated:Nmea2k.AudioStereo.Power)
}

// .Nmea2k.ValueBool Mute = 3;
inline bool AudioStereo::has_mute() const {
  return this != internal_default_instance() && mute_ != NULL;
}
inline void AudioStereo::clear_mute() {
  if (GetArenaNoVirtual() == NULL && mute_ != NULL) {
    delete mute_;
  }
  mute_ = NULL;
}
inline const ::Nmea2k::ValueBool& AudioStereo::_internal_mute() const {
  return *mute_;
}
inline const ::Nmea2k::ValueBool& AudioStereo::mute() const {
  const ::Nmea2k::ValueBool* p = mute_;
  // @@protoc_insertion_point(field_get:Nmea2k.AudioStereo.Mute)
  return p != NULL ? *p : *reinterpret_cast<const ::Nmea2k::ValueBool*>(
      &::Nmea2k::_ValueBool_default_instance_);
}
inline ::Nmea2k::ValueBool* AudioStereo::release_mute() {
  // @@protoc_insertion_point(field_release:Nmea2k.AudioStereo.Mute)
  
  ::Nmea2k::ValueBool* temp = mute_;
  mute_ = NULL;
  return temp;
}
inline ::Nmea2k::ValueBool* AudioStereo::mutable_mute() {
  
  if (mute_ == NULL) {
    auto* p = CreateMaybeMessage<::Nmea2k::ValueBool>(GetArenaNoVirtual());
    mute_ = p;
  }
  // @@protoc_insertion_point(field_mutable:Nmea2k.AudioStereo.Mute)
  return mute_;
}
inline void AudioStereo::set_allocated_mute(::Nmea2k::ValueBool* mute) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete mute_;
  }
  if (mute) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      mute = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, mute, submessage_arena);
    }
    
  } else {
    
  }
  mute_ = mute;
  // @@protoc_insertion_point(field_set_allocated:Nmea2k.AudioStereo.Mute)
}

// .Nmea2k.ValueAudioStatus AudioStatus = 4;
inline bool AudioStereo::has_audiostatus() const {
  return this != internal_default_instance() && audiostatus_ != NULL;
}
inline void AudioStereo::clear_audiostatus() {
  if (GetArenaNoVirtual() == NULL && audiostatus_ != NULL) {
    delete audiostatus_;
  }
  audiostatus_ = NULL;
}
inline const ::Nmea2k::ValueAudioStatus& AudioStereo::_internal_audiostatus() const {
  return *audiostatus_;
}
inline const ::Nmea2k::ValueAudioStatus& AudioStereo::audiostatus() const {
  const ::Nmea2k::ValueAudioStatus* p = audiostatus_;
  // @@protoc_insertion_point(field_get:Nmea2k.AudioStereo.AudioStatus)
  return p != NULL ? *p : *reinterpret_cast<const ::Nmea2k::ValueAudioStatus*>(
      &::Nmea2k::_ValueAudioStatus_default_instance_);
}
inline ::Nmea2k::ValueAudioStatus* AudioStereo::release_audiostatus() {
  // @@protoc_insertion_point(field_release:Nmea2k.AudioStereo.AudioStatus)
  
  ::Nmea2k::ValueAudioStatus* temp = audiostatus_;
  audiostatus_ = NULL;
  return temp;
}
inline ::Nmea2k::ValueAudioStatus* AudioStereo::mutable_audiostatus() {
  
  if (audiostatus_ == NULL) {
    auto* p = CreateMaybeMessage<::Nmea2k::ValueAudioStatus>(GetArenaNoVirtual());
    audiostatus_ = p;
  }
  // @@protoc_insertion_point(field_mutable:Nmea2k.AudioStereo.AudioStatus)
  return audiostatus_;
}
inline void AudioStereo::set_allocated_audiostatus(::Nmea2k::ValueAudioStatus* audiostatus) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete audiostatus_;
  }
  if (audiostatus) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      audiostatus = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, audiostatus, submessage_arena);
    }
    
  } else {
    
  }
  audiostatus_ = audiostatus;
  // @@protoc_insertion_point(field_set_allocated:Nmea2k.AudioStereo.AudioStatus)
}

// .Nmea2k.ValueAudioSource SourceMode = 5;
inline bool AudioStereo::has_sourcemode() const {
  return this != internal_default_instance() && sourcemode_ != NULL;
}
inline void AudioStereo::clear_sourcemode() {
  if (GetArenaNoVirtual() == NULL && sourcemode_ != NULL) {
    delete sourcemode_;
  }
  sourcemode_ = NULL;
}
inline const ::Nmea2k::ValueAudioSource& AudioStereo::_internal_sourcemode() const {
  return *sourcemode_;
}
inline const ::Nmea2k::ValueAudioSource& AudioStereo::sourcemode() const {
  const ::Nmea2k::ValueAudioSource* p = sourcemode_;
  // @@protoc_insertion_point(field_get:Nmea2k.AudioStereo.SourceMode)
  return p != NULL ? *p : *reinterpret_cast<const ::Nmea2k::ValueAudioSource*>(
      &::Nmea2k::_ValueAudioSource_default_instance_);
}
inline ::Nmea2k::ValueAudioSource* AudioStereo::release_sourcemode() {
  // @@protoc_insertion_point(field_release:Nmea2k.AudioStereo.SourceMode)
  
  ::Nmea2k::ValueAudioSource* temp = sourcemode_;
  sourcemode_ = NULL;
  return temp;
}
inline ::Nmea2k::ValueAudioSource* AudioStereo::mutable_sourcemode() {
  
  if (sourcemode_ == NULL) {
    auto* p = CreateMaybeMessage<::Nmea2k::ValueAudioSource>(GetArenaNoVirtual());
    sourcemode_ = p;
  }
  // @@protoc_insertion_point(field_mutable:Nmea2k.AudioStereo.SourceMode)
  return sourcemode_;
}
inline void AudioStereo::set_allocated_sourcemode(::Nmea2k::ValueAudioSource* sourcemode) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete sourcemode_;
  }
  if (sourcemode) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      sourcemode = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, sourcemode, submessage_arena);
    }
    
  } else {
    
  }
  sourcemode_ = sourcemode;
  // @@protoc_insertion_point(field_set_allocated:Nmea2k.AudioStereo.SourceMode)
}

// .Nmea2k.ValueU32 Volume = 6;
inline bool AudioStereo::has_volume() const {
  return this != internal_default_instance() && volume_ != NULL;
}
inline void AudioStereo::clear_volume() {
  if (GetArenaNoVirtual() == NULL && volume_ != NULL) {
    delete volume_;
  }
  volume_ = NULL;
}
inline const ::Nmea2k::ValueU32& AudioStereo::_internal_volume() const {
  return *volume_;
}
inline const ::Nmea2k::ValueU32& AudioStereo::volume() const {
  const ::Nmea2k::ValueU32* p = volume_;
  // @@protoc_insertion_point(field_get:Nmea2k.AudioStereo.Volume)
  return p != NULL ? *p : *reinterpret_cast<const ::Nmea2k::ValueU32*>(
      &::Nmea2k::_ValueU32_default_instance_);
}
inline ::Nmea2k::ValueU32* AudioStereo::release_volume() {
  // @@protoc_insertion_point(field_release:Nmea2k.AudioStereo.Volume)
  
  ::Nmea2k::ValueU32* temp = volume_;
  volume_ = NULL;
  return temp;
}
inline ::Nmea2k::ValueU32* AudioStereo::mutable_volume() {
  
  if (volume_ == NULL) {
    auto* p = CreateMaybeMessage<::Nmea2k::ValueU32>(GetArenaNoVirtual());
    volume_ = p;
  }
  // @@protoc_insertion_point(field_mutable:Nmea2k.AudioStereo.Volume)
  return volume_;
}
inline void AudioStereo::set_allocated_volume(::Nmea2k::ValueU32* volume) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete volume_;
  }
  if (volume) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      volume = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, volume, submessage_arena);
    }
    
  } else {
    
  }
  volume_ = volume;
  // @@protoc_insertion_point(field_set_allocated:Nmea2k.AudioStereo.Volume)
}

// -------------------------------------------------------------------

// ValueGNSSMethod

// bool Valid = 1;
inline void ValueGNSSMethod::clear_valid() {
  valid_ = false;
}
inline bool ValueGNSSMethod::valid() const {
  // @@protoc_insertion_point(field_get:Nmea2k.ValueGNSSMethod.Valid)
  return valid_;
}
inline void ValueGNSSMethod::set_valid(bool value) {
  
  valid_ = value;
  // @@protoc_insertion_point(field_set:Nmea2k.ValueGNSSMethod.Valid)
}

// .Nmea2k.ValueGNSSMethod.eGNSSMethod Value = 2;
inline void ValueGNSSMethod::clear_value() {
  value_ = 0;
}
inline ::Nmea2k::ValueGNSSMethod_eGNSSMethod ValueGNSSMethod::value() const {
  // @@protoc_insertion_point(field_get:Nmea2k.ValueGNSSMethod.Value)
  return static_cast< ::Nmea2k::ValueGNSSMethod_eGNSSMethod >(value_);
}
inline void ValueGNSSMethod::set_value(::Nmea2k::ValueGNSSMethod_eGNSSMethod value) {
  
  value_ = value;
  // @@protoc_insertion_point(field_set:Nmea2k.ValueGNSSMethod.Value)
}

// -------------------------------------------------------------------

// ValueGNSSFixType

// bool Valid = 1;
inline void ValueGNSSFixType::clear_valid() {
  valid_ = false;
}
inline bool ValueGNSSFixType::valid() const {
  // @@protoc_insertion_point(field_get:Nmea2k.ValueGNSSFixType.Valid)
  return valid_;
}
inline void ValueGNSSFixType::set_valid(bool value) {
  
  valid_ = value;
  // @@protoc_insertion_point(field_set:Nmea2k.ValueGNSSFixType.Valid)
}

// .Nmea2k.ValueGNSSFixType.eGNSSFixType Value = 2;
inline void ValueGNSSFixType::clear_value() {
  value_ = 0;
}
inline ::Nmea2k::ValueGNSSFixType_eGNSSFixType ValueGNSSFixType::value() const {
  // @@protoc_insertion_point(field_get:Nmea2k.ValueGNSSFixType.Value)
  return static_cast< ::Nmea2k::ValueGNSSFixType_eGNSSFixType >(value_);
}
inline void ValueGNSSFixType::set_value(::Nmea2k::ValueGNSSFixType_eGNSSFixType value) {
  
  value_ = value;
  // @@protoc_insertion_point(field_set:Nmea2k.ValueGNSSFixType.Value)
}

// -------------------------------------------------------------------

// GNSS

// uint32 Instance = 1;
inline void GNSS::clear_instance() {
  instance_ = 0u;
}
inline ::google::protobuf::uint32 GNSS::instance() const {
  // @@protoc_insertion_point(field_get:Nmea2k.GNSS.Instance)
  return instance_;
}
inline void GNSS::set_instance(::google::protobuf::uint32 value) {
  
  instance_ = value;
  // @@protoc_insertion_point(field_set:Nmea2k.GNSS.Instance)
}

// .Nmea2k.ValueF Latitude = 2;
inline bool GNSS::has_latitude() const {
  return this != internal_default_instance() && latitude_ != NULL;
}
inline void GNSS::clear_latitude() {
  if (GetArenaNoVirtual() == NULL && latitude_ != NULL) {
    delete latitude_;
  }
  latitude_ = NULL;
}
inline const ::Nmea2k::ValueF& GNSS::_internal_latitude() const {
  return *latitude_;
}
inline const ::Nmea2k::ValueF& GNSS::latitude() const {
  const ::Nmea2k::ValueF* p = latitude_;
  // @@protoc_insertion_point(field_get:Nmea2k.GNSS.Latitude)
  return p != NULL ? *p : *reinterpret_cast<const ::Nmea2k::ValueF*>(
      &::Nmea2k::_ValueF_default_instance_);
}
inline ::Nmea2k::ValueF* GNSS::release_latitude() {
  // @@protoc_insertion_point(field_release:Nmea2k.GNSS.Latitude)
  
  ::Nmea2k::ValueF* temp = latitude_;
  latitude_ = NULL;
  return temp;
}
inline ::Nmea2k::ValueF* GNSS::mutable_latitude() {
  
  if (latitude_ == NULL) {
    auto* p = CreateMaybeMessage<::Nmea2k::ValueF>(GetArenaNoVirtual());
    latitude_ = p;
  }
  // @@protoc_insertion_point(field_mutable:Nmea2k.GNSS.Latitude)
  return latitude_;
}
inline void GNSS::set_allocated_latitude(::Nmea2k::ValueF* latitude) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete latitude_;
  }
  if (latitude) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      latitude = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, latitude, submessage_arena);
    }
    
  } else {
    
  }
  latitude_ = latitude;
  // @@protoc_insertion_point(field_set_allocated:Nmea2k.GNSS.Latitude)
}

// .Nmea2k.ValueF Longitude = 3;
inline bool GNSS::has_longitude() const {
  return this != internal_default_instance() && longitude_ != NULL;
}
inline void GNSS::clear_longitude() {
  if (GetArenaNoVirtual() == NULL && longitude_ != NULL) {
    delete longitude_;
  }
  longitude_ = NULL;
}
inline const ::Nmea2k::ValueF& GNSS::_internal_longitude() const {
  return *longitude_;
}
inline const ::Nmea2k::ValueF& GNSS::longitude() const {
  const ::Nmea2k::ValueF* p = longitude_;
  // @@protoc_insertion_point(field_get:Nmea2k.GNSS.Longitude)
  return p != NULL ? *p : *reinterpret_cast<const ::Nmea2k::ValueF*>(
      &::Nmea2k::_ValueF_default_instance_);
}
inline ::Nmea2k::ValueF* GNSS::release_longitude() {
  // @@protoc_insertion_point(field_release:Nmea2k.GNSS.Longitude)
  
  ::Nmea2k::ValueF* temp = longitude_;
  longitude_ = NULL;
  return temp;
}
inline ::Nmea2k::ValueF* GNSS::mutable_longitude() {
  
  if (longitude_ == NULL) {
    auto* p = CreateMaybeMessage<::Nmea2k::ValueF>(GetArenaNoVirtual());
    longitude_ = p;
  }
  // @@protoc_insertion_point(field_mutable:Nmea2k.GNSS.Longitude)
  return longitude_;
}
inline void GNSS::set_allocated_longitude(::Nmea2k::ValueF* longitude) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete longitude_;
  }
  if (longitude) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      longitude = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, longitude, submessage_arena);
    }
    
  } else {
    
  }
  longitude_ = longitude;
  // @@protoc_insertion_point(field_set_allocated:Nmea2k.GNSS.Longitude)
}

// .Nmea2k.ValueF Cog = 4;
inline bool GNSS::has_cog() const {
  return this != internal_default_instance() && cog_ != NULL;
}
inline void GNSS::clear_cog() {
  if (GetArenaNoVirtual() == NULL && cog_ != NULL) {
    delete cog_;
  }
  cog_ = NULL;
}
inline const ::Nmea2k::ValueF& GNSS::_internal_cog() const {
  return *cog_;
}
inline const ::Nmea2k::ValueF& GNSS::cog() const {
  const ::Nmea2k::ValueF* p = cog_;
  // @@protoc_insertion_point(field_get:Nmea2k.GNSS.Cog)
  return p != NULL ? *p : *reinterpret_cast<const ::Nmea2k::ValueF*>(
      &::Nmea2k::_ValueF_default_instance_);
}
inline ::Nmea2k::ValueF* GNSS::release_cog() {
  // @@protoc_insertion_point(field_release:Nmea2k.GNSS.Cog)
  
  ::Nmea2k::ValueF* temp = cog_;
  cog_ = NULL;
  return temp;
}
inline ::Nmea2k::ValueF* GNSS::mutable_cog() {
  
  if (cog_ == NULL) {
    auto* p = CreateMaybeMessage<::Nmea2k::ValueF>(GetArenaNoVirtual());
    cog_ = p;
  }
  // @@protoc_insertion_point(field_mutable:Nmea2k.GNSS.Cog)
  return cog_;
}
inline void GNSS::set_allocated_cog(::Nmea2k::ValueF* cog) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete cog_;
  }
  if (cog) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      cog = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, cog, submessage_arena);
    }
    
  } else {
    
  }
  cog_ = cog;
  // @@protoc_insertion_point(field_set_allocated:Nmea2k.GNSS.Cog)
}

// .Nmea2k.ValueF Sog = 5;
inline bool GNSS::has_sog() const {
  return this != internal_default_instance() && sog_ != NULL;
}
inline void GNSS::clear_sog() {
  if (GetArenaNoVirtual() == NULL && sog_ != NULL) {
    delete sog_;
  }
  sog_ = NULL;
}
inline const ::Nmea2k::ValueF& GNSS::_internal_sog() const {
  return *sog_;
}
inline const ::Nmea2k::ValueF& GNSS::sog() const {
  const ::Nmea2k::ValueF* p = sog_;
  // @@protoc_insertion_point(field_get:Nmea2k.GNSS.Sog)
  return p != NULL ? *p : *reinterpret_cast<const ::Nmea2k::ValueF*>(
      &::Nmea2k::_ValueF_default_instance_);
}
inline ::Nmea2k::ValueF* GNSS::release_sog() {
  // @@protoc_insertion_point(field_release:Nmea2k.GNSS.Sog)
  
  ::Nmea2k::ValueF* temp = sog_;
  sog_ = NULL;
  return temp;
}
inline ::Nmea2k::ValueF* GNSS::mutable_sog() {
  
  if (sog_ == NULL) {
    auto* p = CreateMaybeMessage<::Nmea2k::ValueF>(GetArenaNoVirtual());
    sog_ = p;
  }
  // @@protoc_insertion_point(field_mutable:Nmea2k.GNSS.Sog)
  return sog_;
}
inline void GNSS::set_allocated_sog(::Nmea2k::ValueF* sog) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete sog_;
  }
  if (sog) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      sog = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, sog, submessage_arena);
    }
    
  } else {
    
  }
  sog_ = sog;
  // @@protoc_insertion_point(field_set_allocated:Nmea2k.GNSS.Sog)
}

// .Nmea2k.ValueF MagneticVariation = 6;
inline bool GNSS::has_magneticvariation() const {
  return this != internal_default_instance() && magneticvariation_ != NULL;
}
inline void GNSS::clear_magneticvariation() {
  if (GetArenaNoVirtual() == NULL && magneticvariation_ != NULL) {
    delete magneticvariation_;
  }
  magneticvariation_ = NULL;
}
inline const ::Nmea2k::ValueF& GNSS::_internal_magneticvariation() const {
  return *magneticvariation_;
}
inline const ::Nmea2k::ValueF& GNSS::magneticvariation() const {
  const ::Nmea2k::ValueF* p = magneticvariation_;
  // @@protoc_insertion_point(field_get:Nmea2k.GNSS.MagneticVariation)
  return p != NULL ? *p : *reinterpret_cast<const ::Nmea2k::ValueF*>(
      &::Nmea2k::_ValueF_default_instance_);
}
inline ::Nmea2k::ValueF* GNSS::release_magneticvariation() {
  // @@protoc_insertion_point(field_release:Nmea2k.GNSS.MagneticVariation)
  
  ::Nmea2k::ValueF* temp = magneticvariation_;
  magneticvariation_ = NULL;
  return temp;
}
inline ::Nmea2k::ValueF* GNSS::mutable_magneticvariation() {
  
  if (magneticvariation_ == NULL) {
    auto* p = CreateMaybeMessage<::Nmea2k::ValueF>(GetArenaNoVirtual());
    magneticvariation_ = p;
  }
  // @@protoc_insertion_point(field_mutable:Nmea2k.GNSS.MagneticVariation)
  return magneticvariation_;
}
inline void GNSS::set_allocated_magneticvariation(::Nmea2k::ValueF* magneticvariation) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete magneticvariation_;
  }
  if (magneticvariation) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      magneticvariation = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, magneticvariation, submessage_arena);
    }
    
  } else {
    
  }
  magneticvariation_ = magneticvariation;
  // @@protoc_insertion_point(field_set_allocated:Nmea2k.GNSS.MagneticVariation)
}

// string UTCDateTime = 7;
inline void GNSS::clear_utcdatetime() {
  utcdatetime_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GNSS::utcdatetime() const {
  // @@protoc_insertion_point(field_get:Nmea2k.GNSS.UTCDateTime)
  return utcdatetime_.GetNoArena();
}
inline void GNSS::set_utcdatetime(const ::std::string& value) {
  
  utcdatetime_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Nmea2k.GNSS.UTCDateTime)
}
#if LANG_CXX11
inline void GNSS::set_utcdatetime(::std::string&& value) {
  
  utcdatetime_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Nmea2k.GNSS.UTCDateTime)
}
#endif
inline void GNSS::set_utcdatetime(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  utcdatetime_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Nmea2k.GNSS.UTCDateTime)
}
inline void GNSS::set_utcdatetime(const char* value, size_t size) {
  
  utcdatetime_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Nmea2k.GNSS.UTCDateTime)
}
inline ::std::string* GNSS::mutable_utcdatetime() {
  
  // @@protoc_insertion_point(field_mutable:Nmea2k.GNSS.UTCDateTime)
  return utcdatetime_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GNSS::release_utcdatetime() {
  // @@protoc_insertion_point(field_release:Nmea2k.GNSS.UTCDateTime)
  
  return utcdatetime_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GNSS::set_allocated_utcdatetime(::std::string* utcdatetime) {
  if (utcdatetime != NULL) {
    
  } else {
    
  }
  utcdatetime_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), utcdatetime);
  // @@protoc_insertion_point(field_set_allocated:Nmea2k.GNSS.UTCDateTime)
}

// .Nmea2k.ValueU32 TimeOffset = 8;
inline bool GNSS::has_timeoffset() const {
  return this != internal_default_instance() && timeoffset_ != NULL;
}
inline void GNSS::clear_timeoffset() {
  if (GetArenaNoVirtual() == NULL && timeoffset_ != NULL) {
    delete timeoffset_;
  }
  timeoffset_ = NULL;
}
inline const ::Nmea2k::ValueU32& GNSS::_internal_timeoffset() const {
  return *timeoffset_;
}
inline const ::Nmea2k::ValueU32& GNSS::timeoffset() const {
  const ::Nmea2k::ValueU32* p = timeoffset_;
  // @@protoc_insertion_point(field_get:Nmea2k.GNSS.TimeOffset)
  return p != NULL ? *p : *reinterpret_cast<const ::Nmea2k::ValueU32*>(
      &::Nmea2k::_ValueU32_default_instance_);
}
inline ::Nmea2k::ValueU32* GNSS::release_timeoffset() {
  // @@protoc_insertion_point(field_release:Nmea2k.GNSS.TimeOffset)
  
  ::Nmea2k::ValueU32* temp = timeoffset_;
  timeoffset_ = NULL;
  return temp;
}
inline ::Nmea2k::ValueU32* GNSS::mutable_timeoffset() {
  
  if (timeoffset_ == NULL) {
    auto* p = CreateMaybeMessage<::Nmea2k::ValueU32>(GetArenaNoVirtual());
    timeoffset_ = p;
  }
  // @@protoc_insertion_point(field_mutable:Nmea2k.GNSS.TimeOffset)
  return timeoffset_;
}
inline void GNSS::set_allocated_timeoffset(::Nmea2k::ValueU32* timeoffset) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete timeoffset_;
  }
  if (timeoffset) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      timeoffset = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, timeoffset, submessage_arena);
    }
    
  } else {
    
  }
  timeoffset_ = timeoffset;
  // @@protoc_insertion_point(field_set_allocated:Nmea2k.GNSS.TimeOffset)
}

// .Nmea2k.ValueU32 SatellitesInFix = 9;
inline bool GNSS::has_satellitesinfix() const {
  return this != internal_default_instance() && satellitesinfix_ != NULL;
}
inline void GNSS::clear_satellitesinfix() {
  if (GetArenaNoVirtual() == NULL && satellitesinfix_ != NULL) {
    delete satellitesinfix_;
  }
  satellitesinfix_ = NULL;
}
inline const ::Nmea2k::ValueU32& GNSS::_internal_satellitesinfix() const {
  return *satellitesinfix_;
}
inline const ::Nmea2k::ValueU32& GNSS::satellitesinfix() const {
  const ::Nmea2k::ValueU32* p = satellitesinfix_;
  // @@protoc_insertion_point(field_get:Nmea2k.GNSS.SatellitesInFix)
  return p != NULL ? *p : *reinterpret_cast<const ::Nmea2k::ValueU32*>(
      &::Nmea2k::_ValueU32_default_instance_);
}
inline ::Nmea2k::ValueU32* GNSS::release_satellitesinfix() {
  // @@protoc_insertion_point(field_release:Nmea2k.GNSS.SatellitesInFix)
  
  ::Nmea2k::ValueU32* temp = satellitesinfix_;
  satellitesinfix_ = NULL;
  return temp;
}
inline ::Nmea2k::ValueU32* GNSS::mutable_satellitesinfix() {
  
  if (satellitesinfix_ == NULL) {
    auto* p = CreateMaybeMessage<::Nmea2k::ValueU32>(GetArenaNoVirtual());
    satellitesinfix_ = p;
  }
  // @@protoc_insertion_point(field_mutable:Nmea2k.GNSS.SatellitesInFix)
  return satellitesinfix_;
}
inline void GNSS::set_allocated_satellitesinfix(::Nmea2k::ValueU32* satellitesinfix) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete satellitesinfix_;
  }
  if (satellitesinfix) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      satellitesinfix = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, satellitesinfix, submessage_arena);
    }
    
  } else {
    
  }
  satellitesinfix_ = satellitesinfix;
  // @@protoc_insertion_point(field_set_allocated:Nmea2k.GNSS.SatellitesInFix)
}

// .Nmea2k.ValueS32 BestOfFourSatellitesSNR = 10;
inline bool GNSS::has_bestoffoursatellitessnr() const {
  return this != internal_default_instance() && bestoffoursatellitessnr_ != NULL;
}
inline void GNSS::clear_bestoffoursatellitessnr() {
  if (GetArenaNoVirtual() == NULL && bestoffoursatellitessnr_ != NULL) {
    delete bestoffoursatellitessnr_;
  }
  bestoffoursatellitessnr_ = NULL;
}
inline const ::Nmea2k::ValueS32& GNSS::_internal_bestoffoursatellitessnr() const {
  return *bestoffoursatellitessnr_;
}
inline const ::Nmea2k::ValueS32& GNSS::bestoffoursatellitessnr() const {
  const ::Nmea2k::ValueS32* p = bestoffoursatellitessnr_;
  // @@protoc_insertion_point(field_get:Nmea2k.GNSS.BestOfFourSatellitesSNR)
  return p != NULL ? *p : *reinterpret_cast<const ::Nmea2k::ValueS32*>(
      &::Nmea2k::_ValueS32_default_instance_);
}
inline ::Nmea2k::ValueS32* GNSS::release_bestoffoursatellitessnr() {
  // @@protoc_insertion_point(field_release:Nmea2k.GNSS.BestOfFourSatellitesSNR)
  
  ::Nmea2k::ValueS32* temp = bestoffoursatellitessnr_;
  bestoffoursatellitessnr_ = NULL;
  return temp;
}
inline ::Nmea2k::ValueS32* GNSS::mutable_bestoffoursatellitessnr() {
  
  if (bestoffoursatellitessnr_ == NULL) {
    auto* p = CreateMaybeMessage<::Nmea2k::ValueS32>(GetArenaNoVirtual());
    bestoffoursatellitessnr_ = p;
  }
  // @@protoc_insertion_point(field_mutable:Nmea2k.GNSS.BestOfFourSatellitesSNR)
  return bestoffoursatellitessnr_;
}
inline void GNSS::set_allocated_bestoffoursatellitessnr(::Nmea2k::ValueS32* bestoffoursatellitessnr) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete bestoffoursatellitessnr_;
  }
  if (bestoffoursatellitessnr) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      bestoffoursatellitessnr = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, bestoffoursatellitessnr, submessage_arena);
    }
    
  } else {
    
  }
  bestoffoursatellitessnr_ = bestoffoursatellitessnr;
  // @@protoc_insertion_point(field_set_allocated:Nmea2k.GNSS.BestOfFourSatellitesSNR)
}

// .Nmea2k.ValueGNSSMethod Method = 11;
inline bool GNSS::has_method() const {
  return this != internal_default_instance() && method_ != NULL;
}
inline void GNSS::clear_method() {
  if (GetArenaNoVirtual() == NULL && method_ != NULL) {
    delete method_;
  }
  method_ = NULL;
}
inline const ::Nmea2k::ValueGNSSMethod& GNSS::_internal_method() const {
  return *method_;
}
inline const ::Nmea2k::ValueGNSSMethod& GNSS::method() const {
  const ::Nmea2k::ValueGNSSMethod* p = method_;
  // @@protoc_insertion_point(field_get:Nmea2k.GNSS.Method)
  return p != NULL ? *p : *reinterpret_cast<const ::Nmea2k::ValueGNSSMethod*>(
      &::Nmea2k::_ValueGNSSMethod_default_instance_);
}
inline ::Nmea2k::ValueGNSSMethod* GNSS::release_method() {
  // @@protoc_insertion_point(field_release:Nmea2k.GNSS.Method)
  
  ::Nmea2k::ValueGNSSMethod* temp = method_;
  method_ = NULL;
  return temp;
}
inline ::Nmea2k::ValueGNSSMethod* GNSS::mutable_method() {
  
  if (method_ == NULL) {
    auto* p = CreateMaybeMessage<::Nmea2k::ValueGNSSMethod>(GetArenaNoVirtual());
    method_ = p;
  }
  // @@protoc_insertion_point(field_mutable:Nmea2k.GNSS.Method)
  return method_;
}
inline void GNSS::set_allocated_method(::Nmea2k::ValueGNSSMethod* method) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete method_;
  }
  if (method) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      method = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, method, submessage_arena);
    }
    
  } else {
    
  }
  method_ = method;
  // @@protoc_insertion_point(field_set_allocated:Nmea2k.GNSS.Method)
}

// .Nmea2k.ValueGNSSFixType FixType = 12;
inline bool GNSS::has_fixtype() const {
  return this != internal_default_instance() && fixtype_ != NULL;
}
inline void GNSS::clear_fixtype() {
  if (GetArenaNoVirtual() == NULL && fixtype_ != NULL) {
    delete fixtype_;
  }
  fixtype_ = NULL;
}
inline const ::Nmea2k::ValueGNSSFixType& GNSS::_internal_fixtype() const {
  return *fixtype_;
}
inline const ::Nmea2k::ValueGNSSFixType& GNSS::fixtype() const {
  const ::Nmea2k::ValueGNSSFixType* p = fixtype_;
  // @@protoc_insertion_point(field_get:Nmea2k.GNSS.FixType)
  return p != NULL ? *p : *reinterpret_cast<const ::Nmea2k::ValueGNSSFixType*>(
      &::Nmea2k::_ValueGNSSFixType_default_instance_);
}
inline ::Nmea2k::ValueGNSSFixType* GNSS::release_fixtype() {
  // @@protoc_insertion_point(field_release:Nmea2k.GNSS.FixType)
  
  ::Nmea2k::ValueGNSSFixType* temp = fixtype_;
  fixtype_ = NULL;
  return temp;
}
inline ::Nmea2k::ValueGNSSFixType* GNSS::mutable_fixtype() {
  
  if (fixtype_ == NULL) {
    auto* p = CreateMaybeMessage<::Nmea2k::ValueGNSSFixType>(GetArenaNoVirtual());
    fixtype_ = p;
  }
  // @@protoc_insertion_point(field_mutable:Nmea2k.GNSS.FixType)
  return fixtype_;
}
inline void GNSS::set_allocated_fixtype(::Nmea2k::ValueGNSSFixType* fixtype) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete fixtype_;
  }
  if (fixtype) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      fixtype = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, fixtype, submessage_arena);
    }
    
  } else {
    
  }
  fixtype_ = fixtype;
  // @@protoc_insertion_point(field_set_allocated:Nmea2k.GNSS.FixType)
}

// .Nmea2k.ValueF Hdop = 13;
inline bool GNSS::has_hdop() const {
  return this != internal_default_instance() && hdop_ != NULL;
}
inline void GNSS::clear_hdop() {
  if (GetArenaNoVirtual() == NULL && hdop_ != NULL) {
    delete hdop_;
  }
  hdop_ = NULL;
}
inline const ::Nmea2k::ValueF& GNSS::_internal_hdop() const {
  return *hdop_;
}
inline const ::Nmea2k::ValueF& GNSS::hdop() const {
  const ::Nmea2k::ValueF* p = hdop_;
  // @@protoc_insertion_point(field_get:Nmea2k.GNSS.Hdop)
  return p != NULL ? *p : *reinterpret_cast<const ::Nmea2k::ValueF*>(
      &::Nmea2k::_ValueF_default_instance_);
}
inline ::Nmea2k::ValueF* GNSS::release_hdop() {
  // @@protoc_insertion_point(field_release:Nmea2k.GNSS.Hdop)
  
  ::Nmea2k::ValueF* temp = hdop_;
  hdop_ = NULL;
  return temp;
}
inline ::Nmea2k::ValueF* GNSS::mutable_hdop() {
  
  if (hdop_ == NULL) {
    auto* p = CreateMaybeMessage<::Nmea2k::ValueF>(GetArenaNoVirtual());
    hdop_ = p;
  }
  // @@protoc_insertion_point(field_mutable:Nmea2k.GNSS.Hdop)
  return hdop_;
}
inline void GNSS::set_allocated_hdop(::Nmea2k::ValueF* hdop) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete hdop_;
  }
  if (hdop) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      hdop = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, hdop, submessage_arena);
    }
    
  } else {
    
  }
  hdop_ = hdop;
  // @@protoc_insertion_point(field_set_allocated:Nmea2k.GNSS.Hdop)
}

// .Nmea2k.ValueF Pdop = 14;
inline bool GNSS::has_pdop() const {
  return this != internal_default_instance() && pdop_ != NULL;
}
inline void GNSS::clear_pdop() {
  if (GetArenaNoVirtual() == NULL && pdop_ != NULL) {
    delete pdop_;
  }
  pdop_ = NULL;
}
inline const ::Nmea2k::ValueF& GNSS::_internal_pdop() const {
  return *pdop_;
}
inline const ::Nmea2k::ValueF& GNSS::pdop() const {
  const ::Nmea2k::ValueF* p = pdop_;
  // @@protoc_insertion_point(field_get:Nmea2k.GNSS.Pdop)
  return p != NULL ? *p : *reinterpret_cast<const ::Nmea2k::ValueF*>(
      &::Nmea2k::_ValueF_default_instance_);
}
inline ::Nmea2k::ValueF* GNSS::release_pdop() {
  // @@protoc_insertion_point(field_release:Nmea2k.GNSS.Pdop)
  
  ::Nmea2k::ValueF* temp = pdop_;
  pdop_ = NULL;
  return temp;
}
inline ::Nmea2k::ValueF* GNSS::mutable_pdop() {
  
  if (pdop_ == NULL) {
    auto* p = CreateMaybeMessage<::Nmea2k::ValueF>(GetArenaNoVirtual());
    pdop_ = p;
  }
  // @@protoc_insertion_point(field_mutable:Nmea2k.GNSS.Pdop)
  return pdop_;
}
inline void GNSS::set_allocated_pdop(::Nmea2k::ValueF* pdop) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete pdop_;
  }
  if (pdop) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      pdop = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, pdop, submessage_arena);
    }
    
  } else {
    
  }
  pdop_ = pdop;
  // @@protoc_insertion_point(field_set_allocated:Nmea2k.GNSS.Pdop)
}

// .Nmea2k.ValueF Vdop = 15;
inline bool GNSS::has_vdop() const {
  return this != internal_default_instance() && vdop_ != NULL;
}
inline void GNSS::clear_vdop() {
  if (GetArenaNoVirtual() == NULL && vdop_ != NULL) {
    delete vdop_;
  }
  vdop_ = NULL;
}
inline const ::Nmea2k::ValueF& GNSS::_internal_vdop() const {
  return *vdop_;
}
inline const ::Nmea2k::ValueF& GNSS::vdop() const {
  const ::Nmea2k::ValueF* p = vdop_;
  // @@protoc_insertion_point(field_get:Nmea2k.GNSS.Vdop)
  return p != NULL ? *p : *reinterpret_cast<const ::Nmea2k::ValueF*>(
      &::Nmea2k::_ValueF_default_instance_);
}
inline ::Nmea2k::ValueF* GNSS::release_vdop() {
  // @@protoc_insertion_point(field_release:Nmea2k.GNSS.Vdop)
  
  ::Nmea2k::ValueF* temp = vdop_;
  vdop_ = NULL;
  return temp;
}
inline ::Nmea2k::ValueF* GNSS::mutable_vdop() {
  
  if (vdop_ == NULL) {
    auto* p = CreateMaybeMessage<::Nmea2k::ValueF>(GetArenaNoVirtual());
    vdop_ = p;
  }
  // @@protoc_insertion_point(field_mutable:Nmea2k.GNSS.Vdop)
  return vdop_;
}
inline void GNSS::set_allocated_vdop(::Nmea2k::ValueF* vdop) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete vdop_;
  }
  if (vdop) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      vdop = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, vdop, submessage_arena);
    }
    
  } else {
    
  }
  vdop_ = vdop;
  // @@protoc_insertion_point(field_set_allocated:Nmea2k.GNSS.Vdop)
}

// .Nmea2k.ValueDouble LatitudeDeg = 16;
inline bool GNSS::has_latitudedeg() const {
  return this != internal_default_instance() && latitudedeg_ != NULL;
}
inline void GNSS::clear_latitudedeg() {
  if (GetArenaNoVirtual() == NULL && latitudedeg_ != NULL) {
    delete latitudedeg_;
  }
  latitudedeg_ = NULL;
}
inline const ::Nmea2k::ValueDouble& GNSS::_internal_latitudedeg() const {
  return *latitudedeg_;
}
inline const ::Nmea2k::ValueDouble& GNSS::latitudedeg() const {
  const ::Nmea2k::ValueDouble* p = latitudedeg_;
  // @@protoc_insertion_point(field_get:Nmea2k.GNSS.LatitudeDeg)
  return p != NULL ? *p : *reinterpret_cast<const ::Nmea2k::ValueDouble*>(
      &::Nmea2k::_ValueDouble_default_instance_);
}
inline ::Nmea2k::ValueDouble* GNSS::release_latitudedeg() {
  // @@protoc_insertion_point(field_release:Nmea2k.GNSS.LatitudeDeg)
  
  ::Nmea2k::ValueDouble* temp = latitudedeg_;
  latitudedeg_ = NULL;
  return temp;
}
inline ::Nmea2k::ValueDouble* GNSS::mutable_latitudedeg() {
  
  if (latitudedeg_ == NULL) {
    auto* p = CreateMaybeMessage<::Nmea2k::ValueDouble>(GetArenaNoVirtual());
    latitudedeg_ = p;
  }
  // @@protoc_insertion_point(field_mutable:Nmea2k.GNSS.LatitudeDeg)
  return latitudedeg_;
}
inline void GNSS::set_allocated_latitudedeg(::Nmea2k::ValueDouble* latitudedeg) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete latitudedeg_;
  }
  if (latitudedeg) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      latitudedeg = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, latitudedeg, submessage_arena);
    }
    
  } else {
    
  }
  latitudedeg_ = latitudedeg;
  // @@protoc_insertion_point(field_set_allocated:Nmea2k.GNSS.LatitudeDeg)
}

// .Nmea2k.ValueDouble LongitudeDeg = 17;
inline bool GNSS::has_longitudedeg() const {
  return this != internal_default_instance() && longitudedeg_ != NULL;
}
inline void GNSS::clear_longitudedeg() {
  if (GetArenaNoVirtual() == NULL && longitudedeg_ != NULL) {
    delete longitudedeg_;
  }
  longitudedeg_ = NULL;
}
inline const ::Nmea2k::ValueDouble& GNSS::_internal_longitudedeg() const {
  return *longitudedeg_;
}
inline const ::Nmea2k::ValueDouble& GNSS::longitudedeg() const {
  const ::Nmea2k::ValueDouble* p = longitudedeg_;
  // @@protoc_insertion_point(field_get:Nmea2k.GNSS.LongitudeDeg)
  return p != NULL ? *p : *reinterpret_cast<const ::Nmea2k::ValueDouble*>(
      &::Nmea2k::_ValueDouble_default_instance_);
}
inline ::Nmea2k::ValueDouble* GNSS::release_longitudedeg() {
  // @@protoc_insertion_point(field_release:Nmea2k.GNSS.LongitudeDeg)
  
  ::Nmea2k::ValueDouble* temp = longitudedeg_;
  longitudedeg_ = NULL;
  return temp;
}
inline ::Nmea2k::ValueDouble* GNSS::mutable_longitudedeg() {
  
  if (longitudedeg_ == NULL) {
    auto* p = CreateMaybeMessage<::Nmea2k::ValueDouble>(GetArenaNoVirtual());
    longitudedeg_ = p;
  }
  // @@protoc_insertion_point(field_mutable:Nmea2k.GNSS.LongitudeDeg)
  return longitudedeg_;
}
inline void GNSS::set_allocated_longitudedeg(::Nmea2k::ValueDouble* longitudedeg) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete longitudedeg_;
  }
  if (longitudedeg) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      longitudedeg = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, longitudedeg, submessage_arena);
    }
    
  } else {
    
  }
  longitudedeg_ = longitudedeg;
  // @@protoc_insertion_point(field_set_allocated:Nmea2k.GNSS.LongitudeDeg)
}

// -------------------------------------------------------------------

// MonitoringKeyValue

// bool Valid = 1;
inline void MonitoringKeyValue::clear_valid() {
  valid_ = false;
}
inline bool MonitoringKeyValue::valid() const {
  // @@protoc_insertion_point(field_get:Nmea2k.MonitoringKeyValue.Valid)
  return valid_;
}
inline void MonitoringKeyValue::set_valid(bool value) {
  
  valid_ = value;
  // @@protoc_insertion_point(field_set:Nmea2k.MonitoringKeyValue.Valid)
}

// float Value = 2;
inline void MonitoringKeyValue::clear_value() {
  value_ = 0;
}
inline float MonitoringKeyValue::value() const {
  // @@protoc_insertion_point(field_get:Nmea2k.MonitoringKeyValue.Value)
  return value_;
}
inline void MonitoringKeyValue::set_value(float value) {
  
  value_ = value;
  // @@protoc_insertion_point(field_set:Nmea2k.MonitoringKeyValue.Value)
}

// bool LimitValid = 3;
inline void MonitoringKeyValue::clear_limitvalid() {
  limitvalid_ = false;
}
inline bool MonitoringKeyValue::limitvalid() const {
  // @@protoc_insertion_point(field_get:Nmea2k.MonitoringKeyValue.LimitValid)
  return limitvalid_;
}
inline void MonitoringKeyValue::set_limitvalid(bool value) {
  
  limitvalid_ = value;
  // @@protoc_insertion_point(field_set:Nmea2k.MonitoringKeyValue.LimitValid)
}

// float Min = 4;
inline void MonitoringKeyValue::clear_min() {
  min_ = 0;
}
inline float MonitoringKeyValue::min() const {
  // @@protoc_insertion_point(field_get:Nmea2k.MonitoringKeyValue.Min)
  return min_;
}
inline void MonitoringKeyValue::set_min(float value) {
  
  min_ = value;
  // @@protoc_insertion_point(field_set:Nmea2k.MonitoringKeyValue.Min)
}

// float Max = 5;
inline void MonitoringKeyValue::clear_max() {
  max_ = 0;
}
inline float MonitoringKeyValue::max() const {
  // @@protoc_insertion_point(field_get:Nmea2k.MonitoringKeyValue.Max)
  return max_;
}
inline void MonitoringKeyValue::set_max(float value) {
  
  max_ = value;
  // @@protoc_insertion_point(field_set:Nmea2k.MonitoringKeyValue.Max)
}

// float WarnLow = 6;
inline void MonitoringKeyValue::clear_warnlow() {
  warnlow_ = 0;
}
inline float MonitoringKeyValue::warnlow() const {
  // @@protoc_insertion_point(field_get:Nmea2k.MonitoringKeyValue.WarnLow)
  return warnlow_;
}
inline void MonitoringKeyValue::set_warnlow(float value) {
  
  warnlow_ = value;
  // @@protoc_insertion_point(field_set:Nmea2k.MonitoringKeyValue.WarnLow)
}

// float WarnHigh = 7;
inline void MonitoringKeyValue::clear_warnhigh() {
  warnhigh_ = 0;
}
inline float MonitoringKeyValue::warnhigh() const {
  // @@protoc_insertion_point(field_get:Nmea2k.MonitoringKeyValue.WarnHigh)
  return warnhigh_;
}
inline void MonitoringKeyValue::set_warnhigh(float value) {
  
  warnhigh_ = value;
  // @@protoc_insertion_point(field_set:Nmea2k.MonitoringKeyValue.WarnHigh)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// CircuitIdMap

// map<uint32, .Nmea2k.Circuit> Values = 1;
inline int CircuitIdMap::values_size() const {
  return values_.size();
}
inline void CircuitIdMap::clear_values() {
  values_.Clear();
}
inline const ::google::protobuf::Map< ::google::protobuf::uint32, ::Nmea2k::Circuit >&
CircuitIdMap::values() const {
  // @@protoc_insertion_point(field_map:Nmea2k.CircuitIdMap.Values)
  return values_.GetMap();
}
inline ::google::protobuf::Map< ::google::protobuf::uint32, ::Nmea2k::Circuit >*
CircuitIdMap::mutable_values() {
  // @@protoc_insertion_point(field_mutable_map:Nmea2k.CircuitIdMap.Values)
  return values_.MutableMap();
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// ModesIdMap

// map<uint32, .Nmea2k.Circuit> Values = 1;
inline int ModesIdMap::values_size() const {
  return values_.size();
}
inline void ModesIdMap::clear_values() {
  values_.Clear();
}
inline const ::google::protobuf::Map< ::google::protobuf::uint32, ::Nmea2k::Circuit >&
ModesIdMap::values() const {
  // @@protoc_insertion_point(field_map:Nmea2k.ModesIdMap.Values)
  return values_.GetMap();
}
inline ::google::protobuf::Map< ::google::protobuf::uint32, ::Nmea2k::Circuit >*
ModesIdMap::mutable_values() {
  // @@protoc_insertion_point(field_mutable_map:Nmea2k.ModesIdMap.Values)
  return values_.MutableMap();
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// TanksInstanceMap

// map<uint32, .Nmea2k.Tank> Values = 1;
inline int TanksInstanceMap::values_size() const {
  return values_.size();
}
inline void TanksInstanceMap::clear_values() {
  values_.Clear();
}
inline const ::google::protobuf::Map< ::google::protobuf::uint32, ::Nmea2k::Tank >&
TanksInstanceMap::values() const {
  // @@protoc_insertion_point(field_map:Nmea2k.TanksInstanceMap.Values)
  return values_.GetMap();
}
inline ::google::protobuf::Map< ::google::protobuf::uint32, ::Nmea2k::Tank >*
TanksInstanceMap::mutable_values() {
  // @@protoc_insertion_point(field_mutable_map:Nmea2k.TanksInstanceMap.Values)
  return values_.MutableMap();
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// EnginesInstanceMap

// map<uint32, .Nmea2k.Engine> Values = 1;
inline int EnginesInstanceMap::values_size() const {
  return values_.size();
}
inline void EnginesInstanceMap::clear_values() {
  values_.Clear();
}
inline const ::google::protobuf::Map< ::google::protobuf::uint32, ::Nmea2k::Engine >&
EnginesInstanceMap::values() const {
  // @@protoc_insertion_point(field_map:Nmea2k.EnginesInstanceMap.Values)
  return values_.GetMap();
}
inline ::google::protobuf::Map< ::google::protobuf::uint32, ::Nmea2k::Engine >*
EnginesInstanceMap::mutable_values() {
  // @@protoc_insertion_point(field_mutable_map:Nmea2k.EnginesInstanceMap.Values)
  return values_.MutableMap();
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// ACInstanceMap

// map<uint32, .Nmea2k.AC> Values = 1;
inline int ACInstanceMap::values_size() const {
  return values_.size();
}
inline void ACInstanceMap::clear_values() {
  values_.Clear();
}
inline const ::google::protobuf::Map< ::google::protobuf::uint32, ::Nmea2k::AC >&
ACInstanceMap::values() const {
  // @@protoc_insertion_point(field_map:Nmea2k.ACInstanceMap.Values)
  return values_.GetMap();
}
inline ::google::protobuf::Map< ::google::protobuf::uint32, ::Nmea2k::AC >*
ACInstanceMap::mutable_values() {
  // @@protoc_insertion_point(field_mutable_map:Nmea2k.ACInstanceMap.Values)
  return values_.MutableMap();
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// DCInstanceMap

// map<uint32, .Nmea2k.DC> Values = 1;
inline int DCInstanceMap::values_size() const {
  return values_.size();
}
inline void DCInstanceMap::clear_values() {
  values_.Clear();
}
inline const ::google::protobuf::Map< ::google::protobuf::uint32, ::Nmea2k::DC >&
DCInstanceMap::values() const {
  // @@protoc_insertion_point(field_map:Nmea2k.DCInstanceMap.Values)
  return values_.GetMap();
}
inline ::google::protobuf::Map< ::google::protobuf::uint32, ::Nmea2k::DC >*
DCInstanceMap::mutable_values() {
  // @@protoc_insertion_point(field_mutable_map:Nmea2k.DCInstanceMap.Values)
  return values_.MutableMap();
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// TemperaturesInstanceMap

// map<uint32, .Nmea2k.Temperature> Values = 1;
inline int TemperaturesInstanceMap::values_size() const {
  return values_.size();
}
inline void TemperaturesInstanceMap::clear_values() {
  values_.Clear();
}
inline const ::google::protobuf::Map< ::google::protobuf::uint32, ::Nmea2k::Temperature >&
TemperaturesInstanceMap::values() const {
  // @@protoc_insertion_point(field_map:Nmea2k.TemperaturesInstanceMap.Values)
  return values_.GetMap();
}
inline ::google::protobuf::Map< ::google::protobuf::uint32, ::Nmea2k::Temperature >*
TemperaturesInstanceMap::mutable_values() {
  // @@protoc_insertion_point(field_mutable_map:Nmea2k.TemperaturesInstanceMap.Values)
  return values_.MutableMap();
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// PressuresInstanceMap

// map<uint32, .Nmea2k.Pressure> Values = 1;
inline int PressuresInstanceMap::values_size() const {
  return values_.size();
}
inline void PressuresInstanceMap::clear_values() {
  values_.Clear();
}
inline const ::google::protobuf::Map< ::google::protobuf::uint32, ::Nmea2k::Pressure >&
PressuresInstanceMap::values() const {
  // @@protoc_insertion_point(field_map:Nmea2k.PressuresInstanceMap.Values)
  return values_.GetMap();
}
inline ::google::protobuf::Map< ::google::protobuf::uint32, ::Nmea2k::Pressure >*
PressuresInstanceMap::mutable_values() {
  // @@protoc_insertion_point(field_mutable_map:Nmea2k.PressuresInstanceMap.Values)
  return values_.MutableMap();
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// HvacsInstanceMap

// map<uint32, .Nmea2k.HVAC> Values = 1;
inline int HvacsInstanceMap::values_size() const {
  return values_.size();
}
inline void HvacsInstanceMap::clear_values() {
  values_.Clear();
}
inline const ::google::protobuf::Map< ::google::protobuf::uint32, ::Nmea2k::HVAC >&
HvacsInstanceMap::values() const {
  // @@protoc_insertion_point(field_map:Nmea2k.HvacsInstanceMap.Values)
  return values_.GetMap();
}
inline ::google::protobuf::Map< ::google::protobuf::uint32, ::Nmea2k::HVAC >*
HvacsInstanceMap::mutable_values() {
  // @@protoc_insertion_point(field_mutable_map:Nmea2k.HvacsInstanceMap.Values)
  return values_.MutableMap();
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// AwningsInstanceMap

// map<uint32, .Nmea2k.ZipdeeAwning> Values = 1;
inline int AwningsInstanceMap::values_size() const {
  return values_.size();
}
inline void AwningsInstanceMap::clear_values() {
  values_.Clear();
}
inline const ::google::protobuf::Map< ::google::protobuf::uint32, ::Nmea2k::ZipdeeAwning >&
AwningsInstanceMap::values() const {
  // @@protoc_insertion_point(field_map:Nmea2k.AwningsInstanceMap.Values)
  return values_.GetMap();
}
inline ::google::protobuf::Map< ::google::protobuf::uint32, ::Nmea2k::ZipdeeAwning >*
AwningsInstanceMap::mutable_values() {
  // @@protoc_insertion_point(field_mutable_map:Nmea2k.AwningsInstanceMap.Values)
  return values_.MutableMap();
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// ThirdPartyGeneratorsInstanceMap

// map<uint32, .Nmea2k.ThirdPartyGenerator> Values = 1;
inline int ThirdPartyGeneratorsInstanceMap::values_size() const {
  return values_.size();
}
inline void ThirdPartyGeneratorsInstanceMap::clear_values() {
  values_.Clear();
}
inline const ::google::protobuf::Map< ::google::protobuf::uint32, ::Nmea2k::ThirdPartyGenerator >&
ThirdPartyGeneratorsInstanceMap::values() const {
  // @@protoc_insertion_point(field_map:Nmea2k.ThirdPartyGeneratorsInstanceMap.Values)
  return values_.GetMap();
}
inline ::google::protobuf::Map< ::google::protobuf::uint32, ::Nmea2k::ThirdPartyGenerator >*
ThirdPartyGeneratorsInstanceMap::mutable_values() {
  // @@protoc_insertion_point(field_mutable_map:Nmea2k.ThirdPartyGeneratorsInstanceMap.Values)
  return values_.MutableMap();
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// InverterChargersInstanceMap

// map<uint32, .Nmea2k.InverterCharger> Values = 1;
inline int InverterChargersInstanceMap::values_size() const {
  return values_.size();
}
inline void InverterChargersInstanceMap::clear_values() {
  values_.Clear();
}
inline const ::google::protobuf::Map< ::google::protobuf::uint32, ::Nmea2k::InverterCharger >&
InverterChargersInstanceMap::values() const {
  // @@protoc_insertion_point(field_map:Nmea2k.InverterChargersInstanceMap.Values)
  return values_.GetMap();
}
inline ::google::protobuf::Map< ::google::protobuf::uint32, ::Nmea2k::InverterCharger >*
InverterChargersInstanceMap::mutable_values() {
  // @@protoc_insertion_point(field_mutable_map:Nmea2k.InverterChargersInstanceMap.Values)
  return values_.MutableMap();
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// TyrepressuresInstanceMap

// map<uint32, .Nmea2k.TyrePressure> Values = 1;
inline int TyrepressuresInstanceMap::values_size() const {
  return values_.size();
}
inline void TyrepressuresInstanceMap::clear_values() {
  values_.Clear();
}
inline const ::google::protobuf::Map< ::google::protobuf::uint32, ::Nmea2k::TyrePressure >&
TyrepressuresInstanceMap::values() const {
  // @@protoc_insertion_point(field_map:Nmea2k.TyrepressuresInstanceMap.Values)
  return values_.GetMap();
}
inline ::google::protobuf::Map< ::google::protobuf::uint32, ::Nmea2k::TyrePressure >*
TyrepressuresInstanceMap::mutable_values() {
  // @@protoc_insertion_point(field_mutable_map:Nmea2k.TyrepressuresInstanceMap.Values)
  return values_.MutableMap();
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// AudioStereosInstanceMap

// map<uint32, .Nmea2k.AudioStereo> Values = 1;
inline int AudioStereosInstanceMap::values_size() const {
  return values_.size();
}
inline void AudioStereosInstanceMap::clear_values() {
  values_.Clear();
}
inline const ::google::protobuf::Map< ::google::protobuf::uint32, ::Nmea2k::AudioStereo >&
AudioStereosInstanceMap::values() const {
  // @@protoc_insertion_point(field_map:Nmea2k.AudioStereosInstanceMap.Values)
  return values_.GetMap();
}
inline ::google::protobuf::Map< ::google::protobuf::uint32, ::Nmea2k::AudioStereo >*
AudioStereosInstanceMap::mutable_values() {
  // @@protoc_insertion_point(field_mutable_map:Nmea2k.AudioStereosInstanceMap.Values)
  return values_.MutableMap();
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// ACMainContactorsInstanceMap

// map<uint32, .Nmea2k.ACMainContactor> Values = 1;
inline int ACMainContactorsInstanceMap::values_size() const {
  return values_.size();
}
inline void ACMainContactorsInstanceMap::clear_values() {
  values_.Clear();
}
inline const ::google::protobuf::Map< ::google::protobuf::uint32, ::Nmea2k::ACMainContactor >&
ACMainContactorsInstanceMap::values() const {
  // @@protoc_insertion_point(field_map:Nmea2k.ACMainContactorsInstanceMap.Values)
  return values_.GetMap();
}
inline ::google::protobuf::Map< ::google::protobuf::uint32, ::Nmea2k::ACMainContactor >*
ACMainContactorsInstanceMap::mutable_values() {
  // @@protoc_insertion_point(field_mutable_map:Nmea2k.ACMainContactorsInstanceMap.Values)
  return values_.MutableMap();
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// GNSSInstanceMap

// map<uint32, .Nmea2k.GNSS> Values = 1;
inline int GNSSInstanceMap::values_size() const {
  return values_.size();
}
inline void GNSSInstanceMap::clear_values() {
  values_.Clear();
}
inline const ::google::protobuf::Map< ::google::protobuf::uint32, ::Nmea2k::GNSS >&
GNSSInstanceMap::values() const {
  // @@protoc_insertion_point(field_map:Nmea2k.GNSSInstanceMap.Values)
  return values_.GetMap();
}
inline ::google::protobuf::Map< ::google::protobuf::uint32, ::Nmea2k::GNSS >*
GNSSInstanceMap::mutable_values() {
  // @@protoc_insertion_point(field_mutable_map:Nmea2k.GNSSInstanceMap.Values)
  return values_.MutableMap();
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// MonitoringKeyValueMap

// map<uint32, .Nmea2k.MonitoringKeyValue> KeyValueMap = 1;
inline int MonitoringKeyValueMap::keyvaluemap_size() const {
  return keyvaluemap_.size();
}
inline void MonitoringKeyValueMap::clear_keyvaluemap() {
  keyvaluemap_.Clear();
}
inline const ::google::protobuf::Map< ::google::protobuf::uint32, ::Nmea2k::MonitoringKeyValue >&
MonitoringKeyValueMap::keyvaluemap() const {
  // @@protoc_insertion_point(field_map:Nmea2k.MonitoringKeyValueMap.KeyValueMap)
  return keyvaluemap_.GetMap();
}
inline ::google::protobuf::Map< ::google::protobuf::uint32, ::Nmea2k::MonitoringKeyValue >*
MonitoringKeyValueMap::mutable_keyvaluemap() {
  // @@protoc_insertion_point(field_mutable_map:Nmea2k.MonitoringKeyValueMap.KeyValueMap)
  return keyvaluemap_.MutableMap();
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// BinaryLogicStateInstanceMap

// map<uint32, .Nmea2k.BinaryLogicState> Values = 1;
inline int BinaryLogicStateInstanceMap::values_size() const {
  return values_.size();
}
inline void BinaryLogicStateInstanceMap::clear_values() {
  values_.Clear();
}
inline const ::google::protobuf::Map< ::google::protobuf::uint32, ::Nmea2k::BinaryLogicState >&
BinaryLogicStateInstanceMap::values() const {
  // @@protoc_insertion_point(field_map:Nmea2k.BinaryLogicStateInstanceMap.Values)
  return values_.GetMap();
}
inline ::google::protobuf::Map< ::google::protobuf::uint32, ::Nmea2k::BinaryLogicState >*
BinaryLogicStateInstanceMap::mutable_values() {
  // @@protoc_insertion_point(field_mutable_map:Nmea2k.BinaryLogicStateInstanceMap.Values)
  return values_.MutableMap();
}

// -------------------------------------------------------------------

// NetworkStatus

// string EthernetStatus = 1;
inline void NetworkStatus::clear_ethernetstatus() {
  ethernetstatus_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& NetworkStatus::ethernetstatus() const {
  // @@protoc_insertion_point(field_get:Nmea2k.NetworkStatus.EthernetStatus)
  return ethernetstatus_.GetNoArena();
}
inline void NetworkStatus::set_ethernetstatus(const ::std::string& value) {
  
  ethernetstatus_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Nmea2k.NetworkStatus.EthernetStatus)
}
#if LANG_CXX11
inline void NetworkStatus::set_ethernetstatus(::std::string&& value) {
  
  ethernetstatus_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Nmea2k.NetworkStatus.EthernetStatus)
}
#endif
inline void NetworkStatus::set_ethernetstatus(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  ethernetstatus_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Nmea2k.NetworkStatus.EthernetStatus)
}
inline void NetworkStatus::set_ethernetstatus(const char* value, size_t size) {
  
  ethernetstatus_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Nmea2k.NetworkStatus.EthernetStatus)
}
inline ::std::string* NetworkStatus::mutable_ethernetstatus() {
  
  // @@protoc_insertion_point(field_mutable:Nmea2k.NetworkStatus.EthernetStatus)
  return ethernetstatus_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* NetworkStatus::release_ethernetstatus() {
  // @@protoc_insertion_point(field_release:Nmea2k.NetworkStatus.EthernetStatus)
  
  return ethernetstatus_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NetworkStatus::set_allocated_ethernetstatus(::std::string* ethernetstatus) {
  if (ethernetstatus != NULL) {
    
  } else {
    
  }
  ethernetstatus_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ethernetstatus);
  // @@protoc_insertion_point(field_set_allocated:Nmea2k.NetworkStatus.EthernetStatus)
}

// bool EthernetInternetConnectivity = 2;
inline void NetworkStatus::clear_ethernetinternetconnectivity() {
  ethernetinternetconnectivity_ = false;
}
inline bool NetworkStatus::ethernetinternetconnectivity() const {
  // @@protoc_insertion_point(field_get:Nmea2k.NetworkStatus.EthernetInternetConnectivity)
  return ethernetinternetconnectivity_;
}
inline void NetworkStatus::set_ethernetinternetconnectivity(bool value) {
  
  ethernetinternetconnectivity_ = value;
  // @@protoc_insertion_point(field_set:Nmea2k.NetworkStatus.EthernetInternetConnectivity)
}

// string EthernetIp = 3;
inline void NetworkStatus::clear_ethernetip() {
  ethernetip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& NetworkStatus::ethernetip() const {
  // @@protoc_insertion_point(field_get:Nmea2k.NetworkStatus.EthernetIp)
  return ethernetip_.GetNoArena();
}
inline void NetworkStatus::set_ethernetip(const ::std::string& value) {
  
  ethernetip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Nmea2k.NetworkStatus.EthernetIp)
}
#if LANG_CXX11
inline void NetworkStatus::set_ethernetip(::std::string&& value) {
  
  ethernetip_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Nmea2k.NetworkStatus.EthernetIp)
}
#endif
inline void NetworkStatus::set_ethernetip(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  ethernetip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Nmea2k.NetworkStatus.EthernetIp)
}
inline void NetworkStatus::set_ethernetip(const char* value, size_t size) {
  
  ethernetip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Nmea2k.NetworkStatus.EthernetIp)
}
inline ::std::string* NetworkStatus::mutable_ethernetip() {
  
  // @@protoc_insertion_point(field_mutable:Nmea2k.NetworkStatus.EthernetIp)
  return ethernetip_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* NetworkStatus::release_ethernetip() {
  // @@protoc_insertion_point(field_release:Nmea2k.NetworkStatus.EthernetIp)
  
  return ethernetip_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NetworkStatus::set_allocated_ethernetip(::std::string* ethernetip) {
  if (ethernetip != NULL) {
    
  } else {
    
  }
  ethernetip_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ethernetip);
  // @@protoc_insertion_point(field_set_allocated:Nmea2k.NetworkStatus.EthernetIp)
}

// string EthernetId = 4;
inline void NetworkStatus::clear_ethernetid() {
  ethernetid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& NetworkStatus::ethernetid() const {
  // @@protoc_insertion_point(field_get:Nmea2k.NetworkStatus.EthernetId)
  return ethernetid_.GetNoArena();
}
inline void NetworkStatus::set_ethernetid(const ::std::string& value) {
  
  ethernetid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Nmea2k.NetworkStatus.EthernetId)
}
#if LANG_CXX11
inline void NetworkStatus::set_ethernetid(::std::string&& value) {
  
  ethernetid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Nmea2k.NetworkStatus.EthernetId)
}
#endif
inline void NetworkStatus::set_ethernetid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  ethernetid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Nmea2k.NetworkStatus.EthernetId)
}
inline void NetworkStatus::set_ethernetid(const char* value, size_t size) {
  
  ethernetid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Nmea2k.NetworkStatus.EthernetId)
}
inline ::std::string* NetworkStatus::mutable_ethernetid() {
  
  // @@protoc_insertion_point(field_mutable:Nmea2k.NetworkStatus.EthernetId)
  return ethernetid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* NetworkStatus::release_ethernetid() {
  // @@protoc_insertion_point(field_release:Nmea2k.NetworkStatus.EthernetId)
  
  return ethernetid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NetworkStatus::set_allocated_ethernetid(::std::string* ethernetid) {
  if (ethernetid != NULL) {
    
  } else {
    
  }
  ethernetid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ethernetid);
  // @@protoc_insertion_point(field_set_allocated:Nmea2k.NetworkStatus.EthernetId)
}

// string WifiStatus = 5;
inline void NetworkStatus::clear_wifistatus() {
  wifistatus_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& NetworkStatus::wifistatus() const {
  // @@protoc_insertion_point(field_get:Nmea2k.NetworkStatus.WifiStatus)
  return wifistatus_.GetNoArena();
}
inline void NetworkStatus::set_wifistatus(const ::std::string& value) {
  
  wifistatus_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Nmea2k.NetworkStatus.WifiStatus)
}
#if LANG_CXX11
inline void NetworkStatus::set_wifistatus(::std::string&& value) {
  
  wifistatus_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Nmea2k.NetworkStatus.WifiStatus)
}
#endif
inline void NetworkStatus::set_wifistatus(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  wifistatus_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Nmea2k.NetworkStatus.WifiStatus)
}
inline void NetworkStatus::set_wifistatus(const char* value, size_t size) {
  
  wifistatus_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Nmea2k.NetworkStatus.WifiStatus)
}
inline ::std::string* NetworkStatus::mutable_wifistatus() {
  
  // @@protoc_insertion_point(field_mutable:Nmea2k.NetworkStatus.WifiStatus)
  return wifistatus_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* NetworkStatus::release_wifistatus() {
  // @@protoc_insertion_point(field_release:Nmea2k.NetworkStatus.WifiStatus)
  
  return wifistatus_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NetworkStatus::set_allocated_wifistatus(::std::string* wifistatus) {
  if (wifistatus != NULL) {
    
  } else {
    
  }
  wifistatus_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), wifistatus);
  // @@protoc_insertion_point(field_set_allocated:Nmea2k.NetworkStatus.WifiStatus)
}

// bool WifiInternetConnectivity = 6;
inline void NetworkStatus::clear_wifiinternetconnectivity() {
  wifiinternetconnectivity_ = false;
}
inline bool NetworkStatus::wifiinternetconnectivity() const {
  // @@protoc_insertion_point(field_get:Nmea2k.NetworkStatus.WifiInternetConnectivity)
  return wifiinternetconnectivity_;
}
inline void NetworkStatus::set_wifiinternetconnectivity(bool value) {
  
  wifiinternetconnectivity_ = value;
  // @@protoc_insertion_point(field_set:Nmea2k.NetworkStatus.WifiInternetConnectivity)
}

// string WifiIp = 7;
inline void NetworkStatus::clear_wifiip() {
  wifiip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& NetworkStatus::wifiip() const {
  // @@protoc_insertion_point(field_get:Nmea2k.NetworkStatus.WifiIp)
  return wifiip_.GetNoArena();
}
inline void NetworkStatus::set_wifiip(const ::std::string& value) {
  
  wifiip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Nmea2k.NetworkStatus.WifiIp)
}
#if LANG_CXX11
inline void NetworkStatus::set_wifiip(::std::string&& value) {
  
  wifiip_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Nmea2k.NetworkStatus.WifiIp)
}
#endif
inline void NetworkStatus::set_wifiip(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  wifiip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Nmea2k.NetworkStatus.WifiIp)
}
inline void NetworkStatus::set_wifiip(const char* value, size_t size) {
  
  wifiip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Nmea2k.NetworkStatus.WifiIp)
}
inline ::std::string* NetworkStatus::mutable_wifiip() {
  
  // @@protoc_insertion_point(field_mutable:Nmea2k.NetworkStatus.WifiIp)
  return wifiip_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* NetworkStatus::release_wifiip() {
  // @@protoc_insertion_point(field_release:Nmea2k.NetworkStatus.WifiIp)
  
  return wifiip_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NetworkStatus::set_allocated_wifiip(::std::string* wifiip) {
  if (wifiip != NULL) {
    
  } else {
    
  }
  wifiip_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), wifiip);
  // @@protoc_insertion_point(field_set_allocated:Nmea2k.NetworkStatus.WifiIp)
}

// string WifiSsid = 8;
inline void NetworkStatus::clear_wifissid() {
  wifissid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& NetworkStatus::wifissid() const {
  // @@protoc_insertion_point(field_get:Nmea2k.NetworkStatus.WifiSsid)
  return wifissid_.GetNoArena();
}
inline void NetworkStatus::set_wifissid(const ::std::string& value) {
  
  wifissid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Nmea2k.NetworkStatus.WifiSsid)
}
#if LANG_CXX11
inline void NetworkStatus::set_wifissid(::std::string&& value) {
  
  wifissid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Nmea2k.NetworkStatus.WifiSsid)
}
#endif
inline void NetworkStatus::set_wifissid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  wifissid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Nmea2k.NetworkStatus.WifiSsid)
}
inline void NetworkStatus::set_wifissid(const char* value, size_t size) {
  
  wifissid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Nmea2k.NetworkStatus.WifiSsid)
}
inline ::std::string* NetworkStatus::mutable_wifissid() {
  
  // @@protoc_insertion_point(field_mutable:Nmea2k.NetworkStatus.WifiSsid)
  return wifissid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* NetworkStatus::release_wifissid() {
  // @@protoc_insertion_point(field_release:Nmea2k.NetworkStatus.WifiSsid)
  
  return wifissid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NetworkStatus::set_allocated_wifissid(::std::string* wifissid) {
  if (wifissid != NULL) {
    
  } else {
    
  }
  wifissid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), wifissid);
  // @@protoc_insertion_point(field_set_allocated:Nmea2k.NetworkStatus.WifiSsid)
}

// string WifiSecurity = 9;
inline void NetworkStatus::clear_wifisecurity() {
  wifisecurity_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& NetworkStatus::wifisecurity() const {
  // @@protoc_insertion_point(field_get:Nmea2k.NetworkStatus.WifiSecurity)
  return wifisecurity_.GetNoArena();
}
inline void NetworkStatus::set_wifisecurity(const ::std::string& value) {
  
  wifisecurity_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Nmea2k.NetworkStatus.WifiSecurity)
}
#if LANG_CXX11
inline void NetworkStatus::set_wifisecurity(::std::string&& value) {
  
  wifisecurity_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Nmea2k.NetworkStatus.WifiSecurity)
}
#endif
inline void NetworkStatus::set_wifisecurity(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  wifisecurity_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Nmea2k.NetworkStatus.WifiSecurity)
}
inline void NetworkStatus::set_wifisecurity(const char* value, size_t size) {
  
  wifisecurity_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Nmea2k.NetworkStatus.WifiSecurity)
}
inline ::std::string* NetworkStatus::mutable_wifisecurity() {
  
  // @@protoc_insertion_point(field_mutable:Nmea2k.NetworkStatus.WifiSecurity)
  return wifisecurity_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* NetworkStatus::release_wifisecurity() {
  // @@protoc_insertion_point(field_release:Nmea2k.NetworkStatus.WifiSecurity)
  
  return wifisecurity_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NetworkStatus::set_allocated_wifisecurity(::std::string* wifisecurity) {
  if (wifisecurity != NULL) {
    
  } else {
    
  }
  wifisecurity_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), wifisecurity);
  // @@protoc_insertion_point(field_set_allocated:Nmea2k.NetworkStatus.WifiSecurity)
}

// string WifiType = 10;
inline void NetworkStatus::clear_wifitype() {
  wifitype_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& NetworkStatus::wifitype() const {
  // @@protoc_insertion_point(field_get:Nmea2k.NetworkStatus.WifiType)
  return wifitype_.GetNoArena();
}
inline void NetworkStatus::set_wifitype(const ::std::string& value) {
  
  wifitype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Nmea2k.NetworkStatus.WifiType)
}
#if LANG_CXX11
inline void NetworkStatus::set_wifitype(::std::string&& value) {
  
  wifitype_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Nmea2k.NetworkStatus.WifiType)
}
#endif
inline void NetworkStatus::set_wifitype(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  wifitype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Nmea2k.NetworkStatus.WifiType)
}
inline void NetworkStatus::set_wifitype(const char* value, size_t size) {
  
  wifitype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Nmea2k.NetworkStatus.WifiType)
}
inline ::std::string* NetworkStatus::mutable_wifitype() {
  
  // @@protoc_insertion_point(field_mutable:Nmea2k.NetworkStatus.WifiType)
  return wifitype_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* NetworkStatus::release_wifitype() {
  // @@protoc_insertion_point(field_release:Nmea2k.NetworkStatus.WifiType)
  
  return wifitype_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NetworkStatus::set_allocated_wifitype(::std::string* wifitype) {
  if (wifitype != NULL) {
    
  } else {
    
  }
  wifitype_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), wifitype);
  // @@protoc_insertion_point(field_set_allocated:Nmea2k.NetworkStatus.WifiType)
}

// int32 WifiChannel = 11;
inline void NetworkStatus::clear_wifichannel() {
  wifichannel_ = 0;
}
inline ::google::protobuf::int32 NetworkStatus::wifichannel() const {
  // @@protoc_insertion_point(field_get:Nmea2k.NetworkStatus.WifiChannel)
  return wifichannel_;
}
inline void NetworkStatus::set_wifichannel(::google::protobuf::int32 value) {
  
  wifichannel_ = value;
  // @@protoc_insertion_point(field_set:Nmea2k.NetworkStatus.WifiChannel)
}

// int32 WifiSignalStrengthDbm = 12;
inline void NetworkStatus::clear_wifisignalstrengthdbm() {
  wifisignalstrengthdbm_ = 0;
}
inline ::google::protobuf::int32 NetworkStatus::wifisignalstrengthdbm() const {
  // @@protoc_insertion_point(field_get:Nmea2k.NetworkStatus.WifiSignalStrengthDbm)
  return wifisignalstrengthdbm_;
}
inline void NetworkStatus::set_wifisignalstrengthdbm(::google::protobuf::int32 value) {
  
  wifisignalstrengthdbm_ = value;
  // @@protoc_insertion_point(field_set:Nmea2k.NetworkStatus.WifiSignalStrengthDbm)
}

// string HotspotStatus = 13;
inline void NetworkStatus::clear_hotspotstatus() {
  hotspotstatus_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& NetworkStatus::hotspotstatus() const {
  // @@protoc_insertion_point(field_get:Nmea2k.NetworkStatus.HotspotStatus)
  return hotspotstatus_.GetNoArena();
}
inline void NetworkStatus::set_hotspotstatus(const ::std::string& value) {
  
  hotspotstatus_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Nmea2k.NetworkStatus.HotspotStatus)
}
#if LANG_CXX11
inline void NetworkStatus::set_hotspotstatus(::std::string&& value) {
  
  hotspotstatus_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Nmea2k.NetworkStatus.HotspotStatus)
}
#endif
inline void NetworkStatus::set_hotspotstatus(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  hotspotstatus_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Nmea2k.NetworkStatus.HotspotStatus)
}
inline void NetworkStatus::set_hotspotstatus(const char* value, size_t size) {
  
  hotspotstatus_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Nmea2k.NetworkStatus.HotspotStatus)
}
inline ::std::string* NetworkStatus::mutable_hotspotstatus() {
  
  // @@protoc_insertion_point(field_mutable:Nmea2k.NetworkStatus.HotspotStatus)
  return hotspotstatus_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* NetworkStatus::release_hotspotstatus() {
  // @@protoc_insertion_point(field_release:Nmea2k.NetworkStatus.HotspotStatus)
  
  return hotspotstatus_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NetworkStatus::set_allocated_hotspotstatus(::std::string* hotspotstatus) {
  if (hotspotstatus != NULL) {
    
  } else {
    
  }
  hotspotstatus_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), hotspotstatus);
  // @@protoc_insertion_point(field_set_allocated:Nmea2k.NetworkStatus.HotspotStatus)
}

// string HotspotIp = 14;
inline void NetworkStatus::clear_hotspotip() {
  hotspotip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& NetworkStatus::hotspotip() const {
  // @@protoc_insertion_point(field_get:Nmea2k.NetworkStatus.HotspotIp)
  return hotspotip_.GetNoArena();
}
inline void NetworkStatus::set_hotspotip(const ::std::string& value) {
  
  hotspotip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Nmea2k.NetworkStatus.HotspotIp)
}
#if LANG_CXX11
inline void NetworkStatus::set_hotspotip(::std::string&& value) {
  
  hotspotip_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Nmea2k.NetworkStatus.HotspotIp)
}
#endif
inline void NetworkStatus::set_hotspotip(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  hotspotip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Nmea2k.NetworkStatus.HotspotIp)
}
inline void NetworkStatus::set_hotspotip(const char* value, size_t size) {
  
  hotspotip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Nmea2k.NetworkStatus.HotspotIp)
}
inline ::std::string* NetworkStatus::mutable_hotspotip() {
  
  // @@protoc_insertion_point(field_mutable:Nmea2k.NetworkStatus.HotspotIp)
  return hotspotip_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* NetworkStatus::release_hotspotip() {
  // @@protoc_insertion_point(field_release:Nmea2k.NetworkStatus.HotspotIp)
  
  return hotspotip_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NetworkStatus::set_allocated_hotspotip(::std::string* hotspotip) {
  if (hotspotip != NULL) {
    
  } else {
    
  }
  hotspotip_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), hotspotip);
  // @@protoc_insertion_point(field_set_allocated:Nmea2k.NetworkStatus.HotspotIp)
}

// string HotspotSsid = 15;
inline void NetworkStatus::clear_hotspotssid() {
  hotspotssid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& NetworkStatus::hotspotssid() const {
  // @@protoc_insertion_point(field_get:Nmea2k.NetworkStatus.HotspotSsid)
  return hotspotssid_.GetNoArena();
}
inline void NetworkStatus::set_hotspotssid(const ::std::string& value) {
  
  hotspotssid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Nmea2k.NetworkStatus.HotspotSsid)
}
#if LANG_CXX11
inline void NetworkStatus::set_hotspotssid(::std::string&& value) {
  
  hotspotssid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Nmea2k.NetworkStatus.HotspotSsid)
}
#endif
inline void NetworkStatus::set_hotspotssid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  hotspotssid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Nmea2k.NetworkStatus.HotspotSsid)
}
inline void NetworkStatus::set_hotspotssid(const char* value, size_t size) {
  
  hotspotssid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Nmea2k.NetworkStatus.HotspotSsid)
}
inline ::std::string* NetworkStatus::mutable_hotspotssid() {
  
  // @@protoc_insertion_point(field_mutable:Nmea2k.NetworkStatus.HotspotSsid)
  return hotspotssid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* NetworkStatus::release_hotspotssid() {
  // @@protoc_insertion_point(field_release:Nmea2k.NetworkStatus.HotspotSsid)
  
  return hotspotssid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NetworkStatus::set_allocated_hotspotssid(::std::string* hotspotssid) {
  if (hotspotssid != NULL) {
    
  } else {
    
  }
  hotspotssid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), hotspotssid);
  // @@protoc_insertion_point(field_set_allocated:Nmea2k.NetworkStatus.HotspotSsid)
}

// string HotspotPassword = 16;
inline void NetworkStatus::clear_hotspotpassword() {
  hotspotpassword_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& NetworkStatus::hotspotpassword() const {
  // @@protoc_insertion_point(field_get:Nmea2k.NetworkStatus.HotspotPassword)
  return hotspotpassword_.GetNoArena();
}
inline void NetworkStatus::set_hotspotpassword(const ::std::string& value) {
  
  hotspotpassword_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Nmea2k.NetworkStatus.HotspotPassword)
}
#if LANG_CXX11
inline void NetworkStatus::set_hotspotpassword(::std::string&& value) {
  
  hotspotpassword_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Nmea2k.NetworkStatus.HotspotPassword)
}
#endif
inline void NetworkStatus::set_hotspotpassword(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  hotspotpassword_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Nmea2k.NetworkStatus.HotspotPassword)
}
inline void NetworkStatus::set_hotspotpassword(const char* value, size_t size) {
  
  hotspotpassword_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Nmea2k.NetworkStatus.HotspotPassword)
}
inline ::std::string* NetworkStatus::mutable_hotspotpassword() {
  
  // @@protoc_insertion_point(field_mutable:Nmea2k.NetworkStatus.HotspotPassword)
  return hotspotpassword_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* NetworkStatus::release_hotspotpassword() {
  // @@protoc_insertion_point(field_release:Nmea2k.NetworkStatus.HotspotPassword)
  
  return hotspotpassword_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NetworkStatus::set_allocated_hotspotpassword(::std::string* hotspotpassword) {
  if (hotspotpassword != NULL) {
    
  } else {
    
  }
  hotspotpassword_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), hotspotpassword);
  // @@protoc_insertion_point(field_set_allocated:Nmea2k.NetworkStatus.HotspotPassword)
}

// string HotspotSecurity = 17;
inline void NetworkStatus::clear_hotspotsecurity() {
  hotspotsecurity_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& NetworkStatus::hotspotsecurity() const {
  // @@protoc_insertion_point(field_get:Nmea2k.NetworkStatus.HotspotSecurity)
  return hotspotsecurity_.GetNoArena();
}
inline void NetworkStatus::set_hotspotsecurity(const ::std::string& value) {
  
  hotspotsecurity_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Nmea2k.NetworkStatus.HotspotSecurity)
}
#if LANG_CXX11
inline void NetworkStatus::set_hotspotsecurity(::std::string&& value) {
  
  hotspotsecurity_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Nmea2k.NetworkStatus.HotspotSecurity)
}
#endif
inline void NetworkStatus::set_hotspotsecurity(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  hotspotsecurity_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Nmea2k.NetworkStatus.HotspotSecurity)
}
inline void NetworkStatus::set_hotspotsecurity(const char* value, size_t size) {
  
  hotspotsecurity_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Nmea2k.NetworkStatus.HotspotSecurity)
}
inline ::std::string* NetworkStatus::mutable_hotspotsecurity() {
  
  // @@protoc_insertion_point(field_mutable:Nmea2k.NetworkStatus.HotspotSecurity)
  return hotspotsecurity_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* NetworkStatus::release_hotspotsecurity() {
  // @@protoc_insertion_point(field_release:Nmea2k.NetworkStatus.HotspotSecurity)
  
  return hotspotsecurity_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NetworkStatus::set_allocated_hotspotsecurity(::std::string* hotspotsecurity) {
  if (hotspotsecurity != NULL) {
    
  } else {
    
  }
  hotspotsecurity_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), hotspotsecurity);
  // @@protoc_insertion_point(field_set_allocated:Nmea2k.NetworkStatus.HotspotSecurity)
}

// string HotspotType = 18;
inline void NetworkStatus::clear_hotspottype() {
  hotspottype_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& NetworkStatus::hotspottype() const {
  // @@protoc_insertion_point(field_get:Nmea2k.NetworkStatus.HotspotType)
  return hotspottype_.GetNoArena();
}
inline void NetworkStatus::set_hotspottype(const ::std::string& value) {
  
  hotspottype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Nmea2k.NetworkStatus.HotspotType)
}
#if LANG_CXX11
inline void NetworkStatus::set_hotspottype(::std::string&& value) {
  
  hotspottype_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Nmea2k.NetworkStatus.HotspotType)
}
#endif
inline void NetworkStatus::set_hotspottype(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  hotspottype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Nmea2k.NetworkStatus.HotspotType)
}
inline void NetworkStatus::set_hotspottype(const char* value, size_t size) {
  
  hotspottype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Nmea2k.NetworkStatus.HotspotType)
}
inline ::std::string* NetworkStatus::mutable_hotspottype() {
  
  // @@protoc_insertion_point(field_mutable:Nmea2k.NetworkStatus.HotspotType)
  return hotspottype_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* NetworkStatus::release_hotspottype() {
  // @@protoc_insertion_point(field_release:Nmea2k.NetworkStatus.HotspotType)
  
  return hotspottype_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NetworkStatus::set_allocated_hotspottype(::std::string* hotspottype) {
  if (hotspottype != NULL) {
    
  } else {
    
  }
  hotspottype_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), hotspottype);
  // @@protoc_insertion_point(field_set_allocated:Nmea2k.NetworkStatus.HotspotType)
}

// int32 HotspotChannel = 19;
inline void NetworkStatus::clear_hotspotchannel() {
  hotspotchannel_ = 0;
}
inline ::google::protobuf::int32 NetworkStatus::hotspotchannel() const {
  // @@protoc_insertion_point(field_get:Nmea2k.NetworkStatus.HotspotChannel)
  return hotspotchannel_;
}
inline void NetworkStatus::set_hotspotchannel(::google::protobuf::int32 value) {
  
  hotspotchannel_ = value;
  // @@protoc_insertion_point(field_set:Nmea2k.NetworkStatus.HotspotChannel)
}

// string CellularStatus = 20;
inline void NetworkStatus::clear_cellularstatus() {
  cellularstatus_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& NetworkStatus::cellularstatus() const {
  // @@protoc_insertion_point(field_get:Nmea2k.NetworkStatus.CellularStatus)
  return cellularstatus_.GetNoArena();
}
inline void NetworkStatus::set_cellularstatus(const ::std::string& value) {
  
  cellularstatus_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Nmea2k.NetworkStatus.CellularStatus)
}
#if LANG_CXX11
inline void NetworkStatus::set_cellularstatus(::std::string&& value) {
  
  cellularstatus_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Nmea2k.NetworkStatus.CellularStatus)
}
#endif
inline void NetworkStatus::set_cellularstatus(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  cellularstatus_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Nmea2k.NetworkStatus.CellularStatus)
}
inline void NetworkStatus::set_cellularstatus(const char* value, size_t size) {
  
  cellularstatus_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Nmea2k.NetworkStatus.CellularStatus)
}
inline ::std::string* NetworkStatus::mutable_cellularstatus() {
  
  // @@protoc_insertion_point(field_mutable:Nmea2k.NetworkStatus.CellularStatus)
  return cellularstatus_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* NetworkStatus::release_cellularstatus() {
  // @@protoc_insertion_point(field_release:Nmea2k.NetworkStatus.CellularStatus)
  
  return cellularstatus_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NetworkStatus::set_allocated_cellularstatus(::std::string* cellularstatus) {
  if (cellularstatus != NULL) {
    
  } else {
    
  }
  cellularstatus_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cellularstatus);
  // @@protoc_insertion_point(field_set_allocated:Nmea2k.NetworkStatus.CellularStatus)
}

// bool CelllularInternetConnectivity = 21;
inline void NetworkStatus::clear_celllularinternetconnectivity() {
  celllularinternetconnectivity_ = false;
}
inline bool NetworkStatus::celllularinternetconnectivity() const {
  // @@protoc_insertion_point(field_get:Nmea2k.NetworkStatus.CelllularInternetConnectivity)
  return celllularinternetconnectivity_;
}
inline void NetworkStatus::set_celllularinternetconnectivity(bool value) {
  
  celllularinternetconnectivity_ = value;
  // @@protoc_insertion_point(field_set:Nmea2k.NetworkStatus.CelllularInternetConnectivity)
}

// string CellularIp = 22;
inline void NetworkStatus::clear_cellularip() {
  cellularip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& NetworkStatus::cellularip() const {
  // @@protoc_insertion_point(field_get:Nmea2k.NetworkStatus.CellularIp)
  return cellularip_.GetNoArena();
}
inline void NetworkStatus::set_cellularip(const ::std::string& value) {
  
  cellularip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Nmea2k.NetworkStatus.CellularIp)
}
#if LANG_CXX11
inline void NetworkStatus::set_cellularip(::std::string&& value) {
  
  cellularip_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Nmea2k.NetworkStatus.CellularIp)
}
#endif
inline void NetworkStatus::set_cellularip(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  cellularip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Nmea2k.NetworkStatus.CellularIp)
}
inline void NetworkStatus::set_cellularip(const char* value, size_t size) {
  
  cellularip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Nmea2k.NetworkStatus.CellularIp)
}
inline ::std::string* NetworkStatus::mutable_cellularip() {
  
  // @@protoc_insertion_point(field_mutable:Nmea2k.NetworkStatus.CellularIp)
  return cellularip_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* NetworkStatus::release_cellularip() {
  // @@protoc_insertion_point(field_release:Nmea2k.NetworkStatus.CellularIp)
  
  return cellularip_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NetworkStatus::set_allocated_cellularip(::std::string* cellularip) {
  if (cellularip != NULL) {
    
  } else {
    
  }
  cellularip_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cellularip);
  // @@protoc_insertion_point(field_set_allocated:Nmea2k.NetworkStatus.CellularIp)
}

// string CellularOperator = 23;
inline void NetworkStatus::clear_cellularoperator() {
  cellularoperator_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& NetworkStatus::cellularoperator() const {
  // @@protoc_insertion_point(field_get:Nmea2k.NetworkStatus.CellularOperator)
  return cellularoperator_.GetNoArena();
}
inline void NetworkStatus::set_cellularoperator(const ::std::string& value) {
  
  cellularoperator_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Nmea2k.NetworkStatus.CellularOperator)
}
#if LANG_CXX11
inline void NetworkStatus::set_cellularoperator(::std::string&& value) {
  
  cellularoperator_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Nmea2k.NetworkStatus.CellularOperator)
}
#endif
inline void NetworkStatus::set_cellularoperator(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  cellularoperator_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Nmea2k.NetworkStatus.CellularOperator)
}
inline void NetworkStatus::set_cellularoperator(const char* value, size_t size) {
  
  cellularoperator_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Nmea2k.NetworkStatus.CellularOperator)
}
inline ::std::string* NetworkStatus::mutable_cellularoperator() {
  
  // @@protoc_insertion_point(field_mutable:Nmea2k.NetworkStatus.CellularOperator)
  return cellularoperator_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* NetworkStatus::release_cellularoperator() {
  // @@protoc_insertion_point(field_release:Nmea2k.NetworkStatus.CellularOperator)
  
  return cellularoperator_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NetworkStatus::set_allocated_cellularoperator(::std::string* cellularoperator) {
  if (cellularoperator != NULL) {
    
  } else {
    
  }
  cellularoperator_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cellularoperator);
  // @@protoc_insertion_point(field_set_allocated:Nmea2k.NetworkStatus.CellularOperator)
}

// string CellularType = 24;
inline void NetworkStatus::clear_cellulartype() {
  cellulartype_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& NetworkStatus::cellulartype() const {
  // @@protoc_insertion_point(field_get:Nmea2k.NetworkStatus.CellularType)
  return cellulartype_.GetNoArena();
}
inline void NetworkStatus::set_cellulartype(const ::std::string& value) {
  
  cellulartype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Nmea2k.NetworkStatus.CellularType)
}
#if LANG_CXX11
inline void NetworkStatus::set_cellulartype(::std::string&& value) {
  
  cellulartype_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Nmea2k.NetworkStatus.CellularType)
}
#endif
inline void NetworkStatus::set_cellulartype(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  cellulartype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Nmea2k.NetworkStatus.CellularType)
}
inline void NetworkStatus::set_cellulartype(const char* value, size_t size) {
  
  cellulartype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Nmea2k.NetworkStatus.CellularType)
}
inline ::std::string* NetworkStatus::mutable_cellulartype() {
  
  // @@protoc_insertion_point(field_mutable:Nmea2k.NetworkStatus.CellularType)
  return cellulartype_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* NetworkStatus::release_cellulartype() {
  // @@protoc_insertion_point(field_release:Nmea2k.NetworkStatus.CellularType)
  
  return cellulartype_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NetworkStatus::set_allocated_cellulartype(::std::string* cellulartype) {
  if (cellulartype != NULL) {
    
  } else {
    
  }
  cellulartype_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cellulartype);
  // @@protoc_insertion_point(field_set_allocated:Nmea2k.NetworkStatus.CellularType)
}

// int32 CellularSignalStrengthDbm = 25;
inline void NetworkStatus::clear_cellularsignalstrengthdbm() {
  cellularsignalstrengthdbm_ = 0;
}
inline ::google::protobuf::int32 NetworkStatus::cellularsignalstrengthdbm() const {
  // @@protoc_insertion_point(field_get:Nmea2k.NetworkStatus.CellularSignalStrengthDbm)
  return cellularsignalstrengthdbm_;
}
inline void NetworkStatus::set_cellularsignalstrengthdbm(::google::protobuf::int32 value) {
  
  cellularsignalstrengthdbm_ = value;
  // @@protoc_insertion_point(field_set:Nmea2k.NetworkStatus.CellularSignalStrengthDbm)
}

// string CellularSimIccid = 26;
inline void NetworkStatus::clear_cellularsimiccid() {
  cellularsimiccid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& NetworkStatus::cellularsimiccid() const {
  // @@protoc_insertion_point(field_get:Nmea2k.NetworkStatus.CellularSimIccid)
  return cellularsimiccid_.GetNoArena();
}
inline void NetworkStatus::set_cellularsimiccid(const ::std::string& value) {
  
  cellularsimiccid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Nmea2k.NetworkStatus.CellularSimIccid)
}
#if LANG_CXX11
inline void NetworkStatus::set_cellularsimiccid(::std::string&& value) {
  
  cellularsimiccid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Nmea2k.NetworkStatus.CellularSimIccid)
}
#endif
inline void NetworkStatus::set_cellularsimiccid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  cellularsimiccid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Nmea2k.NetworkStatus.CellularSimIccid)
}
inline void NetworkStatus::set_cellularsimiccid(const char* value, size_t size) {
  
  cellularsimiccid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Nmea2k.NetworkStatus.CellularSimIccid)
}
inline ::std::string* NetworkStatus::mutable_cellularsimiccid() {
  
  // @@protoc_insertion_point(field_mutable:Nmea2k.NetworkStatus.CellularSimIccid)
  return cellularsimiccid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* NetworkStatus::release_cellularsimiccid() {
  // @@protoc_insertion_point(field_release:Nmea2k.NetworkStatus.CellularSimIccid)
  
  return cellularsimiccid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NetworkStatus::set_allocated_cellularsimiccid(::std::string* cellularsimiccid) {
  if (cellularsimiccid != NULL) {
    
  } else {
    
  }
  cellularsimiccid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cellularsimiccid);
  // @@protoc_insertion_point(field_set_allocated:Nmea2k.NetworkStatus.CellularSimIccid)
}

// string CellularSimEid = 27;
inline void NetworkStatus::clear_cellularsimeid() {
  cellularsimeid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& NetworkStatus::cellularsimeid() const {
  // @@protoc_insertion_point(field_get:Nmea2k.NetworkStatus.CellularSimEid)
  return cellularsimeid_.GetNoArena();
}
inline void NetworkStatus::set_cellularsimeid(const ::std::string& value) {
  
  cellularsimeid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Nmea2k.NetworkStatus.CellularSimEid)
}
#if LANG_CXX11
inline void NetworkStatus::set_cellularsimeid(::std::string&& value) {
  
  cellularsimeid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Nmea2k.NetworkStatus.CellularSimEid)
}
#endif
inline void NetworkStatus::set_cellularsimeid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  cellularsimeid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Nmea2k.NetworkStatus.CellularSimEid)
}
inline void NetworkStatus::set_cellularsimeid(const char* value, size_t size) {
  
  cellularsimeid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Nmea2k.NetworkStatus.CellularSimEid)
}
inline ::std::string* NetworkStatus::mutable_cellularsimeid() {
  
  // @@protoc_insertion_point(field_mutable:Nmea2k.NetworkStatus.CellularSimEid)
  return cellularsimeid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* NetworkStatus::release_cellularsimeid() {
  // @@protoc_insertion_point(field_release:Nmea2k.NetworkStatus.CellularSimEid)
  
  return cellularsimeid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NetworkStatus::set_allocated_cellularsimeid(::std::string* cellularsimeid) {
  if (cellularsimeid != NULL) {
    
  } else {
    
  }
  cellularsimeid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cellularsimeid);
  // @@protoc_insertion_point(field_set_allocated:Nmea2k.NetworkStatus.CellularSimEid)
}

// string CellularSimImsi = 28;
inline void NetworkStatus::clear_cellularsimimsi() {
  cellularsimimsi_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& NetworkStatus::cellularsimimsi() const {
  // @@protoc_insertion_point(field_get:Nmea2k.NetworkStatus.CellularSimImsi)
  return cellularsimimsi_.GetNoArena();
}
inline void NetworkStatus::set_cellularsimimsi(const ::std::string& value) {
  
  cellularsimimsi_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Nmea2k.NetworkStatus.CellularSimImsi)
}
#if LANG_CXX11
inline void NetworkStatus::set_cellularsimimsi(::std::string&& value) {
  
  cellularsimimsi_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Nmea2k.NetworkStatus.CellularSimImsi)
}
#endif
inline void NetworkStatus::set_cellularsimimsi(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  cellularsimimsi_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Nmea2k.NetworkStatus.CellularSimImsi)
}
inline void NetworkStatus::set_cellularsimimsi(const char* value, size_t size) {
  
  cellularsimimsi_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Nmea2k.NetworkStatus.CellularSimImsi)
}
inline ::std::string* NetworkStatus::mutable_cellularsimimsi() {
  
  // @@protoc_insertion_point(field_mutable:Nmea2k.NetworkStatus.CellularSimImsi)
  return cellularsimimsi_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* NetworkStatus::release_cellularsimimsi() {
  // @@protoc_insertion_point(field_release:Nmea2k.NetworkStatus.CellularSimImsi)
  
  return cellularsimimsi_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NetworkStatus::set_allocated_cellularsimimsi(::std::string* cellularsimimsi) {
  if (cellularsimimsi != NULL) {
    
  } else {
    
  }
  cellularsimimsi_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cellularsimimsi);
  // @@protoc_insertion_point(field_set_allocated:Nmea2k.NetworkStatus.CellularSimImsi)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// SnapshotInstanceIdMap

// map<uint32, .Nmea2k.Circuit> Circuits = 1;
inline int SnapshotInstanceIdMap::circuits_size() const {
  return circuits_.size();
}
inline void SnapshotInstanceIdMap::clear_circuits() {
  circuits_.Clear();
}
inline const ::google::protobuf::Map< ::google::protobuf::uint32, ::Nmea2k::Circuit >&
SnapshotInstanceIdMap::circuits() const {
  // @@protoc_insertion_point(field_map:Nmea2k.SnapshotInstanceIdMap.Circuits)
  return circuits_.GetMap();
}
inline ::google::protobuf::Map< ::google::protobuf::uint32, ::Nmea2k::Circuit >*
SnapshotInstanceIdMap::mutable_circuits() {
  // @@protoc_insertion_point(field_mutable_map:Nmea2k.SnapshotInstanceIdMap.Circuits)
  return circuits_.MutableMap();
}

// map<uint32, .Nmea2k.Circuit> Modes = 2;
inline int SnapshotInstanceIdMap::modes_size() const {
  return modes_.size();
}
inline void SnapshotInstanceIdMap::clear_modes() {
  modes_.Clear();
}
inline const ::google::protobuf::Map< ::google::protobuf::uint32, ::Nmea2k::Circuit >&
SnapshotInstanceIdMap::modes() const {
  // @@protoc_insertion_point(field_map:Nmea2k.SnapshotInstanceIdMap.Modes)
  return modes_.GetMap();
}
inline ::google::protobuf::Map< ::google::protobuf::uint32, ::Nmea2k::Circuit >*
SnapshotInstanceIdMap::mutable_modes() {
  // @@protoc_insertion_point(field_mutable_map:Nmea2k.SnapshotInstanceIdMap.Modes)
  return modes_.MutableMap();
}

// map<uint32, .Nmea2k.Tank> Tanks = 3;
inline int SnapshotInstanceIdMap::tanks_size() const {
  return tanks_.size();
}
inline void SnapshotInstanceIdMap::clear_tanks() {
  tanks_.Clear();
}
inline const ::google::protobuf::Map< ::google::protobuf::uint32, ::Nmea2k::Tank >&
SnapshotInstanceIdMap::tanks() const {
  // @@protoc_insertion_point(field_map:Nmea2k.SnapshotInstanceIdMap.Tanks)
  return tanks_.GetMap();
}
inline ::google::protobuf::Map< ::google::protobuf::uint32, ::Nmea2k::Tank >*
SnapshotInstanceIdMap::mutable_tanks() {
  // @@protoc_insertion_point(field_mutable_map:Nmea2k.SnapshotInstanceIdMap.Tanks)
  return tanks_.MutableMap();
}

// map<uint32, .Nmea2k.Engine> Engines = 4;
inline int SnapshotInstanceIdMap::engines_size() const {
  return engines_.size();
}
inline void SnapshotInstanceIdMap::clear_engines() {
  engines_.Clear();
}
inline const ::google::protobuf::Map< ::google::protobuf::uint32, ::Nmea2k::Engine >&
SnapshotInstanceIdMap::engines() const {
  // @@protoc_insertion_point(field_map:Nmea2k.SnapshotInstanceIdMap.Engines)
  return engines_.GetMap();
}
inline ::google::protobuf::Map< ::google::protobuf::uint32, ::Nmea2k::Engine >*
SnapshotInstanceIdMap::mutable_engines() {
  // @@protoc_insertion_point(field_mutable_map:Nmea2k.SnapshotInstanceIdMap.Engines)
  return engines_.MutableMap();
}

// map<uint32, .Nmea2k.AC> AC = 5;
inline int SnapshotInstanceIdMap::ac_size() const {
  return ac_.size();
}
inline void SnapshotInstanceIdMap::clear_ac() {
  ac_.Clear();
}
inline const ::google::protobuf::Map< ::google::protobuf::uint32, ::Nmea2k::AC >&
SnapshotInstanceIdMap::ac() const {
  // @@protoc_insertion_point(field_map:Nmea2k.SnapshotInstanceIdMap.AC)
  return ac_.GetMap();
}
inline ::google::protobuf::Map< ::google::protobuf::uint32, ::Nmea2k::AC >*
SnapshotInstanceIdMap::mutable_ac() {
  // @@protoc_insertion_point(field_mutable_map:Nmea2k.SnapshotInstanceIdMap.AC)
  return ac_.MutableMap();
}

// map<uint32, .Nmea2k.DC> DC = 6;
inline int SnapshotInstanceIdMap::dc_size() const {
  return dc_.size();
}
inline void SnapshotInstanceIdMap::clear_dc() {
  dc_.Clear();
}
inline const ::google::protobuf::Map< ::google::protobuf::uint32, ::Nmea2k::DC >&
SnapshotInstanceIdMap::dc() const {
  // @@protoc_insertion_point(field_map:Nmea2k.SnapshotInstanceIdMap.DC)
  return dc_.GetMap();
}
inline ::google::protobuf::Map< ::google::protobuf::uint32, ::Nmea2k::DC >*
SnapshotInstanceIdMap::mutable_dc() {
  // @@protoc_insertion_point(field_mutable_map:Nmea2k.SnapshotInstanceIdMap.DC)
  return dc_.MutableMap();
}

// map<uint32, .Nmea2k.Temperature> Temperatures = 7;
inline int SnapshotInstanceIdMap::temperatures_size() const {
  return temperatures_.size();
}
inline void SnapshotInstanceIdMap::clear_temperatures() {
  temperatures_.Clear();
}
inline const ::google::protobuf::Map< ::google::protobuf::uint32, ::Nmea2k::Temperature >&
SnapshotInstanceIdMap::temperatures() const {
  // @@protoc_insertion_point(field_map:Nmea2k.SnapshotInstanceIdMap.Temperatures)
  return temperatures_.GetMap();
}
inline ::google::protobuf::Map< ::google::protobuf::uint32, ::Nmea2k::Temperature >*
SnapshotInstanceIdMap::mutable_temperatures() {
  // @@protoc_insertion_point(field_mutable_map:Nmea2k.SnapshotInstanceIdMap.Temperatures)
  return temperatures_.MutableMap();
}

// map<uint32, .Nmea2k.Pressure> Pressures = 8;
inline int SnapshotInstanceIdMap::pressures_size() const {
  return pressures_.size();
}
inline void SnapshotInstanceIdMap::clear_pressures() {
  pressures_.Clear();
}
inline const ::google::protobuf::Map< ::google::protobuf::uint32, ::Nmea2k::Pressure >&
SnapshotInstanceIdMap::pressures() const {
  // @@protoc_insertion_point(field_map:Nmea2k.SnapshotInstanceIdMap.Pressures)
  return pressures_.GetMap();
}
inline ::google::protobuf::Map< ::google::protobuf::uint32, ::Nmea2k::Pressure >*
SnapshotInstanceIdMap::mutable_pressures() {
  // @@protoc_insertion_point(field_mutable_map:Nmea2k.SnapshotInstanceIdMap.Pressures)
  return pressures_.MutableMap();
}

// map<uint32, .Nmea2k.HVAC> Hvacs = 9;
inline int SnapshotInstanceIdMap::hvacs_size() const {
  return hvacs_.size();
}
inline void SnapshotInstanceIdMap::clear_hvacs() {
  hvacs_.Clear();
}
inline const ::google::protobuf::Map< ::google::protobuf::uint32, ::Nmea2k::HVAC >&
SnapshotInstanceIdMap::hvacs() const {
  // @@protoc_insertion_point(field_map:Nmea2k.SnapshotInstanceIdMap.Hvacs)
  return hvacs_.GetMap();
}
inline ::google::protobuf::Map< ::google::protobuf::uint32, ::Nmea2k::HVAC >*
SnapshotInstanceIdMap::mutable_hvacs() {
  // @@protoc_insertion_point(field_mutable_map:Nmea2k.SnapshotInstanceIdMap.Hvacs)
  return hvacs_.MutableMap();
}

// map<uint32, .Nmea2k.ZipdeeAwning> Awnings = 10;
inline int SnapshotInstanceIdMap::awnings_size() const {
  return awnings_.size();
}
inline void SnapshotInstanceIdMap::clear_awnings() {
  awnings_.Clear();
}
inline const ::google::protobuf::Map< ::google::protobuf::uint32, ::Nmea2k::ZipdeeAwning >&
SnapshotInstanceIdMap::awnings() const {
  // @@protoc_insertion_point(field_map:Nmea2k.SnapshotInstanceIdMap.Awnings)
  return awnings_.GetMap();
}
inline ::google::protobuf::Map< ::google::protobuf::uint32, ::Nmea2k::ZipdeeAwning >*
SnapshotInstanceIdMap::mutable_awnings() {
  // @@protoc_insertion_point(field_mutable_map:Nmea2k.SnapshotInstanceIdMap.Awnings)
  return awnings_.MutableMap();
}

// map<uint32, .Nmea2k.ThirdPartyGenerator> ThirdPartyGenerators = 11;
inline int SnapshotInstanceIdMap::thirdpartygenerators_size() const {
  return thirdpartygenerators_.size();
}
inline void SnapshotInstanceIdMap::clear_thirdpartygenerators() {
  thirdpartygenerators_.Clear();
}
inline const ::google::protobuf::Map< ::google::protobuf::uint32, ::Nmea2k::ThirdPartyGenerator >&
SnapshotInstanceIdMap::thirdpartygenerators() const {
  // @@protoc_insertion_point(field_map:Nmea2k.SnapshotInstanceIdMap.ThirdPartyGenerators)
  return thirdpartygenerators_.GetMap();
}
inline ::google::protobuf::Map< ::google::protobuf::uint32, ::Nmea2k::ThirdPartyGenerator >*
SnapshotInstanceIdMap::mutable_thirdpartygenerators() {
  // @@protoc_insertion_point(field_mutable_map:Nmea2k.SnapshotInstanceIdMap.ThirdPartyGenerators)
  return thirdpartygenerators_.MutableMap();
}

// map<uint32, .Nmea2k.InverterCharger> InverterChargers = 12;
inline int SnapshotInstanceIdMap::inverterchargers_size() const {
  return inverterchargers_.size();
}
inline void SnapshotInstanceIdMap::clear_inverterchargers() {
  inverterchargers_.Clear();
}
inline const ::google::protobuf::Map< ::google::protobuf::uint32, ::Nmea2k::InverterCharger >&
SnapshotInstanceIdMap::inverterchargers() const {
  // @@protoc_insertion_point(field_map:Nmea2k.SnapshotInstanceIdMap.InverterChargers)
  return inverterchargers_.GetMap();
}
inline ::google::protobuf::Map< ::google::protobuf::uint32, ::Nmea2k::InverterCharger >*
SnapshotInstanceIdMap::mutable_inverterchargers() {
  // @@protoc_insertion_point(field_mutable_map:Nmea2k.SnapshotInstanceIdMap.InverterChargers)
  return inverterchargers_.MutableMap();
}

// map<uint32, .Nmea2k.TyrePressure> Tyrepressures = 13;
inline int SnapshotInstanceIdMap::tyrepressures_size() const {
  return tyrepressures_.size();
}
inline void SnapshotInstanceIdMap::clear_tyrepressures() {
  tyrepressures_.Clear();
}
inline const ::google::protobuf::Map< ::google::protobuf::uint32, ::Nmea2k::TyrePressure >&
SnapshotInstanceIdMap::tyrepressures() const {
  // @@protoc_insertion_point(field_map:Nmea2k.SnapshotInstanceIdMap.Tyrepressures)
  return tyrepressures_.GetMap();
}
inline ::google::protobuf::Map< ::google::protobuf::uint32, ::Nmea2k::TyrePressure >*
SnapshotInstanceIdMap::mutable_tyrepressures() {
  // @@protoc_insertion_point(field_mutable_map:Nmea2k.SnapshotInstanceIdMap.Tyrepressures)
  return tyrepressures_.MutableMap();
}

// map<uint32, .Nmea2k.AudioStereo> AudioStereos = 14;
inline int SnapshotInstanceIdMap::audiostereos_size() const {
  return audiostereos_.size();
}
inline void SnapshotInstanceIdMap::clear_audiostereos() {
  audiostereos_.Clear();
}
inline const ::google::protobuf::Map< ::google::protobuf::uint32, ::Nmea2k::AudioStereo >&
SnapshotInstanceIdMap::audiostereos() const {
  // @@protoc_insertion_point(field_map:Nmea2k.SnapshotInstanceIdMap.AudioStereos)
  return audiostereos_.GetMap();
}
inline ::google::protobuf::Map< ::google::protobuf::uint32, ::Nmea2k::AudioStereo >*
SnapshotInstanceIdMap::mutable_audiostereos() {
  // @@protoc_insertion_point(field_mutable_map:Nmea2k.SnapshotInstanceIdMap.AudioStereos)
  return audiostereos_.MutableMap();
}

// map<uint32, .Nmea2k.ACMainContactor> ACMainContactors = 15;
inline int SnapshotInstanceIdMap::acmaincontactors_size() const {
  return acmaincontactors_.size();
}
inline void SnapshotInstanceIdMap::clear_acmaincontactors() {
  acmaincontactors_.Clear();
}
inline const ::google::protobuf::Map< ::google::protobuf::uint32, ::Nmea2k::ACMainContactor >&
SnapshotInstanceIdMap::acmaincontactors() const {
  // @@protoc_insertion_point(field_map:Nmea2k.SnapshotInstanceIdMap.ACMainContactors)
  return acmaincontactors_.GetMap();
}
inline ::google::protobuf::Map< ::google::protobuf::uint32, ::Nmea2k::ACMainContactor >*
SnapshotInstanceIdMap::mutable_acmaincontactors() {
  // @@protoc_insertion_point(field_mutable_map:Nmea2k.SnapshotInstanceIdMap.ACMainContactors)
  return acmaincontactors_.MutableMap();
}

// map<uint32, .Nmea2k.GNSS> GNSS = 16;
inline int SnapshotInstanceIdMap::gnss_size() const {
  return gnss_.size();
}
inline void SnapshotInstanceIdMap::clear_gnss() {
  gnss_.Clear();
}
inline const ::google::protobuf::Map< ::google::protobuf::uint32, ::Nmea2k::GNSS >&
SnapshotInstanceIdMap::gnss() const {
  // @@protoc_insertion_point(field_map:Nmea2k.SnapshotInstanceIdMap.GNSS)
  return gnss_.GetMap();
}
inline ::google::protobuf::Map< ::google::protobuf::uint32, ::Nmea2k::GNSS >*
SnapshotInstanceIdMap::mutable_gnss() {
  // @@protoc_insertion_point(field_mutable_map:Nmea2k.SnapshotInstanceIdMap.GNSS)
  return gnss_.MutableMap();
}

// map<uint32, .Nmea2k.MonitoringKeyValue> MonitoringKeyValue = 17;
inline int SnapshotInstanceIdMap::monitoringkeyvalue_size() const {
  return monitoringkeyvalue_.size();
}
inline void SnapshotInstanceIdMap::clear_monitoringkeyvalue() {
  monitoringkeyvalue_.Clear();
}
inline const ::google::protobuf::Map< ::google::protobuf::uint32, ::Nmea2k::MonitoringKeyValue >&
SnapshotInstanceIdMap::monitoringkeyvalue() const {
  // @@protoc_insertion_point(field_map:Nmea2k.SnapshotInstanceIdMap.MonitoringKeyValue)
  return monitoringkeyvalue_.GetMap();
}
inline ::google::protobuf::Map< ::google::protobuf::uint32, ::Nmea2k::MonitoringKeyValue >*
SnapshotInstanceIdMap::mutable_monitoringkeyvalue() {
  // @@protoc_insertion_point(field_mutable_map:Nmea2k.SnapshotInstanceIdMap.MonitoringKeyValue)
  return monitoringkeyvalue_.MutableMap();
}

// map<uint32, .Nmea2k.BinaryLogicState> BinaryLogicState = 18;
inline int SnapshotInstanceIdMap::binarylogicstate_size() const {
  return binarylogicstate_.size();
}
inline void SnapshotInstanceIdMap::clear_binarylogicstate() {
  binarylogicstate_.Clear();
}
inline const ::google::protobuf::Map< ::google::protobuf::uint32, ::Nmea2k::BinaryLogicState >&
SnapshotInstanceIdMap::binarylogicstate() const {
  // @@protoc_insertion_point(field_map:Nmea2k.SnapshotInstanceIdMap.BinaryLogicState)
  return binarylogicstate_.GetMap();
}
inline ::google::protobuf::Map< ::google::protobuf::uint32, ::Nmea2k::BinaryLogicState >*
SnapshotInstanceIdMap::mutable_binarylogicstate() {
  // @@protoc_insertion_point(field_mutable_map:Nmea2k.SnapshotInstanceIdMap.BinaryLogicState)
  return binarylogicstate_.MutableMap();
}

// .Nmea2k.NetworkStatus NetworkStatus = 19;
inline bool SnapshotInstanceIdMap::has_networkstatus() const {
  return this != internal_default_instance() && networkstatus_ != NULL;
}
inline void SnapshotInstanceIdMap::clear_networkstatus() {
  if (GetArenaNoVirtual() == NULL && networkstatus_ != NULL) {
    delete networkstatus_;
  }
  networkstatus_ = NULL;
}
inline const ::Nmea2k::NetworkStatus& SnapshotInstanceIdMap::_internal_networkstatus() const {
  return *networkstatus_;
}
inline const ::Nmea2k::NetworkStatus& SnapshotInstanceIdMap::networkstatus() const {
  const ::Nmea2k::NetworkStatus* p = networkstatus_;
  // @@protoc_insertion_point(field_get:Nmea2k.SnapshotInstanceIdMap.NetworkStatus)
  return p != NULL ? *p : *reinterpret_cast<const ::Nmea2k::NetworkStatus*>(
      &::Nmea2k::_NetworkStatus_default_instance_);
}
inline ::Nmea2k::NetworkStatus* SnapshotInstanceIdMap::release_networkstatus() {
  // @@protoc_insertion_point(field_release:Nmea2k.SnapshotInstanceIdMap.NetworkStatus)
  
  ::Nmea2k::NetworkStatus* temp = networkstatus_;
  networkstatus_ = NULL;
  return temp;
}
inline ::Nmea2k::NetworkStatus* SnapshotInstanceIdMap::mutable_networkstatus() {
  
  if (networkstatus_ == NULL) {
    auto* p = CreateMaybeMessage<::Nmea2k::NetworkStatus>(GetArenaNoVirtual());
    networkstatus_ = p;
  }
  // @@protoc_insertion_point(field_mutable:Nmea2k.SnapshotInstanceIdMap.NetworkStatus)
  return networkstatus_;
}
inline void SnapshotInstanceIdMap::set_allocated_networkstatus(::Nmea2k::NetworkStatus* networkstatus) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete networkstatus_;
  }
  if (networkstatus) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      networkstatus = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, networkstatus, submessage_arena);
    }
    
  } else {
    
  }
  networkstatus_ = networkstatus;
  // @@protoc_insertion_point(field_set_allocated:Nmea2k.SnapshotInstanceIdMap.NetworkStatus)
}

// string TimeStamp = 20;
inline void SnapshotInstanceIdMap::clear_timestamp() {
  timestamp_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SnapshotInstanceIdMap::timestamp() const {
  // @@protoc_insertion_point(field_get:Nmea2k.SnapshotInstanceIdMap.TimeStamp)
  return timestamp_.GetNoArena();
}
inline void SnapshotInstanceIdMap::set_timestamp(const ::std::string& value) {
  
  timestamp_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Nmea2k.SnapshotInstanceIdMap.TimeStamp)
}
#if LANG_CXX11
inline void SnapshotInstanceIdMap::set_timestamp(::std::string&& value) {
  
  timestamp_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Nmea2k.SnapshotInstanceIdMap.TimeStamp)
}
#endif
inline void SnapshotInstanceIdMap::set_timestamp(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  timestamp_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Nmea2k.SnapshotInstanceIdMap.TimeStamp)
}
inline void SnapshotInstanceIdMap::set_timestamp(const char* value, size_t size) {
  
  timestamp_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Nmea2k.SnapshotInstanceIdMap.TimeStamp)
}
inline ::std::string* SnapshotInstanceIdMap::mutable_timestamp() {
  
  // @@protoc_insertion_point(field_mutable:Nmea2k.SnapshotInstanceIdMap.TimeStamp)
  return timestamp_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SnapshotInstanceIdMap::release_timestamp() {
  // @@protoc_insertion_point(field_release:Nmea2k.SnapshotInstanceIdMap.TimeStamp)
  
  return timestamp_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SnapshotInstanceIdMap::set_allocated_timestamp(::std::string* timestamp) {
  if (timestamp != NULL) {
    
  } else {
    
  }
  timestamp_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), timestamp);
  // @@protoc_insertion_point(field_set_allocated:Nmea2k.SnapshotInstanceIdMap.TimeStamp)
}

// -------------------------------------------------------------------

// HealthStatus

// .Nmea2k.HealthStatus.eHealth ServiceThread = 1;
inline void HealthStatus::clear_servicethread() {
  servicethread_ = 0;
}
inline ::Nmea2k::HealthStatus_eHealth HealthStatus::servicethread() const {
  // @@protoc_insertion_point(field_get:Nmea2k.HealthStatus.ServiceThread)
  return static_cast< ::Nmea2k::HealthStatus_eHealth >(servicethread_);
}
inline void HealthStatus::set_servicethread(::Nmea2k::HealthStatus_eHealth value) {
  
  servicethread_ = value;
  // @@protoc_insertion_point(field_set:Nmea2k.HealthStatus.ServiceThread)
}

// .Nmea2k.HealthStatus.eHealth NetworkThread = 2;
inline void HealthStatus::clear_networkthread() {
  networkthread_ = 0;
}
inline ::Nmea2k::HealthStatus_eHealth HealthStatus::networkthread() const {
  // @@protoc_insertion_point(field_get:Nmea2k.HealthStatus.NetworkThread)
  return static_cast< ::Nmea2k::HealthStatus_eHealth >(networkthread_);
}
inline void HealthStatus::set_networkthread(::Nmea2k::HealthStatus_eHealth value) {
  
  networkthread_ = value;
  // @@protoc_insertion_point(field_set:Nmea2k.HealthStatus.NetworkThread)
}

// .Nmea2k.HealthStatus.eHealth SCThread = 3;
inline void HealthStatus::clear_scthread() {
  scthread_ = 0;
}
inline ::Nmea2k::HealthStatus_eHealth HealthStatus::scthread() const {
  // @@protoc_insertion_point(field_get:Nmea2k.HealthStatus.SCThread)
  return static_cast< ::Nmea2k::HealthStatus_eHealth >(scthread_);
}
inline void HealthStatus::set_scthread(::Nmea2k::HealthStatus_eHealth value) {
  
  scthread_ = value;
  // @@protoc_insertion_point(field_set:Nmea2k.HealthStatus.SCThread)
}

// .Nmea2k.HealthStatus.eHealth GNSSThread = 4;
inline void HealthStatus::clear_gnssthread() {
  gnssthread_ = 0;
}
inline ::Nmea2k::HealthStatus_eHealth HealthStatus::gnssthread() const {
  // @@protoc_insertion_point(field_get:Nmea2k.HealthStatus.GNSSThread)
  return static_cast< ::Nmea2k::HealthStatus_eHealth >(gnssthread_);
}
inline void HealthStatus::set_gnssthread(::Nmea2k::HealthStatus_eHealth value) {
  
  gnssthread_ = value;
  // @@protoc_insertion_point(field_set:Nmea2k.HealthStatus.GNSSThread)
}

// .Nmea2k.HealthStatus.eHealth GNSSLatLon = 5;
inline void HealthStatus::clear_gnsslatlon() {
  gnsslatlon_ = 0;
}
inline ::Nmea2k::HealthStatus_eHealth HealthStatus::gnsslatlon() const {
  // @@protoc_insertion_point(field_get:Nmea2k.HealthStatus.GNSSLatLon)
  return static_cast< ::Nmea2k::HealthStatus_eHealth >(gnsslatlon_);
}
inline void HealthStatus::set_gnsslatlon(::Nmea2k::HealthStatus_eHealth value) {
  
  gnsslatlon_ = value;
  // @@protoc_insertion_point(field_set:Nmea2k.HealthStatus.GNSSLatLon)
}

// .Nmea2k.HealthStatus.eHealth GNSSFix = 6;
inline void HealthStatus::clear_gnssfix() {
  gnssfix_ = 0;
}
inline ::Nmea2k::HealthStatus_eHealth HealthStatus::gnssfix() const {
  // @@protoc_insertion_point(field_get:Nmea2k.HealthStatus.GNSSFix)
  return static_cast< ::Nmea2k::HealthStatus_eHealth >(gnssfix_);
}
inline void HealthStatus::set_gnssfix(::Nmea2k::HealthStatus_eHealth value) {
  
  gnssfix_ = value;
  // @@protoc_insertion_point(field_set:Nmea2k.HealthStatus.GNSSFix)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace Nmea2k

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::Nmea2k::Geofence_eGnssConfidenceLevel> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Nmea2k::Geofence_eGnssConfidenceLevel>() {
  return ::Nmea2k::Geofence_eGnssConfidenceLevel_descriptor();
}
template <> struct is_proto_enum< ::Nmea2k::PsvConfiguration_eConfigType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Nmea2k::PsvConfiguration_eConfigType>() {
  return ::Nmea2k::PsvConfiguration_eConfigType_descriptor();
}
template <> struct is_proto_enum< ::Nmea2k::FavoriteRequest_eActionType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Nmea2k::FavoriteRequest_eActionType>() {
  return ::Nmea2k::FavoriteRequest_eActionType_descriptor();
}
template <> struct is_proto_enum< ::Nmea2k::DataIndex_eIndexType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Nmea2k::DataIndex_eIndexType>() {
  return ::Nmea2k::DataIndex_eIndexType_descriptor();
}
template <> struct is_proto_enum< ::Nmea2k::AlarmEvent_eActionType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Nmea2k::AlarmEvent_eActionType>() {
  return ::Nmea2k::AlarmEvent_eActionType_descriptor();
}
template <> struct is_proto_enum< ::Nmea2k::AlarmRequest_eAlarmStringType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Nmea2k::AlarmRequest_eAlarmStringType>() {
  return ::Nmea2k::AlarmRequest_eAlarmStringType_descriptor();
}
template <> struct is_proto_enum< ::Nmea2k::CategoryRequest_eCategoryType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Nmea2k::CategoryRequest_eCategoryType>() {
  return ::Nmea2k::CategoryRequest_eCategoryType_descriptor();
}
template <> struct is_proto_enum< ::Nmea2k::FileRequest_eResourceType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Nmea2k::FileRequest_eResourceType>() {
  return ::Nmea2k::FileRequest_eResourceType_descriptor();
}
template <> struct is_proto_enum< ::Nmea2k::FileRequest_eFileType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Nmea2k::FileRequest_eFileType>() {
  return ::Nmea2k::FileRequest_eFileType_descriptor();
}
template <> struct is_proto_enum< ::Nmea2k::FileResult_eFileStatus> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Nmea2k::FileResult_eFileStatus>() {
  return ::Nmea2k::FileResult_eFileStatus_descriptor();
}
template <> struct is_proto_enum< ::Nmea2k::Event_eEventType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Nmea2k::Event_eEventType>() {
  return ::Nmea2k::Event_eEventType_descriptor();
}
template <> struct is_proto_enum< ::Nmea2k::SettingRequest_eSettingType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Nmea2k::SettingRequest_eSettingType>() {
  return ::Nmea2k::SettingRequest_eSettingType_descriptor();
}
template <> struct is_proto_enum< ::Nmea2k::OperationRequest_eOperationType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Nmea2k::OperationRequest_eOperationType>() {
  return ::Nmea2k::OperationRequest_eOperationType_descriptor();
}
template <> struct is_proto_enum< ::Nmea2k::ConfigRequest_eConfigType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Nmea2k::ConfigRequest_eConfigType>() {
  return ::Nmea2k::ConfigRequest_eConfigType_descriptor();
}
template <> struct is_proto_enum< ::Nmea2k::Alarm_eAlarmType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Nmea2k::Alarm_eAlarmType>() {
  return ::Nmea2k::Alarm_eAlarmType_descriptor();
}
template <> struct is_proto_enum< ::Nmea2k::Alarm_eSeverityType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Nmea2k::Alarm_eSeverityType>() {
  return ::Nmea2k::Alarm_eSeverityType_descriptor();
}
template <> struct is_proto_enum< ::Nmea2k::Alarm_eStateType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Nmea2k::Alarm_eStateType>() {
  return ::Nmea2k::Alarm_eStateType_descriptor();
}
template <> struct is_proto_enum< ::Nmea2k::Device_eDeviceType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Nmea2k::Device_eDeviceType>() {
  return ::Nmea2k::Device_eDeviceType_descriptor();
}
template <> struct is_proto_enum< ::Nmea2k::UiRelationshipMsg_eItemType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Nmea2k::UiRelationshipMsg_eItemType>() {
  return ::Nmea2k::UiRelationshipMsg_eItemType_descriptor();
}
template <> struct is_proto_enum< ::Nmea2k::UiRelationshipMsg_eRelationshipType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Nmea2k::UiRelationshipMsg_eRelationshipType>() {
  return ::Nmea2k::UiRelationshipMsg_eRelationshipType_descriptor();
}
template <> struct is_proto_enum< ::Nmea2k::MeteringDevice_eDCType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Nmea2k::MeteringDevice_eDCType>() {
  return ::Nmea2k::MeteringDevice_eDCType_descriptor();
}
template <> struct is_proto_enum< ::Nmea2k::MeteringDevice_eACLine> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Nmea2k::MeteringDevice_eACLine>() {
  return ::Nmea2k::MeteringDevice_eACLine_descriptor();
}
template <> struct is_proto_enum< ::Nmea2k::MeteringDevice_eACType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Nmea2k::MeteringDevice_eACType>() {
  return ::Nmea2k::MeteringDevice_eACType_descriptor();
}
template <> struct is_proto_enum< ::Nmea2k::MonitoringType_eTankType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Nmea2k::MonitoringType_eTankType>() {
  return ::Nmea2k::MonitoringType_eTankType_descriptor();
}
template <> struct is_proto_enum< ::Nmea2k::MonitoringType_ePressureType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Nmea2k::MonitoringType_ePressureType>() {
  return ::Nmea2k::MonitoringType_ePressureType_descriptor();
}
template <> struct is_proto_enum< ::Nmea2k::MonitoringType_eTemperatureType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Nmea2k::MonitoringType_eTemperatureType>() {
  return ::Nmea2k::MonitoringType_eTemperatureType_descriptor();
}
template <> struct is_proto_enum< ::Nmea2k::ACMainContactorDevice_eACInputType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Nmea2k::ACMainContactorDevice_eACInputType>() {
  return ::Nmea2k::ACMainContactorDevice_eACInputType_descriptor();
}
template <> struct is_proto_enum< ::Nmea2k::CircuitLoad_eControlType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Nmea2k::CircuitLoad_eControlType>() {
  return ::Nmea2k::CircuitLoad_eControlType_descriptor();
}
template <> struct is_proto_enum< ::Nmea2k::CircuitDevice_eConfirmType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Nmea2k::CircuitDevice_eConfirmType>() {
  return ::Nmea2k::CircuitDevice_eConfirmType_descriptor();
}
template <> struct is_proto_enum< ::Nmea2k::CircuitDevice_eCircuitType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Nmea2k::CircuitDevice_eCircuitType>() {
  return ::Nmea2k::CircuitDevice_eCircuitType_descriptor();
}
template <> struct is_proto_enum< ::Nmea2k::CircuitDevice_eSwitchType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Nmea2k::CircuitDevice_eSwitchType>() {
  return ::Nmea2k::CircuitDevice_eSwitchType_descriptor();
}
template <> struct is_proto_enum< ::Nmea2k::CircuitDevice_eModeIcon> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Nmea2k::CircuitDevice_eModeIcon>() {
  return ::Nmea2k::CircuitDevice_eModeIcon_descriptor();
}
template <> struct is_proto_enum< ::Nmea2k::EngineDevice_eEngineType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Nmea2k::EngineDevice_eEngineType>() {
  return ::Nmea2k::EngineDevice_eEngineType_descriptor();
}
template <> struct is_proto_enum< ::Nmea2k::SwitchPositiveNegtive_eSwitchPositiveNegtiveMode> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Nmea2k::SwitchPositiveNegtive_eSwitchPositiveNegtiveMode>() {
  return ::Nmea2k::SwitchPositiveNegtive_eSwitchPositiveNegtiveMode_descriptor();
}
template <> struct is_proto_enum< ::Nmea2k::ConfigResult_eConfigResultStatus> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Nmea2k::ConfigResult_eConfigResultStatus>() {
  return ::Nmea2k::ConfigResult_eConfigResultStatus_descriptor();
}
template <> struct is_proto_enum< ::Nmea2k::ControlTypeValueRequest_eHVACType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Nmea2k::ControlTypeValueRequest_eHVACType>() {
  return ::Nmea2k::ControlTypeValueRequest_eHVACType_descriptor();
}
template <> struct is_proto_enum< ::Nmea2k::ControlTypeValueRequest_eFantasticFanType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Nmea2k::ControlTypeValueRequest_eFantasticFanType>() {
  return ::Nmea2k::ControlTypeValueRequest_eFantasticFanType_descriptor();
}
template <> struct is_proto_enum< ::Nmea2k::ControlTypeValueRequest_eAudioStereoType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Nmea2k::ControlTypeValueRequest_eAudioStereoType>() {
  return ::Nmea2k::ControlTypeValueRequest_eAudioStereoType_descriptor();
}
template <> struct is_proto_enum< ::Nmea2k::ControlTypeValueRequest_eAwningType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Nmea2k::ControlTypeValueRequest_eAwningType>() {
  return ::Nmea2k::ControlTypeValueRequest_eAwningType_descriptor();
}
template <> struct is_proto_enum< ::Nmea2k::ControlTypeValueRequest_eShoreFuseType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Nmea2k::ControlTypeValueRequest_eShoreFuseType>() {
  return ::Nmea2k::ControlTypeValueRequest_eShoreFuseType_descriptor();
}
template <> struct is_proto_enum< ::Nmea2k::ControlTypeValueRequest_eThirdPartyGeneratorType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Nmea2k::ControlTypeValueRequest_eThirdPartyGeneratorType>() {
  return ::Nmea2k::ControlTypeValueRequest_eThirdPartyGeneratorType_descriptor();
}
template <> struct is_proto_enum< ::Nmea2k::ControlRequest_eControlType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Nmea2k::ControlRequest_eControlType>() {
  return ::Nmea2k::ControlRequest_eControlType_descriptor();
}
template <> struct is_proto_enum< ::Nmea2k::ControlRequest_eThrowType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Nmea2k::ControlRequest_eThrowType>() {
  return ::Nmea2k::ControlRequest_eThrowType_descriptor();
}
template <> struct is_proto_enum< ::Nmea2k::ControlRequest_eButtonInfoType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Nmea2k::ControlRequest_eButtonInfoType>() {
  return ::Nmea2k::ControlRequest_eButtonInfoType_descriptor();
}
template <> struct is_proto_enum< ::Nmea2k::Request_eRequestType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Nmea2k::Request_eRequestType>() {
  return ::Nmea2k::Request_eRequestType_descriptor();
}
template <> struct is_proto_enum< ::Nmea2k::Result_eResultType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Nmea2k::Result_eResultType>() {
  return ::Nmea2k::Result_eResultType_descriptor();
}
template <> struct is_proto_enum< ::Nmea2k::ValueEngineState_eEngineState> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Nmea2k::ValueEngineState_eEngineState>() {
  return ::Nmea2k::ValueEngineState_eEngineState_descriptor();
}
template <> struct is_proto_enum< ::Nmea2k::ValueEngineState_EngineInstance> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Nmea2k::ValueEngineState_EngineInstance>() {
  return ::Nmea2k::ValueEngineState_EngineInstance_descriptor();
}
template <> struct is_proto_enum< ::Nmea2k::Engine_DiscreteStatus1Mask> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Nmea2k::Engine_DiscreteStatus1Mask>() {
  return ::Nmea2k::Engine_DiscreteStatus1Mask_descriptor();
}
template <> struct is_proto_enum< ::Nmea2k::Engine_DiscreteStatus2Mask> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Nmea2k::Engine_DiscreteStatus2Mask>() {
  return ::Nmea2k::Engine_DiscreteStatus2Mask_descriptor();
}
template <> struct is_proto_enum< ::Nmea2k::ValueFaultState_eFaultState> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Nmea2k::ValueFaultState_eFaultState>() {
  return ::Nmea2k::ValueFaultState_eFaultState_descriptor();
}
template <> struct is_proto_enum< ::Nmea2k::ValueSystemOnState_eSystemOnState> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Nmea2k::ValueSystemOnState_eSystemOnState>() {
  return ::Nmea2k::ValueSystemOnState_eSystemOnState_descriptor();
}
template <> struct is_proto_enum< ::Nmea2k::ValueSourceAvailable_eSourceAvailable> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Nmea2k::ValueSourceAvailable_eSourceAvailable>() {
  return ::Nmea2k::ValueSourceAvailable_eSourceAvailable_descriptor();
}
template <> struct is_proto_enum< ::Nmea2k::ValueContactorOnState_eContactorOnState> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Nmea2k::ValueContactorOnState_eContactorOnState>() {
  return ::Nmea2k::ValueContactorOnState_eContactorOnState_descriptor();
}
template <> struct is_proto_enum< ::Nmea2k::ValueHVACOperatingMode_eHVACOperatingMode> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Nmea2k::ValueHVACOperatingMode_eHVACOperatingMode>() {
  return ::Nmea2k::ValueHVACOperatingMode_eHVACOperatingMode_descriptor();
}
template <> struct is_proto_enum< ::Nmea2k::ValueAwningState_eAwningState> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Nmea2k::ValueAwningState_eAwningState>() {
  return ::Nmea2k::ValueAwningState_eAwningState_descriptor();
}
template <> struct is_proto_enum< ::Nmea2k::ValueGeneratorState_eGeneratorState> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Nmea2k::ValueGeneratorState_eGeneratorState>() {
  return ::Nmea2k::ValueGeneratorState_eGeneratorState_descriptor();
}
template <> struct is_proto_enum< ::Nmea2k::ValueInverterState_eInverterState> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Nmea2k::ValueInverterState_eInverterState>() {
  return ::Nmea2k::ValueInverterState_eInverterState_descriptor();
}
template <> struct is_proto_enum< ::Nmea2k::ValueChargerState_eChargerState> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Nmea2k::ValueChargerState_eChargerState>() {
  return ::Nmea2k::ValueChargerState_eChargerState_descriptor();
}
template <> struct is_proto_enum< ::Nmea2k::ValueInverterChargerEnabled_eInverterChargerEnabled> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Nmea2k::ValueInverterChargerEnabled_eInverterChargerEnabled>() {
  return ::Nmea2k::ValueInverterChargerEnabled_eInverterChargerEnabled_descriptor();
}
template <> struct is_proto_enum< ::Nmea2k::ValueTyreStatus_eTyreStatus> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Nmea2k::ValueTyreStatus_eTyreStatus>() {
  return ::Nmea2k::ValueTyreStatus_eTyreStatus_descriptor();
}
template <> struct is_proto_enum< ::Nmea2k::ValueTyreLimitStatus_eTyreLimitStatus> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Nmea2k::ValueTyreLimitStatus_eTyreLimitStatus>() {
  return ::Nmea2k::ValueTyreLimitStatus_eTyreLimitStatus_descriptor();
}
template <> struct is_proto_enum< ::Nmea2k::ValueAudioSource_eAudioSource> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Nmea2k::ValueAudioSource_eAudioSource>() {
  return ::Nmea2k::ValueAudioSource_eAudioSource_descriptor();
}
template <> struct is_proto_enum< ::Nmea2k::ValueAudioStatus_eAudioStatus> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Nmea2k::ValueAudioStatus_eAudioStatus>() {
  return ::Nmea2k::ValueAudioStatus_eAudioStatus_descriptor();
}
template <> struct is_proto_enum< ::Nmea2k::ValueGNSSMethod_eGNSSMethod> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Nmea2k::ValueGNSSMethod_eGNSSMethod>() {
  return ::Nmea2k::ValueGNSSMethod_eGNSSMethod_descriptor();
}
template <> struct is_proto_enum< ::Nmea2k::ValueGNSSFixType_eGNSSFixType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Nmea2k::ValueGNSSFixType_eGNSSFixType>() {
  return ::Nmea2k::ValueGNSSFixType_eGNSSFixType_descriptor();
}
template <> struct is_proto_enum< ::Nmea2k::HealthStatus_eHealth> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Nmea2k::HealthStatus_eHealth>() {
  return ::Nmea2k::HealthStatus_eHealth_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_Nmea2k_2eproto
