# .github/workflows/create-ota-release.yml
name: 🚀 Create OTA Release

on:
  workflow_dispatch:
    inputs:
      environment:
        description: '🎯 Target Environment'
        type: choice
        options:
          - dev
          - production
        default: 'dev'
        required: true
      
      services_to_include:
        description: '📦 Services (comma-separated: hub-bl654,hub-n2k,hub-tbclient)'
        type: string
        default: 'hub-bl654,hub-n2k,hub-n2kclient,hub-provisioning,hub-tbclient'
        required: true
      
      service_versions:
        description: '🏷️ Versions (service:version pairs: hub-bl654:main,hub-n2k:v1.2.3)'
        type: string
        default: 'hub-bl654:main,hub-n2k:main,hub-n2kclient:main,hub-provisioning:main,hub-tbclient:main'
        required: true
      
      include_hub_ota:
        description: '⚠️ Include hub-ota for self-update'
        type: boolean
        default: false
      
      hub_ota_version:
        description: '└─ hub-ota version (if included)'
        type: string
        default: 'main'
      
      release_notes:
        description: '📝 Release Notes'
        type: string
        required: true

jobs:
  build-release:
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment }}
    
    steps:
      - name: 📋 Parse and Display Configuration
        id: parse
        run: |
          echo "========================================="
          echo "📦 OTA RELEASE BUILD"
          echo "========================================="
          echo "Environment: ${{ inputs.environment }} 🎯"
          echo "Release Engineer: ${{ github.actor }}"
          echo "Build ID: ${{ github.run_id }}"
          echo "Timestamp: $(date -u +%Y-%m-%dT%H:%M:%SZ)"
          echo ""
          echo "Parsing service configuration..."
          echo ""
          
          # Parse services and versions
          cat > parse_config.py << 'EOF'
          import sys
          import json
          import os
          
          services_input = "${{ inputs.services_to_include }}"
          versions_input = "${{ inputs.service_versions }}"
          
          # Parse services list
          services = [s.strip() for s in services_input.split(',') if s.strip()]
          
          # Parse versions into dict
          version_map = {}
          for pair in versions_input.split(','):
              if ':' in pair:
                  service, version = pair.strip().split(':', 1)
                  version_map[service.strip()] = version.strip()
          
          # Build final configuration
          config = {}
          for service in services:
              config[service] = version_map.get(service, 'main')
          
          # Add hub-ota if requested
          if "${{ inputs.include_hub_ota }}" == "true":
              config["hub-ota"] = "${{ inputs.hub_ota_version }}"
          
          # Write to GitHub output file properly
          with open(os.environ['GITHUB_OUTPUT'], 'a') as f:
              f.write(f"SERVICE_CONFIG<<EOF\n")
              f.write(json.dumps(config, indent=2))
              f.write("\nEOF\n")
          
          # Display for logs (to stderr to avoid interfering with output)
          print("\nServices to Include:", file=sys.stderr)
          print("-------------------", file=sys.stderr)
          for service, version in config.items():
              marker = "⚠️" if service == "hub-ota" else "✓"
              print(f"  {marker} {service} @ {version}", file=sys.stderr)
          
          print(f"\nTotal services: {len(config)}", file=sys.stderr)
          EOF
          
          python3 parse_config.py
          echo "========================================="
      
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: 🔧 Setup Environment
        run: |
          if [ "${{ inputs.environment }}" == "production" ]; then
            echo "📌 Using production configuration"
            echo "SIGNING_KEY_NAME=OTA_SIGNING_KEY_PROD" >> $GITHUB_ENV
            echo "TB_TENANT=production-tenant" >> $GITHUB_ENV
          else
            echo "📌 Using development configuration"  
            echo "SIGNING_KEY_NAME=OTA_SIGNING_KEY_DEV" >> $GITHUB_ENV
            echo "TB_TENANT=dev-tenant" >> $GITHUB_ENV
          fi
      
      - name: 🔨 Build Service Packages
        run: |
          mkdir -p build/services
          echo "# Service Build Report" > build/build_report.txt
          echo "Environment: ${{ inputs.environment }}" >> build/build_report.txt
          echo "Build Time: $(date -u +%Y-%m-%dT%H:%M:%SZ)" >> build/build_report.txt
          echo "" >> build/build_report.txt
          
